/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ngraph.events/index.js":
/*!*********************************************!*\
  !*** ./node_modules/ngraph.events/index.js ***!
  \*********************************************/
/***/ ((module) => {

module.exports = function eventify(subject) {
  validateSubject(subject);

  var eventsStorage = createEventsStorage(subject);
  subject.on = eventsStorage.on;
  subject.off = eventsStorage.off;
  subject.fire = eventsStorage.fire;
  return subject;
};

function createEventsStorage(subject) {
  // Store all event listeners to this hash. Key is event name, value is array
  // of callback records.
  //
  // A callback record consists of callback function and its optional context:
  // { 'eventName' => [{callback: function, ctx: object}] }
  var registeredEvents = Object.create(null);

  return {
    on: function (eventName, callback, ctx) {
      if (typeof callback !== 'function') {
        throw new Error('callback is expected to be a function');
      }
      var handlers = registeredEvents[eventName];
      if (!handlers) {
        handlers = registeredEvents[eventName] = [];
      }
      handlers.push({callback: callback, ctx: ctx});

      return subject;
    },

    off: function (eventName, callback) {
      var wantToRemoveAll = (typeof eventName === 'undefined');
      if (wantToRemoveAll) {
        // Killing old events storage should be enough in this case:
        registeredEvents = Object.create(null);
        return subject;
      }

      if (registeredEvents[eventName]) {
        var deleteAllCallbacksForEvent = (typeof callback !== 'function');
        if (deleteAllCallbacksForEvent) {
          delete registeredEvents[eventName];
        } else {
          var callbacks = registeredEvents[eventName];
          for (var i = 0; i < callbacks.length; ++i) {
            if (callbacks[i].callback === callback) {
              callbacks.splice(i, 1);
            }
          }
        }
      }

      return subject;
    },

    fire: function (eventName) {
      var callbacks = registeredEvents[eventName];
      if (!callbacks) {
        return subject;
      }

      var fireArguments;
      if (arguments.length > 1) {
        fireArguments = Array.prototype.splice.call(arguments, 1);
      }
      for(var i = 0; i < callbacks.length; ++i) {
        var callbackInfo = callbacks[i];
        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);
      }

      return subject;
    }
  };
}

function validateSubject(subject) {
  if (!subject) {
    throw new Error('Eventify cannot use falsy object as events subject');
  }
  var reservedWords = ['on', 'fire', 'off'];
  for (var i = 0; i < reservedWords.length; ++i) {
    if (subject.hasOwnProperty(reservedWords[i])) {
      throw new Error("Subject cannot be eventified, since it already has property '" + reservedWords[i] + "'");
    }
  }
}


/***/ }),

/***/ "./node_modules/ngraph.graph/index.js":
/*!********************************************!*\
  !*** ./node_modules/ngraph.graph/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * @fileOverview Contains definition of the core graph object.
 */

// TODO: need to change storage layer:
// 1. Be able to get all nodes O(1)
// 2. Be able to get number of links O(1)

/**
 * @example
 *  var graph = require('ngraph.graph')();
 *  graph.addNode(1);     // graph has one node.
 *  graph.addLink(2, 3);  // now graph contains three nodes and one link.
 *
 */
module.exports = createGraph;

var eventify = __webpack_require__(/*! ngraph.events */ "./node_modules/ngraph.events/index.js");

/**
 * Creates a new graph
 */
function createGraph(options) {
  // Graph structure is maintained as dictionary of nodes
  // and array of links. Each node has 'links' property which
  // hold all links related to that node. And general links
  // array is used to speed up all links enumeration. This is inefficient
  // in terms of memory, but simplifies coding.
  options = options || {};
  if ('uniqueLinkId' in options) {
    console.warn(
      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\n' +
      'Use `multigraph` option instead\n',
      '\n',
      'Note: there is also change in default behavior: From now on each graph\n'+
      'is considered to be not a multigraph by default (each edge is unique).'
    );

    options.multigraph = options.uniqueLinkId;
  }

  // Dear reader, the non-multigraphs do not guarantee that there is only
  // one link for a given pair of node. When this option is set to false
  // we can save some memory and CPU (18% faster for non-multigraph);
  if (options.multigraph === undefined) options.multigraph = false;

  if (typeof Map !== 'function') {
    // TODO: Should we polyfill it ourselves? We don't use much operations there..
    throw new Error('ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph');
  } 

  var nodes = new Map(); // nodeId => Node
  var links = new Map(); // linkId => Link
    // Hash of multi-edges. Used to track ids of edges between same nodes
  var multiEdges = {};
  var suspendEvents = 0;

  var createLink = options.multigraph ? createUniqueLink : createSingleLink,

    // Our graph API provides means to listen to graph changes. Users can subscribe
    // to be notified about changes in the graph by using `on` method. However
    // in some cases they don't use it. To avoid unnecessary memory consumption
    // we will not record graph changes until we have at least one subscriber.
    // Code below supports this optimization.
    //
    // Accumulates all changes made during graph updates.
    // Each change element contains:
    //  changeType - one of the strings: 'add', 'remove' or 'update';
    //  node - if change is related to node this property is set to changed graph's node;
    //  link - if change is related to link this property is set to changed graph's link;
    changes = [],
    recordLinkChange = noop,
    recordNodeChange = noop,
    enterModification = noop,
    exitModification = noop;

  // this is our public API:
  var graphPart = {
    /**
     * Sometimes duck typing could be slow. Giving clients a hint about data structure
     * via explicit version number here:
     */
    version: 20.0,

    /**
     * Adds node to the graph. If node with given id already exists in the graph
     * its data is extended with whatever comes in 'data' argument.
     *
     * @param nodeId the node's identifier. A string or number is preferred.
     * @param [data] additional data for the node being added. If node already
     *   exists its data object is augmented with the new one.
     *
     * @return {node} The newly added node or node with given id if it already exists.
     */
    addNode: addNode,

    /**
     * Adds a link to the graph. The function always create a new
     * link between two nodes. If one of the nodes does not exists
     * a new node is created.
     *
     * @param fromId link start node id;
     * @param toId link end node id;
     * @param [data] additional data to be set on the new link;
     *
     * @return {link} The newly created link
     */
    addLink: addLink,

    /**
     * Removes link from the graph. If link does not exist does nothing.
     *
     * @param link - object returned by addLink() or getLinks() methods.
     *
     * @returns true if link was removed; false otherwise.
     */
    removeLink: removeLink,

    /**
     * Removes node with given id from the graph. If node does not exist in the graph
     * does nothing.
     *
     * @param nodeId node's identifier passed to addNode() function.
     *
     * @returns true if node was removed; false otherwise.
     */
    removeNode: removeNode,

    /**
     * Gets node with given identifier. If node does not exist undefined value is returned.
     *
     * @param nodeId requested node identifier;
     *
     * @return {node} in with requested identifier or undefined if no such node exists.
     */
    getNode: getNode,

    /**
     * Gets number of nodes in this graph.
     *
     * @return number of nodes in the graph.
     */
    getNodeCount: getNodeCount,

    /**
     * Gets total number of links in the graph.
     */
    getLinkCount: getLinkCount,

    /**
     * Gets total number of links in the graph.
     */
    getEdgeCount: getLinkCount,

    /**
     * Synonym for `getLinkCount()`
     */
    getLinksCount: getLinkCount,
    
    /**
     * Synonym for `getNodeCount()`
     */
    getNodesCount: getNodeCount,

    /**
     * Gets all links (inbound and outbound) from the node with given id.
     * If node with given id is not found null is returned.
     *
     * @param nodeId requested node identifier.
     *
     * @return Set of links from and to requested node if such node exists;
     *   otherwise null is returned.
     */
    getLinks: getLinks,

    /**
     * Invokes callback on each node of the graph.
     *
     * @param {Function(node)} callback Function to be invoked. The function
     *   is passed one argument: visited node.
     */
    forEachNode: forEachNode,

    /**
     * Invokes callback on every linked (adjacent) node to the given one.
     *
     * @param nodeId Identifier of the requested node.
     * @param {Function(node, link)} callback Function to be called on all linked nodes.
     *   The function is passed two parameters: adjacent node and link object itself.
     * @param oriented if true graph treated as oriented.
     */
    forEachLinkedNode: forEachLinkedNode,

    /**
     * Enumerates all links in the graph
     *
     * @param {Function(link)} callback Function to be called on all links in the graph.
     *   The function is passed one parameter: graph's link object.
     *
     * Link object contains at least the following fields:
     *  fromId - node id where link starts;
     *  toId - node id where link ends,
     *  data - additional data passed to graph.addLink() method.
     */
    forEachLink: forEachLink,

    /**
     * Suspend all notifications about graph changes until
     * endUpdate is called.
     */
    beginUpdate: enterModification,

    /**
     * Resumes all notifications about graph changes and fires
     * graph 'changed' event in case there are any pending changes.
     */
    endUpdate: exitModification,

    /**
     * Removes all nodes and links from the graph.
     */
    clear: clear,

    /**
     * Detects whether there is a link between two nodes.
     * Operation complexity is O(n) where n - number of links of a node.
     * NOTE: this function is synonym for getLink()
     *
     * @returns link if there is one. null otherwise.
     */
    hasLink: getLink,

    /**
     * Detects whether there is a node with given id
     * 
     * Operation complexity is O(1)
     * NOTE: this function is synonym for getNode()
     *
     * @returns node if there is one; Falsy value otherwise.
     */
    hasNode: getNode,

    /**
     * Gets an edge between two nodes.
     * Operation complexity is O(n) where n - number of links of a node.
     *
     * @param {string} fromId link start identifier
     * @param {string} toId link end identifier
     *
     * @returns link if there is one; undefined otherwise.
     */
    getLink: getLink
  };

  // this will add `on()` and `fire()` methods.
  eventify(graphPart);

  monitorSubscribers();

  return graphPart;

  function monitorSubscribers() {
    var realOn = graphPart.on;

    // replace real `on` with our temporary on, which will trigger change
    // modification monitoring:
    graphPart.on = on;

    function on() {
      // now it's time to start tracking stuff:
      graphPart.beginUpdate = enterModification = enterModificationReal;
      graphPart.endUpdate = exitModification = exitModificationReal;
      recordLinkChange = recordLinkChangeReal;
      recordNodeChange = recordNodeChangeReal;

      // this will replace current `on` method with real pub/sub from `eventify`.
      graphPart.on = realOn;
      // delegate to real `on` handler:
      return realOn.apply(graphPart, arguments);
    }
  }

  function recordLinkChangeReal(link, changeType) {
    changes.push({
      link: link,
      changeType: changeType
    });
  }

  function recordNodeChangeReal(node, changeType) {
    changes.push({
      node: node,
      changeType: changeType
    });
  }

  function addNode(nodeId, data) {
    if (nodeId === undefined) {
      throw new Error('Invalid node identifier');
    }

    enterModification();

    var node = getNode(nodeId);
    if (!node) {
      node = new Node(nodeId, data);
      recordNodeChange(node, 'add');
    } else {
      node.data = data;
      recordNodeChange(node, 'update');
    }

    nodes.set(nodeId, node);

    exitModification();
    return node;
  }

  function getNode(nodeId) {
    return nodes.get(nodeId);
  }

  function removeNode(nodeId) {
    var node = getNode(nodeId);
    if (!node) {
      return false;
    }

    enterModification();

    var prevLinks = node.links;
    if (prevLinks) {
      prevLinks.forEach(removeLinkInstance);
      node.links = null;
    }

    nodes.delete(nodeId);

    recordNodeChange(node, 'remove');

    exitModification();

    return true;
  }


  function addLink(fromId, toId, data) {
    enterModification();

    var fromNode = getNode(fromId) || addNode(fromId);
    var toNode = getNode(toId) || addNode(toId);

    var link = createLink(fromId, toId, data);
    var isUpdate = links.has(link.id);

    links.set(link.id, link);

    // TODO: this is not cool. On large graphs potentially would consume more memory.
    addLinkToNode(fromNode, link);
    if (fromId !== toId) {
      // make sure we are not duplicating links for self-loops
      addLinkToNode(toNode, link);
    }

    recordLinkChange(link, isUpdate ? 'update' : 'add');

    exitModification();

    return link;
  }

  function createSingleLink(fromId, toId, data) {
    var linkId = makeLinkId(fromId, toId);
    var prevLink = links.get(linkId);
    if (prevLink) {
      prevLink.data = data;
      return prevLink;
    }

    return new Link(fromId, toId, data, linkId);
  }

  function createUniqueLink(fromId, toId, data) {
    // TODO: Find a better/faster way to store multigraphs
    var linkId = makeLinkId(fromId, toId);
    var isMultiEdge = multiEdges.hasOwnProperty(linkId);
    if (isMultiEdge || getLink(fromId, toId)) {
      if (!isMultiEdge) {
        multiEdges[linkId] = 0;
      }
      var suffix = '@' + (++multiEdges[linkId]);
      linkId = makeLinkId(fromId + suffix, toId + suffix);
    }

    return new Link(fromId, toId, data, linkId);
  }

  function getNodeCount() {
    return nodes.size;
  }

  function getLinkCount() {
    return links.size;
  }

  function getLinks(nodeId) {
    var node = getNode(nodeId);
    return node ? node.links : null;
  }

  function removeLink(link, otherId) {
    if (otherId !== undefined) {
      link = getLink(link, otherId);
    }
    return removeLinkInstance(link);
  }

  function removeLinkInstance(link) {
    if (!link) {
      return false;
    }
    if (!links.get(link.id)) return false;

    enterModification();

    links.delete(link.id);

    var fromNode = getNode(link.fromId);
    var toNode = getNode(link.toId);

    if (fromNode) {
      fromNode.links.delete(link);
    }

    if (toNode) {
      toNode.links.delete(link);
    }

    recordLinkChange(link, 'remove');

    exitModification();

    return true;
  }

  function getLink(fromNodeId, toNodeId) {
    if (fromNodeId === undefined || toNodeId === undefined) return undefined;
    return links.get(makeLinkId(fromNodeId, toNodeId));
  }

  function clear() {
    enterModification();
    forEachNode(function(node) {
      removeNode(node.id);
    });
    exitModification();
  }

  function forEachLink(callback) {
    if (typeof callback === 'function') {
      var valuesIterator = links.values();
      var nextValue = valuesIterator.next();
      while (!nextValue.done) {
        if (callback(nextValue.value)) {
          return true; // client doesn't want to proceed. Return.
        }
        nextValue = valuesIterator.next();
      }
    }
  }

  function forEachLinkedNode(nodeId, callback, oriented) {
    var node = getNode(nodeId);

    if (node && node.links && typeof callback === 'function') {
      if (oriented) {
        return forEachOrientedLink(node.links, nodeId, callback);
      } else {
        return forEachNonOrientedLink(node.links, nodeId, callback);
      }
    }
  }

  // eslint-disable-next-line no-shadow
  function forEachNonOrientedLink(links, nodeId, callback) {
    var quitFast;

    var valuesIterator = links.values();
    var nextValue = valuesIterator.next();
    while (!nextValue.done) {
      var link = nextValue.value;
      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;
      quitFast = callback(nodes.get(linkedNodeId), link);
      if (quitFast) {
        return true; // Client does not need more iterations. Break now.
      }
      nextValue = valuesIterator.next();
    }
  }

  // eslint-disable-next-line no-shadow
  function forEachOrientedLink(links, nodeId, callback) {
    var quitFast;
    var valuesIterator = links.values();
    var nextValue = valuesIterator.next();
    while (!nextValue.done) {
      var link = nextValue.value;
      if (link.fromId === nodeId) {
        quitFast = callback(nodes.get(link.toId), link);
        if (quitFast) {
          return true; // Client does not need more iterations. Break now.
        }
      }
      nextValue = valuesIterator.next();
    }
  }

  // we will not fire anything until users of this library explicitly call `on()`
  // method.
  function noop() {}

  // Enter, Exit modification allows bulk graph updates without firing events.
  function enterModificationReal() {
    suspendEvents += 1;
  }

  function exitModificationReal() {
    suspendEvents -= 1;
    if (suspendEvents === 0 && changes.length > 0) {
      graphPart.fire('changed', changes);
      changes.length = 0;
    }
  }

  function forEachNode(callback) {
    if (typeof callback !== 'function') {
      throw new Error('Function is expected to iterate over graph nodes. You passed ' + callback);
    }

    var valuesIterator = nodes.values();
    var nextValue = valuesIterator.next();
    while (!nextValue.done) {
      if (callback(nextValue.value)) {
        return true; // client doesn't want to proceed. Return.
      }
      nextValue = valuesIterator.next();
    }
  }
}

/**
 * Internal structure to represent node;
 */
function Node(id, data) {
  this.id = id;
  this.links = null;
  this.data = data;
}

function addLinkToNode(node, link) {
  if (node.links) {
    node.links.add(link);
  } else {
    node.links = new Set([link]);
  }
}

/**
 * Internal structure to represent links;
 */
function Link(fromId, toId, data, id) {
  this.fromId = fromId;
  this.toId = toId;
  this.data = data;
  this.id = id;
}

function makeLinkId(fromId, toId) {
  return fromId.toString() + '👉 ' + toId.toString();
}


/***/ }),

/***/ "./node_modules/ngraph.path/a-star/NodeHeap.js":
/*!*****************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/NodeHeap.js ***!
  \*****************************************************/
/***/ ((module) => {

/**
 * Based on https://github.com/mourner/tinyqueue
 * Copyright (c) 2017, Vladimir Agafonkin https://github.com/mourner/tinyqueue/blob/master/LICENSE
 * 
 * Adapted for PathFinding needs by @anvaka
 * Copyright (c) 2017, Andrei Kashcha
 */
module.exports = NodeHeap;

function NodeHeap(data, options) {
  if (!(this instanceof NodeHeap)) return new NodeHeap(data, options);

  if (!Array.isArray(data)) {
    // assume first argument is our config object;
    options = data;
    data = [];
  }

  options = options || {};

  this.data = data || [];
  this.length = this.data.length;
  this.compare = options.compare || defaultCompare;
  this.setNodeId = options.setNodeId || noop;

  if (this.length > 0) {
    for (var i = (this.length >> 1); i >= 0; i--) this._down(i);
  }

  if (options.setNodeId) {
    for (var i = 0; i < this.length; ++i) {
      this.setNodeId(this.data[i], i);
    }
  }
}

function noop() {}

function defaultCompare(a, b) {
  return a - b;
}

NodeHeap.prototype = {

  push: function (item) {
    this.data.push(item);
    this.setNodeId(item, this.length);
    this.length++;
    this._up(this.length - 1);
  },

  pop: function () {
    if (this.length === 0) return undefined;

    var top = this.data[0];
    this.length--;

    if (this.length > 0) {
      this.data[0] = this.data[this.length];
      this.setNodeId(this.data[0], 0);
      this._down(0);
    }
    this.data.pop();

    return top;
  },

  peek: function () {
    return this.data[0];
  },

  updateItem: function (pos) {
    this._down(pos);
    this._up(pos);
  },

  _up: function (pos) {
    var data = this.data;
    var compare = this.compare;
    var setNodeId = this.setNodeId;
    var item = data[pos];

    while (pos > 0) {
      var parent = (pos - 1) >> 1;
      var current = data[parent];
      if (compare(item, current) >= 0) break;
        data[pos] = current;

       setNodeId(current, pos);
       pos = parent;
    }

    data[pos] = item;
    setNodeId(item, pos);
  },

  _down: function (pos) {
    var data = this.data;
    var compare = this.compare;
    var halfLength = this.length >> 1;
    var item = data[pos];
    var setNodeId = this.setNodeId;

    while (pos < halfLength) {
      var left = (pos << 1) + 1;
      var right = left + 1;
      var best = data[left];

      if (right < this.length && compare(data[right], best) < 0) {
        left = right;
        best = data[right];
      }
      if (compare(best, item) >= 0) break;

      data[pos] = best;
      setNodeId(best, pos);
      pos = left;
    }

    data[pos] = item;
    setNodeId(item, pos);
  }
};

/***/ }),

/***/ "./node_modules/ngraph.path/a-star/a-greedy-star.js":
/*!**********************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/a-greedy-star.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Performs suboptimal, greed A Star path finding.
 * This finder does not necessary finds the shortest path. The path
 * that it finds is very close to the shortest one. It is very fast though.
 */
module.exports = aStarBi;

var NodeHeap = __webpack_require__(/*! ./NodeHeap */ "./node_modules/ngraph.path/a-star/NodeHeap.js");
var makeSearchStatePool = __webpack_require__(/*! ./makeSearchStatePool */ "./node_modules/ngraph.path/a-star/makeSearchStatePool.js");
var heuristics = __webpack_require__(/*! ./heuristics */ "./node_modules/ngraph.path/a-star/heuristics.js");
var defaultSettings = __webpack_require__(/*! ./defaultSettings */ "./node_modules/ngraph.path/a-star/defaultSettings.js");

var BY_FROM = 1;
var BY_TO = 2;
var NO_PATH = defaultSettings.NO_PATH;

module.exports.l2 = heuristics.l2;
module.exports.l1 = heuristics.l1;

/**
 * Creates a new instance of pathfinder. A pathfinder has just one method:
 * `find(fromId, toId)`, it may be extended in future.
 * 
 * NOTE: Algorithm implemented in this code DOES NOT find optimal path.
 * Yet the path that it finds is always near optimal, and it finds it very fast.
 * 
 * @param {ngraph.graph} graph instance. See https://github.com/anvaka/ngraph.graph
 * 
 * @param {Object} options that configures search
 * @param {Function(a, b)} options.heuristic - a function that returns estimated distance between
 * nodes `a` and `b`.  Defaults function returns 0, which makes this search equivalent to Dijkstra search.
 * @param {Function(a, b)} options.distance - a function that returns actual distance between two
 * nodes `a` and `b`. By default this is set to return graph-theoretical distance (always 1);
 * @param {Boolean} options.oriented - whether graph should be considered oriented or not.
 * 
 * @returns {Object} A pathfinder with single method `find()`.
 */
function aStarBi(graph, options) {
  options = options || {};
  // whether traversal should be considered over oriented graph.
  var oriented = options.oriented;

  var heuristic = options.heuristic;
  if (!heuristic) heuristic = defaultSettings.heuristic;

  var distance = options.distance;
  if (!distance) distance = defaultSettings.distance;
  var pool = makeSearchStatePool();

  return {
    find: find
  };

  function find(fromId, toId) {
    // Not sure if we should return NO_PATH or throw. Throw seem to be more
    // helpful to debug errors. So, throwing.
    var from = graph.getNode(fromId);
    if (!from) throw new Error('fromId is not defined in this graph: ' + fromId);
    var to = graph.getNode(toId);
    if (!to) throw new Error('toId is not defined in this graph: ' + toId);

    if (from === to) return [from]; // trivial case.

    pool.reset();

    var callVisitor = oriented ? orientedVisitor : nonOrientedVisitor;

    // Maps nodeId to NodeSearchState.
    var nodeState = new Map();

    var openSetFrom = new NodeHeap({
      compare: defaultSettings.compareFScore,
      setNodeId: defaultSettings.setHeapIndex
    });

    var openSetTo = new NodeHeap({
      compare: defaultSettings.compareFScore,
      setNodeId: defaultSettings.setHeapIndex
    });


    var startNode = pool.createNewState(from);
    nodeState.set(fromId, startNode);

    // For the first node, fScore is completely heuristic.
    startNode.fScore = heuristic(from, to);
    // The cost of going from start to start is zero.
    startNode.distanceToSource = 0;
    openSetFrom.push(startNode);
    startNode.open = BY_FROM;

    var endNode = pool.createNewState(to);
    endNode.fScore = heuristic(to, from);
    endNode.distanceToSource = 0;
    openSetTo.push(endNode);
    endNode.open = BY_TO;

    // Cost of the best solution found so far. Used for accurate termination
    var lMin = Number.POSITIVE_INFINITY;
    var minFrom;
    var minTo;

    var currentSet = openSetFrom;
    var currentOpener = BY_FROM;

    while (openSetFrom.length > 0 && openSetTo.length > 0) {
      if (openSetFrom.length < openSetTo.length) {
        // we pick a set with less elements
        currentOpener = BY_FROM;
        currentSet = openSetFrom;
      } else {
        currentOpener = BY_TO;
        currentSet = openSetTo;
      }

      var current = currentSet.pop();

      // no need to visit this node anymore
      current.closed = true;

      if (current.distanceToSource > lMin) continue;

      graph.forEachLinkedNode(current.node.id, callVisitor);

      if (minFrom && minTo) {
        // This is not necessary the best path, but we are so greedy that we
        // can't resist:
        return reconstructBiDirectionalPath(minFrom, minTo);
      }
    }

    return NO_PATH; // No path.

    function nonOrientedVisitor(otherNode, link) {
      return visitNode(otherNode, link, current);
    }

    function orientedVisitor(otherNode, link) {
      // For oritned graphs we need to reverse graph, when traveling
      // backwards. So, we use non-oriented ngraph's traversal, and 
      // filter link orientation here.
      if (currentOpener === BY_FROM) {
        if (link.fromId === current.node.id) return visitNode(otherNode, link, current)
      } else if (currentOpener === BY_TO) {
        if (link.toId === current.node.id) return visitNode(otherNode, link, current);
      }
    }

    function canExit(currentNode) {
      var opener = currentNode.open
      if (opener && opener !== currentOpener) {
        return true;
      }

      return false;
    }

    function reconstructBiDirectionalPath(a, b) {
      var pathOfNodes = [];
      var aParent = a;
      while(aParent) {
        pathOfNodes.push(aParent.node);
        aParent = aParent.parent;
      }
      var bParent = b;
      while (bParent) {
        pathOfNodes.unshift(bParent.node);
        bParent = bParent.parent
      }
      return pathOfNodes;
    }

    function visitNode(otherNode, link, cameFrom) {
      var otherSearchState = nodeState.get(otherNode.id);
      if (!otherSearchState) {
        otherSearchState = pool.createNewState(otherNode);
        nodeState.set(otherNode.id, otherSearchState);
      }

      if (otherSearchState.closed) {
        // Already processed this node.
        return;
      }

      if (canExit(otherSearchState, cameFrom)) {
        // this node was opened by alternative opener. The sets intersect now,
        // we found an optimal path, that goes through *this* node. However, there
        // is no guarantee that this is the global optimal solution path.

        var potentialLMin = otherSearchState.distanceToSource + cameFrom.distanceToSource;
        if (potentialLMin < lMin) {
          minFrom = otherSearchState;
          minTo = cameFrom
          lMin = potentialLMin;
        }
        // we are done with this node.
        return;
      }

      var tentativeDistance = cameFrom.distanceToSource + distance(otherSearchState.node, cameFrom.node, link);

      if (tentativeDistance >= otherSearchState.distanceToSource) {
        // This would only make our path longer. Ignore this route.
        return;
      }

      // Choose target based on current working set:
      var target = (currentOpener === BY_FROM) ? to : from;
      var newFScore = tentativeDistance + heuristic(otherSearchState.node, target);
      if (newFScore >= lMin) {
        // this can't be optimal path, as we have already found a shorter path.
        return;
      }
      otherSearchState.fScore = newFScore;

      if (otherSearchState.open === 0) {
        // Remember this node in the current set
        currentSet.push(otherSearchState);
        currentSet.updateItem(otherSearchState.heapIndex);

        otherSearchState.open = currentOpener;
      }

      // bingo! we found shorter path:
      otherSearchState.parent = cameFrom;
      otherSearchState.distanceToSource = tentativeDistance;
    }
  }
}


/***/ }),

/***/ "./node_modules/ngraph.path/a-star/a-star.js":
/*!***************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/a-star.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Performs a uni-directional A Star search on graph.
 * 
 * We will try to minimize f(n) = g(n) + h(n), where
 * g(n) is actual distance from source node to `n`, and
 * h(n) is heuristic distance from `n` to target node.
 */
module.exports = aStarPathSearch;

var NodeHeap = __webpack_require__(/*! ./NodeHeap */ "./node_modules/ngraph.path/a-star/NodeHeap.js");
var makeSearchStatePool = __webpack_require__(/*! ./makeSearchStatePool */ "./node_modules/ngraph.path/a-star/makeSearchStatePool.js");
var heuristics = __webpack_require__(/*! ./heuristics */ "./node_modules/ngraph.path/a-star/heuristics.js");
var defaultSettings = __webpack_require__(/*! ./defaultSettings.js */ "./node_modules/ngraph.path/a-star/defaultSettings.js");

var NO_PATH = defaultSettings.NO_PATH;

module.exports.l2 = heuristics.l2;
module.exports.l1 = heuristics.l1;

/**
 * Creates a new instance of pathfinder. A pathfinder has just one method:
 * `find(fromId, toId)`, it may be extended in future.
 * 
 * @param {ngraph.graph} graph instance. See https://github.com/anvaka/ngraph.graph
 * @param {Object} options that configures search
 * @param {Function(a, b)} options.heuristic - a function that returns estimated distance between
 * nodes `a` and `b`. This function should never overestimate actual distance between two
 * nodes (otherwise the found path will not be the shortest). Defaults function returns 0,
 * which makes this search equivalent to Dijkstra search.
 * @param {Function(a, b)} options.distance - a function that returns actual distance between two
 * nodes `a` and `b`. By default this is set to return graph-theoretical distance (always 1);
 * @param {Boolean} options.oriented - whether graph should be considered oriented or not.
 * 
 * @returns {Object} A pathfinder with single method `find()`.
 */
function aStarPathSearch(graph, options) {
  options = options || {};
  // whether traversal should be considered over oriented graph.
  var oriented = options.oriented;

  var heuristic = options.heuristic;
  if (!heuristic) heuristic = defaultSettings.heuristic;

  var distance = options.distance;
  if (!distance) distance = defaultSettings.distance;
  var pool = makeSearchStatePool();

  return {
    /**
     * Finds a path between node `fromId` and `toId`.
     * @returns {Array} of nodes between `toId` and `fromId`. Empty array is returned
     * if no path is found.
     */
    find: find
  };

  function find(fromId, toId) {
    var from = graph.getNode(fromId);
    if (!from) throw new Error('fromId is not defined in this graph: ' + fromId);
    var to = graph.getNode(toId);
    if (!to) throw new Error('toId is not defined in this graph: ' + toId);
    pool.reset();

    // Maps nodeId to NodeSearchState.
    var nodeState = new Map();

    // the nodes that we still need to evaluate
    var openSet = new NodeHeap({
      compare: defaultSettings.compareFScore,
      setNodeId: defaultSettings.setHeapIndex
    });

    var startNode = pool.createNewState(from);
    nodeState.set(fromId, startNode);

    // For the first node, fScore is completely heuristic.
    startNode.fScore = heuristic(from, to);

    // The cost of going from start to start is zero.
    startNode.distanceToSource = 0;
    openSet.push(startNode);
    startNode.open = 1;

    var cameFrom;

    while (openSet.length > 0) {
      cameFrom = openSet.pop();
      if (goalReached(cameFrom, to)) return reconstructPath(cameFrom);

      // no need to visit this node anymore
      cameFrom.closed = true;
      graph.forEachLinkedNode(cameFrom.node.id, visitNeighbour, oriented);
    }

    // If we got here, then there is no path.
    return NO_PATH;

    function visitNeighbour(otherNode, link) {
      var otherSearchState = nodeState.get(otherNode.id);
      if (!otherSearchState) {
        otherSearchState = pool.createNewState(otherNode);
        nodeState.set(otherNode.id, otherSearchState);
      }

      if (otherSearchState.closed) {
        // Already processed this node.
        return;
      }
      if (otherSearchState.open === 0) {
        // Remember this node.
        openSet.push(otherSearchState);
        otherSearchState.open = 1;
      }

      var tentativeDistance = cameFrom.distanceToSource + distance(otherNode, cameFrom.node, link);
      if (tentativeDistance >= otherSearchState.distanceToSource) {
        // This would only make our path longer. Ignore this route.
        return;
      }

      // bingo! we found shorter path:
      otherSearchState.parent = cameFrom;
      otherSearchState.distanceToSource = tentativeDistance;
      otherSearchState.fScore = tentativeDistance + heuristic(otherSearchState.node, to);

      openSet.updateItem(otherSearchState.heapIndex);
    }
  }
}

function goalReached(searchState, targetNode) {
  return searchState.node === targetNode;
}

function reconstructPath(searchState) {
  var path = [searchState.node];
  var parent = searchState.parent;

  while (parent) {
    path.push(parent.node);
    parent = parent.parent;
  }

  return path;
}


/***/ }),

/***/ "./node_modules/ngraph.path/a-star/defaultSettings.js":
/*!************************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/defaultSettings.js ***!
  \************************************************************/
/***/ ((module) => {

// We reuse instance of array, but we trie to freeze it as well,
// so that consumers don't modify it. Maybe it's a bad idea.
var NO_PATH = [];
if (typeof Object.freeze === 'function') Object.freeze(NO_PATH);

module.exports = {
  // Path search settings
  heuristic: blindHeuristic,
  distance: constantDistance,
  compareFScore: compareFScore,
  NO_PATH: NO_PATH,

  // heap settings
  setHeapIndex: setHeapIndex,

  // nba:
  setH1: setH1,
  setH2: setH2,
  compareF1Score: compareF1Score,
  compareF2Score: compareF2Score,
}

function blindHeuristic(/* a, b */) {
  // blind heuristic makes this search equal to plain Dijkstra path search.
  return 0;
}

function constantDistance(/* a, b */) {
  return 1;
}

function compareFScore(a, b) {
  var result = a.fScore - b.fScore;
  // TODO: Can I improve speed with smarter ties-breaking?
  // I tried distanceToSource, but it didn't seem to have much effect
  return result;
}

function setHeapIndex(nodeSearchState, heapIndex) {
  nodeSearchState.heapIndex = heapIndex;
}

function compareF1Score(a, b) {
  return a.f1 - b.f1;
}

function compareF2Score(a, b) {
  return a.f2 - b.f2;
}

function setH1(node, heapIndex) {
  node.h1 = heapIndex;
}

function setH2(node, heapIndex) {
  node.h2 = heapIndex;
}

/***/ }),

/***/ "./node_modules/ngraph.path/a-star/heuristics.js":
/*!*******************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/heuristics.js ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = {
  l2: l2,
  l1: l1
};

/**
 * Euclid distance (l2 norm);
 * 
 * @param {*} a 
 * @param {*} b 
 */
function l2(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
}

/**
 * Manhattan distance (l1 norm);
 * @param {*} a 
 * @param {*} b 
 */
function l1(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.abs(dx) + Math.abs(dy);
}


/***/ }),

/***/ "./node_modules/ngraph.path/a-star/makeSearchStatePool.js":
/*!****************************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/makeSearchStatePool.js ***!
  \****************************************************************/
/***/ ((module) => {

/**
 * This class represents a single search node in the exploration tree for
 * A* algorithm.
 * 
 * @param {Object} node  original node in the graph
 */
function NodeSearchState(node) {
  this.node = node;

  // How we came to this node?
  this.parent = null;

  this.closed = false;
  this.open = 0;

  this.distanceToSource = Number.POSITIVE_INFINITY;
  // the f(n) = g(n) + h(n) value
  this.fScore = Number.POSITIVE_INFINITY;

  // used to reconstruct heap when fScore is updated.
  this.heapIndex = -1;
};

function makeSearchStatePool() {
  var currentInCache = 0;
  var nodeCache = [];

  return {
    createNewState: createNewState,
    reset: reset
  };

  function reset() {
    currentInCache = 0;
  }

  function createNewState(node) {
    var cached = nodeCache[currentInCache];
    if (cached) {
      // TODO: This almost duplicates constructor code. Not sure if
      // it would impact performance if I move this code into a function
      cached.node = node;
      // How we came to this node?
      cached.parent = null;

      cached.closed = false;
      cached.open = 0;

      cached.distanceToSource = Number.POSITIVE_INFINITY;
      // the f(n) = g(n) + h(n) value
      cached.fScore = Number.POSITIVE_INFINITY;

      // used to reconstruct heap when fScore is updated.
      cached.heapIndex = -1;

    } else {
      cached = new NodeSearchState(node);
      nodeCache[currentInCache] = cached;
    }
    currentInCache++;
    return cached;
  }
}
module.exports = makeSearchStatePool;

/***/ }),

/***/ "./node_modules/ngraph.path/a-star/nba/index.js":
/*!******************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/nba/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = nba;

var NodeHeap = __webpack_require__(/*! ../NodeHeap */ "./node_modules/ngraph.path/a-star/NodeHeap.js");
var heuristics = __webpack_require__(/*! ../heuristics */ "./node_modules/ngraph.path/a-star/heuristics.js");
var defaultSettings = __webpack_require__(/*! ../defaultSettings.js */ "./node_modules/ngraph.path/a-star/defaultSettings.js");
var makeNBASearchStatePool = __webpack_require__(/*! ./makeNBASearchStatePool.js */ "./node_modules/ngraph.path/a-star/nba/makeNBASearchStatePool.js");

var NO_PATH = defaultSettings.NO_PATH;

module.exports.l2 = heuristics.l2;
module.exports.l1 = heuristics.l1;

/**
 * Creates a new instance of pathfinder. A pathfinder has just one method:
 * `find(fromId, toId)`.
 * 
 * This is implementation of the NBA* algorithm described in 
 * 
 *  "Yet another bidirectional algorithm for shortest paths" paper by Wim Pijls and Henk Post
 * 
 * The paper is available here: https://repub.eur.nl/pub/16100/ei2009-10.pdf
 * 
 * @param {ngraph.graph} graph instance. See https://github.com/anvaka/ngraph.graph
 * @param {Object} options that configures search
 * @param {Function(a, b)} options.heuristic - a function that returns estimated distance between
 * nodes `a` and `b`. This function should never overestimate actual distance between two
 * nodes (otherwise the found path will not be the shortest). Defaults function returns 0,
 * which makes this search equivalent to Dijkstra search.
 * @param {Function(a, b)} options.distance - a function that returns actual distance between two
 * nodes `a` and `b`. By default this is set to return graph-theoretical distance (always 1);
 * 
 * @returns {Object} A pathfinder with single method `find()`.
 */
function nba(graph, options) {
  options = options || {};
  // whether traversal should be considered over oriented graph.
  var oriented = options.oriented;
  var quitFast = options.quitFast;

  var heuristic = options.heuristic;
  if (!heuristic) heuristic = defaultSettings.heuristic;

  var distance = options.distance;
  if (!distance) distance = defaultSettings.distance;

  // During stress tests I noticed that garbage collection was one of the heaviest
  // contributors to the algorithm's speed. So I'm using an object pool to recycle nodes.
  var pool = makeNBASearchStatePool();

  return {
    /**
     * Finds a path between node `fromId` and `toId`.
     * @returns {Array} of nodes between `toId` and `fromId`. Empty array is returned
     * if no path is found.
     */
    find: find
  };

  function find(fromId, toId) {
    // I must apologize for the code duplication. This was the easiest way for me to
    // implement the algorithm fast.
    var from = graph.getNode(fromId);
    if (!from) throw new Error('fromId is not defined in this graph: ' + fromId);
    var to = graph.getNode(toId);
    if (!to) throw new Error('toId is not defined in this graph: ' + toId);

    pool.reset();

    // I must also apologize for somewhat cryptic names. The NBA* is bi-directional
    // search algorithm, which means it runs two searches in parallel. One is called
    // forward search and it runs from source node to target, while the other one
    // (backward search) runs from target to source.

    // Everywhere where you see `1` it means it's for the forward search. `2` is for 
    // backward search.

    // For oriented graph path finding, we need to reverse the graph, so that
    // backward search visits correct link. Obviously we don't want to duplicate
    // the graph, instead we always traverse the graph as non-oriented, and filter
    // edges in `visitN1Oriented/visitN2Oritented`
    var forwardVisitor = oriented ? visitN1Oriented : visitN1;
    var reverseVisitor = oriented ? visitN2Oriented : visitN2;

    // Maps nodeId to NBASearchState.
    var nodeState = new Map();

    // These two heaps store nodes by their underestimated values.
    var open1Set = new NodeHeap({
      compare: defaultSettings.compareF1Score,
      setNodeId: defaultSettings.setH1
    });
    var open2Set = new NodeHeap({
      compare: defaultSettings.compareF2Score,
      setNodeId: defaultSettings.setH2
    });

    // This is where both searches will meet.
    var minNode;

    // The smallest path length seen so far is stored here:
    var lMin = Number.POSITIVE_INFINITY;

    // We start by putting start/end nodes to the corresponding heaps
    // If variable names like `f1`, `g1` are too confusing, please refer
    // to makeNBASearchStatePool.js file, which has detailed description.
    var startNode = pool.createNewState(from);
    nodeState.set(fromId, startNode); 
    startNode.g1 = 0;
    var f1 = heuristic(from, to);
    startNode.f1 = f1;
    open1Set.push(startNode);

    var endNode = pool.createNewState(to);
    nodeState.set(toId, endNode);
    endNode.g2 = 0;
    var f2 = f1; // they should agree originally
    endNode.f2 = f2;
    open2Set.push(endNode)

    // the `cameFrom` variable is accessed by both searches, so that we can store parents.
    var cameFrom;

    // this is the main algorithm loop:
    while (open2Set.length && open1Set.length) {
      if (open1Set.length < open2Set.length) {
        forwardSearch();
      } else {
        reverseSearch();
      }

      if (quitFast && minNode) break;
    }

    var path = reconstructPath(minNode);
    return path; // the public API is over

    function forwardSearch() {
      cameFrom = open1Set.pop();
      if (cameFrom.closed) {
        return;
      }

      cameFrom.closed = true;

      if (cameFrom.f1 < lMin && (cameFrom.g1 + f2 - heuristic(from, cameFrom.node)) < lMin) {
        graph.forEachLinkedNode(cameFrom.node.id, forwardVisitor);
      }

      if (open1Set.length > 0) {
        // this will be used in reverse search
        f1 = open1Set.peek().f1;
      } 
    }

    function reverseSearch() {
      cameFrom = open2Set.pop();
      if (cameFrom.closed) {
        return;
      }
      cameFrom.closed = true;

      if (cameFrom.f2 < lMin && (cameFrom.g2 + f1 - heuristic(cameFrom.node, to)) < lMin) {
        graph.forEachLinkedNode(cameFrom.node.id, reverseVisitor);
      }

      if (open2Set.length > 0) {
        // this will be used in forward search
        f2 = open2Set.peek().f2;
      }
    }

    function visitN1(otherNode, link) {
      var otherSearchState = nodeState.get(otherNode.id);
      if (!otherSearchState) {
        otherSearchState = pool.createNewState(otherNode);
        nodeState.set(otherNode.id, otherSearchState);
      }

      if (otherSearchState.closed) return;

      var tentativeDistance = cameFrom.g1 + distance(cameFrom.node, otherNode, link);

      if (tentativeDistance < otherSearchState.g1) {
        otherSearchState.g1 = tentativeDistance;
        otherSearchState.f1 = tentativeDistance + heuristic(otherSearchState.node, to);
        otherSearchState.p1 = cameFrom;
        if (otherSearchState.h1 < 0) {
          open1Set.push(otherSearchState);
        } else {
          open1Set.updateItem(otherSearchState.h1);
        }
      }
      var potentialMin = otherSearchState.g1 + otherSearchState.g2;
      if (potentialMin < lMin) { 
        lMin = potentialMin;
        minNode = otherSearchState;
      }
    }

    function visitN2(otherNode, link) {
      var otherSearchState = nodeState.get(otherNode.id);
      if (!otherSearchState) {
        otherSearchState = pool.createNewState(otherNode);
        nodeState.set(otherNode.id, otherSearchState);
      }

      if (otherSearchState.closed) return;

      var tentativeDistance = cameFrom.g2 + distance(cameFrom.node, otherNode, link);

      if (tentativeDistance < otherSearchState.g2) {
        otherSearchState.g2 = tentativeDistance;
        otherSearchState.f2 = tentativeDistance + heuristic(from, otherSearchState.node);
        otherSearchState.p2 = cameFrom;
        if (otherSearchState.h2 < 0) {
          open2Set.push(otherSearchState);
        } else {
          open2Set.updateItem(otherSearchState.h2);
        }
      }
      var potentialMin = otherSearchState.g1 + otherSearchState.g2;
      if (potentialMin < lMin) {
        lMin = potentialMin;
        minNode = otherSearchState;
      }
    }

    function visitN2Oriented(otherNode, link) {
      // we are going backwards, graph needs to be reversed. 
      if (link.toId === cameFrom.node.id) return visitN2(otherNode, link);
    }
    function visitN1Oriented(otherNode, link) {
      // this is forward direction, so we should be coming FROM:
      if (link.fromId === cameFrom.node.id) return visitN1(otherNode, link);
    }
  }
}

function reconstructPath(searchState) {
  if (!searchState) return NO_PATH;

  var path = [searchState.node];
  var parent = searchState.p1;

  while (parent) {
    path.push(parent.node);
    parent = parent.p1;
  }

  var child = searchState.p2;

  while (child) {
    path.unshift(child.node);
    child = child.p2;
  }
  return path;
}


/***/ }),

/***/ "./node_modules/ngraph.path/a-star/nba/makeNBASearchStatePool.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ngraph.path/a-star/nba/makeNBASearchStatePool.js ***!
  \***********************************************************************/
/***/ ((module) => {

module.exports = makeNBASearchStatePool;

/**
 * Creates new instance of NBASearchState. The instance stores information
 * about search state, and is used by NBA* algorithm.
 *
 * @param {Object} node - original graph node
 */
function NBASearchState(node) {
  /**
   * Original graph node.
   */
  this.node = node;

  /**
   * Parent of this node in forward search
   */
  this.p1 = null;

  /**
   * Parent of this node in reverse search
   */
  this.p2 = null;

  /**
   * If this is set to true, then the node was already processed
   * and we should not touch it anymore.
   */
  this.closed = false;

  /**
   * Actual distance from this node to its parent in forward search
   */
  this.g1 = Number.POSITIVE_INFINITY;

  /**
   * Actual distance from this node to its parent in reverse search
   */
  this.g2 = Number.POSITIVE_INFINITY;


  /**
   * Underestimated distance from this node to the path-finding source.
   */
  this.f1 = Number.POSITIVE_INFINITY;

  /**
   * Underestimated distance from this node to the path-finding target.
   */
  this.f2 = Number.POSITIVE_INFINITY;

  // used to reconstruct heap when fScore is updated. TODO: do I need them both?

  /**
   * Index of this node in the forward heap.
   */
  this.h1 = -1;

  /**
   * Index of this node in the reverse heap.
   */
  this.h2 = -1;
}

/**
 * As path-finding is memory-intensive process, we want to reduce pressure on
 * garbage collector. This class helps us to recycle path-finding nodes and significantly
 * reduces the search time (~20% faster than without it).
 */
function makeNBASearchStatePool() {
  var currentInCache = 0;
  var nodeCache = [];

  return {
    /**
     * Creates a new NBASearchState instance
     */
    createNewState: createNewState,

    /**
     * Marks all created instances available for recycling.
     */
    reset: reset
  };

  function reset() {
    currentInCache = 0;
  }

  function createNewState(node) {
    var cached = nodeCache[currentInCache];
    if (cached) {
      // TODO: This almost duplicates constructor code. Not sure if
      // it would impact performance if I move this code into a function
      cached.node = node;

      // How we came to this node?
      cached.p1 = null;
      cached.p2 = null;

      cached.closed = false;

      cached.g1 = Number.POSITIVE_INFINITY;
      cached.g2 = Number.POSITIVE_INFINITY;
      cached.f1 = Number.POSITIVE_INFINITY;
      cached.f2 = Number.POSITIVE_INFINITY;

      // used to reconstruct heap when fScore is updated.
      cached.h1 = -1;
      cached.h2 = -1;
    } else {
      cached = new NBASearchState(node);
      nodeCache[currentInCache] = cached;
    }
    currentInCache++;
    return cached;
  }
}


/***/ }),

/***/ "./node_modules/ngraph.path/index.js":
/*!*******************************************!*\
  !*** ./node_modules/ngraph.path/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  aStar: __webpack_require__(/*! ./a-star/a-star.js */ "./node_modules/ngraph.path/a-star/a-star.js"),
  aGreedy: __webpack_require__(/*! ./a-star/a-greedy-star */ "./node_modules/ngraph.path/a-star/a-greedy-star.js"),
  nba: __webpack_require__(/*! ./a-star/nba/index.js */ "./node_modules/ngraph.path/a-star/nba/index.js"),
}


/***/ }),

/***/ "./src/LoadExpressionTestPage.ts":
/*!***************************************!*\
  !*** ./src/LoadExpressionTestPage.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadExpressionsTestPage = void 0;
const ConvenientExpressions_1 = __webpack_require__(/*! ./mathlib/ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Derivative_1 = __webpack_require__(/*! ./mathlib/expressions/Derivative */ "./src/mathlib/expressions/Derivative.ts");
const Exponent_1 = __webpack_require__(/*! ./mathlib/expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Fraction_1 = __webpack_require__(/*! ./mathlib/expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Integral_1 = __webpack_require__(/*! ./mathlib/expressions/Integral */ "./src/mathlib/expressions/Integral.ts");
const EditableMathView_1 = __webpack_require__(/*! ./mathlib/uielements/EditableMathView */ "./src/mathlib/uielements/EditableMathView.ts");
/**
 * Called after the dom is loaded.
 * Populates the body element of the document
 * with the test expressions page
 */
function loadExpressionsTestPage() {
    const page = document.getElementsByTagName('body')[0];
    function p(content) {
        const e = document.createElement('p');
        e.innerText = content;
        page.append(e);
    }
    function view(exp) {
        const e = new EditableMathView_1.EditableMathView();
        e.value = exp;
        page.append(e);
    }
    p("The sum of a, a, and a");
    view((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.a, ConvenientExpressions_1.a));
    p("Integral of a over b with respect to c");
    view(Integral_1.Integral.of(Fraction_1.Fraction.of(ConvenientExpressions_1.a, ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    p("Integral of (a over a) over b with respect to c");
    view(Integral_1.Integral.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(ConvenientExpressions_1.a, ConvenientExpressions_1.a), ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    p("Integral of ((a over a) over a) over b with respect to c");
    view(Integral_1.Integral.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(ConvenientExpressions_1.a, ConvenientExpressions_1.a), ConvenientExpressions_1.a), ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    p("Integral of (((a over a) over a) over a) over b with respect to c");
    view(Integral_1.Integral.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(ConvenientExpressions_1.a, ConvenientExpressions_1.a), ConvenientExpressions_1.a), ConvenientExpressions_1.a), ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    p("Integral of ((((a over a) over a) over a) over a) over b with respect to c");
    view(Integral_1.Integral.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(Fraction_1.Fraction.of(ConvenientExpressions_1.a, ConvenientExpressions_1.a), ConvenientExpressions_1.a), ConvenientExpressions_1.a), ConvenientExpressions_1.a), ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    p("");
    view((0, ConvenientExpressions_1.int)(Fraction_1.Fraction.of((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.b), Exponent_1.Exponent.of((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, ConvenientExpressions_1.a), Fraction_1.Fraction.of((0, ConvenientExpressions_1.num)(1), (0, ConvenientExpressions_1.num)(2)))), (0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.num)(2), ConvenientExpressions_1.a)), ConvenientExpressions_1.x));
    p("Product of x and y");
    view((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.x, ConvenientExpressions_1.y));
    p("Product of (x-1), -1 and y");
    view((0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, (0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.num)(1))), (0, ConvenientExpressions_1.num)(-1), ConvenientExpressions_1.y));
    p("Negation of x (Reped as the propduct of -1 and x)");
    view((0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.x));
    p("Sum of x and -x");
    view((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.x)));
    p("Sum of -x and x");
    view((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.x), ConvenientExpressions_1.x));
    p("Derivative of the square of x with respect to x");
    view(Derivative_1.Derivative.of(Exponent_1.Exponent.of(ConvenientExpressions_1.x, (0, ConvenientExpressions_1.num)(2)), ConvenientExpressions_1.x));
    p("Derivative ((x^2) - 2) with respect to x");
    view(Derivative_1.Derivative.of(Exponent_1.Exponent.of((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, (0, ConvenientExpressions_1.num)(-2)), (0, ConvenientExpressions_1.num)(2)), ConvenientExpressions_1.x));
    p("");
    view((0, ConvenientExpressions_1.num)(1));
    p("");
    view((0, ConvenientExpressions_1.num)(1));
    p("");
    view((0, ConvenientExpressions_1.num)(1));
    p("");
    view((0, ConvenientExpressions_1.num)(1));
}
exports.loadExpressionsTestPage = loadExpressionsTestPage;


/***/ }),

/***/ "./src/LoadInputParseTestPage.ts":
/*!***************************************!*\
  !*** ./src/LoadInputParseTestPage.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadInputParseTestPage = void 0;
const ConvenientExpressions_1 = __webpack_require__(/*! ./mathlib/ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Exponent_1 = __webpack_require__(/*! ./mathlib/expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Logarithm_1 = __webpack_require__(/*! ./mathlib/expressions/Logarithm */ "./src/mathlib/expressions/Logarithm.ts");
const EditableMathView_1 = __webpack_require__(/*! ./mathlib/uielements/EditableMathView */ "./src/mathlib/uielements/EditableMathView.ts");
const AntlrMathParser_1 = __webpack_require__(/*! ./mathlib/userinput/AntlrMathParser */ "./src/mathlib/userinput/AntlrMathParser.ts");
/**
 * Called after DOM is loaded.
 * Substitutes the body element in the document
 * with the primary integrator view.
 */
function loadInputParseTestPage() {
    const page = document.getElementsByTagName('body')[0];
    page.style.padding = "8ch";
    function p(content) {
        const e = document.createElement('p');
        e.innerText = content;
        return e;
    }
    function view(exp) {
        const e = new EditableMathView_1.EditableMathView();
        e.value = exp;
        return e;
    }
    /**
     * Print the parsed expression to the page.
     * @param input User input string to parse.
     * @param explanation
     */
    function expression(input, explanation = null) {
        page.append(p("Input:       " + input));
        if (explanation != null)
            page.append(p(explanation));
        page.append(view((0, AntlrMathParser_1.parseExpression)(input)));
    }
    /**
     * Takes an internal expression, converts it
     * to a string, then parses that string into
     * an expression.
     * @param input
     */
    function twoWay(input) {
        const table = document.createElement('table');
        table.style.border = "1px solid black";
        table.style.width = '70%';
        const row = document.createElement('tr');
        table.appendChild(row);
        const data1 = document.createElement('td');
        const data2 = document.createElement('td');
        const data3 = document.createElement('td');
        row.appendChild(data1);
        row.appendChild(data2);
        row.appendChild(data3);
        data1.style.border = "1px solid black";
        data2.style.border = "1px solid black";
        data3.style.border = "1px solid black";
        data1.appendChild(view(input));
        const text = p(input.toUnambigiousString());
        text.style.display = "block";
        text.style.textAlign = "center";
        data2.appendChild(text);
        const parseResult = (0, AntlrMathParser_1.parseExpression)(input.toUnambigiousString());
        data3.appendChild(view(parseResult));
        page.append(table);
        // Conditional formatting
        if (input === parseResult) {
            data3.style.backgroundColor = "lightgreen";
        }
        else {
            data3.style.backgroundColor = "red";
        }
    }
    // Expression strings to test
    expression("int(x)dx+c");
    expression("a/bintx");
    expression("a^b+c", "The +c shouldn't be in the exponent");
    expression("a+b^c");
    expression("(a+b)^c");
    expression("-a-b+c");
    expression("-a+-b+c");
    expression("a+b+c");
    expression("-(a+b)");
    expression("-a(a+b)");
    expression("a+(b+c)");
    expression("a-b-c");
    expression("a*b+c");
    expression("a/b+c");
    expression("a/b/c");
    expression("abx-d");
    expression("-abx-d");
    expression("-a-bx-d");
    expression("abcd");
    expression("a*b*c*d");
    expression("ab*cd");
    expression("int4x+2");
    expression("int(4x+2)");
    expression("logx");
    expression("log(x)");
    expression("(5/(2x-3)-(3/((2x-3)^2))");
    expression("(5/(2x-3)-(3/(2x-3)^2)");
    page.append(p("In these tests, an unambigious expression is written in the " +
        " source code. It is then converted to an unambigious string " +
        "representation, and then parsed back into an expression. " +
        "The goal is that this process preserves the expression. This " +
        "requires 1) expression -> string is unambigious and accurate and 2) " +
        "the parser is working correctly."));
    page.append(p("The first column is assumed to be correct, the middle collumn has " +
        "the automatically generated string version of the first column, " +
        "and the last column contains the expression parsed from the second column."));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, ConvenientExpressions_1.y, ConvenientExpressions_1.a, ConvenientExpressions_1.b, ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, ConvenientExpressions_1.y, (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.a), ConvenientExpressions_1.b, ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, ConvenientExpressions_1.y, (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.a), (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, ConvenientExpressions_1.y, (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.a), ConvenientExpressions_1.b, (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.c)));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, Exponent_1.Exponent.of(ConvenientExpressions_1.b, ConvenientExpressions_1.c)));
    twoWay(Exponent_1.Exponent.of((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.a), (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.b, ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.b)));
    twoWay((0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.a), (0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.b)));
    twoWay((0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.a, (0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.b))));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, (0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.b, ConvenientExpressions_1.c)));
    twoWay((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.b), (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.c)));
    twoWay((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.fraction)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.fraction)((0, ConvenientExpressions_1.fraction)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), ConvenientExpressions_1.c));
    twoWay((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.a, ConvenientExpressions_1.b, ConvenientExpressions_1.x), ConvenientExpressions_1.d));
    twoWay((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.a, ConvenientExpressions_1.b, ConvenientExpressions_1.x)), (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.d)));
    twoWay((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.a), (0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.b, ConvenientExpressions_1.x)), (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.d)));
    twoWay((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.a, ConvenientExpressions_1.b, ConvenientExpressions_1.c, ConvenientExpressions_1.d));
    // twoWay("ab*cd")
    // twoWay("int4x+2")
    // twoWay("int(4x+2)")
    twoWay(Logarithm_1.Logarithm.of(ConvenientExpressions_1.x, (0, ConvenientExpressions_1.num)(10)));
}
exports.loadInputParseTestPage = loadInputParseTestPage;


/***/ }),

/***/ "./src/LoadPrimaryPage.ts":
/*!********************************!*\
  !*** ./src/LoadPrimaryPage.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadPrimaryPage = void 0;
const ConvenientExpressions_1 = __webpack_require__(/*! ./mathlib/ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const WebGraphView_1 = __webpack_require__(/*! ./mathlib/uielements/WebGraphView */ "./src/mathlib/uielements/WebGraphView.ts");
const Graph_1 = __webpack_require__(/*! ./mathlib/Graph */ "./src/mathlib/Graph.ts");
const Deriver_1 = __webpack_require__(/*! ./mathlib/derivations/Deriver */ "./src/mathlib/derivations/Deriver.ts");
const Expression_1 = __webpack_require__(/*! ./mathlib/expressions/Expression */ "./src/mathlib/expressions/Expression.ts");
const RelationalDerivationRule_1 = __webpack_require__(/*! ./mathlib/derivations/RelationalDerivationRule */ "./src/mathlib/derivations/RelationalDerivationRule.ts");
const SubtractFromBothSides_1 = __webpack_require__(/*! ./mathlib/derivations/algebra/SubtractFromBothSides */ "./src/mathlib/derivations/algebra/SubtractFromBothSides.ts");
const DivideOnBothSides_1 = __webpack_require__(/*! ./mathlib/derivations/algebra/DivideOnBothSides */ "./src/mathlib/derivations/algebra/DivideOnBothSides.ts");
const Variable_1 = __webpack_require__(/*! ./mathlib/expressions/Variable */ "./src/mathlib/expressions/Variable.ts");
const Product_1 = __webpack_require__(/*! ./mathlib/expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ./mathlib/expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
RelationalDerivationRule_1.RelationalDerivationRule.rules.add(new SubtractFromBothSides_1.SubtractFromBothSides());
RelationalDerivationRule_1.RelationalDerivationRule.rules.add(new DivideOnBothSides_1.DivideOnBothSides());
/**
 * Called after DOM is loaded.
 * Substitutes the body element in the document
 * with the primary integrator view.
 */
function loadPrimaryPage() {
    //const root = Derivative.of(sum(a, a, product(num(2), b)), a)
    //const root = Derivative.of(product(num(3), Exponent.of(x, num(2)), Exponent.of(x, num(3))), x)
    //const root = product(Exponent.of(x, num(3)), Exponent.of(x, num(4)), x, x)
    //const root = Derivative.of(Fraction.of(Exponent.of(x, num(2)), x), x)
    //const root = Fraction.of(product(num(2), x, Exponent.of(x, a), a), product(num(2), a, a, x))
    const root = (0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), (0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, (0, ConvenientExpressions_1.negative)(ConvenientExpressions_1.b)), ConvenientExpressions_1.a, ConvenientExpressions_1.a);
    const graph = new Graph_1.Graph().addNode(root);
    const deriver = new Deriver_1.Deriver(graph);
    deriver.expand(30, false);
    //console.log("Result: " + graph)
    const input = document.getElementById("input");
    input.addEventListener("keyup", () => {
        //parse((input! as HTMLTextAreaElement).value)
    });
    const out = document.getElementById("outputbox");
    const config = {
        showArguments: false,
        drawEdgeLines: true,
        debugCornerEnabled: true,
    };
    const graphView = new WebGraphView_1.WebGraphView(graph, new Set([root]), config);
    graphView.setNodeColoringScheme(n => {
        if (n instanceof Expression_1.Expression) {
            if (!deriver.isSimplified(n))
                return "lightgray";
            if (n instanceof Product_1.Product)
                if (deriver.passedFactoringSimplification.has(n))
                    return "coral";
            if (n instanceof Sum_1.Sum)
                if (deriver.passedPolynomialSimplification.has(n))
                    return "yellow";
            if (deriver.passedConvergentSimplification.has(n))
                return "lightgreen";
            if (n instanceof Variable_1.Variable)
                return "orange";
            return "lightblue";
        }
        return "black";
    });
    graphView.setAttribute("id", "web-graphview");
    out.appendChild(graphView);
}
exports.loadPrimaryPage = loadPrimaryPage;


/***/ }),

/***/ "./src/LoadSimplificationTestPage.ts":
/*!*******************************************!*\
  !*** ./src/LoadSimplificationTestPage.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadSimplificationTestPage = void 0;
const ConvenientExpressions_1 = __webpack_require__(/*! ./mathlib/ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Deriver_1 = __webpack_require__(/*! ./mathlib/derivations/Deriver */ "./src/mathlib/derivations/Deriver.ts");
const Graph_1 = __webpack_require__(/*! ./mathlib/Graph */ "./src/mathlib/Graph.ts");
const EditableMathView_1 = __webpack_require__(/*! ./mathlib/uielements/EditableMathView */ "./src/mathlib/uielements/EditableMathView.ts");
const AntlrMathParser_1 = __webpack_require__(/*! ./mathlib/userinput/AntlrMathParser */ "./src/mathlib/userinput/AntlrMathParser.ts");
/**
 * Called after DOM is loaded.
 * Substitutes the body element in the document
 * with the primary integrator view.
 */
function loadSimplificationTestPage() {
    const page = document.getElementsByTagName('body')[0];
    page.style.padding = "8ch";
    function p(content) {
        const e = document.createElement('p');
        e.innerText = content;
        return e;
    }
    function view(exp) {
        const e = new EditableMathView_1.EditableMathView();
        e.value = exp;
        return e;
    }
    /**
     * Adds a test column to the page.
     * @param start
     * @param answ The correct simplification of the expression.
     */
    function simplify(start, answ) {
        const table = document.createElement('table');
        table.style.border = "1px solid black";
        table.style.width = '80%';
        const row = document.createElement('tr');
        table.appendChild(row);
        function append(cell) {
            cell.style.border = "1px solid black";
            row.appendChild(cell);
        }
        const data1 = document.createElement('td');
        const data2 = document.createElement('td');
        const data3 = document.createElement('td');
        append(data1);
        append(data2);
        append(data3);
        data1.appendChild(view(start));
        const graph = new Graph_1.Graph();
        graph.addNode(start);
        const deriver = new Deriver_1.Deriver(graph);
        deriver.expand(40);
        const results = deriver.simplifiedExpressions;
        console.log(results.length);
        data2.appendChild(view(results[0]));
        data3.appendChild(view(answ));
        page.append(table);
        // Conditional formatting
        if (results[0] === answ) {
            data2.style.backgroundColor = "lightgreen";
        }
        else {
            data2.style.backgroundColor = "red";
            const data4 = document.createElement('td');
            const data5 = document.createElement('td');
            const data6 = document.createElement('td');
            append(data4);
            append(data5);
            append(data6);
            data4.innerHTML = results[0].toUnambigiousString() + "<br>" + answ.toUnambigiousString();
            data5.innerHTML = "Hashes: <br>" + results[0].hash + "<br>" + answ.hash;
            data6.innerHTML = "IDs: " + results[0].id + "<br>" + answ.id;
        }
    }
    /**
     * Wrapper for simplify that parses strings
     * @param input
     * @param answ
     */
    function pSimp(input, answ) {
        const inputExp = (0, AntlrMathParser_1.parseExpression)(input);
        const answExp = (0, AntlrMathParser_1.parseExpression)(answ);
        simplify(inputExp, answExp);
    }
    // Expressions and their correct simplifications
    simplify((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.x, ConvenientExpressions_1.x), (0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.num)(2), ConvenientExpressions_1.x));
    simplify((0, ConvenientExpressions_1.product)(ConvenientExpressions_1.x, ConvenientExpressions_1.x), (0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.x, (0, ConvenientExpressions_1.num)(2)));
    simplify((0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.a, ConvenientExpressions_1.a, ConvenientExpressions_1.b), (0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.num)(2), ConvenientExpressions_1.a), ConvenientExpressions_1.b));
    simplify((0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), (0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.c, ConvenientExpressions_1.b)), (0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), (0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.c, ConvenientExpressions_1.b)));
    simplify((0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), (0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, ConvenientExpressions_1.c)), (0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, (0, ConvenientExpressions_1.sum)(ConvenientExpressions_1.b, ConvenientExpressions_1.c)));
    simplify((0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, ConvenientExpressions_1.b), (0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, ConvenientExpressions_1.b)), (0, ConvenientExpressions_1.pow)(ConvenientExpressions_1.a, (0, ConvenientExpressions_1.product)((0, ConvenientExpressions_1.num)(2), ConvenientExpressions_1.b)));
    pSimp("(a+b)(a+b)", "(a+b)^2");
    pSimp("(a+b)(a-b)", "a^2-b^2");
    pSimp("b^2*b", "b^3");
    // Random online problems
    pSimp("(-(1/x)+1)((x^2)/(x-1))", "x");
    pSimp("(3x+27y+15z)/(x+9y+5z)", "3");
    pSimp("(x^2-9)/(x+3)", "(x-3)");
    pSimp("x+3*(10+y)-7x-y", "-6x+2y+30");
    pSimp("(5/(2x-3)-(3/((2x-3)^2))", "(2(5x-9))/((2x-3)^2)");
}
exports.loadSimplificationTestPage = loadSimplificationTestPage;


/***/ }),

/***/ "./src/LoadSolverPage.ts":
/*!*******************************!*\
  !*** ./src/LoadSolverPage.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadSolverPage = void 0;
const Deriver_1 = __webpack_require__(/*! ./mathlib/derivations/Deriver */ "./src/mathlib/derivations/Deriver.ts");
const Graph_1 = __webpack_require__(/*! ./mathlib/Graph */ "./src/mathlib/Graph.ts");
const EditableMathView_1 = __webpack_require__(/*! ./mathlib/uielements/EditableMathView */ "./src/mathlib/uielements/EditableMathView.ts");
const ngraph_path_1 = __importDefault(__webpack_require__(/*! ngraph.path */ "./node_modules/ngraph.path/index.js"));
const ngraph_graph_1 = __importDefault(__webpack_require__(/*! ngraph.graph */ "./node_modules/ngraph.graph/index.js"));
const Expression_1 = __webpack_require__(/*! ./mathlib/expressions/Expression */ "./src/mathlib/expressions/Expression.ts");
const Argument_1 = __webpack_require__(/*! ./mathlib/Argument */ "./src/mathlib/Argument.ts");
const ArgumentNodeView_1 = __webpack_require__(/*! ./mathlib/uielements/ArgumentNodeView */ "./src/mathlib/uielements/ArgumentNodeView.ts");
const ExpressionNodeView_1 = __webpack_require__(/*! ./mathlib/uielements/ExpressionNodeView */ "./src/mathlib/uielements/ExpressionNodeView.ts");
const GraphMinipulator_1 = __webpack_require__(/*! ./mathlib/GraphMinipulator */ "./src/mathlib/GraphMinipulator.ts");
const AntlrMathParser_1 = __webpack_require__(/*! ./mathlib/userinput/AntlrMathParser */ "./src/mathlib/userinput/AntlrMathParser.ts");
function loadSolverPage() {
    const inputView = document.getElementById('problem');
    const problemViewDiv = document.getElementById('expressionViewDiv');
    const solutionView = document.getElementById('solution');
    const stepListView = document.getElementById('steps');
    // Populate ui
    const problemView = new EditableMathView_1.EditableMathView();
    problemViewDiv.appendChild(problemView);
    inputView.focus();
    inputView.addEventListener("keyup", () => {
        // Parse input
        let exp;
        try {
            exp = (0, AntlrMathParser_1.parseExpression)(inputView.value);
            problemView.value = exp;
        }
        catch (e) {
            stepListView.style.opacity = "0.6";
            problemView.value = null;
            return;
        }
        // We were able to parse the input
        stepListView.style.opacity = "1";
        // Clear the previous result
        while (stepListView.children.length > 0) {
            stepListView.removeChild(stepListView.children[0]);
        }
        const steps = getSolution(exp);
        // Display new result
        solutionView.value = steps[steps.length - 1];
        steps.forEach(step => {
            let view;
            if (step instanceof Argument_1.Argument) {
                view = new ArgumentNodeView_1.ArgumentNodeView(step, view => { });
            }
            else if (step instanceof Expression_1.Expression) {
                view = new ExpressionNodeView_1.ExpressionNodeView(step, view => { });
            }
            else
                throw new Error("Not implemented");
            stepListView.appendChild(view);
        });
    });
}
exports.loadSolverPage = loadSolverPage;
/**
 * Simplifies the given expression returning an array
 * of steps ending in the answer.
 * The last node will be an expression.
 */
function getSolution(problem) {
    const graph = new Graph_1.Graph().addNode(problem);
    const deriver = new Deriver_1.Deriver(graph);
    deriver.expand(50, true);
    let simplified = null;
    for (const node of graph.getNodes()) {
        if (node instanceof Expression_1.Expression)
            if (deriver.isSimplified(node))
                simplified = node;
    }
    // Copy the resulting graph into a library implementation of graph
    const libraryGraph = (0, ngraph_graph_1.default)();
    graph.getNodes().forEach(n => {
        libraryGraph.addNode(n.id, n);
    });
    // I assume that library graph isn't directed
    for (const edge of GraphMinipulator_1.GraphMinipulator.dropSymmetric(graph.getEdges())) {
        if (edge.e instanceof Argument_1.Argument) {
            libraryGraph.addLink(edge.n.id, edge.e.id);
            libraryGraph.addLink(edge.e.id, edge.n1.id);
        }
        // if (edge.n instanceof Expression && edge.n1 instanceof Expression)
        //     console.log(`edge ${edge.n} AND ${edge.n1}`)
    }
    // Do path finding operation on it
    const pathFinder = ngraph_path_1.default.nba(libraryGraph);
    const resultPath = pathFinder.find(problem.id, simplified.id).reverse();
    return resultPath.map(node => {
        if (node.data instanceof Argument_1.Argument)
            return node.data;
        else if (node.data instanceof Expression_1.Expression)
            return node.data;
        else
            throw new Error("Not implemented");
    });
}


/***/ }),

/***/ "./src/mathlib/Argument.ts":
/*!*********************************!*\
  !*** ./src/mathlib/Argument.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Argument = void 0;
const MathGraphNode_1 = __webpack_require__(/*! ./MathGraphNode */ "./src/mathlib/MathGraphNode.ts");
const assert_1 = __webpack_require__(/*! ./util/assert */ "./src/mathlib/util/assert.ts");
/**
 * Connects one or more nodes (grounds) to one or more nodes (claims).
 * Contains an explanation/argument for the connection.
 */
class Argument extends MathGraphNode_1.MathGraphNode {
    constructor(grounds, claim, argument) {
        super();
        this.grounds = grounds;
        Object.freeze(this.grounds);
        this.claim = claim;
        this.argument = argument;
        this.repOk();
    }
    expressionEdge = true;
    get relationship() {
        return this.claim.r;
    }
    toString() {
        return "Argument " + this.claim.r;
    }
    /**
     * Two out math graph nodes that are related by this Arugment.
     */
    claim;
    /**
     * The explanation that connects the argument's grounds to
     * it's claimed relationship between the two out nodes.
     *
     */
    argument;
    /**
     * Nodes that have an edge pointing to this argument.
     */
    grounds;
    repOk() {
        (0, assert_1.assert)(this.grounds != null);
        for (const ground of this.grounds) {
            (0, assert_1.assert)(ground != null && ground != undefined);
        }
        (0, assert_1.assert)(this.claim.n != null && this.claim.n != undefined);
        (0, assert_1.assert)(this.claim.n1 != null && this.claim.n1 != undefined);
        (0, assert_1.assert)(this.claim.r != undefined && this.claim.r != null);
    }
}
exports.Argument = Argument;


/***/ }),

/***/ "./src/mathlib/ConvenientExpressions.ts":
/*!**********************************************!*\
  !*** ./src/mathlib/ConvenientExpressions.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.y = exports.x = exports.f = exports.e = exports.d = exports.c = exports.b = exports.a = exports.productAndNotTimesOne = exports.productOrNot = exports.equivalenceArgument = exports.int = exports.v = exports.num = exports.negative = exports.product = exports.removeNew = exports.remove = exports.pow = exports.orderedProduct = exports.sumOrNot = exports.sumIntuitive = exports.sumEvalIntegerTerms = exports.orderedSum = exports.sum = exports.fraction = void 0;
const Integer_1 = __webpack_require__(/*! ./expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Fraction_1 = __webpack_require__(/*! ./expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Integral_1 = __webpack_require__(/*! ./expressions/Integral */ "./src/mathlib/expressions/Integral.ts");
const Product_1 = __webpack_require__(/*! ./expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ./expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Variable_1 = __webpack_require__(/*! ./expressions/Variable */ "./src/mathlib/expressions/Variable.ts");
const Argument_1 = __webpack_require__(/*! ./Argument */ "./src/mathlib/Argument.ts");
const Relationship_1 = __webpack_require__(/*! ./Relationship */ "./src/mathlib/Relationship.ts");
const assert_1 = __webpack_require__(/*! ./util/assert */ "./src/mathlib/util/assert.ts");
const Exponent_1 = __webpack_require__(/*! ./expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
function fraction(num, den) {
    return Fraction_1.Fraction.of(num, den);
}
exports.fraction = fraction;
/**
 * A convenience method for Sum.of()
 */
function sum(...terms) {
    return Sum_1.Sum.of(terms);
}
exports.sum = sum;
/**
 * Gets the correctly ordered sum of the given sum.
 * 1 + a = a + 1
 * Follows the spec given in the Sum.ts file.
 * @param sum
 * @returns
 */
function orderedSum(sum) {
    const ordered = (0, Sum_1.orderTerms)(...sum.terms);
    return Sum_1.Sum.of(ordered);
}
exports.orderedSum = orderedSum;
/**
 * Returns the sum of the given terms, evaluating any integer terms.
 * Puts final constant integer as the last term.
 * If the result is a sum, it will not have the integer 0 as a term.
 * If all given terms sum to zero, the integer zero will be returned.
 * @param terms
 */
function sumEvalIntegerTerms(...terms) {
    const integers = terms.filter(e => e instanceof Integer_1.Integer).length;
    if (integers < 2)
        return sum(...terms);
    const nonIntTerms = terms.filter(e => !(e instanceof Integer_1.Integer));
    const intTerm = terms.filter(e => e instanceof Integer_1.Integer)
        .map(e => e)
        .reduce((a, b) => num(a.value + b.value));
    if (intTerm.value == 0) {
        if (nonIntTerms.length > 1) {
            return sum(...nonIntTerms);
        }
        else if (nonIntTerms.length == 1) {
            return nonIntTerms[0];
        }
        else {
            return intTerm;
        }
    }
    else {
        if (nonIntTerms.length == 0) {
            return intTerm;
        }
        else {
            return sum(...nonIntTerms, intTerm);
        }
    }
}
exports.sumEvalIntegerTerms = sumEvalIntegerTerms;
/**
 * Returns the sum of the given terms. Evaluates any
 * integer terms. Additionally cancels out any positive
 * negative terms.
 *
 * Simplifies
 *  x + a - a = x
 * x + ab - ab = x
 * x + 2ab - 2ab = x
 * a - a = 0
 *
 * Doesn't affect
 *  x + 2a - a
 * @param terms
 */
function sumIntuitive(...terms) {
    const intEval = sumEvalIntegerTerms(...terms);
    if (intEval.class != Sum_1.SumType)
        return intEval;
    terms = [...intEval.terms];
    // Find opposite pairs
    // They will take the form
    //      exp + -1 * exp
    // I assume here that the only way to notate
    // negativity is by multiplying by -1
    terms: for (const t of terms) {
        const otherTerms = [...terms];
        remove(otherTerms, t);
        for (const other of otherTerms) {
            if (other instanceof Product_1.Product) {
                if (other.isNegation && other.negation === t) {
                    remove(terms, other);
                    remove(terms, t);
                    continue terms;
                }
            }
        }
    }
    if (terms.length == 0)
        return Integer_1.Integer.of(0);
    else if (terms.length == 1)
        return terms[0];
    else
        return sum(...terms);
}
exports.sumIntuitive = sumIntuitive;
/**
 * Finds the sum of the given terms or if only 1
 * is given returns that term.
 * @param terms
 * @returns
 */
function sumOrNot(...terms) {
    if (terms.length == 1)
        return terms[0];
    else
        return sum(...terms);
}
exports.sumOrNot = sumOrNot;
/**
 * Produces a product from the given factors
 * where the factors are ordered according to convention.
 * @param factors At least 2
 */
function orderedProduct(...factors) {
    factors.sort(Product_1.factorOrder);
    return product(...factors);
}
exports.orderedProduct = orderedProduct;
/**
 * Convenience wrapper function for Exponent.of
 * @param base
 * @param power
 * @returns
 */
function pow(base, power) {
    return Exponent_1.Exponent.of(base, power);
}
exports.pow = pow;
/**
 * Removes the first instance of the given
 * element from the array. Really should be
 * part of the std library. Identifies object
 * with referencial equality.
 * @param array
 * @param element
 */
function remove(array, element) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === element) {
            array.splice(i, 1);
            return;
        }
    }
}
exports.remove = remove;
/**
 * Gets a new array without the first instance of the given
 * element. Really should be
 * part of the std library. Identifies object
 * with referencial equality.
 * @param array
 * @param element
 */
function removeNew(array, element) {
    const input = [...array];
    for (let i = 0; i < input.length; i++) {
        if (input[i] === element) {
            input.splice(i, 1);
            return input;
        }
    }
    throw new Error("Given array doesn't contain element " + element);
}
exports.removeNew = removeNew;
function product(...factors) {
    factors.forEach(f => (0, assert_1.assert)(f != null && f != undefined, "Making product with null or undefined factor"));
    return Product_1.Product.of(factors);
}
exports.product = product;
function negative(expression) {
    (0, assert_1.assert)(expression != undefined, "Taking negative of undefined expression");
    if (expression instanceof Integer_1.Integer)
        return Integer_1.Integer.of(-expression.value);
    else
        return Product_1.Product.of([Integer_1.Integer.of(-1), expression]);
}
exports.negative = negative;
function num(val) {
    return Integer_1.Integer.of(val);
}
exports.num = num;
function v(symbol) {
    return Variable_1.Variable.of(symbol);
}
exports.v = v;
function int(integrand, respectTo) {
    return Integral_1.Integral.of(integrand, respectTo);
}
exports.int = int;
function equivalenceArgument(first, second, explanation) {
    return new Argument_1.Argument(setOf(first), {
        n: first,
        r: Relationship_1.Relationship.Equal,
        n1: second,
    }, explanation);
}
exports.equivalenceArgument = equivalenceArgument;
/**
 *
 * @returns The product of the given factors, or the only factor given
 * if only one given. Throws if no expressions are given.
 */
function productOrNot(...expressions) {
    (0, assert_1.assert)(expressions.length > 0);
    if (expressions.length == 1)
        return expressions[0];
    return product(...expressions);
}
exports.productOrNot = productOrNot;
/**
 * @returns The product of the given terms exlcuding the first if
 *          it's one. If the resulting terms list is only one term,
 *          returns the only term.
 */
function productAndNotTimesOne(...expressions) {
    if (expressions[0] instanceof Integer_1.Integer && expressions[0].value == 1) {
        expressions.shift();
        return productOrNot(...expressions);
    }
    return productOrNot(...expressions);
}
exports.productAndNotTimesOne = productAndNotTimesOne;
function setOf(...expressions) {
    const out = new Set();
    expressions.forEach(e => out.add(e));
    return out;
}
exports.a = v('a');
exports.b = v('b');
exports.c = v('c');
exports.d = v('d');
exports.e = v('e');
exports.f = v('f');
exports.x = v('x');
exports.y = v('y');


/***/ }),

/***/ "./src/mathlib/Graph.ts":
/*!******************************!*\
  !*** ./src/mathlib/Graph.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GivenEdge = exports.ArgumentEdge = exports.Graph = void 0;
const Argument_1 = __webpack_require__(/*! ./Argument */ "./src/mathlib/Argument.ts");
const assert_1 = __webpack_require__(/*! ./util/assert */ "./src/mathlib/util/assert.ts");
/**
 * Class representing a graph of expressions and statements
 * including everything we know about a problem.
 * Connects GraphNodes via Inferences for edges.
 *
 * It's a digraph. TODO: It may also need to be a multigraph...
 */
class Graph {
    constructor() {
        this.nodes = new Set();
        this.connections = new Map();
        this.edges = new Map();
        this.repOk();
    }
    /**
     * Adds an expression to the problem.
     * @param node
     * @returns the same graph for chaining.
     */
    addNode(node) {
        this.nodes.add(node);
        if (node instanceof Argument_1.Argument) {
            this.addArgument(node);
        }
        this.repOk();
        return this;
    }
    /**
     * Add a relationship between two elements given by the user to the graph.
     * Should not be called to add derived truths bc this won't store an explanation.
     * Adds given nodes if they aren't already on the graph.
     * @param n
     * @param n1
     * @param r
     * @returns self for chaining
     */
    addRelationship(n, n1, r) {
        this.addNode(n);
        this.addNode(n1);
        // Defined both ways because the user is giving it
        this.internalAdd(n, n1, new GivenEdge(r));
        this.internalAdd(n1, n, new GivenEdge(r));
        this.repOk();
        return this;
    }
    /**
     * Adds a node representing an acumulation of facts
     * that leads to a conclusion.
     * The relationship claimed by the argument is directed
     * from n to n1 with the argument as the edge.
     * @param a
     * @returns the same graph for chaining.
     */
    addArgument(a) {
        this.nodes.add(a);
        // Add the grounds
        for (const ground of a.grounds) {
            this.nodes.add(ground);
            this.internalAdd(ground, a, ArgumentEdge.To);
        }
        // Add the claim
        const claim = a.claim;
        this.addNode(claim.n);
        this.addNode(claim.n1);
        this.internalAdd(a, claim.n, ArgumentEdge.From);
        this.internalAdd(a, claim.n1, ArgumentEdge.From);
        this.internalAdd(claim.n, claim.n1, a);
        this.repOk();
        return this;
    }
    /**
     * @returns the same graph for chaining.
     */
    addArguments(...a) {
        a.forEach(arg => this.addArgument(arg));
        return this;
    }
    /**
     * Adds the given directed edge to the graph. If either node
     * is missing from the graph, adds it.
     * @param n
     * @param n1
     * @param e
     * @returns This.
     */
    addEdge(n, n1, e) {
        this.addNode(n);
        this.addNode(n1);
        this.internalAdd(n, n1, e);
        return this;
    }
    /**
     * Get the set of neighbors of a node.
     * @param node
     * @param direction Nodes that are adjacent to this node, from this node, or either.
     * @returns Undefined if the node isn't in this graph. Otherwise, a set of connected nodes.
     *          If the node is in the graph but isn't connected to anything, returns empty set.
     */
    getNeighbors(node, direction) {
        if (!this.nodes.has(node))
            return undefined;
        if (direction == "out") {
            return [...this.connections.get(node)];
        }
        let adjacentTo = new Set();
        for (const n of this.nodes) {
            if (this.connections.get(n)?.has(node))
                adjacentTo.add(n);
        }
        if (direction == "in")
            return [...adjacentTo];
        for (const n of this.connections.get(node) ?? [])
            adjacentTo.add(n);
        return [...adjacentTo];
    }
    /**
     * Determines the number of edges this node has.
     * @param node The node being consdered.
     * @param direction Count only the edges going towards this node, away from
     *          it, or both.
     * @returns >= 0, undefined if the given node isn't in the graph.
     */
    getDegree(node, direction) {
        if (!this.nodes.has(node))
            return undefined;
        if (direction == "out") {
            return this.connections.get(node)?.size ?? 0;
        }
        let degIn = 0;
        this.nodes.forEach(n => {
            if (this.connections.get(n) == undefined)
                return;
            if (this.connections.get(n).has(node))
                degIn++;
        });
        if (direction == "in")
            return degIn;
        return degIn + (this.connections.get(node)?.size ?? 0);
    }
    /**
     * @param n Node in the graph.
     * @param n1 In the graph.
     * @returns Undefined if either node isn't in the graph or they're not
     * connected.
     */
    getEdge(n, n1) {
        return this.edges.get(n)?.get(n1);
    }
    contains(node) {
        return this.nodes.has(node);
    }
    /**
     * @returns A new set containing all the nodes in the graph
     */
    getNodes() {
        return new Set(this.nodes);
    }
    getEdges() {
        const out = new Set();
        this.edges.forEach((map, first) => {
            map.forEach((edge, second) => {
                out.add({ n: first, n1: second, e: edge });
            });
        });
        return out;
    }
    numNodes() {
        return this.nodes.size;
    }
    /**
     * Adds all graph nodes and edges to this one.
     * @param graph
     * @returns the same graph for chaining.
     */
    addGraph(graph) {
        graph.nodes.forEach(node => {
            this.nodes.add(node);
        });
        graph.edges.forEach((map, node1) => {
            map.forEach((edge, node2) => {
                if (edge instanceof Argument_1.Argument)
                    this.addArgument(edge);
                else if (edge == "supports") {
                    this.internalAdd(node1, node2, ArgumentEdge.To);
                }
                else if (edge == "claims") {
                    this.internalAdd(node1, node2, ArgumentEdge.From);
                }
                else
                    throw new Error("Unknown Edge Type");
            });
        });
        this.repOk();
        return this;
    }
    toString() {
        let out = "Graph(V = {";
        for (const node of this.nodes) {
            out += node.toString() + ",";
        }
        out = out.substring(0, out.length - 1) + "}, E = {";
        this.connections.forEach((set, src) => {
            set.forEach(dest => {
                out += src.toString() + " -> " + dest.toString() + ", ";
            });
        });
        out += "} Edge Count: " + this.connections.size;
        return out;
    }
    internalAdd(n, n1, e) {
        if (this.connections.get(n) == null) {
            this.connections.set(n, new Set());
        }
        this.connections.get(n).add(n1);
        if (this.edges.get(n) == undefined) {
            this.edges.set(n, new Map());
        }
        this.edges.get(n).set(n1, e);
        this.repOk();
    }
    repOk() {
        this.nodes.forEach((value) => {
            (0, assert_1.assert)(value != null && value != undefined);
        });
        // All connections/edges have nodes
        this.connections.forEach((value, key) => {
            (0, assert_1.assert)(this.nodes.has(key));
            value.forEach(n => {
                (0, assert_1.assert)(this.nodes.has(n));
            });
        });
        this.edges.forEach((map, first) => {
            map.forEach((edge, second) => {
                (0, assert_1.assert)(this.nodes.has(first));
                (0, assert_1.assert)(this.nodes.has(second));
                (0, assert_1.assert)(this.connections.get(first).has(second));
            });
        });
    }
    nodes;
    // Quickly access all connections of a node
    connections;
    // Determine the type of connection between two nodes
    edges;
}
exports.Graph = Graph;
var ArgumentEdge;
(function (ArgumentEdge) {
    ArgumentEdge["To"] = "supports";
    ArgumentEdge["From"] = "claims";
})(ArgumentEdge || (exports.ArgumentEdge = ArgumentEdge = {}));
/**
 * Communicates a relationhip given by the user.
 */
class GivenEdge {
    constructor(r) {
        this.r = r;
    }
    r;
}
exports.GivenEdge = GivenEdge;


/***/ }),

/***/ "./src/mathlib/GraphMinipulator.ts":
/*!*****************************************!*\
  !*** ./src/mathlib/GraphMinipulator.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphMinipulator = void 0;
const Argument_1 = __webpack_require__(/*! ./Argument */ "./src/mathlib/Argument.ts");
const Graph_1 = __webpack_require__(/*! ./Graph */ "./src/mathlib/Graph.ts");
const assert_1 = __webpack_require__(/*! ./util/assert */ "./src/mathlib/util/assert.ts");
/**
 * Tool to do operations on graphs.
 */
class GraphMinipulator {
    /**
     * Find nodes of components of a graph where only edges for which
     * the callback function returns true are considered.
     * @param
     * @param isConnected
     */
    static getComponentNodes(input, isConnected) {
        const includedNodes = new Set();
        const components = new Set();
        for (const node of input.getNodes()) {
            if (includedNodes.has(node)) {
                continue;
            }
            const component = new Set();
            function getAllConnected(n) {
                includedNodes.add(n);
                if (component.has(n)) {
                    return;
                }
                component.add(n);
                for (const neighbor of input.getNeighbors(n, "both")) {
                    if (!isConnected(input.getEdge(n, neighbor)))
                        continue;
                    getAllConnected(neighbor);
                }
                return;
            }
            getAllConnected(node);
            component.add(node);
            components.add(component);
        }
        (0, assert_1.assert)(includedNodes.size == input.numNodes());
        // Assert components are pairwise disjoint of problems show up
        return components;
    }
    /**
     * Returns a new graph with only the nodes which pass the provided
     * filter function. Edges connected to removed nodes are removed.
     *
     * @param graph
     * @param included
     */
    static dropNodes(graph, included) {
        const result = new Graph_1.Graph();
        graph.getNodes().forEach(n => {
            if (included(n))
                result.addNode(n);
        });
        graph.getEdges().forEach(e => {
            if (included(e.n) && included(e.n1))
                result.addEdge(e.n, e.n1, e.e);
        });
        return result;
    }
    /**
     * Gets every edge in the graph.
     * @param input
     * @returns
     */
    static getRelations(input) {
        const out = [];
        for (const node of input.getNodes()) {
            for (const other of input.getNeighbors(node, "out")) {
                out.push({ first: node, second: other, e: input.getEdge(node, other) });
            }
        }
        return out;
    }
    /**
     * Parses the graph into sets of
     * nodes grouped by depth from a center node.
     * Assumes the graph is connected.
     * @param rootNodes Contains at least one node in the graph.
     * @param count Function that determines if any given node should be
     * included in the depth count. Defaults to counting all nodes. Nodes that
     * aren't included won't be in the returned value.
     * @returns Map from depth in graph to a set of nodes at that depth.
     *
     */
    static getLevels(input, rootNodes, count = () => true) {
        const roots = new Set(rootNodes);
        const depths = new Map();
        /**
         * Recursively maps out all nodes in the graph,
         * puttin them in the depths map.
         * @param node
         */
        function mapNode(node, depth = 0) {
            if (roots.has(node)) {
                depth = 0;
            }
            if (depth < (depths.get(node) ?? Number.MAX_VALUE)) {
                depths.set(node, depth);
            }
            const neighbors = [...input.getNeighbors(node, "both")];
            neighbors.filter(value => {
                // If we have found a shorter path to it or there was no found path to it
                return (depths.get(value) == undefined || depths.get(value) > depth) && value !== node;
            }).forEach(n => {
                mapNode(n, count(node) ? depth + 1 : depth);
            });
        }
        mapNode([...roots][0]);
        const out = new Map();
        depths.forEach((depth, node) => {
            if (!count(node))
                return;
            if (out.get(depth) == undefined) {
                out.set(depth, new Set());
            }
            out.get(depth).add(node);
        });
        return out;
    }
    /**
     * Determines if the given graph is connected, meaning that
     * it's possible to traverse between any two nodes on the graph.
     */
    static isConnected(input) {
        // Check every node has a degree of 1 or more or graph only has 1 or 0 elements
        return [...input.getNodes()].map(node => {
            return input.getDegree(node, "both") > 0;
        }).reduce((a, b) => a && b) || input.numNodes() < 2;
    }
    /**
     * Filters edges list returning a list where only one edge
     * from any edge loops is included.
     * For example if the input edges are a -> b and b -> a,
     * the result will only contain a -> b.
     * @param edges
     */
    static dropSymmetric(edges) {
        const out = [];
        function alreadyHas(edge) {
            for (const e of out)
                if (edge.n == e.n1 && edge.n1 == e.n)
                    return true;
            return false;
        }
        for (const edge of edges) {
            if (!alreadyHas(edge))
                out.push(edge);
        }
        return out;
    }
    /**
     * Creates a new graph with only the edges which passed the
     * filter function. The resulting graph may or may not be connected.
     * All the nodes of the original graph are kept.
     * @param edgeFilter Returns true if the given edge should be included in
     *      the resulting graph.
     * NOTE: NOT TESTED
     */
    static dropEdges(graph, edgeFilter) {
        const out = new Graph_1.Graph();
        for (const node of graph.getNodes()) {
            out.addNode(node);
        }
        for (const edge of graph.getEdges()) {
            if (edgeFilter(edge)) {
                if (edge instanceof Argument_1.Argument) {
                    out.addArgument(edge);
                }
                else {
                    throw new Error("Not implemented");
                }
            }
        }
        return out;
    }
}
exports.GraphMinipulator = GraphMinipulator;


/***/ }),

/***/ "./src/mathlib/MathGraphNode.ts":
/*!**************************************!*\
  !*** ./src/mathlib/MathGraphNode.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MathGraphNode = void 0;
class MathGraphNode {
    constructor() {
        this.id = MathGraphNode.nextId;
        MathGraphNode.nextId++;
    }
    static nextId = 1;
    id;
}
exports.MathGraphNode = MathGraphNode;


/***/ }),

/***/ "./src/mathlib/Relationship.ts":
/*!*************************************!*\
  !*** ./src/mathlib/Relationship.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Relationship = void 0;
/**
 * A way in which 2 expressions can be related.
 */
var Relationship;
(function (Relationship) {
    Relationship["Equal"] = "=";
})(Relationship || (exports.Relationship = Relationship = {}));


/***/ }),

/***/ "./src/mathlib/derivations/DerivationRules.ts":
/*!****************************************************!*\
  !*** ./src/mathlib/derivations/DerivationRules.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.polynomialSimplificationRules = exports.factoringSimplificationRules = exports.convergentSimplificationRules = void 0;
const BreakDerivativesOverAddition_1 = __webpack_require__(/*! ./calculus/BreakDerivativesOverAddition */ "./src/mathlib/derivations/calculus/BreakDerivativesOverAddition.ts");
const PowerRule_1 = __webpack_require__(/*! ./calculus/PowerRule */ "./src/mathlib/derivations/calculus/PowerRule.ts");
const ProductRule_1 = __webpack_require__(/*! ./calculus/ProductRule */ "./src/mathlib/derivations/calculus/ProductRule.ts");
const PullConstantsFromDerivatives_1 = __webpack_require__(/*! ./calculus/PullConstantsFromDerivatives */ "./src/mathlib/derivations/calculus/PullConstantsFromDerivatives.ts");
const QuotientRule_1 = __webpack_require__(/*! ./calculus/QuotientRule */ "./src/mathlib/derivations/calculus/QuotientRule.ts");
const USubstitution_1 = __webpack_require__(/*! ./calculus/USubstitution */ "./src/mathlib/derivations/calculus/USubstitution.ts");
const AdditiveIdentity_1 = __webpack_require__(/*! ./simplifications/AdditiveIdentity */ "./src/mathlib/derivations/simplifications/AdditiveIdentity.ts");
const AnythingTimesZero_1 = __webpack_require__(/*! ./simplifications/AnythingTimesZero */ "./src/mathlib/derivations/simplifications/AnythingTimesZero.ts");
const AssociativePropertyOfProductsAndSums_1 = __webpack_require__(/*! ./simplifications/AssociativePropertyOfProductsAndSums */ "./src/mathlib/derivations/simplifications/AssociativePropertyOfProductsAndSums.ts");
const CancelNegatives_1 = __webpack_require__(/*! ./simplifications/CancelNegatives */ "./src/mathlib/derivations/simplifications/CancelNegatives.ts");
const CombineCommonFactorsMultiplication_1 = __webpack_require__(/*! ./simplifications/CombineCommonFactorsMultiplication */ "./src/mathlib/derivations/simplifications/CombineCommonFactorsMultiplication.ts");
const CombineCommonTermsAddition_1 = __webpack_require__(/*! ./simplifications/CombineCommonTermsAddition */ "./src/mathlib/derivations/simplifications/CombineCommonTermsAddition.ts");
const CombineIntegerFactors_1 = __webpack_require__(/*! ./simplifications/CombineIntegerFactors */ "./src/mathlib/derivations/simplifications/CombineIntegerFactors.ts");
const CombineProductsAndFractions_1 = __webpack_require__(/*! ./simplifications/CombineProductsAndFractions */ "./src/mathlib/derivations/simplifications/CombineProductsAndFractions.ts");
const DistributiveProperty_1 = __webpack_require__(/*! ./simplifications/DistributiveProperty */ "./src/mathlib/derivations/simplifications/DistributiveProperty.ts");
const DivideFractions_1 = __webpack_require__(/*! ./simplifications/DivideFractions */ "./src/mathlib/derivations/simplifications/DivideFractions.ts");
const DivisionIdentity_1 = __webpack_require__(/*! ./simplifications/DivisionIdentity */ "./src/mathlib/derivations/simplifications/DivisionIdentity.ts");
const EvaluateSums_1 = __webpack_require__(/*! ./simplifications/EvaluateSums */ "./src/mathlib/derivations/simplifications/EvaluateSums.ts");
const ExponentialIdentity_1 = __webpack_require__(/*! ./simplifications/ExponentialIdentity */ "./src/mathlib/derivations/simplifications/ExponentialIdentity.ts");
const ExponentToZero_1 = __webpack_require__(/*! ./simplifications/ExponentToZero */ "./src/mathlib/derivations/simplifications/ExponentToZero.ts");
const FOIL_1 = __webpack_require__(/*! ./simplifications/FOIL */ "./src/mathlib/derivations/simplifications/FOIL.ts");
const LogOfOne_1 = __webpack_require__(/*! ./simplifications/LogOfOne */ "./src/mathlib/derivations/simplifications/LogOfOne.ts");
const MultiplicativeIdentity_1 = __webpack_require__(/*! ./simplifications/MultiplicativeIdentity */ "./src/mathlib/derivations/simplifications/MultiplicativeIdentity.ts");
const MultiplyExponentPowers_1 = __webpack_require__(/*! ./simplifications/MultiplyExponentPowers */ "./src/mathlib/derivations/simplifications/MultiplyExponentPowers.ts");
const OrderProducts_1 = __webpack_require__(/*! ./simplifications/OrderProducts */ "./src/mathlib/derivations/simplifications/OrderProducts.ts");
const OrderSums_1 = __webpack_require__(/*! ./simplifications/OrderSums */ "./src/mathlib/derivations/simplifications/OrderSums.ts");
const RemoveCommonFactorsOnTopAndBottomOfFraction_1 = __webpack_require__(/*! ./simplifications/RemoveCommonFactorsOnTopAndBottomOfFraction */ "./src/mathlib/derivations/simplifications/RemoveCommonFactorsOnTopAndBottomOfFraction.ts");
const SubtractExponentsOnFractions_1 = __webpack_require__(/*! ./simplifications/SubtractExponentsOnFractions */ "./src/mathlib/derivations/simplifications/SubtractExponentsOnFractions.ts");
const SumCoefficientsOfAddedTerms_1 = __webpack_require__(/*! ./simplifications/SumCoefficientsOfAddedTerms */ "./src/mathlib/derivations/simplifications/SumCoefficientsOfAddedTerms.ts");
/**
 * 1 input, 1 output
 * Rewrite expressions to follow math conventions
 */
const conventionRules = [
    new OrderProducts_1.OrderProducts(),
    new OrderSums_1.OrderSums(),
];
/**
 * 1 input, 1 output
 */
const evaluativeRules = [
    new EvaluateSums_1.EvaluateSums(),
    new CancelNegatives_1.CancelNegatives(),
    new CombineIntegerFactors_1.CombineIntegerFactors(),
];
const combinatoricRules = [
    new SumCoefficientsOfAddedTerms_1.SumCoefficientsOfAddedTerms(),
    new CombineCommonFactorsMultiplication_1.CombineCommonFactorsMultiplication(),
    new MultiplyExponentPowers_1.MultiplyExponentPowers(),
    new SubtractExponentsOnFractions_1.SubtractExponentsOnFractions(),
    new CombineProductsAndFractions_1.CombineProductsAndFractions(),
];
const remainingNoContextSimplificationRules = [
    new USubstitution_1.USubstitution(),
    new PowerRule_1.PowerRule(),
    new PullConstantsFromDerivatives_1.PullConstantsFromDerivatives(),
    new AssociativePropertyOfProductsAndSums_1.AssociativePropertyOfProductsAndSums(),
    new ProductRule_1.ProductRule(),
    new QuotientRule_1.QuotientRule(),
    new DivideFractions_1.DivideFractions(),
    new RemoveCommonFactorsOnTopAndBottomOfFraction_1.RemoveCommonFactorsFromTopAndBottomOfFraction(),
    new BreakDerivativesOverAddition_1.BreakDerivativesOverAddition(),
];
/**
 * A list of simplification rules.
 * If and only if an earlier rule fails to
 * produce equivalent expressions should later lists
 * be used.
 * This list only contains rules which converge to one answer.
 */
exports.convergentSimplificationRules = [
    // Identity rules first
    new AnythingTimesZero_1.AnythingTimesZero(),
    new ExponentToZero_1.ExponentToZero(),
    new MultiplicativeIdentity_1.MultiplicativeIdentity(),
    new ExponentialIdentity_1.ExponentialIdentity(),
    new DivisionIdentity_1.DivisionIdentity(),
    new AdditiveIdentity_1.AdditiveIdentity(),
    new LogOfOne_1.LogOfOne(),
    ...evaluativeRules,
    ...combinatoricRules,
    ...conventionRules,
    ...remainingNoContextSimplificationRules,
];
/**
 * These rules converge to factored form.
 */
exports.factoringSimplificationRules = [
    new CombineCommonTermsAddition_1.CombineCommonTermsAddition(),
];
/**
 * These rules converge to polynomial form.
 */
exports.polynomialSimplificationRules = [
    new DistributiveProperty_1.DistributiveProperty(),
    new FOIL_1.FOIL(),
];


/***/ }),

/***/ "./src/mathlib/derivations/Deriver.ts":
/*!********************************************!*\
  !*** ./src/mathlib/derivations/Deriver.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Deriver = void 0;
const Expression_1 = __webpack_require__(/*! ../expressions/Expression */ "./src/mathlib/expressions/Expression.ts");
const Product_1 = __webpack_require__(/*! ../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const DerivationRules_1 = __webpack_require__(/*! ./DerivationRules */ "./src/mathlib/derivations/DerivationRules.ts");
const recursion_1 = __webpack_require__(/*! ./recursion */ "./src/mathlib/derivations/recursion.ts");
/**
 * Holds a single graph and expands it using rules.
 */
class Deriver {
    /**
     * Give it the graph you're going to expand.
     * @param graph
     */
    constructor(graph) {
        this.graph = graph;
    }
    /**
     * Expands the graph arbitrarily.
     * This function is still poorly defined,
     * very experemental.
     * @param maxDepth The maximum number of iterations the
     *      deriver will do before returning. Non-negative.
     *      If null, there is no max depth.
     * @param skipConvergentSimplifications If true, convergent simplification operations
     *          aren't counted when calculating depth.
     */
    expand(maxDepth, skipConvergentSimplifications = false) {
        // Simplify all the expressions using the contextless simplifying rules
        // Do this until there's nothing more to simplify
        for (let i = 0; i < maxDepth; i++) {
            if (skipConvergentSimplifications) {
                while (this.simplifyNoContextConvergent())
                    ;
                if (!this.simplifyNoContextDivergent())
                    return;
            }
            else {
                if (!this.simplifyNoContextConvergent()) {
                    if (!this.simplifyNoContextDivergent())
                        return;
                }
            }
        }
        //this.algebraicExpansion()
    }
    /**
     * Gets a list of expressions which couldn't be simplified further.
     */
    get simplifiedExpressions() {
        return [...this.passedFactoringSimplification, ...this.passedPolynomialSimplification];
    }
    /**
     * Applies convergent simplification rules to expand the graph.
     * @returns True if there is more to simplify and this should
     *          be called again. Will be called a finite number of times.
     */
    simplifyNoContextConvergent() {
        const unsimplified = [...this.graph.getNodes()].filter(n => n instanceof Expression_1.Expression)
            .map(n => n)
            .filter(e => !this.processedByConvergentSimplification.has(e));
        let shouldDoAgain = false;
        unsimplified.forEach(e => {
            this.processedByConvergentSimplification.add(e);
            // Try to find equivalents using general convergent rules.
            for (const rule of DerivationRules_1.convergentSimplificationRules) {
                const derivedSimplification = (0, recursion_1.equiv)(e, equivalentsFnUsing([rule]))[0];
                if (derivedSimplification != undefined) {
                    this.addToGraph([derivedSimplification]);
                    shouldDoAgain = true;
                    return; // To next expression
                }
            }
            this.passedConvergentSimplification.add(e);
        });
        return shouldDoAgain;
    }
    /**
     * Applies divergent simplification rules to expand the graph.
     * @returns True if the function expanded the graph.
     */
    simplifyNoContextDivergent() {
        // Only operate on expressions which have passed convergent simplification
        const candidates = [...this.passedConvergentSimplification];
        // True if more expressions were added to the graph
        let shouldDoAgain = false;
        candidates.forEach(e => {
            // Try to find equivalents using divergent rules.
            for (const rule of DerivationRules_1.factoringSimplificationRules) {
                const derivedSimplifications = (0, recursion_1.equiv)(e, equivalentsFnUsing([rule]));
                shouldDoAgain ||= this.addToGraph(derivedSimplifications);
                if (derivedSimplifications.length == 0) {
                    if (e instanceof Product_1.Product)
                        this.passedFactoringSimplification.add(e);
                }
            }
            for (const rule of DerivationRules_1.polynomialSimplificationRules) {
                const derivedSimplifications = (0, recursion_1.equiv)(e, equivalentsFnUsing([rule]));
                shouldDoAgain ||= this.addToGraph(derivedSimplifications);
                if (derivedSimplifications.length > 0) {
                    if (e instanceof Sum_1.Sum)
                        this.passedPolynomialSimplification.add(e);
                }
            }
        });
        return shouldDoAgain;
    }
    /**
     * For each given argument, adds to the graph if at least
     * one of its claim's endpoints isn't already in the graph.
     * If both end points of all arguments are already in the graph,
     * returns false.
     * @param args
     * @effects this.graph
     */
    addToGraph(args) {
        let atLeastOne = false;
        args.forEach(a => {
            if (!this.graph.contains(a.claim.n)
                || !this.graph.contains(a.claim.n1)) {
                this.graph.addArgument(a);
                atLeastOne = true;
            }
        });
        return atLeastOne;
    }
    /**
     * Expands the graph using algebra rules.
     * Only simplified rules are used.
     */
    algebraicExpansion() {
        // const rules = [...RelationalDerivationRule.rules]
        // const components = [...GraphMinipulator.getComponentNodes(this.graph, edge => {
        //     return (edge instanceof Argument && edge.relationship == Relationship.Equal)
        //         || (edge instanceof GivenEdge && edge.r == Relationship.Equal)
        // })]
        // components.forEach(component => {
        //     const equation: Expression[] = []
        //     for (const node of component) {
        //         if (node instanceof Expression && this.simplified.has(node))
        //             equation.push(node)
        //     }
        //     rules.forEach(r => {
        //         r.apply(setOf(...equation)).forEach(a => {
        //             this.graph.addArgument(a)
        //         })
        //     })
        // })
    }
    graph;
    /**
     *
     * @returns true if the given expression is in the graph
     * and has already had the contextless simplification operations
     * done to it and cannot be further simplified.
     */
    isSimplified(exp) {
        if (!this.passedConvergentSimplification.has(exp))
            return false;
        if (exp instanceof Product_1.Product)
            return this.passedFactoringSimplification.has(exp);
        if (exp instanceof Sum_1.Sum)
            return this.passedPolynomialSimplification.has(exp);
        return true;
    }
    // All the expressions which could not be simplified further by
    // convergent simplification rules.
    passedConvergentSimplification = new Set();
    // All expressions which have been processed by the simplification rules
    /// regardless of the result.
    processedByConvergentSimplification = new Set();
    // All expressions which are products and could not be further
    // simplified by factoring simplification rules. A subset of
    // passedConvergentSimplification.
    passedFactoringSimplification = new Set();
    // All expressions which are sums and could not be further
    // simplified by polynomial simplification rules. A subset of
    // passedConvergentSimplification.
    passedPolynomialSimplification = new Set();
}
exports.Deriver = Deriver;
/**
 * Function that makes a function that gets the equivalent
 * expressions for a given one.
 * @param rules What rules the resulting function should use to
 *      find equivalents.
 * @returns A function which will use the given rules to
 *      find direct equivalents.
 */
function equivalentsFnUsing(rules) {
    return function (exp) {
        const out = new Set();
        rules.filter(r => r.applies(exp)).forEach(rule => {
            rule.apply(exp).forEach(i => {
                out.add(i);
            });
        });
        return out;
    };
}


/***/ }),

/***/ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts":
/*!**************************************************************************!*\
  !*** ./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConvergenceTarget = exports.NoContextExpressionSimplificationRule = void 0;
const assert_1 = __webpack_require__(/*! ../util/assert */ "./src/mathlib/util/assert.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
/**
 * A rule that takes an expression and produces one or more equivalent expressions.
 * These can use reflection to determine what
 * type of expression they're given. These rules will be recursively used
 * to derive simplified expressions.
 *
 * These rules are also contextless: they're only given the expression,
 * no other information about the problem.
 *
 * All of these rules need to converge to a simplified answer. They can't
 * form loops. Thinking about this, there are two simplified forms to
 * converge to:
 *  - Factored form c(a+b)
 *  - Polynomial form ac + bc
 */
class NoContextExpressionSimplificationRule {
    /**
     * Checks if this rule can find equivalents for the
     * given expression. Only call apply() if true.
     */
    applies(exp) {
        return this.appliesImpl(exp);
    }
    /**
     * Produces a set of expressions that are equivalent to
     * the given one. Only call if the given expression
     * passed the applies() test.
     * @param exp The expression to find an equivalent for.
     * @returns Set of equivalent expressions, not including the given one.
     */
    apply(exp) {
        //console.log(this.constructor.name + " on " + exp.toString())
        const result = this.applyImpl(exp);
        result.forEach(e => {
            (0, assert_1.assert)(e != null && e != undefined);
            (0, assert_1.assert)(e.claim.n1 !== exp, "Rule " + this.constructor.name + " produced result equivalent to ground");
            // TODO: This fuzzy test is inconlusive and can fail when two expressions are equal.
            // Don't leave it in production.
            (0, assert_1.assert)(fuzzyEquivalenceTest(exp, e.claim.n1), "Failed fuzzy equivalence test "
                + exp.toUnambigiousString() + "/=" + e.claim.n1.toUnambigiousString()
                + " during argument " + e.argument);
        });
        return result;
    }
    /**
     * Returns the type of expression this rule's
     * results approach.
     */
    get convergenceType() {
        return ConvergenceTarget.None;
    }
}
exports.NoContextExpressionSimplificationRule = NoContextExpressionSimplificationRule;
/**
 * Plugs in some values to see if they're equivalent.
 * @param e1
 * @param e2
 */
function fuzzyEquivalenceTest(e1, e2) {
    const LIMIT = 0.001;
    for (const value of values) {
        if (Math.abs(e1.evaluate(value) - e2.evaluate(value)) > LIMIT)
            return false;
    }
    return true;
}
var ConvergenceTarget;
(function (ConvergenceTarget) {
    ConvergenceTarget[ConvergenceTarget["Factored"] = 0] = "Factored";
    ConvergenceTarget[ConvergenceTarget["Polynomial"] = 1] = "Polynomial";
    ConvergenceTarget[ConvergenceTarget["None"] = 2] = "None";
})(ConvergenceTarget || (exports.ConvergenceTarget = ConvergenceTarget = {}));
const values = (0, ThingsThatShouldBeInTheStdLib_1.setOf)(buildVariableValueMap(-2.1), buildVariableValueMap(-1.1), buildVariableValueMap(0.1), buildVariableValueMap(1.1), buildVariableValueMap(2.1), {
    valueOf(v) {
        return v.symbol.codePointAt(0) ?? 0;
    }
}, {
    valueOf(v) {
        return v.symbol.charCodeAt(0);
    }
});
function buildVariableValueMap(val) {
    return {
        valueOf(v) {
            return val;
        }
    };
}


/***/ }),

/***/ "./src/mathlib/derivations/RelationalDerivationRule.ts":
/*!*************************************************************!*\
  !*** ./src/mathlib/derivations/RelationalDerivationRule.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RelationalDerivationRule = void 0;
/**
 * Produces truths from a set of equivalent expressions.
 */
class RelationalDerivationRule {
    /**
     *
     * @param equation A set of expressions which are equal.
     */
    apply(equation) {
        return this.applyImpl(equation);
    }
    static rules = new Set();
}
exports.RelationalDerivationRule = RelationalDerivationRule;


/***/ }),

/***/ "./src/mathlib/derivations/algebra/DivideOnBothSides.ts":
/*!**************************************************************!*\
  !*** ./src/mathlib/derivations/algebra/DivideOnBothSides.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DivideOnBothSides = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const RelationalDerivationRule_1 = __webpack_require__(/*! ../RelationalDerivationRule */ "./src/mathlib/derivations/RelationalDerivationRule.ts");
class DivideOnBothSides extends RelationalDerivationRule_1.RelationalDerivationRule {
    applyImpl(equation) {
        const out = [];
        const combinations = cartesianProduct(equation);
        combinations.filter(pair => {
            return pair[0] instanceof Product_1.Product;
        }).forEach(pair => {
            const p = pair[0];
            const other = pair[1];
            // Some products have multiple factors
            p.factors.forEach(factor => {
                let second;
                if (other instanceof Product_1.Product) {
                    second = [...other.factors];
                }
                else {
                    second = [other];
                }
                const claim = { n: p.without(factor), n1: (0, ConvenientExpressions_1.fraction)((0, ConvenientExpressions_1.productOrNot)(...second), factor), r: Relationship_1.Relationship.Equal };
                out.push(new Argument_1.Argument(new Set([p, other]), claim, "a=b & c=d => a/c = b/d"));
            });
        });
        return out;
    }
}
exports.DivideOnBothSides = DivideOnBothSides;
/**
 * Gets the anti-reflexive closure of the relation A x A.
 * It's symmetric and transitive.
 *
 * @param set
 */
function cartesianProduct(set) {
    const out = [];
    for (const first of set) {
        for (const second of set) {
            if (first === second)
                continue;
            out.push([first, second]);
        }
    }
    return out;
}


/***/ }),

/***/ "./src/mathlib/derivations/algebra/SubtractFromBothSides.ts":
/*!******************************************************************!*\
  !*** ./src/mathlib/derivations/algebra/SubtractFromBothSides.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SubtractFromBothSides = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const RelationalDerivationRule_1 = __webpack_require__(/*! ../RelationalDerivationRule */ "./src/mathlib/derivations/RelationalDerivationRule.ts");
class SubtractFromBothSides extends RelationalDerivationRule_1.RelationalDerivationRule {
    applyImpl(equation) {
        const out = [];
        const combinations = cartesianProduct(equation);
        // If one is addition, subtract from both sides
        // Here we filter so that only pairs where the first expression is
        // a sum are operated on. This works because combinations is symetric.
        // Now for each pair we only have to deal with the first exp being sum.
        combinations.filter(pair => {
            return pair[0] instanceof Sum_1.Sum;
        }).forEach(pair => {
            const s = pair[0];
            const other = pair[1];
            // Some Sums have multiple terms
            s.terms.filter(term => !(term instanceof Product_1.Product && term.isNegation))
                .forEach(term => {
                // If other is itself a sum, we will break it apart
                // into terms so that we can combine integer terms in the
                // final result and avoid
                // x + 2 + 2 = y + 2 => x + 2 = y + 2 - 2
                // Note: We only do this to integer terms, because that's
                // so obvious and couldn't possibly need to be explained further.
                // We don't do it to variable terms. The following is correct behavior:
                // x + a + a = y + a => x + a = y + a - a
                // TODO: This distinction is debatable. Why shouldn't the left hand
                // of the last deduction be x + a + a - a? By doing this, 
                // we produce a much more complicated and expensive graph. 
                let second;
                if (other instanceof Sum_1.Sum) {
                    second = [...other.terms];
                }
                else {
                    second = [other];
                }
                const claim = { n: s.without(term), n1: (0, ConvenientExpressions_1.sumIntuitive)(...second, (0, ConvenientExpressions_1.negative)(term)), r: Relationship_1.Relationship.Equal };
                out.push(new Argument_1.Argument(new Set([s, other]), claim, "a=b & c=d => a-c = b-d"));
            });
        });
        return out;
    }
}
exports.SubtractFromBothSides = SubtractFromBothSides;
/**
 * Gets the anti-reflexive closure of the relation A x A.
 * It's symmetric and transitive.
 *
 * @param set
 */
function cartesianProduct(set) {
    const out = [];
    for (const first of set) {
        for (const second of set) {
            if (first === second)
                continue;
            out.push([first, second]);
        }
    }
    return out;
}


/***/ }),

/***/ "./src/mathlib/derivations/calculus/BreakDerivativesOverAddition.ts":
/*!**************************************************************************!*\
  !*** ./src/mathlib/derivations/calculus/BreakDerivativesOverAddition.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BreakDerivativesOverAddition = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const Derivative_1 = __webpack_require__(/*! ../../expressions/Derivative */ "./src/mathlib/expressions/Derivative.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class BreakDerivativesOverAddition extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Derivative_1.Derivative
            && exp.exp instanceof Sum_1.Sum;
    }
    applyImpl(exp) {
        const d = exp;
        const sum = d.exp;
        const terms = [...sum.terms];
        const wrapped = terms.map(t => Derivative_1.Derivative.of(t, d.relativeTo));
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(d), {
            n: d,
            r: Relationship_1.Relationship.Equal,
            n1: Sum_1.Sum.of(wrapped),
        }, "Split derivative over addition"));
    }
}
exports.BreakDerivativesOverAddition = BreakDerivativesOverAddition;


/***/ }),

/***/ "./src/mathlib/derivations/calculus/PowerRule.ts":
/*!*******************************************************!*\
  !*** ./src/mathlib/derivations/calculus/PowerRule.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PowerRule = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Derivative_1 = __webpack_require__(/*! ../../expressions/Derivative */ "./src/mathlib/expressions/Derivative.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Derives using the power rule
 */
class PowerRule extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Derivative_1.Derivative
            && ((exp.exp instanceof Exponent_1.Exponent
                && exp.exp.base === exp.relativeTo
                && exp.exp.power.isConstant)
                || (exp.exp === exp.relativeTo));
    }
    /**
     * We know:
     * exp is a Derivative of an Exponent with a constant power
     * the exponent's base is the same as what the derivative is relative to
     */
    applyImpl(exp) {
        const d = exp;
        let exponent;
        if (d.exp instanceof Exponent_1.Exponent) {
            exponent = d.exp;
        }
        else {
            exponent = Exponent_1.Exponent.of(d.exp, (0, ConvenientExpressions_1.num)(1));
        }
        const result = (0, ConvenientExpressions_1.product)(exponent.power, Exponent_1.Exponent.of(exponent.base, (0, ConvenientExpressions_1.sumIntuitive)(exponent.power, (0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.num)(1)))));
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: result
        }, "Power rule"));
    }
}
exports.PowerRule = PowerRule;


/***/ }),

/***/ "./src/mathlib/derivations/calculus/ProductRule.ts":
/*!*********************************************************!*\
  !*** ./src/mathlib/derivations/calculus/ProductRule.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProductRule = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Derivative_1 = __webpack_require__(/*! ../../expressions/Derivative */ "./src/mathlib/expressions/Derivative.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Derivatives of products
 *
 * Only operates on derivatives of products where all factors are not constant.
 */
class ProductRule extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Derivative_1.Derivative
            && exp.exp instanceof Product_1.Product
            // Contains no constant factors
            && !exp.exp.factors.map(f => f.isConstant).reduce((a, b) => a || b);
        // Contains no derivatives TODO: Find a better solution to loop guarding
        //&& !exp.exp.factors.map<boolean>(f => f instanceof Derivative).reduce((a, b) => a || b)
    }
    applyImpl(exp) {
        const d = exp;
        const p = d.exp;
        const factors = p.factors;
        // For each factor, create a product containing its derivative and the other factors
        const terms = [];
        for (let i = 0; i < factors.length; i++) { // i is the factor to derivatize (what term we're on)
            const factorToDerivatize = factors[i];
            const pFactors = [];
            for (const factor of factors) { // a is the the factor we're on
                if (factor === factorToDerivatize)
                    pFactors.push(Derivative_1.Derivative.of(factor, d.relativeTo));
                else
                    pFactors.push(factor);
            }
            terms.push((0, ConvenientExpressions_1.product)(...pFactors));
        }
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(d), {
            n: d,
            r: Relationship_1.Relationship.Equal,
            n1: (0, ConvenientExpressions_1.sum)(...terms)
        }, "Product Rule"));
    }
}
exports.ProductRule = ProductRule;


/***/ }),

/***/ "./src/mathlib/derivations/calculus/PullConstantsFromDerivatives.ts":
/*!**************************************************************************!*\
  !*** ./src/mathlib/derivations/calculus/PullConstantsFromDerivatives.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PullConstantsFromDerivatives = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Derivative_1 = __webpack_require__(/*! ../../expressions/Derivative */ "./src/mathlib/expressions/Derivative.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class PullConstantsFromDerivatives extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Derivative_1.Derivative
            && exp.exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const d = exp;
        const p = d.exp;
        const constFactors = p.factors.filter(f => f.isConstant);
        const out = new Set;
        for (const factor of constFactors) {
            out.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(d), {
                n: d,
                r: Relationship_1.Relationship.Equal,
                n1: (0, ConvenientExpressions_1.productAndNotTimesOne)(factor, Derivative_1.Derivative.of((0, ConvenientExpressions_1.productOrNot)(...(0, ConvenientExpressions_1.removeNew)(p.factors, factor)), d.relativeTo))
            }, "Pull constant factor from derivative"));
        }
        return out;
    }
}
exports.PullConstantsFromDerivatives = PullConstantsFromDerivatives;


/***/ }),

/***/ "./src/mathlib/derivations/calculus/QuotientRule.ts":
/*!**********************************************************!*\
  !*** ./src/mathlib/derivations/calculus/QuotientRule.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QuotientRule = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Derivative_1 = __webpack_require__(/*! ../../expressions/Derivative */ "./src/mathlib/expressions/Derivative.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Fraction_1 = __webpack_require__(/*! ../../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class QuotientRule extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Derivative_1.Derivative
            && exp.exp instanceof Fraction_1.Fraction;
    }
    applyImpl(exp) {
        const d = exp;
        const a = d.exp.numerator;
        const b = d.exp.denominator;
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Fraction_1.Fraction.of((0, ConvenientExpressions_1.sum)((0, ConvenientExpressions_1.product)(Derivative_1.Derivative.of(a, d.relativeTo), b), (0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.product)(a, Derivative_1.Derivative.of(b, d.relativeTo)))), Exponent_1.Exponent.of(b, (0, ConvenientExpressions_1.num)(2)))
        }, "Quotient Rule"));
    }
}
exports.QuotientRule = QuotientRule;


/***/ }),

/***/ "./src/mathlib/derivations/calculus/USubstitution.ts":
/*!***********************************************************!*\
  !*** ./src/mathlib/derivations/calculus/USubstitution.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.USubstitution = void 0;
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class USubstitution extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return false; //exp instanceof Integral
    }
    applyImpl(exp) {
        throw new Error("Not implemented");
    }
}
exports.USubstitution = USubstitution;


/***/ }),

/***/ "./src/mathlib/derivations/recursion.ts":
/*!**********************************************!*\
  !*** ./src/mathlib/derivations/recursion.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.equiv = void 0;
const Argument_1 = __webpack_require__(/*! ../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Derivative_1 = __webpack_require__(/*! ../expressions/Derivative */ "./src/mathlib/expressions/Derivative.ts");
const Exponent_1 = __webpack_require__(/*! ../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Fraction_1 = __webpack_require__(/*! ../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Integer_1 = __webpack_require__(/*! ../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Integral_1 = __webpack_require__(/*! ../expressions/Integral */ "./src/mathlib/expressions/Integral.ts");
const Logarithm_1 = __webpack_require__(/*! ../expressions/Logarithm */ "./src/mathlib/expressions/Logarithm.ts");
const Product_1 = __webpack_require__(/*! ../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Variable_1 = __webpack_require__(/*! ../expressions/Variable */ "./src/mathlib/expressions/Variable.ts");
const Relationship_1 = __webpack_require__(/*! ../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
/**
 * Searches for equivalents of the given
 * expression with a search depth of 1.
 * It does this by reflecting the expression's
 * type, then disbatching to a type specific equivalents
 * function.
 *
 * The specific functions use the given directEquivalents
 * function to swap out the component values of their
 * expression with equivalents.
 *
 * Ex)
 *  Given the expression
 *         (a + a) + (b * b)
 *  we disbatch to the sum specific function (because
 *  the outer most operation is addition). This disbatch
 *  function uses the directEquivalents function to swap out
 *  each of the sum's terms individually, yielding results
 *  like:
 *      -> (2a) + (b * b) with inference a + a = 2a
 *      -> (a + a) + b^2
 *
 * @param exp The expression to search for equivalents.
 * @param directEquivalents Function that takes expressions and finds equivalents.
 *              This function only needs to look for top level equivalents- recursion
 *              is handled by the equiv function.
 * @returns Array of arguments connecting the given expression to equivalents.
 */
function equiv(exp, directEquivalents) {
    if (exp instanceof Variable_1.Variable || exp instanceof Integer_1.Integer)
        return [];
    else
        switch (exp.class) {
            case Sum_1.SumType: return sumEquiv(exp, directEquivalents);
            case Product_1.ProductType: return productEquiv(exp, directEquivalents);
            case Exponent_1.ExponentType: return exponentEquiv(exp, directEquivalents);
            case Fraction_1.FractionType: return fractionEquiv(exp, directEquivalents);
            case Derivative_1.DerivativeType: return derivativeEquiv(exp, directEquivalents);
            case Logarithm_1.LogType: return logarithmEquiv(exp, directEquivalents);
            case Integral_1.IntegralType: return integralEquiv(exp, directEquivalents);
            default: throw new Error("Not implemented for " + exp.class);
        }
}
exports.equiv = equiv;
/**
 * Gets all equivalents of the given expression
 * by swapping out it's children individually.
 *
 * (a + a) + (b + b)
 * -> (2a) + (b + b) with inference a + a = 2a
 * @param exp
 * @returns Array of inferences to equivalent expressions.
 */
function sumEquiv(exp, directEquivalents) {
    const equivalentSums = new Set();
    // Add top level equivalents
    directEquivalents(exp).forEach(inf => {
        equivalentSums.add(inf);
    });
    // Find equivalents for each term
    for (let i = 0; i < exp.terms.length; i++) {
        const term = exp.terms[i];
        // Substitute term for each equivalent
        equiv(term, directEquivalents).forEach(a => {
            equivalentSums.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
                n: exp,
                r: Relationship_1.Relationship.Equal,
                n1: swap(exp, i, a.claim.n1)
            }, a.argument));
        });
    }
    function swap(s, i, e) {
        const terms = [...s.terms];
        terms[i] = e;
        return (0, ConvenientExpressions_1.sum)(...terms);
    }
    return [...equivalentSums];
}
function productEquiv(exp, directEquivalents) {
    const equivalentProducts = new Set();
    // Add top level equivalents
    directEquivalents(exp).forEach(inf => {
        equivalentProducts.add(inf);
    });
    // Find equivalents for each term
    for (let i = 0; i < exp.factors.length; i++) {
        const factor = exp.factors[i];
        // Substitute term for each equivalent
        equiv(factor, directEquivalents).forEach(alt => {
            equivalentProducts.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
                n: exp,
                r: Relationship_1.Relationship.Equal,
                n1: swap(exp, i, alt.claim.n1),
            }, alt.argument));
        });
    }
    function swap(s, i, e) {
        const terms = [...s.factors];
        terms[i] = e;
        return (0, ConvenientExpressions_1.product)(...terms);
    }
    return [...equivalentProducts];
}
function exponentEquiv(exp, directEquivalents) {
    const equivalents = new Set();
    // Add top level equivalents
    directEquivalents(exp).forEach(inf => {
        equivalents.add(inf);
    });
    equiv(exp.base, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Exponent_1.Exponent.of(alt.claim.n1, exp.power)
        }, alt.argument));
    });
    equiv(exp.power, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Exponent_1.Exponent.of(exp.base, alt.claim.n1),
        }, alt.argument));
    });
    return [...equivalents];
}
function fractionEquiv(exp, directEquivalents) {
    const equivalents = new Set();
    // Add top level equivalents
    directEquivalents(exp).forEach(inf => {
        equivalents.add(inf);
    });
    equiv(exp.numerator, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Fraction_1.Fraction.of(alt.claim.n1, exp.denominator)
        }, alt.argument));
    });
    equiv(exp.denominator, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Fraction_1.Fraction.of(exp.numerator, alt.claim.n1),
        }, alt.argument));
    });
    return [...equivalents];
}
function derivativeEquiv(exp, directEquivalents) {
    const equivalents = new Set();
    // Add top level equivalents
    directEquivalents(exp).forEach(inf => {
        equivalents.add(inf);
    });
    equiv(exp.exp, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Derivative_1.Derivative.of(alt.claim.n1, exp.relativeTo)
        }, alt.argument));
    });
    equiv(exp.relativeTo, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Derivative_1.Derivative.of(exp.exp, alt.claim.n1),
        }, alt.argument));
    });
    return [...equivalents];
}
function logarithmEquiv(exp, directEquivalents) {
    const equivalents = new Set();
    // Add top level equivalents
    directEquivalents(exp).forEach(arg => {
        equivalents.add(arg);
    });
    equiv(exp.exp, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Logarithm_1.Logarithm.of(alt.claim.n1, exp.base)
        }, alt.argument));
    });
    equiv(exp.base, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Logarithm_1.Logarithm.of(exp.exp, alt.claim.n1),
        }, alt.argument));
    });
    return [...equivalents];
}
function integralEquiv(exp, directEquivalents) {
    const equivalents = new Set();
    // Add top level equivalents
    directEquivalents(exp).forEach(arg => {
        equivalents.add(arg);
    });
    equiv(exp.integrand, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Integral_1.Integral.of(alt.claim.n1, exp.relativeTo)
        }, alt.argument));
    });
    equiv(exp.relativeTo, directEquivalents).forEach(alt => {
        equivalents.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Integral_1.Integral.of(exp.integrand, alt.claim.n1),
        }, alt.argument));
    });
    return [...equivalents];
}


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/AdditiveIdentity.ts":
/*!*********************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/AdditiveIdentity.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdditiveIdentity = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Anything plus 0 is anything
 */
class AdditiveIdentity extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Sum_1.Sum;
    }
    applyImpl(exp) {
        const termsWithoutZero = exp.terms.filter(t => !(t instanceof Integer_1.Integer && t.value == 0));
        if (termsWithoutZero.length == exp.terms.length)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: (0, ConvenientExpressions_1.sumOrNot)(...termsWithoutZero)
        }, "Additive identity"));
    }
}
exports.AdditiveIdentity = AdditiveIdentity;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/AnythingTimesZero.ts":
/*!**********************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/AnythingTimesZero.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnythingTimesZero = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class AnythingTimesZero extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const product = exp;
        let isZero = false;
        for (const factor of product.factors)
            if (factor instanceof Integer_1.Integer && factor.value === 0) {
                isZero = true;
                break;
            }
        if (!isZero)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Integer_1.Integer.of(0)
        }, "Anything times zero is zero"));
    }
}
exports.AnythingTimesZero = AnythingTimesZero;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/AssociativePropertyOfProductsAndSums.ts":
/*!*****************************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/AssociativePropertyOfProductsAndSums.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssociativePropertyOfProductsAndSums = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Flattens products in products and sums in sums.
 *
 * Only returns one simplification of an input.
 */
class AssociativePropertyOfProductsAndSums extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Sum_1.Sum || exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        if (exp instanceof Sum_1.Sum) {
            const newTerms = exp.terms.map(t => {
                if (t instanceof Sum_1.Sum) {
                    return [...t.terms];
                }
                return [t];
            }).flat();
            if (newTerms.length == exp.terms.length)
                return new Set();
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
                n: exp,
                r: Relationship_1.Relationship.Equal,
                n1: (0, ConvenientExpressions_1.sum)(...newTerms)
            }, "Associative property of addition"));
        }
        else {
            const newFactors = exp.factors.map(t => {
                if (t instanceof Product_1.Product) {
                    return [...t.factors];
                }
                return [t];
            }).flat();
            if (newFactors.length == exp.factors.length)
                return new Set();
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
                n: exp,
                r: Relationship_1.Relationship.Equal,
                n1: (0, ConvenientExpressions_1.product)(...newFactors)
            }, "Associative property of multiplication"));
        }
    }
}
exports.AssociativePropertyOfProductsAndSums = AssociativePropertyOfProductsAndSums;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/CancelNegatives.ts":
/*!********************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/CancelNegatives.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancelNegatives = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
const ConvenientExpressions_2 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
/**
 * Makes sure a product doesn't contain any negations.
 * The product is either a negation or not.
 */
class CancelNegatives extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const product = exp;
        const negatedFactors = [];
        const others = [];
        for (const f of product.factors) {
            if (f instanceof Product_1.Product && f.isNegation) {
                negatedFactors.push(f.negation);
            }
            else {
                others.push(f);
            }
        }
        const isNegation = product.isNegation;
        const negations = negatedFactors.length + (isNegation ? 1 : 0);
        if (negations < 2)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        const resultIsNegative = negations % 2 == 1;
        const result = (0, ConvenientExpressions_2.product)(...negatedFactors, ...others);
        const negatedResult = resultIsNegative ? (0, ConvenientExpressions_1.negative)(result) : result;
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: negatedResult
        }, "Cancel negatives"));
    }
}
exports.CancelNegatives = CancelNegatives;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/CombineCommonFactorsMultiplication.ts":
/*!***************************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/CombineCommonFactorsMultiplication.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CombineCommonFactorsMultiplication = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Combines like factors and exponents with like bases.
 */
class CombineCommonFactorsMultiplication extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product
            && !exp.isReducible;
    }
    applyImpl(exp) {
        const product = exp;
        // Find all the bases/factors in the product
        const bases = new Set();
        for (const factor of product.factors) {
            if (factor instanceof Exponent_1.Exponent)
                bases.add(factor.base);
            else
                bases.add(factor);
        }
        const equivalentExpressions = new Set();
        // For every unique factor
        for (const base of bases) {
            let powerTerms = [];
            const remainingFactors = [];
            // Count the number of times it occurs in the product
            // Collect the other factors in a list
            for (const f of product.factors) {
                if (f instanceof Exponent_1.Exponent && f.base === base) {
                    powerTerms.push(f.power);
                }
                else if (f === base) {
                    powerTerms.push((0, ConvenientExpressions_1.num)(1));
                }
                else {
                    remainingFactors.push(f);
                }
            }
            // Order the power terms correctly
            powerTerms = (0, Sum_1.orderTerms)(...powerTerms);
            // If the base only occured once, nothing to simplify
            if (powerTerms.length == 1)
                continue;
            // Create a new exponent that combines the terms
            const exponent = Exponent_1.Exponent.of(base, (0, ConvenientExpressions_1.sum)(...powerTerms));
            // If there are no other factors, we're done
            if (remainingFactors.length == 0) {
                equivalentExpressions.add(exponent);
                continue;
            }
            // Insert the new exponent at the correct place in the new product
            function insertCorrectly(arr, el) {
                // Pick index
                let index = 0;
                for (let i = 0; i < arr.length; i++) {
                    if ((0, Product_1.factorOrder)(el, arr[i]) > 0) {
                        index = i + 1;
                        break;
                    }
                }
                arr.splice(index, 0, el);
            }
            insertCorrectly(remainingFactors, exponent);
            equivalentExpressions.add(Product_1.Product.of(remainingFactors));
        }
        // Make arguments for each equivalent expression
        const args = new Set();
        equivalentExpressions.forEach(e => {
            args.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(product), {
                n: product,
                r: Relationship_1.Relationship.Equal,
                n1: e,
            }, "Combine common factors multiplication"));
        });
        return args;
    }
}
exports.CombineCommonFactorsMultiplication = CombineCommonFactorsMultiplication;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/CombineCommonTermsAddition.ts":
/*!*******************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/CombineCommonTermsAddition.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CombineCommonTermsAddition = void 0;
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
/**
 * a + a = 2a
 * 2a - a = a  (this means we have to check for negations)
 *
 * (bc)a + 7a = (7 + bc)a
 *
 * But not
 * 1 + 1 = 2(1)
 */
class CombineCommonTermsAddition extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Sum_1.Sum
            && !exp.isReducible;
    }
    applyImpl(exp) {
        const sum = exp;
        const args = new Set();
        const uniqueFactors = new Set();
        // Find all unique factors in all terms
        // Assume products have been flattened already (associative property)
        for (const term of sum.terms) {
            if (term instanceof Product_1.Product) {
                (0, ThingsThatShouldBeInTheStdLib_1.addAll)(uniqueFactors, ...term.factors);
                //TODO: Capture all combinations of factors
                //TODO: Capture integer factors
            }
            else
                uniqueFactors.add(term);
        }
        // Create an argument for pulling out each factor
        for (const factor of uniqueFactors) {
            if (factor.isReducibleOrInt)
                continue;
            // Figure out which terms contain it
            const relaventTerms = [];
            const otherTerms = [];
            for (const term of sum.terms) {
                if (term instanceof Product_1.Product) {
                    if ((0, ThingsThatShouldBeInTheStdLib_1.has)(term.factors, factor))
                        relaventTerms.push(term);
                    else
                        otherTerms.push(term);
                }
                else {
                    if (term === factor)
                        relaventTerms.push(Product_1.Product.of([(0, ConvenientExpressions_1.num)(1), term]));
                    else
                        otherTerms.push(term);
                }
            }
            if (relaventTerms.length < 2)
                continue;
            // Pull it out of those terms
            const coefficients = [];
            for (const term of relaventTerms) {
                coefficients.push(term.without(factor));
            }
            const pulled = (0, ConvenientExpressions_1.sumOrNot)((0, ConvenientExpressions_1.orderedProduct)(Sum_1.Sum.of(coefficients), factor), ...otherTerms);
            args.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
                n: exp,
                r: Relationship_1.Relationship.Equal,
                n1: pulled
            }, "Combine like terms"));
        }
        return args;
    }
    get convergenceType() {
        return NoContextExpressionSimplificationRule_1.ConvergenceTarget.Factored;
    }
}
exports.CombineCommonTermsAddition = CombineCommonTermsAddition;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/CombineIntegerFactors.ts":
/*!**************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/CombineIntegerFactors.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CombineIntegerFactors = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Products with several integer terms are simplified to only include 1
 */
class CombineIntegerFactors extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product
            && !exp.isNegation;
    }
    applyImpl(exp) {
        const p = exp;
        const remainingFactors = [];
        let coefficient = 1;
        for (const f of p.factors) {
            if (f instanceof Integer_1.Integer) {
                coefficient *= f.value;
            }
            else
                remainingFactors.push(f);
        }
        if (p.factors.length - remainingFactors.length < 2)
            return new Set();
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: (0, ConvenientExpressions_1.productOrNot)((0, ConvenientExpressions_1.num)(coefficient), ...remainingFactors)
        }, "Multiply integer terms"));
    }
}
exports.CombineIntegerFactors = CombineIntegerFactors;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/CombineProductsAndFractions.ts":
/*!********************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/CombineProductsAndFractions.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CombineProductsAndFractions = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Fraction_1 = __webpack_require__(/*! ../../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const assert_1 = __webpack_require__(/*! ../../util/assert */ "./src/mathlib/util/assert.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Simplifies products containing fractions by moving the
 * parts of the product into the numerator of the first fraction.
 */
class CombineProductsAndFractions extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const product = exp;
        // All products have at least 2 factors
        const firstFraction = product.factors.filter(f => f instanceof Fraction_1.Fraction)[0];
        if (firstFraction === undefined)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        // At least one of those is a fraction
        const nonFractionFactors = product.factors.filter(f => !(f instanceof Fraction_1.Fraction));
        if (nonFractionFactors.length == 0)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        // At least one of those is not a fraction
        let result;
        // Fraction and non-fraction factors partition the set of factors
        if (product.factors.length - nonFractionFactors.length == 1) {
            // There is exactly one fraction factor
            // All the factors will be combined into one factor
            result = Fraction_1.Fraction.of((0, ConvenientExpressions_1.product)(firstFraction.numerator, ...nonFractionFactors), firstFraction.denominator);
        }
        else {
            // There are multiple fractions
            const remainingFractionFactors = product.factors.filter(f => f instanceof Fraction_1.Fraction);
            (0, ConvenientExpressions_1.remove)(remainingFractionFactors, firstFraction);
            (0, assert_1.assert)(remainingFractionFactors.length > 0);
            result = (0, ConvenientExpressions_1.product)(Fraction_1.Fraction.of((0, ConvenientExpressions_1.productAndNotTimesOne)(firstFraction.numerator, ...nonFractionFactors), firstFraction.denominator), ...remainingFractionFactors);
        }
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: result
        }, "Combine products into fraction"));
    }
}
exports.CombineProductsAndFractions = CombineProductsAndFractions;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/DistributiveProperty.ts":
/*!*************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/DistributiveProperty.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DistributiveProperty = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Distributes multiplication over addition.
 *
 * a(b+c) = ab + ac
 */
class DistributiveProperty extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const product = exp;
        const nonSums = product.factors.filter(f => !(f instanceof Sum_1.Sum));
        if (nonSums.length == 0)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        // There is at least one non-sum factor
        const firstSum = product.factors.filter(f => f instanceof Sum_1.Sum)[0];
        if (firstSum == undefined)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        // There is at least one sum
        const remainingSums = product.factors.filter(f => f instanceof Sum_1.Sum);
        (0, ConvenientExpressions_1.remove)(remainingSums, firstSum);
        const toDistribute = (0, ConvenientExpressions_1.productOrNot)(...nonSums);
        const distributed = (0, ConvenientExpressions_1.sum)(...firstSum.terms.map(t => (0, ConvenientExpressions_1.product)(toDistribute, t)));
        const result = (0, ConvenientExpressions_1.productOrNot)(distributed, ...remainingSums);
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: result
        }, `Distribute ${(0, ConvenientExpressions_1.productOrNot)(...nonSums).toUnambigiousString()}`));
    }
    get convergenceType() {
        return NoContextExpressionSimplificationRule_1.ConvergenceTarget.Polynomial;
    }
}
exports.DistributiveProperty = DistributiveProperty;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/DivideFractions.ts":
/*!********************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/DivideFractions.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DivideFractions = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Fraction_1 = __webpack_require__(/*! ../../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class DivideFractions extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Fraction_1.Fraction
            && exp.numerator instanceof Product_1.Product
            && exp.denominator instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const frac = exp;
        const num = frac.numerator;
        const den = frac.denominator;
        // Take the factors of the negation of any negations
        const numFactors = num.isNegation ?
            num.negation instanceof Product_1.Product ?
                num.negation.factors // Get factors if the negation is a product
                : [num.negation] // If negation isn't a product, return the negation as a list of 1
            : num.factors; // If not a negation, return the factors
        const denFactors = !den.isNegation ? den.factors
            : den.negation instanceof Product_1.Product ?
                den.negation.factors
                : [den.negation];
        // If there are any repeats, give up
        if (new Set(numFactors).size < numFactors.length)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        if (new Set(denFactors).size < denFactors.length)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        // Treat every factor as an exponent
        const numExponents = numFactors.map(f => {
            if (f instanceof Exponent_1.Exponent)
                return f;
            else
                return Exponent_1.Exponent.of(f, (0, ConvenientExpressions_1.num)(1));
        });
        const denExponents = denFactors.map(f => {
            if (f instanceof Exponent_1.Exponent)
                return f;
            else
                return Exponent_1.Exponent.of(f, (0, ConvenientExpressions_1.num)(1));
        });
        // For each den exponent base, create an overall sum of the powers
        const numExponentPowers = new Map();
        numExponents.forEach(exponent => {
            if (!numExponentPowers.has(exponent.base))
                numExponentPowers.set(exponent.base, []);
            numExponentPowers.get(exponent.base).push(exponent.power);
        });
        const denExponentPowers = new Map();
        denExponents.forEach(exponent => {
            if (!denExponentPowers.has(exponent.base))
                denExponentPowers.set(exponent.base, []);
            denExponentPowers.get(exponent.base).push(exponent.power);
        });
        // Any base which is in the numerator and denominator
        // will only be in the numerator
        const newNumExponentPowers = new Map(numExponentPowers);
        const newDenExponentPowers = new Map(denExponentPowers);
        denExponentPowers.forEach((powers, base) => {
            if (numExponentPowers.has(base)) {
                newNumExponentPowers.get(base).push((0, ConvenientExpressions_1.negative)((0, ConvenientExpressions_1.sumOrNot)(...powers)));
                newDenExponentPowers.delete(base);
            }
        });
        // Get the new factors for the numerator and denominator
        const newNumExponents = [];
        newNumExponentPowers.forEach((powers, base) => {
            newNumExponents.push(Exponent_1.Exponent.of(base, (0, ConvenientExpressions_1.sumOrNot)(...powers)));
        });
        const newDenExponents = [];
        newDenExponentPowers.forEach((powers, base) => {
            newDenExponents.push(Exponent_1.Exponent.of(base, (0, ConvenientExpressions_1.sumOrNot)(...powers)));
        });
        const top = (0, ConvenientExpressions_1.productOrNot)(...newNumExponents);
        const bottom = newDenExponents.length != 0 ? (0, ConvenientExpressions_1.productOrNot)(...newDenExponents) : (0, ConvenientExpressions_1.num)(1);
        // Preserve the negations removed earlier
        const result = Fraction_1.Fraction.of(num.isNegation ? (0, ConvenientExpressions_1.negative)(top) : top, den.isNegation ? (0, ConvenientExpressions_1.negative)(bottom) : bottom);
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: result
        }, "Cancel out fractions"));
    }
}
exports.DivideFractions = DivideFractions;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/DivisionIdentity.ts":
/*!*********************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/DivisionIdentity.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DivisionIdentity = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const Fraction_1 = __webpack_require__(/*! ../../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Anything divided by 1 is the numerator
 */
class DivisionIdentity extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Fraction_1.Fraction
            && exp.denominator instanceof Integer_1.Integer
            && exp.denominator.value == 1;
    }
    applyImpl(exp) {
        const frac = exp;
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(frac), {
            n: frac,
            r: Relationship_1.Relationship.Equal,
            n1: frac.numerator,
        }, "Division identity is 1"));
    }
}
exports.DivisionIdentity = DivisionIdentity;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/EvaluateSums.ts":
/*!*****************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/EvaluateSums.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EvaluateSums = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Combine any integer terms in Sums.
 * a + 2 + 2 + 2= a + 4
 * 2 - 2 = 0
 *
 * Combines all of them at once no matter how many terms there are.
 *
 */
class EvaluateSums extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Sum_1.Sum;
    }
    applyImpl(exp) {
        const sum = exp;
        const integerTerms = [...sum.terms].filter(t => t instanceof Integer_1.Integer || (t instanceof Product_1.Product && t.isNegation && t.negation instanceof Integer_1.Integer));
        if (integerTerms.length < 2) {
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        }
        const newInt = Integer_1.Integer.of(integerTerms.map(e => {
            if (e instanceof Integer_1.Integer) {
                return e.value;
            }
            return -e.negation.value;
        }).reduce((a, b) => a + b));
        const otherTerms = [...sum.terms].filter(t => !(t instanceof Integer_1.Integer) && !(t instanceof Product_1.Product && t.isNegation && t.negation instanceof Integer_1.Integer));
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(sum), {
            n: sum,
            r: Relationship_1.Relationship.Equal,
            n1: (0, ConvenientExpressions_1.sumOrNot)(...otherTerms, newInt)
        }, "Evaluated Addition"));
    }
}
exports.EvaluateSums = EvaluateSums;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/ExponentToZero.ts":
/*!*******************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/ExponentToZero.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExponentToZero = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class ExponentToZero extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Exponent_1.Exponent
            && exp.power instanceof Integer_1.Integer
            && exp.power.value == 0;
    }
    applyImpl(exp) {
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: (0, ConvenientExpressions_1.num)(1)
        }, "Anything to zero is zero"));
    }
}
exports.ExponentToZero = ExponentToZero;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/ExponentialIdentity.ts":
/*!************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/ExponentialIdentity.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExponentialIdentity = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Anything to the first is just that thing.
 * Turns any exponent with a power of 1 to that thing.
 */
class ExponentialIdentity extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Exponent_1.Exponent
            && exp.power instanceof Integer_1.Integer
            && exp.power.value == 1;
    }
    applyImpl(exp) {
        const e = exp;
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(e), {
            n: e,
            r: Relationship_1.Relationship.Equal,
            n1: e.base,
        }, "Exponential Identity is 1"));
    }
}
exports.ExponentialIdentity = ExponentialIdentity;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/FOIL.ts":
/*!*********************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/FOIL.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FOIL = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
/**
 * (a + b)(c + d) = ac + ad + bc + bd
 */
class FOIL extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const product = exp;
        const sums = product.factors.filter(f => f instanceof Sum_1.Sum);
        if (sums.length < 2)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        const nonSums = product.factors.filter(f => !(f instanceof Sum_1.Sum));
        const first = sums[0];
        const second = sums[1];
        const foiled = first.terms.map(t => {
            const terms = [];
            for (const t1 of second.terms) {
                terms.push((0, ConvenientExpressions_1.product)(t, t1));
            }
            return terms;
        }).flat();
        sums.splice(0, 2);
        const result = (0, ConvenientExpressions_1.productOrNot)(...nonSums, (0, ConvenientExpressions_1.sum)(...foiled), ...sums);
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: result
        }, "Foil that shit"));
    }
    get convergenceType() {
        return NoContextExpressionSimplificationRule_1.ConvergenceTarget.Polynomial;
    }
}
exports.FOIL = FOIL;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/LogOfOne.ts":
/*!*************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/LogOfOne.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogOfOne = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Logarithm_1 = __webpack_require__(/*! ../../expressions/Logarithm */ "./src/mathlib/expressions/Logarithm.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class LogOfOne extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Logarithm_1.Logarithm
            && exp.exp instanceof Integer_1.Integer
            && exp.exp.value === 1;
    }
    applyImpl(exp) {
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: (0, ConvenientExpressions_1.num)(0)
        }, "Log in any base of 1 is 0"));
    }
}
exports.LogOfOne = LogOfOne;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/MultiplicativeIdentity.ts":
/*!***************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/MultiplicativeIdentity.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiplicativeIdentity = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * 1x = x
 * 1*1x = 1
 */
class MultiplicativeIdentity extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product
            && new Set(exp.factors).has((0, ConvenientExpressions_1.num)(1))
            && !exp.isNegation;
    }
    applyImpl(exp) {
        const p = exp;
        const newFactors = [];
        for (const factor of p.factors) {
            if (factor instanceof Integer_1.Integer && factor.value == 1)
                continue;
            newFactors.push(factor);
        }
        if (newFactors.length == 0)
            newFactors.push((0, ConvenientExpressions_1.num)(1));
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: (0, ConvenientExpressions_1.productOrNot)(...newFactors)
        }, "Multiplicative Identity"));
    }
}
exports.MultiplicativeIdentity = MultiplicativeIdentity;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/MultiplyExponentPowers.ts":
/*!***************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/MultiplyExponentPowers.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiplyExponentPowers = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class MultiplyExponentPowers extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Exponent_1.Exponent
            && exp.base instanceof Exponent_1.Exponent;
    }
    applyImpl(exp) {
        const outer = exp;
        const inner = outer.base;
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: Exponent_1.Exponent.of(inner.base, (0, ConvenientExpressions_1.product)(inner.power, outer.power))
        }, "Exponents to exponents multiply"));
    }
}
exports.MultiplyExponentPowers = MultiplyExponentPowers;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/OrderProducts.ts":
/*!******************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/OrderProducts.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrderProducts = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Reorders factors to follow convention.
 */
class OrderProducts extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Product_1.Product;
    }
    applyImpl(exp) {
        const p = exp;
        const result = (0, ConvenientExpressions_1.product)(...[...p.factors].sort(Product_1.factorOrder));
        if (result === p)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
            n: exp,
            r: Relationship_1.Relationship.Equal,
            n1: result
        }, "Reorder product factors to match math convention"));
    }
}
exports.OrderProducts = OrderProducts;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/OrderSums.ts":
/*!**************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/OrderSums.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrderSums = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Turns sums that are unhealthy because their term order
 * is wrong into correctly ordered sums.
 */
class OrderSums extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Sum_1.Sum && (0, ConvenientExpressions_1.orderedSum)(exp) !== exp;
    }
    applyImpl(exp) {
        return new Set([new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
                n: exp,
                r: Relationship_1.Relationship.Equal,
                n1: (0, ConvenientExpressions_1.orderedSum)(exp),
            }, "Reordered")]);
    }
}
exports.OrderSums = OrderSums;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/RemoveCommonFactorsOnTopAndBottomOfFraction.ts":
/*!************************************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/RemoveCommonFactorsOnTopAndBottomOfFraction.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveCommonFactorsFromTopAndBottomOfFraction = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Fraction_1 = __webpack_require__(/*! ../../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
class RemoveCommonFactorsFromTopAndBottomOfFraction extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Fraction_1.Fraction
            && !(exp.numerator instanceof Product_1.Product && exp.numerator.isNegation)
            && !(exp.denominator instanceof Product_1.Product && exp.denominator.isNegation);
    }
    applyImpl(exp) {
        const frac = exp;
        const top = frac.numerator;
        const bottom = frac.denominator;
        const allFactors = new Set();
        if (top instanceof Product_1.Product) {
            top.factors.forEach(f => allFactors.add(f));
        }
        else
            allFactors.add(top);
        if (bottom instanceof Product_1.Product) {
            bottom.factors.forEach(f => allFactors.add(f));
        }
        else
            allFactors.add(bottom);
        // Find factors that are in both top and bottom
        const inBoth = new Set();
        allFactors.forEach(f => {
            if ((top instanceof Product_1.Product ? (0, ThingsThatShouldBeInTheStdLib_1.has)(top.factors, f) : top === f)
                && (bottom instanceof Product_1.Product ? (0, ThingsThatShouldBeInTheStdLib_1.has)(bottom.factors, f) : bottom === f))
                inBoth.add(f);
        });
        if (inBoth.size == 0)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        // Return new fraction without those
        let newTop = top;
        inBoth.forEach(f => {
            if (newTop instanceof Product_1.Product) {
                newTop = newTop.without(f);
            }
            else {
                newTop = (0, ConvenientExpressions_1.num)(1);
            }
        });
        let newBottom = bottom;
        inBoth.forEach(f => {
            if (newBottom instanceof Product_1.Product) {
                newBottom = newBottom.without(f);
            }
            else {
                newBottom = (0, ConvenientExpressions_1.num)(1);
            }
        });
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(frac), {
            n: frac,
            r: Relationship_1.Relationship.Equal,
            n1: Fraction_1.Fraction.of(newTop, newBottom),
        }, "Divide top and bottom by same thing"));
    }
}
exports.RemoveCommonFactorsFromTopAndBottomOfFraction = RemoveCommonFactorsFromTopAndBottomOfFraction;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/SubtractExponentsOnFractions.ts":
/*!*********************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/SubtractExponentsOnFractions.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SubtractExponentsOnFractions = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Exponent_1 = __webpack_require__(/*! ../../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Fraction_1 = __webpack_require__(/*! ../../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * In all cases, any combined exponent factors will
 * be put in the numerator. It's hard to know if they
 * will evaluate to be negative or not, so we'll put
 * them all in the numerator and deal with that later.
 * TODO: Maybe we could iterate over the graph after it's
 *      done to go back and fix this? Maybe it's worth the 2^n
 *      added complexity to create nodes for every possible placement
 *      then just pathfind the easiest?
 */
class SubtractExponentsOnFractions extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Fraction_1.Fraction;
    }
    applyImpl(exp) {
        const frac = exp;
        const top = frac.numerator instanceof Product_1.Product ? frac.numerator.factors : [frac.numerator];
        const bottom = frac.denominator instanceof Product_1.Product ? frac.denominator.factors : [frac.denominator];
        // Treat every factor of top and bottom as an exponent
        function asExponent(f) {
            if (f instanceof Exponent_1.Exponent)
                return f;
            else
                return Exponent_1.Exponent.of(f, (0, ConvenientExpressions_1.num)(1));
        }
        const topExponents = top.map(asExponent);
        const bottomExponents = bottom.map(asExponent);
        // Find what bases are common
        const commonBases = new Set();
        topExponents.forEach(e => {
            if ((0, ThingsThatShouldBeInTheStdLib_1.has)(bottomExponents.map(e => e.base), e.base))
                commonBases.add(e.base);
        });
        bottomExponents.forEach(e => {
            if ((0, ThingsThatShouldBeInTheStdLib_1.has)(topExponents.map(e => e.base), e.base))
                commonBases.add(e.base);
        });
        if (commonBases.size == 0)
            return (0, ThingsThatShouldBeInTheStdLib_1.setOf)();
        // Separate factors which won't be effected
        const uneffectedTopFactors = top.filter(f => {
            if (f instanceof Exponent_1.Exponent)
                return !commonBases.has(f.base);
            return !commonBases.has(f);
        });
        const uneffectedBottomFactors = bottom.filter(f => {
            if (f instanceof Exponent_1.Exponent)
                return !commonBases.has(f.base);
            return !commonBases.has(f);
        });
        // Find all the terms for each base
        // Remember that the final exponent will be in the numerator
        const exponentTerms = new Map();
        topExponents.forEach(e => {
            if (!commonBases.has(e.base))
                return;
            if (!exponentTerms.has(e.base)) {
                exponentTerms.set(e.base, []);
            }
            exponentTerms.get(e.base).push(e.power);
        });
        bottomExponents.forEach(e => {
            if (!commonBases.has(e.base))
                return;
            if (!exponentTerms.has(e.base)) {
                exponentTerms.set(e.base, []);
            }
            // Negative bc we're putting these in the numerator
            exponentTerms.get(e.base).push((0, ConvenientExpressions_1.negative)(e.power));
        });
        const resultingTopExponents = [];
        exponentTerms.forEach((powerTerms, base) => {
            resultingTopExponents.push(Exponent_1.Exponent.of(base, (0, ConvenientExpressions_1.sum)(...powerTerms)));
        });
        if (uneffectedBottomFactors.length == 0)
            uneffectedBottomFactors.push((0, ConvenientExpressions_1.num)(1));
        return (0, ThingsThatShouldBeInTheStdLib_1.setOf)(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(frac), {
            n: frac,
            r: Relationship_1.Relationship.Equal,
            n1: Fraction_1.Fraction.of((0, ConvenientExpressions_1.productOrNot)(...resultingTopExponents, ...uneffectedTopFactors), (0, ConvenientExpressions_1.productOrNot)(...uneffectedBottomFactors)),
        }, "Sum exponents in both numerator and denominator"));
    }
}
exports.SubtractExponentsOnFractions = SubtractExponentsOnFractions;


/***/ }),

/***/ "./src/mathlib/derivations/simplifications/SumCoefficientsOfAddedTerms.ts":
/*!********************************************************************************!*\
  !*** ./src/mathlib/derivations/simplifications/SumCoefficientsOfAddedTerms.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SumCoefficientsOfAddedTerms = void 0;
const Argument_1 = __webpack_require__(/*! ../../Argument */ "./src/mathlib/Argument.ts");
const ConvenientExpressions_1 = __webpack_require__(/*! ../../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Integer_1 = __webpack_require__(/*! ../../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Product_1 = __webpack_require__(/*! ../../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Relationship_1 = __webpack_require__(/*! ../../Relationship */ "./src/mathlib/Relationship.ts");
const ThingsThatShouldBeInTheStdLib_1 = __webpack_require__(/*! ../../util/ThingsThatShouldBeInTheStdLib */ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts");
const NoContextExpressionSimplificationRule_1 = __webpack_require__(/*! ../NoContextExpressionSimplificationRule */ "./src/mathlib/derivations/NoContextExpressionSimplificationRule.ts");
/**
 * Takes sums of several added products and combines ones that only
 * have different coefficients.
 *
 * a + 2a = 3a
 * a - 2a = -1a
 */
class SumCoefficientsOfAddedTerms extends NoContextExpressionSimplificationRule_1.NoContextExpressionSimplificationRule {
    appliesImpl(exp) {
        return exp instanceof Sum_1.Sum;
    }
    applyImpl(exp) {
        const terms = exp.terms;
        // Split the terms into product and not products
        const productTerms = [];
        const nonProductTerms = [];
        for (const term of terms) {
            if (term instanceof Product_1.Product && term.factors[0] instanceof Integer_1.Integer) {
                productTerms.push(term);
            }
            else {
                nonProductTerms.push(term);
            }
        }
        // Sort the product terms into groups of common factors
        const groups = new Map();
        for (const term of productTerms) {
            const first = term.factors[0];
            const temp = [...term.factors];
            temp.splice(0, 1);
            const group = (0, ConvenientExpressions_1.productOrNot)(...temp);
            if (!groups.has(group))
                groups.set(group, { coefficient: first.value, moreThanOne: false });
            else {
                groups.get(group).coefficient += first.value;
                groups.get(group).moreThanOne = true;
            }
        }
        // For every group with more than one product, produce a new argument
        const out = new Set();
        groups.forEach((obj, group) => {
            if (!obj.moreThanOne)
                return;
            const productTermsNotCombined = productTerms.filter(t => {
                const temp = [...t.factors];
                temp.splice(0, 1);
                const termWithoutLeadingCoefficient = (0, ConvenientExpressions_1.productOrNot)(...temp);
                return group !== termWithoutLeadingCoefficient;
            });
            out.add(new Argument_1.Argument((0, ThingsThatShouldBeInTheStdLib_1.setOf)(exp), {
                n: exp,
                r: Relationship_1.Relationship.Equal,
                n1: (0, ConvenientExpressions_1.sumOrNot)((0, ConvenientExpressions_1.productAndNotTimesOne)((0, ConvenientExpressions_1.num)(obj.coefficient), group), ...nonProductTerms, ...productTermsNotCombined)
            }, "Combining like terms"));
        });
        return out;
    }
}
exports.SumCoefficientsOfAddedTerms = SumCoefficientsOfAddedTerms;


/***/ }),

/***/ "./src/mathlib/expressions/Derivative.ts":
/*!***********************************************!*\
  !*** ./src/mathlib/expressions/Derivative.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DerivativeType = exports.Derivative = void 0;
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
const Product_1 = __webpack_require__(/*! ./Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ./Sum */ "./src/mathlib/expressions/Sum.ts");
/**
 *
 */
class Derivative extends Expression_1.Expression {
    static of(exp, relativeTo) {
        const hash = exp.hash + relativeTo.hash;
        if (!this.instances.has(hash))
            this.instances.set(hash, new Derivative(exp, relativeTo));
        return this.instances.get(hash);
    }
    static instances = new Map();
    constructor(exp, relativeTo) {
        super();
        this.exp = exp;
        this.relativeTo = relativeTo;
        Object.freeze(this.exp);
        Object.freeze(this.relativeTo);
        this.isReducible = false; //TODO: Determine if a derivative is reducible
        this.isConstant = false; // TODO: Determine if a derivative is constant
        this.childCount = 2 + exp.childCount + relativeTo.childCount;
    }
    exp;
    relativeTo;
    isReducible;
    class = exports.DerivativeType;
    toString() {
        return "d/d" + this.relativeTo.toString() + "(" + this.exp.toString() + ")";
    }
    toUnambigiousString() {
        return "(d/d" + this.relativeTo.toUnambigiousString() + ")" + this.exp.toUnambigiousString();
    }
    get hash() {
        return this.class + this.exp.hash + this.relativeTo.hash;
    }
    toMathXML() {
        function wrapIfNeeded(exp) {
            if (exp.class == Sum_1.SumType || exp.class == Product_1.ProductType)
                return "<mo>(</mo>" + exp.toMathXML() + "<mo>)</mo>";
            return exp.toMathXML();
        }
        return "<mfrac><mn>d</mn><mrow><mn>d</mn>" + wrapIfNeeded(this.relativeTo) + "</mrow></mfrac>" + wrapIfNeeded(this.exp);
    }
    evaluate(values) {
        // Maybe later
        return NaN;
    }
    isConstant;
    childCount;
}
exports.Derivative = Derivative;
exports.DerivativeType = "Derivative";


/***/ }),

/***/ "./src/mathlib/expressions/Exponent.ts":
/*!*********************************************!*\
  !*** ./src/mathlib/expressions/Exponent.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExponentType = exports.Exponent = void 0;
const MathMLHelpers_1 = __webpack_require__(/*! ../util/MathMLHelpers */ "./src/mathlib/util/MathMLHelpers.ts");
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
const Fraction_1 = __webpack_require__(/*! ./Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Product_1 = __webpack_require__(/*! ./Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ./Sum */ "./src/mathlib/expressions/Sum.ts");
class Exponent extends Expression_1.Expression {
    static of(base, power) {
        const hash = base.hash + power.hash;
        if (!Exponent.instances.has(hash)) {
            Exponent.instances.set(hash, new Exponent(base, power));
        }
        return Exponent.instances.get(hash);
    }
    static instances = new Map();
    class = exports.ExponentType;
    toMathXML() {
        function wrapIfNeeded(exp) {
            if (exp.class == Sum_1.SumType || exp.class == Product_1.ProductType || exp.class == Fraction_1.FractionType)
                return (0, MathMLHelpers_1.inRow)((0, MathMLHelpers_1.inParen)(exp.toMathXML()));
            return exp.toMathXML();
        }
        return "<msup>" + wrapIfNeeded(this.base) + (0, MathMLHelpers_1.inRow)(this.power.toMathXML()) + "</msup>";
    }
    toString() {
        return "(" + this.base + ")^(" + this.power + ")";
    }
    toUnambigiousString() {
        return "(" + this.base + ")^(" + this.power + ")";
    }
    get hash() {
        return "Pow" + this.base.hash + this.power.hash;
    }
    evaluate(values) {
        return Math.pow(this.base.evaluate(values), this.power.evaluate(values));
    }
    constructor(base, power) {
        super();
        this.base = base;
        this.power = power;
        Object.freeze(this.base);
        Object.freeze(this.power);
        // The integers are closed over exponentiation
        this.isReducible = (base.isReducibleOrInt) && (power.isReducibleOrInt); // && Math.pow(base.reduced.value, power.reduced.value) % 1 == 0
        this.isConstant = base.isConstant && power.isConstant;
        this.childCount = 2 + base.childCount + power.childCount;
    }
    base;
    power;
    isReducible;
    isConstant;
    childCount;
}
exports.Exponent = Exponent;
exports.ExponentType = "Exponent";


/***/ }),

/***/ "./src/mathlib/expressions/Expression.ts":
/*!***********************************************!*\
  !*** ./src/mathlib/expressions/Expression.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Expression = void 0;
const MathGraphNode_1 = __webpack_require__(/*! ../MathGraphNode */ "./src/mathlib/MathGraphNode.ts");
const Integer_1 = __webpack_require__(/*! ./Integer */ "./src/mathlib/expressions/Integer.ts");
/**
 * Base of all mathematical expressions.
 * All children should implement fly-wheel pattern.
 * All children should be immutable.
 */
class Expression extends MathGraphNode_1.MathGraphNode {
    /**
     * True if the expression is reducible or is an integer.
     */
    get isReducibleOrInt() {
        return this.isReducible || this.class == Integer_1.IntegerType;
    }
}
exports.Expression = Expression;


/***/ }),

/***/ "./src/mathlib/expressions/Fraction.ts":
/*!*********************************************!*\
  !*** ./src/mathlib/expressions/Fraction.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FractionType = exports.Fraction = void 0;
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
class Fraction extends Expression_1.Expression {
    static of(numerator, denominator) {
        const hash = numerator.hash + denominator.hash;
        if (!this.instance.has(hash))
            this.instance.set(hash, new Fraction(numerator, denominator));
        return this.instance.get(hash);
    }
    static instance = new Map();
    constructor(num, denom) {
        super();
        this.numerator = num;
        this.denominator = denom;
        Object.freeze(this.numerator);
        Object.freeze(this.denominator);
        /*
        A fraction is reducible if the denom | num.
            <=> num = k * denom where k is an integer.

        This makes proving reducibility hard.
        TODO: Decide if it's worth implementing reducibility for Fractions
        */
        this.isReducible = false;
        this.isConstant = num.isConstant && denom.isConstant;
        this.childCount = 2 + num.childCount + denom.childCount;
    }
    numerator;
    denominator;
    isReducible;
    class = exports.FractionType;
    toString() {
        return this.numerator.toString() + " / " + this.denominator.toString();
    }
    toUnambigiousString() {
        return `(${this.numerator.toUnambigiousString()})/(${this.denominator.toUnambigiousString()})`;
    }
    get hash() {
        return exports.FractionType + this.numerator.hash + this.denominator.hash;
    }
    isConstant;
    toMathXML() {
        return "<mfrac><mrow>" + this.numerator.toMathXML() + "</mrow><mrow>" + this.denominator.toMathXML() + "</mrow></mfrac>";
    }
    evaluate(values) {
        return this.numerator.evaluate(values) / this.denominator.evaluate(values);
    }
    childCount;
}
exports.Fraction = Fraction;
exports.FractionType = "Fraction";


/***/ }),

/***/ "./src/mathlib/expressions/Integer.ts":
/*!********************************************!*\
  !*** ./src/mathlib/expressions/Integer.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntegerType = exports.Integer = void 0;
const assert_1 = __webpack_require__(/*! ../util/assert */ "./src/mathlib/util/assert.ts");
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
/**
 * Integer
 * Positive or negative
 */
class Integer extends Expression_1.Expression {
    static of(value) {
        if (!Integer.instances.has(value)) {
            Integer.instances.set(value, new Integer(value));
        }
        return Integer.instances.get(value);
    }
    static instances = new Map();
    constructor(value) {
        super();
        this.value = value;
        (0, assert_1.assert)(this.value % 1 == 0, "Creating non-integer integer " + this.value);
    }
    /**
     * @returns A positive version of this integer.
     */
    butPositive() {
        return Integer.of(Math.abs(this.value));
    }
    class = exports.IntegerType;
    toMathXML() {
        return "<mn>" + this.value + "</mn>";
    }
    toString() {
        return "" + this.value;
    }
    toUnambigiousString() {
        return "" + this.value;
    }
    get hash() {
        return "Int" + this.value;
    }
    evaluate(values) {
        return this.value;
    }
    value;
    isReducible = false;
    isConstant = true;
    childCount = 0;
}
exports.Integer = Integer;
exports.IntegerType = "Integer";


/***/ }),

/***/ "./src/mathlib/expressions/Integral.ts":
/*!*********************************************!*\
  !*** ./src/mathlib/expressions/Integral.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntegralType = exports.Integral = void 0;
const MathMLHelpers_1 = __webpack_require__(/*! ../util/MathMLHelpers */ "./src/mathlib/util/MathMLHelpers.ts");
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
const Product_1 = __webpack_require__(/*! ./Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ./Sum */ "./src/mathlib/expressions/Sum.ts");
/**
 * An indefinate integral (for now).
 * TODO: Should we separate definate/indefinate integrals?
 */
class Integral extends Expression_1.Expression {
    static of(integrand, relativeTo) {
        if (!this.instances.has(integrand.hash + relativeTo.hash))
            this.instances.set(integrand.hash + relativeTo.hash, new Integral(integrand, relativeTo));
        return this.instances.get(integrand.hash + relativeTo.hash);
    }
    static instances = new Map();
    constructor(integrand, relativeTo) {
        super();
        this.integrand = integrand;
        this.relativeTo = relativeTo;
        Object.freeze(this.integrand);
        Object.freeze(this.relativeTo);
        this.isReducible = false;
        this.isConstant = false;
        this.childCount = 2 + integrand.childCount + relativeTo.childCount;
    }
    integrand;
    relativeTo;
    isReducible;
    class = exports.IntegralType;
    toString() {
        return "∫" + this.integrand.toString();
    }
    toUnambigiousString() {
        return "∫(" + this.integrand.toUnambigiousString() + ")" + this.relativeTo.toUnambigiousString();
    }
    get hash() {
        return "∫" + this.integrand.toString() + this.relativeTo.toString();
    }
    isConstant;
    toMathXML() {
        function wrapIfNeeded(exp) {
            if (exp.class == Sum_1.SumType || exp.class == Product_1.ProductType)
                return (0, MathMLHelpers_1.inParen)(exp.toMathXML());
            return exp.toMathXML();
        }
        return "<mrow><mo>∫</mo>" + wrapIfNeeded(this.integrand) + "<mn>d</mn>" + wrapIfNeeded(this.relativeTo) + "</mrow>";
    }
    evaluate(values) {
        // Nah fuck this bro
        return NaN;
    }
    childCount;
}
exports.Integral = Integral;
exports.IntegralType = "Integral";


/***/ }),

/***/ "./src/mathlib/expressions/Logarithm.ts":
/*!**********************************************!*\
  !*** ./src/mathlib/expressions/Logarithm.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogType = exports.Logarithm = void 0;
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
class Logarithm extends Expression_1.Expression {
    static of(exp, base) {
        const hash = exp.hash + base.hash;
        if (!this.instances.has(hash))
            this.instances.set(hash, new Logarithm(exp, base));
        return this.instances.get(hash);
    }
    static instances = new Map();
    constructor(exp, base) {
        super();
        this.exp = exp;
        this.base = base;
        Object.freeze(this.exp);
        Object.freeze(this.base);
        this.isReducible = false; //TODO: Determine if a logarithm is reducible
        this.isConstant = exp.isConstant && base.isConstant;
        this.childCount = 2 + exp.childCount + base.childCount;
    }
    toMathXML() {
        return `<mrow>
            <msub><mtext>log</mtext>${this.base.toMathXML()}</msub>
            <mrow>${this.exp.toMathXML()}</mrow>
        </row>`;
    }
    isReducible;
    class = exports.LogType;
    toString() {
        return `log${this.base.toString()}(${this.exp.toString()})`;
    }
    toUnambigiousString() {
        return `log(${this.base.toUnambigiousString()})(${this.exp.toUnambigiousString()})`;
    }
    get hash() {
        throw new Error("Method not implemented.");
    }
    evaluate(values) {
        return Math.log(this.exp.evaluate(values)) / Math.log(this.base.evaluate(values));
    }
    isConstant;
    childCount;
    exp;
    base;
}
exports.Logarithm = Logarithm;
exports.LogType = "Logarithm";


/***/ }),

/***/ "./src/mathlib/expressions/Product.ts":
/*!********************************************!*\
  !*** ./src/mathlib/expressions/Product.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.factorOrder = exports.ProductType = exports.Product = void 0;
const assert_1 = __webpack_require__(/*! ../util/assert */ "./src/mathlib/util/assert.ts");
const Exponent_1 = __webpack_require__(/*! ./Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
const Integer_1 = __webpack_require__(/*! ./Integer */ "./src/mathlib/expressions/Integer.ts");
const Sum_1 = __webpack_require__(/*! ./Sum */ "./src/mathlib/expressions/Sum.ts");
const Variable_1 = __webpack_require__(/*! ./Variable */ "./src/mathlib/expressions/Variable.ts");
/**
 * A mathematical product with 2 or more factors.
 */
class Product extends Expression_1.Expression {
    /**
     * For efficiency, products are compared by reference.
     * Here we ensure === <=> ==
     * @param factors
     * @returns
     */
    static of(factors) {
        const hash = factors.map(e => e.hash).join("");
        if (!Product.instances.has(hash))
            Product.instances.set(hash, new Product(factors));
        return Product.instances.get(hash);
    }
    static instances = new Map();
    constructor(factors) {
        super();
        (0, assert_1.assert)(factors.length >= 2, "Creating product with less than 2 factors.");
        this.factors = factors;
        Object.freeze(this.factors);
        let reducible = true;
        this.factors.forEach(f => {
            reducible &&= f.isReducible || f.class == Integer_1.IntegerType;
        });
        // The integers are closed over multiplication
        this.isReducible = reducible;
        let healthy = true;
        healthy &&= this.numNegatives() < 2;
        let isNegation = factors.length == 2;
        isNegation &&= factors.filter(e => {
            return e instanceof Integer_1.Integer && e.value == -1;
        }).length == 1;
        this.isNegation = isNegation;
        this.isConstant = this.factors.map(f => f.isConstant).reduce((a, b) => a && b);
        this.childCount = factors.length + factors.map(f => f.childCount).reduce((a, b) => a + b) - (this.isNegation ? 1 : 0);
    }
    /**
     * True if this product is just
     * -1 * another expression.
     */
    isNegation;
    /**
     * Get the value that this product is negating
     * -1 * exp returns exp.
     * @throws if product isn't a negation.
     */
    get negation() {
        (0, assert_1.assert)(this.isNegation, "Trying to get negation from non-negating sum");
        if (this.factors[0].class == Integer_1.IntegerType && this.factors[0].value == -1)
            return this.factors[1];
        return this.factors[0];
    }
    /**
     * Returns a new Expression without the given factor.
     * If the product contains the factor multiple times,
     * only removes one. If it doesn't contain the factor,
     * returns itself.
     * @param exp A factor in this product.
     */
    without(exp) {
        const newFactors = [...this.factors];
        const index = newFactors.findIndex((value) => {
            return value === exp;
        });
        if (index == -1)
            return this;
        newFactors.splice(index, 1);
        if (newFactors.length < 2) {
            return newFactors[0]; // Gauranteed there's one term here
        }
        return Product.of(newFactors);
    }
    toMathXML() {
        let out = "";
        function wrapIfNeeded(exp) {
            if (exp.class == exports.ProductType || exp.class == Sum_1.SumType)
                return "<mo>(</mo>" + exp.toMathXML() + "<mo>)</mo>";
            return exp.toMathXML();
        }
        // Either this is a negation, or a list of products
        // First the negation case...
        if (this.isNegation) {
            out += "<mo>-</mo>";
            out += wrapIfNeeded(this.negation);
            return out;
        }
        // If it's a list of products...
        const firstFactor = this.factors[0];
        out += wrapIfNeeded(firstFactor);
        for (let i = 1; i < this.factors.length; i++) {
            let factor = this.factors[i];
            let needsDot = (factor.class == Integer_1.IntegerType && this.factors[i - 1].class == Integer_1.IntegerType)
                || (factor instanceof Product && factor.isNegation) // If there's a negative sign, get a dot
                || (factor instanceof Integer_1.Integer && factor.value < 1);
            if (needsDot)
                out += "<mo>·</mo>";
            out += wrapIfNeeded(factor);
        }
        return out;
    }
    /**
     * @returns Number of negative integer products.
     */
    numNegatives() {
        let count = 0;
        this.factors.forEach(f => {
            if (f instanceof Integer_1.Integer)
                if (f.value < 0)
                    count++;
        });
        return count;
    }
    toString() {
        let out = "";
        for (const exp of this.factors) {
            if (exp instanceof Product) {
                out += "(" + exp.toString() + ")";
            }
            else {
                out += exp.toString();
            }
            out += "·";
        }
        out = out.substring(0, out.length - 1);
        return out;
    }
    toUnambigiousString() {
        if (this.isNegation)
            return `-(${this.negation.toUnambigiousString()})`;
        let out = "";
        for (const exp of this.factors) {
            if (exp instanceof Product) {
                out += "(" + exp.toString() + ")";
            }
            else {
                out += exp.toString();
            }
            out += "·";
        }
        out = out.substring(0, out.length - 1);
        return out;
    }
    get hash() {
        return "Product" + this.factors.map(e => e.hash).join();
    }
    evaluate(values) {
        return this.factors.map(f => f.evaluate(values)).reduce((a, b) => a * b);
    }
    // At least 2 elements, order matters
    factors;
    class = exports.ProductType;
    isReducible;
    isConstant;
    childCount;
}
exports.Product = Product;
exports.ProductType = "Product";
/**
 * Can be used in array.sort() to get properly ordered products.
 *
 * @param a
 * @param b
 * @returns Positive if a should be after b
 */
function factorOrder(a, b) {
    if (a instanceof Integer_1.Integer && b instanceof Integer_1.Integer)
        return 0;
    if (a instanceof Integer_1.Integer) {
        return aFirst;
    }
    // Alphabetical
    const symbA = a instanceof Variable_1.Variable ? a.symbol
        : a instanceof Exponent_1.Exponent ?
            a.base instanceof Variable_1.Variable ? a.base.symbol : null : null;
    const symbB = b instanceof Variable_1.Variable ? b.symbol
        : b instanceof Exponent_1.Exponent ?
            b.base instanceof Variable_1.Variable ? b.base.symbol : null : null;
    if (symbA != null && symbB != null) {
        return symbA > symbB ? aFirst : aAfter;
    }
    return 0;
}
exports.factorOrder = factorOrder;
const aFirst = 1;
const aAfter = -1;


/***/ }),

/***/ "./src/mathlib/expressions/Sum.ts":
/*!****************************************!*\
  !*** ./src/mathlib/expressions/Sum.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.orderTerms = exports.SumType = exports.Sum = void 0;
const assert_1 = __webpack_require__(/*! ../util/assert */ "./src/mathlib/util/assert.ts");
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
const Integer_1 = __webpack_require__(/*! ./Integer */ "./src/mathlib/expressions/Integer.ts");
const Product_1 = __webpack_require__(/*! ./Product */ "./src/mathlib/expressions/Product.ts");
const Variable_1 = __webpack_require__(/*! ./Variable */ "./src/mathlib/expressions/Variable.ts");
/**
 * Expression representing the sum of 2 or more terms.
 */
class Sum extends Expression_1.Expression {
    /**
     * Factory method consntructor.
     * @param terms Contains at least 2 elements
     */
    static of(terms) {
        const hash = terms.map(t => t.hash).join("");
        if (!Sum.instances.has(hash)) {
            Sum.instances.set(hash, new Sum(terms));
        }
        return Sum.instances.get(hash);
    }
    static instances = new Map();
    constructor(terms) {
        super();
        (0, assert_1.assert)(terms.length >= 2, "Creating sum with less than 2 terms.");
        this.terms = terms;
        this.isReducible = this.terms.map(t => t.isReducible || t.class == Integer_1.IntegerType).reduce((a, b) => a && b);
        this.isConstant = this.terms.map(t => t.isConstant).reduce((a, b) => a && b);
        Object.freeze(this.terms);
        this.childCount = terms.length + terms.map(t => t.childCount).reduce((a, b) => a + b);
    }
    /**
     * Returns a new Expression without the given term.
     * If the sum contains the term multiple times,
     * only removes one. If it doesn't contain the term,
     * returns itself.
     * @param term A term in this sum.
     */
    without(term) {
        const newTerms = [...this.terms];
        const index = newTerms.findIndex((value) => {
            return value === term;
        });
        if (index == -1)
            return this;
        newTerms.splice(index, 1);
        if (newTerms.length < 2) {
            return newTerms[0]; // Gauranteed there's one term here
        }
        return Sum.of(newTerms);
    }
    toMathXML() {
        function wrapIfNeeded(exp) {
            if (exp.class == exports.SumType)
                return "<mo>(</mo>" + exp.toMathXML() + "<mo>)</mo>";
            return exp.toMathXML();
        }
        let out = wrapIfNeeded(this.terms[0]);
        for (let i = 1; i < this.terms.length; i++) {
            const term = this.terms[i];
            // Subtract negative terms instead of adding negatives
            if (term instanceof Product_1.Product && term.isNegation) {
                out += "<mo>-</mo>" + wrapIfNeeded(term.negation);
            }
            else if (term instanceof Integer_1.Integer && term.value < 0) {
                out += "<mo>-</mo>" + wrapIfNeeded(term.butPositive());
            }
            else {
                out += "<mo>+</mo>" + wrapIfNeeded(this.terms[i]);
            }
        }
        return out;
    }
    toString() {
        let out = "";
        for (const exp of this.terms) {
            out += exp.toString() + "+";
        }
        out = out.substring(0, out.length - 1);
        return out;
    }
    toUnambigiousString() {
        let out = "";
        for (const exp of this.terms) {
            out += "(" + exp.toUnambigiousString() + ")+";
        }
        out = out.substring(0, out.length - 1);
        return out;
    }
    get hash() {
        return "Sum" + this.terms.map(e => e.hash).join();
    }
    evaluate(values) {
        return this.terms.map(t => t.evaluate(values)).reduce((a, b) => a + b);
    }
    class = exports.SumType;
    /**
     * Ordered, immutable
     */
    terms;
    isReducible;
    isConstant;
    childCount;
}
exports.Sum = Sum;
exports.SumType = "Sum";
/**
 * Returns the given terms ordered correctly to
 * be placed in a Sum. Alters the given array.
 * @param terms
 */
function orderTerms(...terms) {
    // A note about the sort function bc the documentation is cryptic
    // If a should be put before b in the sum, return a negative value
    return terms.sort((a, b) => {
        // Variables before Integers
        if (a.class == Integer_1.IntegerType && (b.class == Variable_1.VariableType || (b instanceof Product_1.Product && b.isNegation && b.negation.class == Variable_1.VariableType))) {
            return 1;
        }
        if ((a.class == Variable_1.VariableType || (a instanceof Product_1.Product && a.isNegation && a.negation.class == Variable_1.VariableType)) && b.class == Integer_1.IntegerType) {
            return -1;
        }
        return 0;
    });
}
exports.orderTerms = orderTerms;


/***/ }),

/***/ "./src/mathlib/expressions/Variable.ts":
/*!*********************************************!*\
  !*** ./src/mathlib/expressions/Variable.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariableType = exports.Variable = void 0;
const Expression_1 = __webpack_require__(/*! ./Expression */ "./src/mathlib/expressions/Expression.ts");
class Variable extends Expression_1.Expression {
    static of(symbol) {
        if (Variable.instances.get(symbol) == undefined) {
            Variable.instances.set(symbol, new Variable(symbol));
        }
        return Variable.instances.get(symbol);
    }
    static instances = new Map();
    constructor(symbol) {
        super();
        this.symbol = symbol;
    }
    class = exports.VariableType;
    toMathXML() {
        return "<mi>" + this.symbol + "</mi>";
    }
    toString() {
        return this.symbol;
    }
    toUnambigiousString() {
        return this.symbol;
    }
    get hash() {
        return "Var" + this.symbol;
    }
    evaluate(values) {
        return values.valueOf(this);
    }
    symbol;
    isReducible = false;
    isConstant = false;
    childCount = 0;
}
exports.Variable = Variable;
exports.VariableType = "Variable";


/***/ }),

/***/ "./src/mathlib/uielements/ArgumentNodeView.ts":
/*!****************************************************!*\
  !*** ./src/mathlib/uielements/ArgumentNodeView.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArgumentNodeView = void 0;
const GraphNodeView_1 = __webpack_require__(/*! ./GraphNodeView */ "./src/mathlib/uielements/GraphNodeView.ts");
/**
 * Represents an argument node.
 */
class ArgumentNodeView extends GraphNodeView_1.GraphNodeView {
    constructor(arg, setStyle) {
        super(setStyle);
        this.argument = arg;
    }
    connectedCallback() {
        this.textContent = this.argument.argument;
        this.classList.add("argument");
    }
    argument;
}
exports.ArgumentNodeView = ArgumentNodeView;
customElements.define("argument-nodeview", ArgumentNodeView, { extends: "div" });


/***/ }),

/***/ "./src/mathlib/uielements/EdgeView.ts":
/*!********************************************!*\
  !*** ./src/mathlib/uielements/EdgeView.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeView = void 0;
const Argument_1 = __webpack_require__(/*! ../Argument */ "./src/mathlib/Argument.ts");
const UIPreferences_1 = __webpack_require__(/*! ./UIPreferences */ "./src/mathlib/uielements/UIPreferences.ts");
const Graph_1 = __webpack_require__(/*! ../Graph */ "./src/mathlib/Graph.ts");
const assert_1 = __webpack_require__(/*! ../util/assert */ "./src/mathlib/util/assert.ts");
/**
 * Represents an edge in a graph.
 */
class EdgeView extends HTMLParagraphElement {
    constructor(owner, edge) {
        super();
        this.owner = owner;
        this.edge = edge.e;
        this.first = edge.n;
        this.second = edge.n1;
        Object.freeze(this.edge);
        this.style.width = "fit-content";
        this.style.height = "fit-content";
        this.style.padding = "0";
        this.style.zIndex = "-2";
        this.style.margin = "0";
        this.style.whiteSpace = "nowrap";
        this.style.textAlign = "center";
        this.style.backgroundColor = UIPreferences_1.uiPreferences.edgeEqualsBackgroundColor;
        this.style.userSelect = "none";
        this.style.backgroundColor = "white";
        UIPreferences_1.uiPreferences.onUpdate(() => {
            this.style.backgroundColor = UIPreferences_1.uiPreferences.edgeEqualsBackgroundColor;
        });
        this.addEventListener("click", event => {
            this.owner.edgeClicked(this, event);
        });
        this.addEventListener("mouseout", event => {
        });
        this.repOk();
    }
    /**
     * Sets rotation angle of view while also
     * letting it know the angle has changed.
     * @param rad
     */
    setAngle(rad) {
        this.style.rotate = "" + rad + "rad";
        //this.textContent = "" + (rad * 2 * Math.PI / 360).toFixed(2) + "deg"
    }
    /**
     * Sets element screen width and ensures text fits
     * inside the edge.
     */
    set width(val) {
        super.style.width = val;
    }
    /**
     * Called when element is conncted to the DOM.
     */
    connectedCallback() {
        if (this.edge instanceof Argument_1.Argument) {
            this.textContent = "" + this.edge.claim.r;
        }
        else if (this.edge instanceof Graph_1.GivenEdge) {
            this.textContent = "" + this.edge.r;
        }
        else
            throw new Error("Not implemented for " + this.edge);
    }
    repOk() {
        (0, assert_1.assert)(this.first != undefined);
        (0, assert_1.assert)(this.second != undefined);
    }
    owner;
    edge;
    first;
    second;
}
exports.EdgeView = EdgeView;
customElements.define("edge-view", EdgeView, { extends: "p" });


/***/ }),

/***/ "./src/mathlib/uielements/EditableMathView.ts":
/*!****************************************************!*\
  !*** ./src/mathlib/uielements/EditableMathView.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditableMathView = void 0;
/**
 * Displays math and is editable.
 */
class EditableMathView extends HTMLDivElement {
    constructor() {
        super();
        this.addEventListener("click", event => {
        });
    }
    connectedCallback() {
    }
    set value(e) {
        this._value = e;
        this.innerHTML = "<math display='block'>" + (e?.toMathXML() ?? "") + "</math>";
        this.listeners.forEach(l => l(this._value));
        MathJax.typeset([this]);
    }
    get value() {
        return this._value;
    }
    /**
     * Listener will be called whenever the math
     * in the view is edited.
     * @param l
     */
    addEditListener(l) {
        this.listeners.push(l);
    }
    listeners = [];
    _value = null;
}
exports.EditableMathView = EditableMathView;
customElements.define("editable-mathview", EditableMathView, { extends: "div" });


/***/ }),

/***/ "./src/mathlib/uielements/ExplanationPopup.ts":
/*!****************************************************!*\
  !*** ./src/mathlib/uielements/ExplanationPopup.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExplanationPopup = void 0;
const Expression_1 = __webpack_require__(/*! ../expressions/Expression */ "./src/mathlib/expressions/Expression.ts");
const MathMLHelpers_1 = __webpack_require__(/*! ../util/MathMLHelpers */ "./src/mathlib/util/MathMLHelpers.ts");
class ExplanationPopup extends HTMLDivElement {
    /**
     *
     * @param arg
     * @param onClose Called after user clicks close button.
     */
    constructor(arg, onClose) {
        super();
        this.arg = arg;
        this.onClose = onClose;
        const closeButton = document.createElement('b');
        closeButton.addEventListener('click', () => {
            this.onClose();
        });
        closeButton.textContent = "Close";
        closeButton.style.userSelect = "none";
        closeButton.style.float = "right";
        this.append(closeButton);
        const text = document.createElement('div');
        text.innerHTML = arg.argument + "<br>";
        if (arg.claim.n instanceof Expression_1.Expression && arg.claim.n1 instanceof Expression_1.Expression)
            text.innerHTML += (0, MathMLHelpers_1.inMathBlock)((0, MathMLHelpers_1.inRow)(arg.claim.n.toMathXML() + " <mo>" + arg.claim.r + "</mo> " + arg.claim.n1.toMathXML())) + "<br> Derived from: <br>";
        for (const ground of arg.grounds) {
            if (ground instanceof Expression_1.Expression)
                text.innerHTML += (0, MathMLHelpers_1.inMath)(ground.toMathXML()) + "<br>";
        }
        this.append(text);
        this.style.backgroundColor = "white";
        this.style.border = "1px solid black";
        this.style.boxShadow = "0.3ch 0.3ch 0.6ch rgba(0, 0, 0, 0.5)";
        this.style.padding = "1ch";
        this.style.width = "fit-content";
        this.style.zIndex = "15";
    }
    connectedCallback() {
        MathJax.typeset([this]);
    }
    arg;
    onClose;
}
exports.ExplanationPopup = ExplanationPopup;
customElements.define("explanation-popup", ExplanationPopup, { extends: "div" });


/***/ }),

/***/ "./src/mathlib/uielements/ExpressionNodeView.ts":
/*!******************************************************!*\
  !*** ./src/mathlib/uielements/ExpressionNodeView.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpressionNodeView = void 0;
const EditableMathView_1 = __webpack_require__(/*! ./EditableMathView */ "./src/mathlib/uielements/EditableMathView.ts");
const GraphNodeView_1 = __webpack_require__(/*! ./GraphNodeView */ "./src/mathlib/uielements/GraphNodeView.ts");
/**
 * A graph node view for expression nodes.
 */
class ExpressionNodeView extends GraphNodeView_1.GraphNodeView {
    constructor(node, setStyle) {
        super(setStyle);
        this.node = node;
        this.editableMathView = new EditableMathView_1.EditableMathView();
        this.editableMathView.value = this.node;
        this.appendChild(this.editableMathView);
        this.addEventListener("click", () => {
            console.log(this.node.toUnambigiousString());
        });
    }
    connectedCallback() {
        this.classList.add("expression");
    }
    node;
    editableMathView;
}
exports.ExpressionNodeView = ExpressionNodeView;
customElements.define("expression-nodeview", ExpressionNodeView, { extends: "div" });
const colorUnhealthyNodes = true;


/***/ }),

/***/ "./src/mathlib/uielements/GraphNodeView.ts":
/*!*************************************************!*\
  !*** ./src/mathlib/uielements/GraphNodeView.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphNodeView = void 0;
/**
 * An html element that represents a math graph node.
 */
class GraphNodeView extends HTMLDivElement {
    /**
     *
     * @param setStyle Function that when called
     *  should set the style for this view.
     */
    constructor(setStyle) {
        super();
        this.style.padding = "1ch";
        this.style.width = "fit-content";
        this.style.height = "fit-content";
        this.style.whiteSpace = "nowrap";
        setStyle(this);
    }
    set backgroundColor(value) {
        this.style.backgroundColor = value;
    }
}
exports.GraphNodeView = GraphNodeView;


/***/ }),

/***/ "./src/mathlib/uielements/TouchGestureRecognizer.ts":
/*!**********************************************************!*\
  !*** ./src/mathlib/uielements/TouchGestureRecognizer.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TouchGestureRecognizer = void 0;
/**
 * Interpret complicated touch gesture data.
 */
class TouchGestureRecognizer {
    constructor() {
        this.moveListeners = [];
        this.pinchListeners = [];
    }
    addMoveListener(callback) {
        this.moveListeners.push(callback);
    }
    /**
     * Adds a function that will be called when a pinch gesture has been detected.
     * @param callback Takes a center coordinate that's the average of the finger positions,
     *              the change in scale since the last call on (0, infinity) where 1 is no change,
     *              and the number of fingers in the gesture (an integer).
     */
    addPinchListener(callback) {
        this.pinchListeners.push(callback);
    }
    /**
     * Should take all touch events from the view using it.
     * @param event
     */
    processTouchDown(event) {
    }
    /**
     * Should take all touch events from the view using it.
     * @param event
     */
    processTouchMove(event) {
        for (const changed of event.changedTouches) {
            changed.clientX;
        }
    }
    /**
     * Should take all touch events from the view using it.
     * @param event
     */
    processTouchEnd(event) {
    }
    /**
     * Should take all touch events from the view using it.
     * @param event
     */
    processTouchCancel(event) {
    }
    //private lastX: Map<Touch
    moveListeners;
    pinchListeners;
}
exports.TouchGestureRecognizer = TouchGestureRecognizer;


/***/ }),

/***/ "./src/mathlib/uielements/UIPreferences.ts":
/*!*************************************************!*\
  !*** ./src/mathlib/uielements/UIPreferences.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.uiPreferences = void 0;
class UIPreferences {
    /**
     * @param callback Function called whenever a ui preference
     * is changed.
     */
    onUpdate(callback) {
        this.callbacks.push(callback);
    }
    // Getters and Setters
    /**
     * Background color of a graph edge denoting
     * equality between two expressions.
     * Css value.
     */
    get edgeEqualsBackgroundColor() {
        return this._edgeEqualsBackgroundColor;
    }
    set edgeEqualsBackgroundColor(val) {
        this._edgeEqualsBackgroundColor = val;
        this.callbacks.forEach(c => c());
    }
    // Preference Values
    _edgeEqualsBackgroundColor = "none";
    callbacks = [];
}
exports.uiPreferences = new UIPreferences();


/***/ }),

/***/ "./src/mathlib/uielements/WebGraphView.ts":
/*!************************************************!*\
  !*** ./src/mathlib/uielements/WebGraphView.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGraphView = void 0;
const Argument_1 = __webpack_require__(/*! ../Argument */ "./src/mathlib/Argument.ts");
const Expression_1 = __webpack_require__(/*! ../expressions/Expression */ "./src/mathlib/expressions/Expression.ts");
const GraphMinipulator_1 = __webpack_require__(/*! ../GraphMinipulator */ "./src/mathlib/GraphMinipulator.ts");
const assert_1 = __webpack_require__(/*! ../util/assert */ "./src/mathlib/util/assert.ts");
const TouchGestureRecognizer_1 = __webpack_require__(/*! ./TouchGestureRecognizer */ "./src/mathlib/uielements/TouchGestureRecognizer.ts");
const EdgeView_1 = __webpack_require__(/*! ./EdgeView */ "./src/mathlib/uielements/EdgeView.ts");
const ExpressionNodeView_1 = __webpack_require__(/*! ./ExpressionNodeView */ "./src/mathlib/uielements/ExpressionNodeView.ts");
const ArgumentNodeView_1 = __webpack_require__(/*! ./ArgumentNodeView */ "./src/mathlib/uielements/ArgumentNodeView.ts");
const GraphNodeView_1 = __webpack_require__(/*! ./GraphNodeView */ "./src/mathlib/uielements/GraphNodeView.ts");
const ExplanationPopup_1 = __webpack_require__(/*! ./ExplanationPopup */ "./src/mathlib/uielements/ExplanationPopup.ts");
/**
 * A ui element that will display a math graph in a web.
 */
class WebGraphView extends HTMLDivElement {
    /**
     * @param graph Must be fully connected.
     * @param roots Non-empty.
     */
    constructor(graph, roots, config = undefined) {
        super();
        this.graph = graph;
        this.nodes = new Map();
        this.offsetX = 0;
        this.offsetY = 0;
        this.nodePositions = new Map();
        this.edgePositions = new Map();
        this.edges = new Map();
        this.rootNodes = new Set(roots);
        this.ringElements = new Set();
        this.ringPositions = new Map();
        this.explanationPopups = [];
        if (config != undefined) {
            this.showArguments = config.showArguments;
            this.drawEdgeLines = config.drawEdgeLines;
            this.debugCornerEnabled = config.debugCornerEnabled;
        }
        this.style.clipPath = "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)";
        this.style.position = "relative";
        this.style.overflow = "hidden";
        this.addEventListener("mousedown", event => {
            this.mouseDown = true;
            this.touchDown = false;
        });
        this.addEventListener("mouseup", event => {
            this.mouseDown = false;
        });
        this.addEventListener("mouseleave", event => {
            this.mouseDown = false;
        });
        this.addEventListener("mousemove", (event) => {
            if (!this.mouseDown)
                return;
            this.offsetX += event.movementX / this.scale;
            this.offsetY += event.movementY / this.scale;
            this.updateOffset();
        });
        this.resizeObserver.observe(this);
        this.addEventListener("wheel", (event) => {
            const mousePos = Point(event.offsetX, event.offsetY);
            const scaleDelta = Math.pow(0.8, event.deltaY / 360);
            this.scale = scaleDelta * this.scale;
            this.updateOffset();
            return true;
        });
        this.gestureRecognizer = new TouchGestureRecognizer_1.TouchGestureRecognizer();
        this.addEventListener("touchdown", this.gestureRecognizer.processTouchDown);
        this.addEventListener("touchend", this.gestureRecognizer.processTouchEnd);
        this.addEventListener("touchcancel", this.gestureRecognizer.processTouchCancel);
        this.addEventListener("touchmove", this.gestureRecognizer.processTouchMove);
        this.gestureRecognizer.addPinchListener((center, scaleDelta, fingers) => {
        });
        this.repOk();
    }
    /**
     * Set a function that determines the color of a node.
     * @param colorFn
     */
    setNodeColoringScheme(colorFn) {
        this.nodeColorFn = colorFn;
        this.propogateSettingsToNodes();
    }
    nodeColorFn = (n) => "lightblue";
    propogateSettingsToNodes() {
        this.nodes.forEach((view, node) => {
            view.backgroundColor = this.nodeColorFn(node);
        });
    }
    /**
     * Sets if the view should show argument nodes as nodes.
     * False by default.
     * @param val
     */
    setShowArguments(val) {
        this.showArguments = true;
        this.readGraph();
        this.arrange();
        this.updateOffset();
    }
    get center() {
        return {
            x: this.offsetWidth / 2,
            y: this.offsetHeight / 2,
        };
    }
    /**
     * Follows the showArgument setting.
     * Populates this.nodes, this.edges,
     * adds the created views to the shadow dom
     * to match the graph.
     * Removes any pre-existing elements from the shadow dom.
     */
    readGraph() {
        // Clear existing
        this.nodes.forEach((view, node) => {
            this.removeChild(view);
        });
        this.nodes.clear();
        this.edges.forEach((view, edge) => {
            this.removeChild(view);
        });
        this.edges.clear();
        // Fetch nodes
        this.graph.getNodes().forEach(node => {
            if (node instanceof Expression_1.Expression) {
                const view = new ExpressionNodeView_1.ExpressionNodeView(node, this.baseNodeStyle);
                view.style.position = "absolute";
                this.nodes.set(node, view);
                this.append(view);
            }
            else if (node instanceof Argument_1.Argument) {
                if (!this.showArguments)
                    return;
                const view = new ArgumentNodeView_1.ArgumentNodeView(node, this.baseNodeStyle);
                view.style.position = "absolute";
                this.nodes.set(node, view);
                this.append(view);
            }
            else
                throw new Error("Graph contains node WebGraphView can't process.");
        });
        // Fetch edges
        GraphMinipulator_1.GraphMinipulator.dropSymmetric(this.graph.getEdges()).filter(edge => {
            // Only consider edges for which we have both endpoints on the view
            return this.nodes.has(edge.n) && this.nodes.has(edge.n1);
        }).forEach(edge => {
            const view = new EdgeView_1.EdgeView(this, edge);
            view.style.position = "absolute";
            this.edges.set(edge, view);
            this.append(view);
        });
        this.propogateSettingsToNodes();
        if (this.debugCornerEnabled) {
            const corner = document.createElement('p');
            corner.innerHTML = "Graph Nodes: " + this.graph.getNodes().size + "<br>"
                + "Visible Nodes: " + this.nodes.size + "<br>"
                + "Graph Edges: " + this.graph.getEdges().size + "<br>"
                + "Visible Edges: " + this.edges.size + "<br>";
            corner.style.zIndex = "100";
            corner.style.backgroundColor = "white";
            corner.style.width = "fit-content";
            corner.style.margin = "0";
            corner.style.padding = "1ch";
            corner.style.border = "black 1px solid";
            corner.style.position = "absolute";
            this.append(corner);
        }
        this.repOk();
    }
    connectedCallback() {
        this.readGraph();
        this.arrange();
        this.updateOffset();
    }
    /**
     * Pick places for all the nodes/edges on the screen.
     * Populates the position* rep vars.
     */
    arrange() {
        this.nodePositions.clear();
        this.edgePositions.clear();
        this.ringPositions.clear();
        this.ringElements.forEach(e => {
            this.removeChild(e);
        });
        this.ringElements.clear();
        // Place nodes on a series of rings from the center using their depth in the graph
        const levels = GraphMinipulator_1.GraphMinipulator.getLevels(this.graph, this.rootNodes, node => {
            if (node instanceof Expression_1.Expression)
                return true;
            else if (node instanceof Argument_1.Argument)
                return this.showArguments;
            else
                throw new Error("New type of node");
        });
        let maxDepth = 0;
        levels.forEach((_, depth) => {
            maxDepth = Math.max(maxDepth, depth);
        });
        const center = { x: (this.clientWidth / 2), y: this.clientHeight / 2 };
        let lastRadius = 0; //px
        // Record the positions of the last ring so that we can
        // make the graph appear planar-ish. Maps nodes to angle
        // offset in radians. Angle must be < 2*Pi
        let lastPositions = null;
        for (let depth = 0; depth < maxDepth + 1; depth++) {
            const nodes = levels.get(depth);
            /**
             * Calculating the radius of the circle
             * Suppose every root node on the starting circle requires
             * a circular space to be drawn with radius nodeRadius
             * A starting circle with n of these nodes would require a
             * circumference of n * 2nodeRadius.
             * The circumference of a circle can be expressed
             * as 2*pi*r
             * => r = n * 2 * smallR / (2 * pi)
             *      = n * smallR / pi
             */
            const nodeRadius = 70; // pixels
            let radius = Math.max(nodes.size * nodeRadius / Math.PI, lastRadius + (3 * nodeRadius));
            if (depth == 0 && nodes.size == 1)
                radius = 0;
            lastRadius = radius;
            // Minimum radians necessary to keep nodes necessarily spaced at the given depth
            const stepSize = (2 * Math.PI) / Math.max(nodes.size, radius * 2 * Math.PI / (2 * 1.2 * nodeRadius));
            // Maps nodes to angles (rad)
            const ns = new Map();
            if (lastPositions != null) {
                const idealAngles = new Map();
                for (const n of nodes) {
                    // We do not assume the graph is a tree
                    // Assume the node has a parent
                    const parent = this.graph.getNeighbors(n, "in")
                        .filter(n => levels.get(depth - 1).has(n) && lastPositions.has(n))[0];
                    const idealAngle = lastPositions.get(parent);
                    idealAngles.set(n, idealAngle);
                }
                (0, assert_1.assert)(idealAngles.size == nodes.size);
                for (let i = 0; i < nodes.size; i++) {
                    for (const pair of idealAngles) {
                        let a = 0;
                        while ((0, assert_1.for_some)(ns, p => Math.abs(p[1] - pair[1]) < stepSize)) {
                            pair[1] += stepSize * a * ((-1) ** (a));
                            a++;
                        }
                        ns.set(pair[0], pair[1]);
                    }
                }
            }
            else {
                const temp = [...nodes];
                for (let i = 0; i < nodes.size; i++) {
                    ns.set(temp[i], i * stepSize);
                }
            }
            (0, assert_1.assert)(ns.size == nodes.size, "Only produced " + ns.size + " nodes instead of " + nodes.size);
            lastPositions = new Map();
            ns.forEach((angle, node) => {
                const view = this.nodes.get(node);
                //view.style.width = "" + smallR + "px"
                //view.style.height = "" + smallR + "px"
                lastPositions.set(node, angle);
                // Get the cartesian point from the radius and angle
                const x = radius * Math.cos(angle) + center.x;
                const y = radius * Math.sin(angle) + center.y;
                this.nodePositions.set(view, Point(x, y));
            });
            (0, assert_1.assert)((0, assert_1.for_all)(lastPositions.values(), pos => pos != undefined && pos != null));
            //assert(lastPositions.size > 0)
            //assert(for_all(nodes, lastPositions.has))
            const ring = document.createElement("div");
            ring.style.border = "lightgray solid 0.3ch";
            ring.style.borderRadius = "100%";
            ring.style.position = "absolute";
            ring.style.zIndex = RING_Z;
            this.appendChild(ring);
            this.ringElements.add(ring);
            this.ringPositions.set(ring, { radius: radius });
        }
        // Now arange the edges
        this.edges.forEach((view, edge) => {
            // Find the middle of the two endpts
            const firstX = this.nodePositions.get(this.nodes.get(edge.n)).x;
            const firstY = this.nodePositions.get(this.nodes.get(edge.n)).y;
            const secondX = this.nodePositions.get(this.nodes.get(edge.n1)).x;
            const secondY = this.nodePositions.get(this.nodes.get(edge.n1)).y;
            const x = (firstX + secondX) / 2;
            const y = (firstY + secondY) / 2;
            const angle = Math.atan2(secondY - firstY, secondX - firstX);
            this.edgePositions.set(view, { x: x, y: y, angle: angle });
        });
        this.repOk();
    }
    /**
     * Update the draw position of the nodes on the screen
     * to match the offset in rep. Assumes all views have a position
     * stored in the rep. Call arrange() first.
     * Also applies the scale factor to the final draw positions,
     * invisible to everyone else.
     */
    updateOffset() {
        const center = this.center;
        const scale = this.scale;
        function applyScale(i) {
            return Point(((i.x) - center.x) * scale + center.x, ((i.y) - center.y) * scale + center.y);
        }
        this.nodePositions.forEach((pos, view) => {
            const adjusted = applyScale({
                x: pos.x + this.offsetX,
                y: pos.y + this.offsetY,
            });
            view.style.left = "" + (adjusted.x - (0.5 * view.offsetWidth)) + "px";
            view.style.top = "" + (adjusted.y - (0.5 * view.offsetHeight)) + "px";
        });
        this.edgePositions.forEach((pos, view) => {
            view.setAngle(pos.angle);
            if (this.drawEdgeLines) {
                const firstPos = this.nodePositions.get(this.nodes.get(view.first));
                const secondPos = this.nodePositions.get(this.nodes.get(view.second));
                view.width = "" + (scale * Math.hypot(secondPos.x - firstPos.x, secondPos.y - firstPos.y)) + "px";
                view.style.borderBottom = "black 0.1ch solid";
                view.style.borderTop = "black 0.1ch solid";
            }
            else {
                view.width = "fit-content";
                view.style.borderBottom = "none";
                view.style.borderTop = "none";
            }
            const adjusted = applyScale({
                x: pos.x + this.offsetX,
                y: pos.y + this.offsetY,
            });
            view.style.left = "" + (adjusted.x - (0.5 * view.offsetWidth)) + "px";
            view.style.top = "" + (adjusted.y - (0.5 * view.offsetHeight)) + "px";
        });
        // Overlay elements change size with scale
        this.ringPositions.forEach((pos, view) => {
            const adjustedCenterPos = applyScale({
                x: center.x + this.offsetX,
                y: center.y + this.offsetY,
            });
            view.style.left = "" + (adjustedCenterPos.x - (pos.radius * scale)) + "px";
            view.style.top = "" + (adjustedCenterPos.y - (pos.radius * scale)) + "px";
            view.style.width = "" + pos.radius * 2 * scale + "px";
            view.style.aspectRatio = "1";
        });
        this.explanationPopups.forEach(val => {
            const view = val.e;
            const pos = val.pos;
            const adjusted = applyScale({
                x: pos.x + this.offsetX,
                y: pos.y + this.offsetY,
            });
            view.style.left = "" + (adjusted.x - (0.5 * view.offsetWidth)) + "px";
            view.style.top = "" + (adjusted.y - (0.5 * view.offsetHeight)) + "px";
        });
        this.repOk();
    }
    /**
     * Map from relative screen coordinates (where tl of this view is (0,0))
     * to the internal coordinate system we're using.
     */
    getInternalPos(pixelPos) {
        const center = this.center;
        const scale = this.scale;
        return Point((pixelPos.x - center.x) / scale + center.x - this.offsetX, (pixelPos.y - center.y) / scale + center.y - this.offsetY);
    }
    /**
     * React to an edge being clicked.
     * @param view In this view
     * @param event The click event
     */
    edgeClicked(view, event) {
        // TODO: Don't allow dupliate explanation popups
        if (view.edge instanceof Argument_1.Argument) {
            const popup = new ExplanationPopup_1.ExplanationPopup(view.edge, () => {
                this.removeChild(popup);
                for (let i = 0; i < this.explanationPopups.length; i++) {
                    if (this.explanationPopups[i].e === popup) {
                        this.explanationPopups.splice(i, 1);
                        break;
                    }
                }
            });
            const rect = this.getBoundingClientRect();
            const realtiveX = event.clientX - rect.left;
            const relativeY = event.clientY - rect.top;
            //TODO: The position isn't correct
            //TODO: Algorithm for picking where we should put the popup so it stays out
            // of the way of the graph
            this.explanationPopups.push({
                e: popup,
                pos: this.getInternalPos(Point(realtiveX, relativeY)),
            });
            popup.style.position = "absolute";
            this.append(popup);
            this.updateOffset();
        }
        this.reorderViewStack(view);
        this.repOk();
    }
    /**
     * Set the z-index of all the elements in the graph
     * putting the given root on top and it's neighbors
     * right beneath it etc.
     * @param root
     */
    reorderViewStack(root) {
        if (root instanceof GraphNodeView_1.GraphNodeView)
            throw new Error("Not implemented");
        if (root instanceof EdgeView_1.EdgeView) {
            const roots = [root.first, root.second];
            const stackingOrder = GraphMinipulator_1.GraphMinipulator.getLevels(this.graph, roots);
            stackingOrder.forEach((nodeSet, depth) => {
                nodeSet.forEach(node => {
                    if (!this.showArguments && node instanceof Argument_1.Argument)
                        return;
                    console.log("Adjusting");
                    const nodeView = this.nodes.get(node);
                    nodeView.style.zIndex = (NODE_MAX_Z - 0.0001 * depth).toString();
                    // Edges
                    this.edges.forEach((edge, key) => {
                        if (edge.first === node || edge.second === node) {
                            edge.style.zIndex = (EDGE_MAX_Z - 0.0001 * depth).toString();
                        }
                    });
                });
            });
        }
    }
    repOk() {
        (0, assert_1.assert)(this.rootNodes.size > 0);
        (0, assert_1.assert)(GraphMinipulator_1.GraphMinipulator.isConnected(this.graph), "Graph not connected");
        if (this.showArguments)
            (0, assert_1.assert)(this.graph.getNodes().size == this.nodes.size);
    }
    graph;
    nodes;
    // The Position of the center of the node.
    nodePositions;
    edges;
    edgePositions;
    // Amt to add to left coordinate
    offsetX;
    // Added to top coordinate of nodes
    offsetY;
    // if the mouse is down
    mouseDown = false;
    touchDown = false;
    scale = 1;
    // These nodes are the root of the graph
    rootNodes;
    ringElements;
    ringPositions;
    /**
     * Position of top left of popup
     */
    explanationPopups;
    gestureRecognizer;
    // If the graph should draw argument nodes.
    showArguments = false;
    drawEdgeLines = false;
    debugCornerEnabled = false;
    resizeObserver = new ResizeObserver(_ => {
        this.arrange();
        this.updateOffset();
    });
    baseNodeStyle = (view) => {
        view.style.borderRadius = "1ch";
        view.style.backgroundColor = "lightblue";
        view.style.zIndex = "" + NODE_MAX_Z;
    };
}
exports.WebGraphView = WebGraphView;
customElements.define("web-graphview", WebGraphView, { extends: "div" });
function Point(x, y, angle = undefined) {
    if (angle == undefined)
        return {
            x: x,
            y: y,
        };
    return {
        x: x,
        y: y,
        angle: angle,
    };
}
// Z Index constants
const DEBUG_WINDOW_Z = "100";
const NODE_MAX_Z = 5;
const NODE_MIN_Z = "4.000001";
const EDGE_MAX_Z = 4;
const EDGE_MIN_Z = "3.000001";
const RING_Z = "-10";


/***/ }),

/***/ "./src/mathlib/userinput/AntlrMathParser.ts":
/*!**************************************************!*\
  !*** ./src/mathlib/userinput/AntlrMathParser.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseExpression = void 0;
const antlr4_1 = __importDefault(__webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.cjs"));
const { CommonTokenStream, CharStream } = antlr4_1.default;
const arithmeticLexer_1 = __importDefault(__webpack_require__(/*! ./arithmeticLexer */ "./src/mathlib/userinput/arithmeticLexer.ts"));
const arithmeticParser_1 = __importDefault(__webpack_require__(/*! ./arithmeticParser */ "./src/mathlib/userinput/arithmeticParser.ts"));
const MathVisitorImpl_1 = __webpack_require__(/*! ./MathVisitorImpl */ "./src/mathlib/userinput/MathVisitorImpl.ts");
const Flattener_1 = __webpack_require__(/*! ./Flattener */ "./src/mathlib/userinput/Flattener.ts");
/**
 * Parses the given input string to an expression.
 * @param input See the gramar file (.g4)
 * @returns
 */
function parseExpression(input) {
    const stream = new CharStream(input, true);
    const lexer = new arithmeticLexer_1.default(stream);
    const tokens = new CommonTokenStream(lexer);
    const parser = new arithmeticParser_1.default(tokens);
    //parser.buildParseTrees = true
    const tree = parser.expression();
    tree.accept(new Flattener_1.Flattener());
    // Print debug info
    //tree.accept(new PrintVisitor())
    return tree.accept(new MathVisitorImpl_1.ExpressionVisitor());
}
exports.parseExpression = parseExpression;


/***/ }),

/***/ "./src/mathlib/userinput/Flattener.ts":
/*!********************************************!*\
  !*** ./src/mathlib/userinput/Flattener.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Flattener = void 0;
const ConvenientExpressions_1 = __webpack_require__(/*! ../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const arithmeticParser_1 = __webpack_require__(/*! ./arithmeticParser */ "./src/mathlib/userinput/arithmeticParser.ts");
const arithmeticVisitor_1 = __importDefault(__webpack_require__(/*! ./arithmeticVisitor */ "./src/mathlib/userinput/arithmeticVisitor.ts"));
/**
 * Visitor that flattens sums and products in ASTs.
 * a + (b + c) -> a + b + c
 *
 * This only happens if b + c isn't actually surrounded
 * by parens.
 *
 *        +
 *       / \
 *      a   +
 *         / \
 *        b   c
 *
 * becomes
 *
 *       +
 *      /|\
 *     a b c
 *
 *
 */
class Flattener extends arithmeticVisitor_1.default {
    visitSum = (ctx) => {
        const flattened = this.flattenAddition(ctx);
        for (const child of flattened.children) {
            this.visit(child);
        }
        return flattened;
    };
    printChildren(ctx) {
        let result = "";
        for (const child of ctx.children) {
            result += child.getText() + "  ";
        }
        console.log(result);
        //console.log(ctx.toStringTree(null, ctx.parser!))
    }
    /**
     * If the given sum's children are also sums,
     * sets those sums parents to the ctx.
     * The given sumcontext and all its sum children
     * must have exactly 2 expression part children.
     * This prevents the mind fuck of rearranging the
     * AST on the way back out.
     */
    flattenAddition(ctx) {
        // Check if children are sums
        // Reach down and take their children
        function takeChildren(child) {
            (0, ConvenientExpressions_1.remove)(ctx.children, child);
            // Move the expression up
            if (child._right instanceof arithmeticParser_1.SumContext) {
                takeChildren(child._right);
            }
            else {
                child._right.parentCtx = ctx;
                ctx.children.unshift(child._right);
            }
            // TODO: This isn't always correct because negation of sums
            // Or is is...
            // Also look at product flattening
            // Move the operator up
            if (child.MINUS() != null) {
                child.MINUS().parentCtx = ctx;
                ctx.children.unshift(child.MINUS());
                //remove(child.children!, child.MINUS())
            }
            else {
                child.PLUS().parentCtx = ctx;
                ctx.children.unshift(child.PLUS());
                //remove(child.children!, child.PLUS())
            }
            if (child._left instanceof arithmeticParser_1.SumContext) {
                takeChildren(child._left);
            }
            else {
                child._left.parentCtx = ctx;
                ctx.children.unshift(child._left);
            }
            child.parentCtx = undefined;
        }
        if (ctx._left instanceof arithmeticParser_1.SumContext)
            takeChildren(ctx._left);
        if (ctx._right instanceof arithmeticParser_1.SumContext)
            takeChildren(ctx._right);
        return ctx;
    }
    visitProduct = (ctx) => {
        const flattened = this.flattenProduct(ctx);
        for (const child of flattened.children) {
            this.visit(child);
        }
        return flattened;
    };
    flattenProduct(ctx) {
        //console.log("Flattening product " + ctx.getText() + " to")
        function instanceOfProduct(child) {
            return child instanceof arithmeticParser_1.ProductContext;
        }
        // Check if children are sums
        // Reach down and take their children
        function takeChildren(child) {
            (0, ConvenientExpressions_1.remove)(ctx.children, child);
            if (instanceOfProduct(child._right)) {
                takeChildren(child._right);
            }
            else {
                child._right.parentCtx = ctx;
                ctx.children.unshift(child._right);
            }
            // Move the operator up
            if (child.TIMES() != null) {
                child.TIMES().parentCtx = ctx;
                ctx.children.unshift(child.TIMES());
            }
            if (instanceOfProduct(child._left)) {
                takeChildren(child._left);
            }
            else {
                child._left.parentCtx = ctx;
                ctx.children.unshift(child._left);
            }
            child.parentCtx = undefined;
        }
        if (instanceOfProduct(ctx._left))
            takeChildren(ctx._left);
        if (instanceOfProduct(ctx._right))
            takeChildren(ctx._right);
        //console.log(ctx.getText())
        return ctx;
    }
}
exports.Flattener = Flattener;


/***/ }),

/***/ "./src/mathlib/userinput/MathVisitorImpl.ts":
/*!**************************************************!*\
  !*** ./src/mathlib/userinput/MathVisitorImpl.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpressionVisitor = void 0;
const ConvenientExpressions_1 = __webpack_require__(/*! ../ConvenientExpressions */ "./src/mathlib/ConvenientExpressions.ts");
const Exponent_1 = __webpack_require__(/*! ../expressions/Exponent */ "./src/mathlib/expressions/Exponent.ts");
const Fraction_1 = __webpack_require__(/*! ../expressions/Fraction */ "./src/mathlib/expressions/Fraction.ts");
const Integer_1 = __webpack_require__(/*! ../expressions/Integer */ "./src/mathlib/expressions/Integer.ts");
const Integral_1 = __webpack_require__(/*! ../expressions/Integral */ "./src/mathlib/expressions/Integral.ts");
const Logarithm_1 = __webpack_require__(/*! ../expressions/Logarithm */ "./src/mathlib/expressions/Logarithm.ts");
const Product_1 = __webpack_require__(/*! ../expressions/Product */ "./src/mathlib/expressions/Product.ts");
const Sum_1 = __webpack_require__(/*! ../expressions/Sum */ "./src/mathlib/expressions/Sum.ts");
const Variable_1 = __webpack_require__(/*! ../expressions/Variable */ "./src/mathlib/expressions/Variable.ts");
const arithmeticVisitor_1 = __importDefault(__webpack_require__(/*! ./arithmeticVisitor */ "./src/mathlib/userinput/arithmeticVisitor.ts"));
/**
 * Reads out an expression.
 */
class ExpressionVisitor extends arithmeticVisitor_1.default {
    printChildren(ctx) {
        let result = "";
        for (const child of ctx.children) {
            result += child.getText() + "  ";
        }
        console.log(result);
    }
    visitExpression = (ctx) => {
        return this.visit(ctx.open());
    };
    visitEquation = (ctx) => {
        throw new Error("Can't parse equations with this visitor");
    };
    visitPower = (ctx) => {
        //console.log("Power")
        //this.printChildren(ctx)
        //console.log(ctx._left.getText())
        //console.log(ctx._right.getText())
        return Exponent_1.Exponent.of(this.visit(ctx._left), this.visit(ctx._right));
    };
    visitParen = (ctx) => {
        return this.visit(ctx.open());
    };
    visitDivision = (ctx) => {
        return Fraction_1.Fraction.of(this.visit(ctx._left), this.visit(ctx._right));
    };
    visitProduct = (ctx) => {
        return Product_1.Product.of([
            ...ctx.closed_list().map(exp => this.visit(exp))
        ]);
    };
    visitRight_ClosedImplicitProduct = (ctx) => {
        //console.log("Right closed implicit product of context")
        //this.printChildren(ctx)
        return Product_1.Product.of([
            this.visit(ctx._left),
            this.visit(ctx._right)
        ]);
    };
    visitIntegral = (ctx) => {
        return Integral_1.Integral.of(this.visit(ctx._integrand), Variable_1.Variable.of('x'));
    };
    visitLog = (ctx) => {
        return Logarithm_1.Logarithm.of(this.visit(ctx._content), ctx._base == undefined ? Integer_1.Integer.of(10) : this.visit(ctx._base));
    };
    // visitUnaryOnAtom = (ctx: UnaryOnAtomContext): Expression => {
    //     const isPositive = ctx.MINUS_list.length % 2 == 0
    //     if (isPositive)
    //         return this.visit(ctx.atom())
    //     return negative(this.visit(ctx.atom()))
    // }
    visitUnaryOnExpression = (ctx) => {
        const isPositive = ctx.MINUS() == null;
        if (isPositive)
            return this.visit(ctx.closed());
        return (0, ConvenientExpressions_1.negative)(this.visit(ctx.closed()));
    };
    visitSum = (ctx) => {
        // console.log("Visiting sum with " + ctx.children!.length + " children: " + ctx.toStringTree(null, ctx.parser!))
        // this.printChildren(ctx)
        // Sum of plus and minus components
        const terms = [this.visit(ctx.children[0])];
        for (let i = 1; i < ctx.children.length; i += 2) {
            if (ctx.children[i].getText() == '-')
                terms.push((0, ConvenientExpressions_1.negative)(this.visit(ctx.children[i + 1])));
            else {
                terms.push(this.visit(ctx.children[i + 1]));
            }
        }
        //console.log("Printing made terms")
        for (const term of terms) {
            //console.log("  " + term.toString())
        }
        //console.log("done")
        return Sum_1.Sum.of(terms);
    };
    // visitExpression = (ctx: ExpressionContext): Expression => {
    //     // Guess what expression type it is, following pemdas
    //     if ((ctx.PLUS(0) != null || ctx.MINUS(0) != null) 
    //             && (ctx.expression_list().length ?? 0) > 1) {
    //     } else {
    //         console.log("Unknown expression type")
    //         for (const key of Object.keys(ctx)) {
    //             console.log(`${key}: ${(ctx as any)[key]}`)
    //         }
    //         for (const key of Object.getOwnPropertyNames(ctx)) {
    //             console.log(`${key}: ${(ctx as any)[key]}`)
    //         }
    //         console.log("Expressions: " + ctx.expression_list().length)
    //         console.log("Num children: " + ctx.children!.length)
    //         if (ctx.children?.length ?? 0 > 0)
    //             for (const child of ctx.children!) {
    //                 console.log("Child: " + child.getText())
    //             }
    //         throw new Error("Not implemented 1")
    //     }
    // };
    visitAtom = (ctx) => {
        if (ctx.VARIABLE() != null) {
            return Variable_1.Variable.of(ctx.VARIABLE().getText());
        }
        else if (ctx.SCIENTIFIC_NUMBER() != null) {
            return Integer_1.Integer.of(Number.parseFloat(ctx.SCIENTIFIC_NUMBER().getText()));
        }
        else {
            throw new Error("Not implemented");
        }
    };
    visitClosedAtom = (ctx) => {
        return this.visit(ctx.atom());
    };
    visitClosedIsRight_Closed = (ctx) => {
        return this.visit(ctx.closed());
    };
    visitRight_ClosedIsOpen = (ctx) => {
        return this.visit(ctx.right_closed());
    };
    visitRelop = (ctx) => {
        throw new Error("Shouldn't happen with this visitor impl");
    };
}
exports.ExpressionVisitor = ExpressionVisitor;


/***/ }),

/***/ "./src/mathlib/userinput/arithmeticLexer.ts":
/*!**************************************************!*\
  !*** ./src/mathlib/userinput/arithmeticLexer.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// Generated from ./src/mathlib/userinput/arithmetic.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
const antlr4_1 = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.cjs");
class arithmeticLexer extends antlr4_1.Lexer {
    static SCIENTIFIC_NUMBER = 1;
    static LPAREN = 2;
    static RPAREN = 3;
    static PLUS = 4;
    static MINUS = 5;
    static TIMES = 6;
    static DIV = 7;
    static GT = 8;
    static LT = 9;
    static EQ = 10;
    static POINT = 11;
    static POW = 12;
    static INT = 13;
    static LOG = 14;
    static VARIABLE = 15;
    static WS = 16;
    static EOF = antlr4_1.Token.EOF;
    static channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];
    static literalNames = [null, null,
        "'('", "')'",
        "'+'", "'-'",
        null, "'/'",
        "'>'", "'<'",
        "'='", "'.'",
        "'^'"];
    static symbolicNames = [null, "SCIENTIFIC_NUMBER",
        "LPAREN", "RPAREN",
        "PLUS", "MINUS",
        "TIMES", "DIV",
        "GT", "LT",
        "EQ", "POINT",
        "POW", "INT",
        "LOG", "VARIABLE",
        "WS"];
    static modeNames = ["DEFAULT_MODE",];
    static ruleNames = [
        "SCIENTIFIC_NUMBER", "NUMBER", "UNSIGNED_INTEGER", "E", "L", "O", "G",
        "SIGN", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT",
        "EQ", "POINT", "POW", "INT", "LOG", "VARIABLE", "WS",
    ];
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.LexerATNSimulator(this, arithmeticLexer._ATN, arithmeticLexer.DecisionsToDFA, new antlr4_1.PredictionContextCache());
    }
    get grammarFileName() { return "arithmetic.g4"; }
    get literalNames() { return arithmeticLexer.literalNames; }
    get symbolicNames() { return arithmeticLexer.symbolicNames; }
    get ruleNames() { return arithmeticLexer.ruleNames; }
    get serializedATN() { return arithmeticLexer._serializedATN; }
    get channelNames() { return arithmeticLexer.channelNames; }
    get modeNames() { return arithmeticLexer.modeNames; }
    static _serializedATN = [4, 0, 16, 123, 6, -1, 2, 0,
        7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9,
        7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7,
        16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 1, 0, 1, 0,
        1, 0, 3, 0, 51, 8, 0, 1, 0, 1, 0, 3, 0, 55, 8, 0, 1, 1, 4, 1, 58, 8, 1, 11, 1, 12, 1, 59, 1, 1, 1, 1, 4,
        1, 64, 8, 1, 11, 1, 12, 1, 65, 3, 1, 68, 8, 1, 1, 2, 4, 2, 71, 8, 2, 11, 2, 12, 2, 72, 1, 3, 1, 3, 1,
        4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12,
        1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1,
        19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 4, 22, 118, 8, 22, 11, 22, 12,
        22, 119, 1, 22, 1, 22, 0, 0, 23, 1, 1, 3, 0, 5, 0, 7, 0, 9, 0, 11, 0, 13, 0, 15, 0, 17, 2, 19, 3, 21,
        4, 23, 5, 25, 6, 27, 7, 29, 8, 31, 9, 33, 10, 35, 11, 37, 12, 39, 13, 41, 14, 43, 15, 45, 16, 1,
        0, 11, 2, 0, 69, 69, 101, 101, 2, 0, 76, 76, 108, 108, 2, 0, 79, 79, 111, 111, 2, 0, 71, 71, 103,
        103, 2, 0, 43, 43, 45, 45, 2, 0, 42, 42, 183, 183, 2, 0, 73, 73, 105, 105, 2, 0, 78, 78, 110, 110,
        2, 0, 84, 84, 116, 116, 2, 0, 65, 90, 97, 122, 3, 0, 9, 10, 13, 13, 32, 32, 122, 0, 1, 1, 0, 0, 0,
        0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1,
        0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0,
        0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 1, 47, 1, 0, 0, 0, 3, 57, 1,
        0, 0, 0, 5, 70, 1, 0, 0, 0, 7, 74, 1, 0, 0, 0, 9, 76, 1, 0, 0, 0, 11, 78, 1, 0, 0, 0, 13, 80, 1, 0, 0,
        0, 15, 82, 1, 0, 0, 0, 17, 84, 1, 0, 0, 0, 19, 86, 1, 0, 0, 0, 21, 88, 1, 0, 0, 0, 23, 90, 1, 0, 0, 0,
        25, 92, 1, 0, 0, 0, 27, 94, 1, 0, 0, 0, 29, 96, 1, 0, 0, 0, 31, 98, 1, 0, 0, 0, 33, 100, 1, 0, 0, 0,
        35, 102, 1, 0, 0, 0, 37, 104, 1, 0, 0, 0, 39, 106, 1, 0, 0, 0, 41, 110, 1, 0, 0, 0, 43, 114, 1, 0,
        0, 0, 45, 117, 1, 0, 0, 0, 47, 54, 3, 3, 1, 0, 48, 50, 3, 7, 3, 0, 49, 51, 3, 15, 7, 0, 50, 49, 1, 0,
        0, 0, 50, 51, 1, 0, 0, 0, 51, 52, 1, 0, 0, 0, 52, 53, 3, 5, 2, 0, 53, 55, 1, 0, 0, 0, 54, 48, 1, 0, 0,
        0, 54, 55, 1, 0, 0, 0, 55, 2, 1, 0, 0, 0, 56, 58, 2, 48, 57, 0, 57, 56, 1, 0, 0, 0, 58, 59, 1, 0, 0,
        0, 59, 57, 1, 0, 0, 0, 59, 60, 1, 0, 0, 0, 60, 67, 1, 0, 0, 0, 61, 63, 5, 46, 0, 0, 62, 64, 2, 48, 57,
        0, 63, 62, 1, 0, 0, 0, 64, 65, 1, 0, 0, 0, 65, 63, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 68, 1, 0, 0, 0,
        67, 61, 1, 0, 0, 0, 67, 68, 1, 0, 0, 0, 68, 4, 1, 0, 0, 0, 69, 71, 2, 48, 57, 0, 70, 69, 1, 0, 0, 0,
        71, 72, 1, 0, 0, 0, 72, 70, 1, 0, 0, 0, 72, 73, 1, 0, 0, 0, 73, 6, 1, 0, 0, 0, 74, 75, 7, 0, 0, 0, 75,
        8, 1, 0, 0, 0, 76, 77, 7, 1, 0, 0, 77, 10, 1, 0, 0, 0, 78, 79, 7, 2, 0, 0, 79, 12, 1, 0, 0, 0, 80, 81,
        7, 3, 0, 0, 81, 14, 1, 0, 0, 0, 82, 83, 7, 4, 0, 0, 83, 16, 1, 0, 0, 0, 84, 85, 5, 40, 0, 0, 85, 18,
        1, 0, 0, 0, 86, 87, 5, 41, 0, 0, 87, 20, 1, 0, 0, 0, 88, 89, 5, 43, 0, 0, 89, 22, 1, 0, 0, 0, 90, 91,
        5, 45, 0, 0, 91, 24, 1, 0, 0, 0, 92, 93, 7, 5, 0, 0, 93, 26, 1, 0, 0, 0, 94, 95, 5, 47, 0, 0, 95, 28,
        1, 0, 0, 0, 96, 97, 5, 62, 0, 0, 97, 30, 1, 0, 0, 0, 98, 99, 5, 60, 0, 0, 99, 32, 1, 0, 0, 0, 100, 101,
        5, 61, 0, 0, 101, 34, 1, 0, 0, 0, 102, 103, 5, 46, 0, 0, 103, 36, 1, 0, 0, 0, 104, 105, 5, 94, 0,
        0, 105, 38, 1, 0, 0, 0, 106, 107, 7, 6, 0, 0, 107, 108, 7, 7, 0, 0, 108, 109, 7, 8, 0, 0, 109, 40,
        1, 0, 0, 0, 110, 111, 3, 9, 4, 0, 111, 112, 3, 11, 5, 0, 112, 113, 3, 13, 6, 0, 113, 42, 1, 0, 0,
        0, 114, 115, 7, 9, 0, 0, 115, 44, 1, 0, 0, 0, 116, 118, 7, 10, 0, 0, 117, 116, 1, 0, 0, 0, 118, 119,
        1, 0, 0, 0, 119, 117, 1, 0, 0, 0, 119, 120, 1, 0, 0, 0, 120, 121, 1, 0, 0, 0, 121, 122, 6, 22, 0,
        0, 122, 46, 1, 0, 0, 0, 8, 0, 50, 54, 59, 65, 67, 72, 119, 1, 6, 0, 0];
    static __ATN;
    static get _ATN() {
        if (!arithmeticLexer.__ATN) {
            arithmeticLexer.__ATN = new antlr4_1.ATNDeserializer().deserialize(arithmeticLexer._serializedATN);
        }
        return arithmeticLexer.__ATN;
    }
    static DecisionsToDFA = arithmeticLexer._ATN.decisionToState.map((ds, index) => new antlr4_1.DFA(ds, index));
}
exports["default"] = arithmeticLexer;


/***/ }),

/***/ "./src/mathlib/userinput/arithmeticParser.ts":
/*!***************************************************!*\
  !*** ./src/mathlib/userinput/arithmeticParser.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Generated from ./src/mathlib/userinput/arithmetic.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RelopContext = exports.AtomContext = exports.SumContext = exports.Right_ClosedIsOpenContext = exports.OpenContext = exports.Right_ClosedImplicitProductContext = exports.ClosedIsRight_ClosedContext = exports.UnaryOnExpressionContext = exports.Right_closedContext = exports.ParenContext = exports.PowerContext = exports.ClosedAtomContext = exports.DivisionContext = exports.ProductContext = exports.IntegralContext = exports.LogContext = exports.ClosedContext = exports.ExpressionContext = exports.EquationContext = void 0;
const antlr4_1 = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.cjs");
class arithmeticParser extends antlr4_1.Parser {
    static SCIENTIFIC_NUMBER = 1;
    static LPAREN = 2;
    static RPAREN = 3;
    static PLUS = 4;
    static MINUS = 5;
    static TIMES = 6;
    static DIV = 7;
    static GT = 8;
    static LT = 9;
    static EQ = 10;
    static POINT = 11;
    static POW = 12;
    static INT = 13;
    static LOG = 14;
    static VARIABLE = 15;
    static WS = 16;
    static EOF = antlr4_1.Token.EOF;
    static RULE_equation = 0;
    static RULE_expression = 1;
    static RULE_closed = 2;
    static RULE_right_closed = 3;
    static RULE_open = 4;
    static RULE_atom = 5;
    static RULE_relop = 6;
    static literalNames = [null, null,
        "'('", "')'",
        "'+'", "'-'",
        null, "'/'",
        "'>'", "'<'",
        "'='", "'.'",
        "'^'"];
    static symbolicNames = [null, "SCIENTIFIC_NUMBER",
        "LPAREN", "RPAREN",
        "PLUS", "MINUS",
        "TIMES", "DIV",
        "GT", "LT",
        "EQ", "POINT",
        "POW", "INT",
        "LOG", "VARIABLE",
        "WS"];
    // tslint:disable:no-trailing-whitespace
    static ruleNames = [
        "equation", "expression", "closed", "right_closed", "open", "atom", "relop",
    ];
    get grammarFileName() { return "arithmetic.g4"; }
    get literalNames() { return arithmeticParser.literalNames; }
    get symbolicNames() { return arithmeticParser.symbolicNames; }
    get ruleNames() { return arithmeticParser.ruleNames; }
    get serializedATN() { return arithmeticParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new antlr4_1.FailedPredicateException(this, predicate, message);
    }
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.ParserATNSimulator(this, arithmeticParser._ATN, arithmeticParser.DecisionsToDFA, new antlr4_1.PredictionContextCache());
    }
    // @RuleVersion(0)
    equation() {
        let localctx = new EquationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, arithmeticParser.RULE_equation);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 14;
                this.expression();
                this.state = 15;
                this.relop();
                this.state = 16;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    expression() {
        let localctx = new ExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, arithmeticParser.RULE_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 18;
                this.open(0);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    closed(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let localctx = new ClosedContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        let _startState = 4;
        this.enterRecursionRule(localctx, 4, arithmeticParser.RULE_closed, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 33;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case 2:
                        {
                            localctx = new ParenContext(this, localctx);
                            this._ctx = localctx;
                            _prevctx = localctx;
                            this.state = 21;
                            this.match(arithmeticParser.LPAREN);
                            this.state = 22;
                            this.open(0);
                            this.state = 23;
                            this.match(arithmeticParser.RPAREN);
                        }
                        break;
                    case 1:
                    case 15:
                        {
                            localctx = new ClosedAtomContext(this, localctx);
                            this._ctx = localctx;
                            _prevctx = localctx;
                            this.state = 25;
                            this.atom();
                        }
                        break;
                    case 13:
                        {
                            localctx = new IntegralContext(this, localctx);
                            this._ctx = localctx;
                            _prevctx = localctx;
                            this.state = 26;
                            this.match(arithmeticParser.INT);
                            this.state = 27;
                            localctx._integrand = this.closed(5);
                        }
                        break;
                    case 14:
                        {
                            localctx = new LogContext(this, localctx);
                            this._ctx = localctx;
                            _prevctx = localctx;
                            this.state = 28;
                            this.match(arithmeticParser.LOG);
                            this.state = 30;
                            this._errHandler.sync(this);
                            switch (this._interp.adaptivePredict(this._input, 0, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 29;
                                        localctx._base = this.closed(0);
                                    }
                                    break;
                            }
                            this.state = 32;
                            localctx._content = this.closed(1);
                        }
                        break;
                    default:
                        throw new antlr4_1.NoViableAltException(this);
                }
                this._ctx.stop = this._input.LT(-1);
                this.state = 48;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
                while (_alt !== 2 && _alt !== antlr4_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = localctx;
                        {
                            this.state = 46;
                            this._errHandler.sync(this);
                            switch (this._interp.adaptivePredict(this._input, 3, this._ctx)) {
                                case 1:
                                    {
                                        localctx = new DivisionContext(this, new ClosedContext(this, _parentctx, _parentState));
                                        localctx._left = _prevctx;
                                        this.pushNewRecursionContext(localctx, _startState, arithmeticParser.RULE_closed);
                                        this.state = 35;
                                        if (!(this.precpred(this._ctx, 4))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                                        }
                                        this.state = 36;
                                        this.match(arithmeticParser.DIV);
                                        this.state = 37;
                                        localctx._right = this.closed(5);
                                    }
                                    break;
                                case 2:
                                    {
                                        localctx = new PowerContext(this, new ClosedContext(this, _parentctx, _parentState));
                                        localctx._left = _prevctx;
                                        this.pushNewRecursionContext(localctx, _startState, arithmeticParser.RULE_closed);
                                        this.state = 38;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 39;
                                        this.match(arithmeticParser.POW);
                                        this.state = 40;
                                        localctx._right = this.closed(4);
                                    }
                                    break;
                                case 3:
                                    {
                                        localctx = new ProductContext(this, new ClosedContext(this, _parentctx, _parentState));
                                        localctx._left = _prevctx;
                                        this.pushNewRecursionContext(localctx, _startState, arithmeticParser.RULE_closed);
                                        this.state = 41;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 43;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === 6) {
                                            {
                                                this.state = 42;
                                                this.match(arithmeticParser.TIMES);
                                            }
                                        }
                                        this.state = 45;
                                        localctx._right = this.closed(3);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 50;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    // @RuleVersion(0)
    right_closed(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let localctx = new Right_closedContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        let _startState = 6;
        this.enterRecursionRule(localctx, 6, arithmeticParser.RULE_right_closed, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 55;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case 1:
                    case 2:
                    case 13:
                    case 14:
                    case 15:
                        {
                            localctx = new ClosedIsRight_ClosedContext(this, localctx);
                            this._ctx = localctx;
                            _prevctx = localctx;
                            this.state = 52;
                            this.closed(0);
                        }
                        break;
                    case 4:
                    case 5:
                        {
                            localctx = new UnaryOnExpressionContext(this, localctx);
                            this._ctx = localctx;
                            _prevctx = localctx;
                            this.state = 53;
                            _la = this._input.LA(1);
                            if (!(_la === 4 || _la === 5)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 54;
                            this.closed(0);
                        }
                        break;
                    default:
                        throw new antlr4_1.NoViableAltException(this);
                }
                this._ctx.stop = this._input.LT(-1);
                this.state = 61;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);
                while (_alt !== 2 && _alt !== antlr4_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = localctx;
                        {
                            {
                                localctx = new Right_ClosedImplicitProductContext(this, new Right_closedContext(this, _parentctx, _parentState));
                                localctx._left = _prevctx;
                                this.pushNewRecursionContext(localctx, _startState, arithmeticParser.RULE_right_closed);
                                this.state = 57;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                                }
                                this.state = 58;
                                localctx._right = this.closed(0);
                            }
                        }
                    }
                    this.state = 63;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    // @RuleVersion(0)
    open(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let localctx = new OpenContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        let _startState = 8;
        this.enterRecursionRule(localctx, 8, arithmeticParser.RULE_open, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(localctx, 1);
            {
                {
                    localctx = new Right_ClosedIsOpenContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 65;
                    this.right_closed(0);
                }
                this._ctx.stop = this._input.LT(-1);
                this.state = 72;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
                while (_alt !== 2 && _alt !== antlr4_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = localctx;
                        {
                            {
                                localctx = new SumContext(this, new OpenContext(this, _parentctx, _parentState));
                                localctx._left = _prevctx;
                                this.pushNewRecursionContext(localctx, _startState, arithmeticParser.RULE_open);
                                this.state = 67;
                                if (!(this.precpred(this._ctx, 1))) {
                                    throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                                }
                                this.state = 68;
                                _la = this._input.LA(1);
                                if (!(_la === 4 || _la === 5)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 69;
                                localctx._right = this.right_closed(0);
                            }
                        }
                    }
                    this.state = 74;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    // @RuleVersion(0)
    atom() {
        let localctx = new AtomContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, arithmeticParser.RULE_atom);
        let _la;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 75;
                _la = this._input.LA(1);
                if (!(_la === 1 || _la === 15)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    relop() {
        let localctx = new RelopContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, arithmeticParser.RULE_relop);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 77;
                this.match(arithmeticParser.EQ);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sempred(localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 2:
                return this.closed_sempred(localctx, predIndex);
            case 3:
                return this.right_closed_sempred(localctx, predIndex);
            case 4:
                return this.open_sempred(localctx, predIndex);
        }
        return true;
    }
    closed_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 4);
            case 1:
                return this.precpred(this._ctx, 3);
            case 2:
                return this.precpred(this._ctx, 2);
        }
        return true;
    }
    right_closed_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 3:
                return this.precpred(this._ctx, 1);
        }
        return true;
    }
    open_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 4:
                return this.precpred(this._ctx, 1);
        }
        return true;
    }
    static _serializedATN = [4, 1, 16, 80, 2, 0, 7, 0, 2,
        1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 31, 8, 2, 1, 2, 3, 2, 34, 8, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 44, 8, 2, 1, 2, 5, 2, 47, 8, 2, 10, 2, 12, 2, 50, 9, 2, 1, 3,
        1, 3, 1, 3, 1, 3, 3, 3, 56, 8, 3, 1, 3, 1, 3, 5, 3, 60, 8, 3, 10, 3, 12, 3, 63, 9, 3, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 5, 4, 71, 8, 4, 10, 4, 12, 4, 74, 9, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 0, 3, 4, 6, 8, 7,
        0, 2, 4, 6, 8, 10, 12, 0, 2, 1, 0, 4, 5, 2, 0, 1, 1, 15, 15, 83, 0, 14, 1, 0, 0, 0, 2, 18, 1, 0, 0, 0,
        4, 33, 1, 0, 0, 0, 6, 55, 1, 0, 0, 0, 8, 64, 1, 0, 0, 0, 10, 75, 1, 0, 0, 0, 12, 77, 1, 0, 0, 0, 14, 15,
        3, 2, 1, 0, 15, 16, 3, 12, 6, 0, 16, 17, 3, 2, 1, 0, 17, 1, 1, 0, 0, 0, 18, 19, 3, 8, 4, 0, 19, 3, 1,
        0, 0, 0, 20, 21, 6, 2, -1, 0, 21, 22, 5, 2, 0, 0, 22, 23, 3, 8, 4, 0, 23, 24, 5, 3, 0, 0, 24, 34, 1,
        0, 0, 0, 25, 34, 3, 10, 5, 0, 26, 27, 5, 13, 0, 0, 27, 34, 3, 4, 2, 5, 28, 30, 5, 14, 0, 0, 29, 31,
        3, 4, 2, 0, 30, 29, 1, 0, 0, 0, 30, 31, 1, 0, 0, 0, 31, 32, 1, 0, 0, 0, 32, 34, 3, 4, 2, 1, 33, 20, 1,
        0, 0, 0, 33, 25, 1, 0, 0, 0, 33, 26, 1, 0, 0, 0, 33, 28, 1, 0, 0, 0, 34, 48, 1, 0, 0, 0, 35, 36, 10,
        4, 0, 0, 36, 37, 5, 7, 0, 0, 37, 47, 3, 4, 2, 5, 38, 39, 10, 3, 0, 0, 39, 40, 5, 12, 0, 0, 40, 47, 3,
        4, 2, 4, 41, 43, 10, 2, 0, 0, 42, 44, 5, 6, 0, 0, 43, 42, 1, 0, 0, 0, 43, 44, 1, 0, 0, 0, 44, 45, 1,
        0, 0, 0, 45, 47, 3, 4, 2, 3, 46, 35, 1, 0, 0, 0, 46, 38, 1, 0, 0, 0, 46, 41, 1, 0, 0, 0, 47, 50, 1, 0,
        0, 0, 48, 46, 1, 0, 0, 0, 48, 49, 1, 0, 0, 0, 49, 5, 1, 0, 0, 0, 50, 48, 1, 0, 0, 0, 51, 52, 6, 3, -1,
        0, 52, 56, 3, 4, 2, 0, 53, 54, 7, 0, 0, 0, 54, 56, 3, 4, 2, 0, 55, 51, 1, 0, 0, 0, 55, 53, 1, 0, 0, 0,
        56, 61, 1, 0, 0, 0, 57, 58, 10, 1, 0, 0, 58, 60, 3, 4, 2, 0, 59, 57, 1, 0, 0, 0, 60, 63, 1, 0, 0, 0,
        61, 59, 1, 0, 0, 0, 61, 62, 1, 0, 0, 0, 62, 7, 1, 0, 0, 0, 63, 61, 1, 0, 0, 0, 64, 65, 6, 4, -1, 0, 65,
        66, 3, 6, 3, 0, 66, 72, 1, 0, 0, 0, 67, 68, 10, 1, 0, 0, 68, 69, 7, 0, 0, 0, 69, 71, 3, 6, 3, 0, 70,
        67, 1, 0, 0, 0, 71, 74, 1, 0, 0, 0, 72, 70, 1, 0, 0, 0, 72, 73, 1, 0, 0, 0, 73, 9, 1, 0, 0, 0, 74, 72,
        1, 0, 0, 0, 75, 76, 7, 1, 0, 0, 76, 11, 1, 0, 0, 0, 77, 78, 5, 10, 0, 0, 78, 13, 1, 0, 0, 0, 8, 30, 33,
        43, 46, 48, 55, 61, 72];
    static __ATN;
    static get _ATN() {
        if (!arithmeticParser.__ATN) {
            arithmeticParser.__ATN = new antlr4_1.ATNDeserializer().deserialize(arithmeticParser._serializedATN);
        }
        return arithmeticParser.__ATN;
    }
    static DecisionsToDFA = arithmeticParser._ATN.decisionToState.map((ds, index) => new antlr4_1.DFA(ds, index));
}
exports["default"] = arithmeticParser;
class EquationContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    expression_list() {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    expression(i) {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
    relop() {
        return this.getTypedRuleContext(RelopContext, 0);
    }
    get ruleIndex() {
        return arithmeticParser.RULE_equation;
    }
    enterRule(listener) {
        if (listener.enterEquation) {
            listener.enterEquation(this);
        }
    }
    exitRule(listener) {
        if (listener.exitEquation) {
            listener.exitEquation(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEquation) {
            return visitor.visitEquation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.EquationContext = EquationContext;
class ExpressionContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    open() {
        return this.getTypedRuleContext(OpenContext, 0);
    }
    get ruleIndex() {
        return arithmeticParser.RULE_expression;
    }
    enterRule(listener) {
        if (listener.enterExpression) {
            listener.enterExpression(this);
        }
    }
    exitRule(listener) {
        if (listener.exitExpression) {
            listener.exitExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionContext = ExpressionContext;
class ClosedContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    get ruleIndex() {
        return arithmeticParser.RULE_closed;
    }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.ClosedContext = ClosedContext;
class LogContext extends ClosedContext {
    _base;
    _content;
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    LOG() {
        return this.getToken(arithmeticParser.LOG, 0);
    }
    closed_list() {
        return this.getTypedRuleContexts(ClosedContext);
    }
    closed(i) {
        return this.getTypedRuleContext(ClosedContext, i);
    }
    enterRule(listener) {
        if (listener.enterLog) {
            listener.enterLog(this);
        }
    }
    exitRule(listener) {
        if (listener.exitLog) {
            listener.exitLog(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLog) {
            return visitor.visitLog(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LogContext = LogContext;
class IntegralContext extends ClosedContext {
    _integrand;
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    INT() {
        return this.getToken(arithmeticParser.INT, 0);
    }
    closed() {
        return this.getTypedRuleContext(ClosedContext, 0);
    }
    enterRule(listener) {
        if (listener.enterIntegral) {
            listener.enterIntegral(this);
        }
    }
    exitRule(listener) {
        if (listener.exitIntegral) {
            listener.exitIntegral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIntegral) {
            return visitor.visitIntegral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IntegralContext = IntegralContext;
class ProductContext extends ClosedContext {
    _left;
    _right;
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    closed_list() {
        return this.getTypedRuleContexts(ClosedContext);
    }
    closed(i) {
        return this.getTypedRuleContext(ClosedContext, i);
    }
    TIMES() {
        return this.getToken(arithmeticParser.TIMES, 0);
    }
    enterRule(listener) {
        if (listener.enterProduct) {
            listener.enterProduct(this);
        }
    }
    exitRule(listener) {
        if (listener.exitProduct) {
            listener.exitProduct(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitProduct) {
            return visitor.visitProduct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ProductContext = ProductContext;
class DivisionContext extends ClosedContext {
    _left;
    _right;
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    DIV() {
        return this.getToken(arithmeticParser.DIV, 0);
    }
    closed_list() {
        return this.getTypedRuleContexts(ClosedContext);
    }
    closed(i) {
        return this.getTypedRuleContext(ClosedContext, i);
    }
    enterRule(listener) {
        if (listener.enterDivision) {
            listener.enterDivision(this);
        }
    }
    exitRule(listener) {
        if (listener.exitDivision) {
            listener.exitDivision(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDivision) {
            return visitor.visitDivision(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DivisionContext = DivisionContext;
class ClosedAtomContext extends ClosedContext {
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    atom() {
        return this.getTypedRuleContext(AtomContext, 0);
    }
    enterRule(listener) {
        if (listener.enterClosedAtom) {
            listener.enterClosedAtom(this);
        }
    }
    exitRule(listener) {
        if (listener.exitClosedAtom) {
            listener.exitClosedAtom(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitClosedAtom) {
            return visitor.visitClosedAtom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ClosedAtomContext = ClosedAtomContext;
class PowerContext extends ClosedContext {
    _left;
    _right;
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    POW() {
        return this.getToken(arithmeticParser.POW, 0);
    }
    closed_list() {
        return this.getTypedRuleContexts(ClosedContext);
    }
    closed(i) {
        return this.getTypedRuleContext(ClosedContext, i);
    }
    enterRule(listener) {
        if (listener.enterPower) {
            listener.enterPower(this);
        }
    }
    exitRule(listener) {
        if (listener.exitPower) {
            listener.exitPower(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPower) {
            return visitor.visitPower(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PowerContext = PowerContext;
class ParenContext extends ClosedContext {
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    LPAREN() {
        return this.getToken(arithmeticParser.LPAREN, 0);
    }
    open() {
        return this.getTypedRuleContext(OpenContext, 0);
    }
    RPAREN() {
        return this.getToken(arithmeticParser.RPAREN, 0);
    }
    enterRule(listener) {
        if (listener.enterParen) {
            listener.enterParen(this);
        }
    }
    exitRule(listener) {
        if (listener.exitParen) {
            listener.exitParen(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParen) {
            return visitor.visitParen(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ParenContext = ParenContext;
class Right_closedContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    get ruleIndex() {
        return arithmeticParser.RULE_right_closed;
    }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.Right_closedContext = Right_closedContext;
class UnaryOnExpressionContext extends Right_closedContext {
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    closed() {
        return this.getTypedRuleContext(ClosedContext, 0);
    }
    PLUS() {
        return this.getToken(arithmeticParser.PLUS, 0);
    }
    MINUS() {
        return this.getToken(arithmeticParser.MINUS, 0);
    }
    enterRule(listener) {
        if (listener.enterUnaryOnExpression) {
            listener.enterUnaryOnExpression(this);
        }
    }
    exitRule(listener) {
        if (listener.exitUnaryOnExpression) {
            listener.exitUnaryOnExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnaryOnExpression) {
            return visitor.visitUnaryOnExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UnaryOnExpressionContext = UnaryOnExpressionContext;
class ClosedIsRight_ClosedContext extends Right_closedContext {
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    closed() {
        return this.getTypedRuleContext(ClosedContext, 0);
    }
    enterRule(listener) {
        if (listener.enterClosedIsRight_Closed) {
            listener.enterClosedIsRight_Closed(this);
        }
    }
    exitRule(listener) {
        if (listener.exitClosedIsRight_Closed) {
            listener.exitClosedIsRight_Closed(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitClosedIsRight_Closed) {
            return visitor.visitClosedIsRight_Closed(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ClosedIsRight_ClosedContext = ClosedIsRight_ClosedContext;
class Right_ClosedImplicitProductContext extends Right_closedContext {
    _left;
    _right;
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    right_closed() {
        return this.getTypedRuleContext(Right_closedContext, 0);
    }
    closed() {
        return this.getTypedRuleContext(ClosedContext, 0);
    }
    enterRule(listener) {
        if (listener.enterRight_ClosedImplicitProduct) {
            listener.enterRight_ClosedImplicitProduct(this);
        }
    }
    exitRule(listener) {
        if (listener.exitRight_ClosedImplicitProduct) {
            listener.exitRight_ClosedImplicitProduct(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRight_ClosedImplicitProduct) {
            return visitor.visitRight_ClosedImplicitProduct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.Right_ClosedImplicitProductContext = Right_ClosedImplicitProductContext;
class OpenContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    get ruleIndex() {
        return arithmeticParser.RULE_open;
    }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.OpenContext = OpenContext;
class Right_ClosedIsOpenContext extends OpenContext {
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    right_closed() {
        return this.getTypedRuleContext(Right_closedContext, 0);
    }
    enterRule(listener) {
        if (listener.enterRight_ClosedIsOpen) {
            listener.enterRight_ClosedIsOpen(this);
        }
    }
    exitRule(listener) {
        if (listener.exitRight_ClosedIsOpen) {
            listener.exitRight_ClosedIsOpen(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRight_ClosedIsOpen) {
            return visitor.visitRight_ClosedIsOpen(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.Right_ClosedIsOpenContext = Right_ClosedIsOpenContext;
class SumContext extends OpenContext {
    _left;
    _right;
    constructor(parser, ctx) {
        super(parser, ctx.parentCtx, ctx.invokingState);
        super.copyFrom(ctx);
    }
    open() {
        return this.getTypedRuleContext(OpenContext, 0);
    }
    PLUS() {
        return this.getToken(arithmeticParser.PLUS, 0);
    }
    MINUS() {
        return this.getToken(arithmeticParser.MINUS, 0);
    }
    right_closed() {
        return this.getTypedRuleContext(Right_closedContext, 0);
    }
    enterRule(listener) {
        if (listener.enterSum) {
            listener.enterSum(this);
        }
    }
    exitRule(listener) {
        if (listener.exitSum) {
            listener.exitSum(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSum) {
            return visitor.visitSum(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SumContext = SumContext;
class AtomContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    SCIENTIFIC_NUMBER() {
        return this.getToken(arithmeticParser.SCIENTIFIC_NUMBER, 0);
    }
    VARIABLE() {
        return this.getToken(arithmeticParser.VARIABLE, 0);
    }
    get ruleIndex() {
        return arithmeticParser.RULE_atom;
    }
    enterRule(listener) {
        if (listener.enterAtom) {
            listener.enterAtom(this);
        }
    }
    exitRule(listener) {
        if (listener.exitAtom) {
            listener.exitAtom(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAtom) {
            return visitor.visitAtom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.AtomContext = AtomContext;
class RelopContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    EQ() {
        return this.getToken(arithmeticParser.EQ, 0);
    }
    get ruleIndex() {
        return arithmeticParser.RULE_relop;
    }
    enterRule(listener) {
        if (listener.enterRelop) {
            listener.enterRelop(this);
        }
    }
    exitRule(listener) {
        if (listener.exitRelop) {
            listener.exitRelop(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRelop) {
            return visitor.visitRelop(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.RelopContext = RelopContext;


/***/ }),

/***/ "./src/mathlib/userinput/arithmeticVisitor.ts":
/*!****************************************************!*\
  !*** ./src/mathlib/userinput/arithmeticVisitor.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Generated from ./src/mathlib/userinput/arithmetic.g4 by ANTLR 4.13.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const antlr4_1 = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.cjs");
/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `arithmeticParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
class arithmeticVisitor extends antlr4_1.ParseTreeVisitor {
    /**
     * Visit a parse tree produced by `arithmeticParser.equation`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEquation;
    /**
     * Visit a parse tree produced by `arithmeticParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression;
    /**
     * Visit a parse tree produced by the `Log`
     * labeled alternative in `arithmeticParser.closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLog;
    /**
     * Visit a parse tree produced by the `Integral`
     * labeled alternative in `arithmeticParser.closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIntegral;
    /**
     * Visit a parse tree produced by the `Product`
     * labeled alternative in `arithmeticParser.closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitProduct;
    /**
     * Visit a parse tree produced by the `Division`
     * labeled alternative in `arithmeticParser.closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDivision;
    /**
     * Visit a parse tree produced by the `ClosedAtom`
     * labeled alternative in `arithmeticParser.closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitClosedAtom;
    /**
     * Visit a parse tree produced by the `Power`
     * labeled alternative in `arithmeticParser.closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPower;
    /**
     * Visit a parse tree produced by the `Paren`
     * labeled alternative in `arithmeticParser.closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitParen;
    /**
     * Visit a parse tree produced by the `UnaryOnExpression`
     * labeled alternative in `arithmeticParser.right_closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUnaryOnExpression;
    /**
     * Visit a parse tree produced by the `ClosedIsRight_Closed`
     * labeled alternative in `arithmeticParser.right_closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitClosedIsRight_Closed;
    /**
     * Visit a parse tree produced by the `Right_ClosedImplicitProduct`
     * labeled alternative in `arithmeticParser.right_closed`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRight_ClosedImplicitProduct;
    /**
     * Visit a parse tree produced by the `Right_ClosedIsOpen`
     * labeled alternative in `arithmeticParser.open`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRight_ClosedIsOpen;
    /**
     * Visit a parse tree produced by the `Sum`
     * labeled alternative in `arithmeticParser.open`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSum;
    /**
     * Visit a parse tree produced by `arithmeticParser.atom`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAtom;
    /**
     * Visit a parse tree produced by `arithmeticParser.relop`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelop;
}
exports["default"] = arithmeticVisitor;


/***/ }),

/***/ "./src/mathlib/util/MathMLHelpers.ts":
/*!*******************************************!*\
  !*** ./src/mathlib/util/MathMLHelpers.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.inMathBlock = exports.inMath = exports.inRow = exports.inParen = void 0;
/**
 * Wraps the given mathml string in mathml parenthases.
 * @param str
 */
function inParen(str) {
    return "<mo>(</mo>" + str + "<mo>)</mo>";
}
exports.inParen = inParen;
/**
 * Puts the given mathml expression in a row so that
 * it doesn't get divided by mathjax.
 * @param str
 * @returns
 */
function inRow(str) {
    return "<mrow>" + str + "</mrow>";
}
exports.inRow = inRow;
/**
 * Wraps the given string in <math></math>
 * @param str
 */
function inMath(str) {
    return "<math>" + str + "</math>";
}
exports.inMath = inMath;
/**
 * Wraps the given string in <math display='block'></math>
 * @param str
 */
function inMathBlock(str) {
    return "<math display='block'>" + str + "</math>";
}
exports.inMathBlock = inMathBlock;


/***/ }),

/***/ "./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts":
/*!***********************************************************!*\
  !*** ./src/mathlib/util/ThingsThatShouldBeInTheStdLib.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.has = exports.addAll = exports.setOf = void 0;
function setOf(...arr) {
    const out = new Set();
    arr.forEach(e => out.add(e));
    return out;
}
exports.setOf = setOf;
/**
 * Adds the given elements to the given collection
 * @param collection
 * @param elements
 */
function addAll(collection, ...elements) {
    for (const e of elements) {
        collection.add(e);
    }
}
exports.addAll = addAll;
/**
 * Checks if the given element is in the given collection
 * using referencial equality.
 * @param collection
 * @param element
 * @returns True if the collection has the element, false otherwise.
 */
function has(collection, element) {
    for (const e of collection) {
        if (e === element)
            return true;
    }
    return false;
}
exports.has = has;


/***/ }),

/***/ "./src/mathlib/util/assert.ts":
/*!************************************!*\
  !*** ./src/mathlib/util/assert.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.for_some = exports.for_all = exports.assert = void 0;
/**
 * Checks if the given expression evaluated to true. If not, throws error
 * with the message given.
 * @param msg Displayed if the expression is false. Defaults to "Failed Assert"
 */
function assert(exp, msg = "Failed assert") {
    if (!exp)
        throw new Error(msg);
}
exports.assert = assert;
function for_all(iterable, exp) {
    for (const i of iterable) {
        if (!exp(i))
            return false;
    }
    return true;
}
exports.for_all = for_all;
function for_some(iterable, exp) {
    for (const i of iterable) {
        if (exp(i))
            return true;
    }
    return false;
}
exports.for_some = for_some;


/***/ }),

/***/ "./node_modules/antlr4/dist/antlr4.web.cjs":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/dist/antlr4.web.cjs ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

(()=>{var t={92:()=>{}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,n){if("object"!==t(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}n.r(r),n.d(r,{ATN:()=>Fe,ATNDeserializer:()=>Ho,BailErrorStrategy:()=>ta,CharStream:()=>aa,CharStreams:()=>va,CommonToken:()=>yi,CommonTokenStream:()=>Ra,DFA:()=>cc,DiagnosticErrorListener:()=>Ic,ErrorListener:()=>Go,FailedPredicateException:()=>jc,InputStream:()=>aa,Interval:()=>B,IntervalSet:()=>V,LL1Analyzer:()=>Ie,Lexer:()=>Ui,LexerATNSimulator:()=>Eu,NoViableAltException:()=>Bu,ParseTreeListener:()=>yc,ParseTreeVisitor:()=>vc,ParseTreeWalker:()=>gc,Parser:()=>Ua,ParserATNSimulator:()=>Yu,ParserRuleContext:()=>el,PredictionContextCache:()=>Xu,PredictionMode:()=>Iu,RecognitionException:()=>xi,RuleContext:()=>ee,RuleNode:()=>Ut,TerminalNode:()=>Ht,Token:()=>o,arrayToString:()=>b,default:()=>Ol});var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.source=null,this.type=null,this.channel=null,this.start=null,this.stop=null,this.tokenIndex=null,this.line=null,this.column=null,this._text=null}var n,r;return n=t,(r=[{key:"getTokenSource",value:function(){return this.source[0]}},{key:"getInputStream",value:function(){return this.source[1]}},{key:"text",get:function(){return this._text},set:function(t){this._text=t}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function i(t,e){if(!Array.isArray(t)||!Array.isArray(e))return!1;if(t===e)return!0;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!(t[n]===e[n]||t[n].equals&&t[n].equals(e[n])))return!1;return!0}function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}o.INVALID_TYPE=0,o.EPSILON=-2,o.MIN_USER_TOKEN_TYPE=1,o.EOF=-1,o.DEFAULT_CHANNEL=0,o.HIDDEN_CHANNEL=1;var c=Math.round(Math.random()*Math.pow(2,32));function a(t){if(!t)return 0;var e,n,r=u(t),o="string"===r?t:!("object"!==r||!t.toString)&&t.toString();if(!o)return 0;for(var i=3&o.length,a=o.length-i,l=c,s=3432918353,f=461845907,p=0;p<a;)n=255&o.charCodeAt(p)|(255&o.charCodeAt(++p))<<8|(255&o.charCodeAt(++p))<<16|(255&o.charCodeAt(++p))<<24,++p,l=27492+(65535&(e=5*(65535&(l=(l^=n=(65535&(n=(n=(65535&n)*s+(((n>>>16)*s&65535)<<16)&4294967295)<<15|n>>>17))*f+(((n>>>16)*f&65535)<<16)&4294967295)<<13|l>>>19))+((5*(l>>>16)&65535)<<16)&4294967295))+((58964+(e>>>16)&65535)<<16);switch(n=0,i){case 3:n^=(255&o.charCodeAt(p+2))<<16;case 2:n^=(255&o.charCodeAt(p+1))<<8;case 1:l^=n=(65535&(n=(n=(65535&(n^=255&o.charCodeAt(p)))*s+(((n>>>16)*s&65535)<<16)&4294967295)<<15|n>>>17))*f+(((n>>>16)*f&65535)<<16)&4294967295}return l^=o.length,l=2246822507*(65535&(l^=l>>>16))+((2246822507*(l>>>16)&65535)<<16)&4294967295,l=3266489909*(65535&(l^=l>>>13))+((3266489909*(l>>>16)&65535)<<16)&4294967295,(l^=l>>>16)>>>0}function l(t){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l(t)}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==l(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==l(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===l(o)?o:String(o)),r)}var o}var f=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.count=0,this.hash=0}var e,n,r;return e=t,n=[{key:"update",value:function(){for(var t=0;t<arguments.length;t++){var e=arguments[t];if(null!=e)if(Array.isArray(e))this.update.apply(this,e);else{var n=0;switch(l(e)){case"undefined":case"function":continue;case"number":case"boolean":n=e;break;case"string":n=a(e);break;default:e.updateHashCode?e.updateHashCode(this):console.log("No updateHashCode for "+e.toString());continue}n=(n*=3432918353)<<15|n>>>17,n*=461845907,this.count=this.count+1;var r=this.hash^n;r=5*(r=r<<13|r>>>19)+3864292196,this.hash=r}}}},{key:"finish",value:function(){var t=this.hash^4*this.count;return t^=t>>>16,t*=2246822507,t^=t>>>13,(t*=3266489909)^t>>>16}}],r=[{key:"hashStuff",value:function(){var e=new t;return e.update.apply(e,arguments),e.finish()}}],n&&s(e.prototype,n),r&&s(e,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function p(t){return t?"string"==typeof t?a(t):t.hashCode():-1}function y(t,e){return t?t.equals(e):t===e}function h(t){return null===t?"null":t}function b(t){return Array.isArray(t)?"["+t.map(h).join(", ")+"]":"null"}function v(t){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},v(t)}function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==v(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==v(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===v(o)?o:String(o)),r)}var o}var m="h-",g=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data={},this.hashFunction=e||p,this.equalsFunction=n||y}var e,n;return e=t,n=[{key:"add",value:function(t){var e=m+this.hashFunction(t);if(e in this.data){for(var n=this.data[e],r=0;r<n.length;r++)if(this.equalsFunction(t,n[r]))return n[r];return n.push(t),t}return this.data[e]=[t],t}},{key:"has",value:function(t){return null!=this.get(t)}},{key:"get",value:function(t){var e=m+this.hashFunction(t);if(e in this.data)for(var n=this.data[e],r=0;r<n.length;r++)if(this.equalsFunction(t,n[r]))return n[r];return null}},{key:"values",value:function(){var t=this;return Object.keys(this.data).filter((function(t){return t.startsWith(m)})).flatMap((function(e){return t.data[e]}),this)}},{key:"toString",value:function(){return b(this.values())}},{key:"length",get:function(){var t=this;return Object.keys(this.data).filter((function(t){return t.startsWith(m)})).map((function(e){return t.data[e].length}),this).reduce((function(t,e){return t+e}),0)}}],n&&d(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function S(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&O(t,e)}function O(t,e){return O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},O(t,e)}function w(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=_(t);if(e){var o=_(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"===P(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,n)}}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function T(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function E(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==P(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==P(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===P(o)?o:String(o)),r)}var o}function k(t,e,n){return e&&E(t.prototype,e),n&&E(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var j=function(){function t(){T(this,t)}return k(t,[{key:"hashCode",value:function(){var t=new f;return this.updateHashCode(t),t.finish()}},{key:"evaluate",value:function(t,e){}},{key:"evalPrecedence",value:function(t,e){return this}}],[{key:"andContext",value:function(e,n){if(null===e||e===t.NONE)return n;if(null===n||n===t.NONE)return e;var r=new x(e,n);return 1===r.opnds.length?r.opnds[0]:r}},{key:"orContext",value:function(e,n){if(null===e)return n;if(null===n)return e;if(e===t.NONE||n===t.NONE)return t.NONE;var r=new R(e,n);return 1===r.opnds.length?r.opnds[0]:r}}]),t}(),x=function(t){S(n,t);var e=w(n);function n(t,r){var o;T(this,n),o=e.call(this);var i=new g;t instanceof n?t.opnds.map((function(t){i.add(t)})):i.add(t),r instanceof n?r.opnds.map((function(t){i.add(t)})):i.add(r);var u=C(i);if(u.length>0){var c=null;u.map((function(t){(null===c||t.precedence<c.precedence)&&(c=t)})),i.add(c)}return o.opnds=Array.from(i.values()),o}return k(n,[{key:"equals",value:function(t){return this===t||t instanceof n&&i(this.opnds,t.opnds)}},{key:"updateHashCode",value:function(t){t.update(this.opnds,"AND")}},{key:"evaluate",value:function(t,e){for(var n=0;n<this.opnds.length;n++)if(!this.opnds[n].evaluate(t,e))return!1;return!0}},{key:"evalPrecedence",value:function(t,e){for(var n=!1,r=[],o=0;o<this.opnds.length;o++){var i=this.opnds[o],u=i.evalPrecedence(t,e);if(n|=u!==i,null===u)return null;u!==j.NONE&&r.push(u)}if(!n)return this;if(0===r.length)return j.NONE;var c=null;return r.map((function(t){c=null===c?t:j.andContext(c,t)})),c}},{key:"toString",value:function(){var t=this.opnds.map((function(t){return t.toString()}));return(t.length>3?t.slice(3):t).join("&&")}}]),n}(j),R=function(t){S(n,t);var e=w(n);function n(t,r){var o;T(this,n),o=e.call(this);var i=new g;t instanceof n?t.opnds.map((function(t){i.add(t)})):i.add(t),r instanceof n?r.opnds.map((function(t){i.add(t)})):i.add(r);var u=C(i);if(u.length>0){var c=u.sort((function(t,e){return t.compareTo(e)})),a=c[c.length-1];i.add(a)}return o.opnds=Array.from(i.values()),o}return k(n,[{key:"equals",value:function(t){return this===t||t instanceof n&&i(this.opnds,t.opnds)}},{key:"updateHashCode",value:function(t){t.update(this.opnds,"OR")}},{key:"evaluate",value:function(t,e){for(var n=0;n<this.opnds.length;n++)if(this.opnds[n].evaluate(t,e))return!0;return!1}},{key:"evalPrecedence",value:function(t,e){for(var n=!1,r=[],o=0;o<this.opnds.length;o++){var i=this.opnds[o],u=i.evalPrecedence(t,e);if(n|=u!==i,u===j.NONE)return j.NONE;null!==u&&r.push(u)}if(!n)return this;if(0===r.length)return null;return r.map((function(t){return t})),null}},{key:"toString",value:function(){var t=this.opnds.map((function(t){return t.toString()}));return(t.length>3?t.slice(3):t).join("||")}}]),n}(j);function C(t){var e=[];return t.values().map((function(t){t instanceof j.PrecedencePredicate&&e.push(t)})),e}function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==A(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==A(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===A(o)?o:String(o)),r)}var o}function I(t,e){if(null===t){var n={state:null,alt:null,context:null,semanticContext:null};return e&&(n.reachesIntoOuterContext=0),n}var r={};return r.state=t.state||null,r.alt=void 0===t.alt?null:t.alt,r.context=t.context||null,r.semanticContext=t.semanticContext||null,e&&(r.reachesIntoOuterContext=t.reachesIntoOuterContext||0,r.precedenceFilterSuppressed=t.precedenceFilterSuppressed||!1),r}var L=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.checkContext(e,n),e=I(e),n=I(n,!0),this.state=null!==e.state?e.state:n.state,this.alt=null!==e.alt?e.alt:n.alt,this.context=null!==e.context?e.context:n.context,this.semanticContext=null!==e.semanticContext?e.semanticContext:null!==n.semanticContext?n.semanticContext:j.NONE,this.reachesIntoOuterContext=n.reachesIntoOuterContext,this.precedenceFilterSuppressed=n.precedenceFilterSuppressed}var e,n;return e=t,(n=[{key:"checkContext",value:function(t,e){null!==t.context&&void 0!==t.context||null!==e&&null!==e.context&&void 0!==e.context||(this.context=null)}},{key:"hashCode",value:function(){var t=new f;return this.updateHashCode(t),t.finish()}},{key:"updateHashCode",value:function(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext)}},{key:"equals",value:function(e){return this===e||e instanceof t&&this.state.stateNumber===e.state.stateNumber&&this.alt===e.alt&&(null===this.context?null===e.context:this.context.equals(e.context))&&this.semanticContext.equals(e.semanticContext)&&this.precedenceFilterSuppressed===e.precedenceFilterSuppressed}},{key:"hashCodeForConfigSet",value:function(){var t=new f;return t.update(this.state.stateNumber,this.alt,this.semanticContext),t.finish()}},{key:"equalsForConfigSet",value:function(e){return this===e||e instanceof t&&this.state.stateNumber===e.state.stateNumber&&this.alt===e.alt&&this.semanticContext.equals(e.semanticContext)}},{key:"toString",value:function(){return"("+this.state+","+this.alt+(null!==this.context?",["+this.context.toString()+"]":"")+(this.semanticContext!==j.NONE?","+this.semanticContext.toString():"")+(this.reachesIntoOuterContext>0?",up="+this.reachesIntoOuterContext:"")+")"}}])&&N(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function D(t){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},D(t)}function F(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==D(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===D(o)?o:String(o)),r)}var o}var B=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.start=e,this.stop=n}var e,n;return e=t,(n=[{key:"clone",value:function(){return new t(this.start,this.stop)}},{key:"contains",value:function(t){return t>=this.start&&t<this.stop}},{key:"toString",value:function(){return this.start===this.stop-1?this.start.toString():this.start.toString()+".."+(this.stop-1).toString()}},{key:"length",get:function(){return this.stop-this.start}}])&&F(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function M(t){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},M(t)}function U(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==M(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==M(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===M(o)?o:String(o)),r)}var o}B.INVALID_INTERVAL=new B(-1,-2);var V=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.intervals=null,this.readOnly=!1}var e,n;return e=t,n=[{key:"first",value:function(t){return null===this.intervals||0===this.intervals.length?o.INVALID_TYPE:this.intervals[0].start}},{key:"addOne",value:function(t){this.addInterval(new B(t,t+1))}},{key:"addRange",value:function(t,e){this.addInterval(new B(t,e+1))}},{key:"addInterval",value:function(t){if(null===this.intervals)this.intervals=[],this.intervals.push(t.clone());else{for(var e=0;e<this.intervals.length;e++){var n=this.intervals[e];if(t.stop<n.start)return void this.intervals.splice(e,0,t);if(t.stop===n.start)return void(this.intervals[e]=new B(t.start,n.stop));if(t.start<=n.stop)return this.intervals[e]=new B(Math.min(n.start,t.start),Math.max(n.stop,t.stop)),void this.reduce(e)}this.intervals.push(t.clone())}}},{key:"addSet",value:function(t){var e=this;return null!==t.intervals&&t.intervals.forEach((function(t){return e.addInterval(t)}),this),this}},{key:"reduce",value:function(t){if(t<this.intervals.length-1){var e=this.intervals[t],n=this.intervals[t+1];e.stop>=n.stop?(this.intervals.splice(t+1,1),this.reduce(t)):e.stop>=n.start&&(this.intervals[t]=new B(e.start,n.stop),this.intervals.splice(t+1,1))}}},{key:"complement",value:function(e,n){var r=new t;return r.addInterval(new B(e,n+1)),null!==this.intervals&&this.intervals.forEach((function(t){return r.removeRange(t)})),r}},{key:"contains",value:function(t){if(null===this.intervals)return!1;for(var e=0;e<this.intervals.length;e++)if(this.intervals[e].contains(t))return!0;return!1}},{key:"removeRange",value:function(t){if(t.start===t.stop-1)this.removeOne(t.start);else if(null!==this.intervals)for(var e=0,n=0;n<this.intervals.length;n++){var r=this.intervals[e];if(t.stop<=r.start)return;if(t.start>r.start&&t.stop<r.stop){this.intervals[e]=new B(r.start,t.start);var o=new B(t.stop,r.stop);return void this.intervals.splice(e,0,o)}t.start<=r.start&&t.stop>=r.stop?(this.intervals.splice(e,1),e-=1):t.start<r.stop?this.intervals[e]=new B(r.start,t.start):t.stop<r.stop&&(this.intervals[e]=new B(t.stop,r.stop)),e+=1}}},{key:"removeOne",value:function(t){if(null!==this.intervals)for(var e=0;e<this.intervals.length;e++){var n=this.intervals[e];if(t<n.start)return;if(t===n.start&&t===n.stop-1)return void this.intervals.splice(e,1);if(t===n.start)return void(this.intervals[e]=new B(n.start+1,n.stop));if(t===n.stop-1)return void(this.intervals[e]=new B(n.start,n.stop-1));if(t<n.stop-1){var r=new B(n.start,t);return n.start=t+1,void this.intervals.splice(e,0,r)}}}},{key:"toString",value:function(t,e,n){return t=t||null,e=e||null,n=n||!1,null===this.intervals?"{}":null!==t||null!==e?this.toTokenString(t,e):n?this.toCharString():this.toIndexString()}},{key:"toCharString",value:function(){for(var t=[],e=0;e<this.intervals.length;e++){var n=this.intervals[e];n.stop===n.start+1?n.start===o.EOF?t.push("<EOF>"):t.push("'"+String.fromCharCode(n.start)+"'"):t.push("'"+String.fromCharCode(n.start)+"'..'"+String.fromCharCode(n.stop-1)+"'")}return t.length>1?"{"+t.join(", ")+"}":t[0]}},{key:"toIndexString",value:function(){for(var t=[],e=0;e<this.intervals.length;e++){var n=this.intervals[e];n.stop===n.start+1?n.start===o.EOF?t.push("<EOF>"):t.push(n.start.toString()):t.push(n.start.toString()+".."+(n.stop-1).toString())}return t.length>1?"{"+t.join(", ")+"}":t[0]}},{key:"toTokenString",value:function(t,e){for(var n=[],r=0;r<this.intervals.length;r++)for(var o=this.intervals[r],i=o.start;i<o.stop;i++)n.push(this.elementName(t,e,i));return n.length>1?"{"+n.join(", ")+"}":n[0]}},{key:"elementName",value:function(t,e,n){return n===o.EOF?"<EOF>":n===o.EPSILON?"<EPSILON>":t[n]||e[n]}},{key:"length",get:function(){return this.intervals.map((function(t){return t.length})).reduce((function(t,e){return t+e}))}}],n&&U(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function z(t){return z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},z(t)}function q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==z(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==z(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===z(o)?o:String(o)),r)}var o}var H=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.atn=null,this.stateNumber=t.INVALID_STATE_NUMBER,this.stateType=null,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.nextTokenWithinRule=null}var e,n;return e=t,(n=[{key:"toString",value:function(){return this.stateNumber}},{key:"equals",value:function(e){return e instanceof t&&this.stateNumber===e.stateNumber}},{key:"isNonGreedyExitState",value:function(){return!1}},{key:"addTransition",value:function(t,e){void 0===e&&(e=-1),0===this.transitions.length?this.epsilonOnlyTransitions=t.isEpsilon:this.epsilonOnlyTransitions!==t.isEpsilon&&(this.epsilonOnlyTransitions=!1),-1===e?this.transitions.push(t):this.transitions.splice(e,1,t)}}])&&q(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function K(t){return K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},K(t)}function Y(t,e){return Y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Y(t,e)}function G(t,e){if(e&&("object"===K(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return W(t)}function W(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function X(t){return X=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},X(t)}H.INVALID_TYPE=0,H.BASIC=1,H.RULE_START=2,H.BLOCK_START=3,H.PLUS_BLOCK_START=4,H.STAR_BLOCK_START=5,H.TOKEN_START=6,H.RULE_STOP=7,H.BLOCK_END=8,H.STAR_LOOP_BACK=9,H.STAR_LOOP_ENTRY=10,H.PLUS_LOOP_BACK=11,H.LOOP_END=12,H.serializationNames=["INVALID","BASIC","RULE_START","BLOCK_START","PLUS_BLOCK_START","STAR_BLOCK_START","TOKEN_START","RULE_STOP","BLOCK_END","STAR_LOOP_BACK","STAR_LOOP_ENTRY","PLUS_LOOP_BACK","LOOP_END"],H.INVALID_STATE_NUMBER=-1;var $=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Y(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=X(n);if(r){var o=X(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return G(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.RULE_STOP,G(t,W(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(H);function J(t){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},J(t)}function Q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==J(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==J(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===J(o)?o:String(o)),r)}var o}function Z(t,e,n){return e&&Q(t.prototype,e),n&&Q(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var tt=Z((function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),null==e)throw"target cannot be null.";this.target=e,this.isEpsilon=!1,this.label=null}));function et(t){return et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},et(t)}function nt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==et(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==et(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===et(o)?o:String(o)),r)}var o}function rt(t,e){return rt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},rt(t,e)}function ot(t){return ot=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ot(t)}tt.EPSILON=1,tt.RANGE=2,tt.RULE=3,tt.PREDICATE=4,tt.ATOM=5,tt.ACTION=6,tt.SET=7,tt.NOT_SET=8,tt.WILDCARD=9,tt.PRECEDENCE=10,tt.serializationNames=["INVALID","EPSILON","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE"],tt.serializationTypes={EpsilonTransition:tt.EPSILON,RangeTransition:tt.RANGE,RuleTransition:tt.RULE,PredicateTransition:tt.PREDICATE,AtomTransition:tt.ATOM,ActionTransition:tt.ACTION,SetTransition:tt.SET,NotSetTransition:tt.NOT_SET,WildcardTransition:tt.WILDCARD,PrecedencePredicateTransition:tt.PRECEDENCE};var it=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&rt(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ot(r);if(o){var n=ot(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===et(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(o=i.call(this,t)).ruleIndex=e,o.precedence=n,o.followState=r,o.serializationType=tt.RULE,o.isEpsilon=!0,o}return e=u,(n=[{key:"matches",value:function(t,e,n){return!1}}])&&nt(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(tt);function ut(t){return ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ut(t)}function ct(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ut(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ut(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ut(o)?o:String(o)),r)}var o}function at(t,e){return at=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},at(t,e)}function lt(t){return lt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},lt(t)}var st=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&at(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=lt(r);if(i){var n=lt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===ut(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(n=u.call(this,t)).serializationType=tt.SET,null!=e?n.label=e:(n.label=new V,n.label.addOne(o.INVALID_TYPE)),n}return e=c,(n=[{key:"matches",value:function(t,e,n){return this.label.contains(t)}},{key:"toString",value:function(){return this.label.toString()}}])&&ct(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(tt);function ft(t){return ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ft(t)}function pt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ft(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ft(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ft(o)?o:String(o)),r)}var o}function yt(){return yt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=bt(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},yt.apply(this,arguments)}function ht(t,e){return ht=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ht(t,e)}function bt(t){return bt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},bt(t)}var vt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ht(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=bt(r);if(o){var n=bt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===ft(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t,e)).serializationType=tt.NOT_SET,n}return e=u,(n=[{key:"matches",value:function(t,e,n){return t>=e&&t<=n&&!yt(bt(u.prototype),"matches",this).call(this,t,e,n)}},{key:"toString",value:function(){return"~"+yt(bt(u.prototype),"toString",this).call(this)}}])&&pt(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(st);function dt(t){return dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},dt(t)}function mt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==dt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==dt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===dt(o)?o:String(o)),r)}var o}function gt(t,e){return gt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},gt(t,e)}function St(t){return St=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},St(t)}var Ot=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&gt(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=St(r);if(o){var n=St(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===dt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,t)).serializationType=tt.WILDCARD,e}return e=u,(n=[{key:"matches",value:function(t,e,n){return t>=e&&t<=n}},{key:"toString",value:function(){return"."}}])&&mt(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(tt);function wt(t){return wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},wt(t)}function _t(t,e){return _t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_t(t,e)}function Pt(t){return Pt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Pt(t)}var Tt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_t(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Pt(n);if(r){var o=Pt(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===wt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,t)}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(tt);function Et(t){return Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Et(t)}function kt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Et(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Et(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Et(o)?o:String(o)),r)}var o}function jt(t,e,n){return e&&kt(t.prototype,e),n&&kt(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function xt(t){return xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},xt(t)}function Rt(t,e){return Rt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Rt(t,e)}function Ct(t){return Ct=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ct(t)}function At(t){return At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},At(t)}function Nt(t,e){return Nt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Nt(t,e)}function It(t){return It=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},It(t)}var Lt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Nt(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=It(n);if(r){var o=It(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===At(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o.apply(this,arguments)}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Rt(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ct(n);if(r){var o=Ct(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===xt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o.apply(this,arguments)}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(jt((function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}))));function Dt(t){return Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Dt(t)}function Ft(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Dt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Dt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Dt(o)?o:String(o)),r)}var o}function Bt(t,e){return Bt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Bt(t,e)}function Mt(t){return Mt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Mt(t)}var Ut=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Bt(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Mt(r);if(o){var n=Mt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Dt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.apply(this,arguments)}return e=u,(n=[{key:"ruleContext",get:function(){throw new Error("missing interface implementation")}}])&&Ft(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Lt);function Vt(t){return Vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Vt(t)}function zt(t,e){return zt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},zt(t,e)}function qt(t){return qt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},qt(t)}var Ht=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&zt(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=qt(n);if(r){var o=qt(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Vt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o.apply(this,arguments)}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Lt);function Kt(t){return Kt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Kt(t)}function Yt(t,e){return Yt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Yt(t,e)}function Gt(t){return Gt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Gt(t)}var Wt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Yt(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Gt(n);if(r){var o=Gt(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Kt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o.apply(this,arguments)}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ht),Xt={toStringTree:function(t,e,n){e=e||null,null!==(n=n||null)&&(e=n.ruleNames);var r=Xt.getNodeText(t,e);r=function(t,e){return t=t.replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r")}(r);var o=t.getChildCount();if(0===o)return r;var i="("+r+" ";o>0&&(r=Xt.toStringTree(t.getChild(0),e),i=i.concat(r));for(var u=1;u<o;u++)r=Xt.toStringTree(t.getChild(u),e),i=i.concat(" "+r);return i.concat(")")},getNodeText:function(t,e,n){if(e=e||null,null!==(n=n||null)&&(e=n.ruleNames),null!==e){if(t instanceof Ut){var r=t.ruleContext.getAltNumber();return 0!=r?e[t.ruleIndex]+":"+r:e[t.ruleIndex]}if(t instanceof Wt)return t.toString();if(t instanceof Ht&&null!==t.symbol)return t.symbol.text}var i=t.getPayload();return i instanceof o?i.text:t.getPayload().toString()},getChildren:function(t){for(var e=[],n=0;n<t.getChildCount();n++)e.push(t.getChild(n));return e},getAncestors:function(t){var e=[];for(t=t.getParent();null!==t;)e=[t].concat(e),t=t.getParent();return e},findAllTokenNodes:function(t,e){return Xt.findAllNodes(t,e,!0)},findAllRuleNodes:function(t,e){return Xt.findAllNodes(t,e,!1)},findAllNodes:function(t,e,n){var r=[];return Xt._findAllNodes(t,e,n,r),r},_findAllNodes:function(t,e,n,r){n&&t instanceof Ht?t.symbol.type===e&&r.push(t):!n&&t instanceof Ut&&t.ruleIndex===e&&r.push(t);for(var o=0;o<t.getChildCount();o++)Xt._findAllNodes(t.getChild(o),e,n,r)},descendants:function(t){for(var e=[t],n=0;n<t.getChildCount();n++)e=e.concat(Xt.descendants(t.getChild(n)));return e}};const $t=Xt;function Jt(t){return Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Jt(t)}function Qt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Jt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Jt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Jt(o)?o:String(o)),r)}var o}function Zt(t,e){return Zt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Zt(t,e)}function te(t){return te=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},te(t)}var ee=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Zt(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=te(r);if(o){var n=te(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Jt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this)).parentCtx=t||null,n.invokingState=e||-1,n}return e=u,(n=[{key:"depth",value:function(){for(var t=0,e=this;null!==e;)e=e.parentCtx,t+=1;return t}},{key:"isEmpty",value:function(){return-1===this.invokingState}},{key:"getSourceInterval",value:function(){return B.INVALID_INTERVAL}},{key:"ruleContext",get:function(){return this}},{key:"getPayload",value:function(){return this}},{key:"getText",value:function(){return 0===this.getChildCount()?"":this.children.map((function(t){return t.getText()})).join("")}},{key:"getAltNumber",value:function(){return 0}},{key:"setAltNumber",value:function(t){}},{key:"getChild",value:function(t){return null}},{key:"getChildCount",value:function(){return 0}},{key:"accept",value:function(t){return t.visitChildren(this)}},{key:"toStringTree",value:function(t,e){return $t.toStringTree(this,t,e)}},{key:"toString",value:function(t,e){t=t||null,e=e||null;for(var n=this,r="[";null!==n&&n!==e;){if(null===t)n.isEmpty()||(r+=n.invokingState);else{var o=n.ruleIndex;r+=o>=0&&o<t.length?t[o]:""+o}null===n.parentCtx||null===t&&n.parentCtx.isEmpty()||(r+=" "),n=n.parentCtx}return r+"]"}}])&&Qt(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Ut);function ne(t){return ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ne(t)}function re(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ne(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ne(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ne(o)?o:String(o)),r)}var o}var oe=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.cachedHashCode=e}var e,n;return e=t,(n=[{key:"isEmpty",value:function(){return this===t.EMPTY}},{key:"hasEmptyPath",value:function(){return this.getReturnState(this.length-1)===t.EMPTY_RETURN_STATE}},{key:"hashCode",value:function(){return this.cachedHashCode}},{key:"updateHashCode",value:function(t){t.update(this.cachedHashCode)}}])&&re(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function ie(t){return ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ie(t)}function ue(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ie(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ie(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ie(o)?o:String(o)),r)}var o}function ce(t,e){return ce=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ce(t,e)}function ae(t,e){if(e&&("object"===ie(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return le(t)}function le(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function se(t){return se=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},se(t)}oe.EMPTY=null,oe.EMPTY_RETURN_STATE=2147483647,oe.globalNodeCount=1,oe.id=oe.globalNodeCount,oe.trace_atn_sim=!1;var fe=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ce(t,e)}(c,t);var e,n,r,o,u=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=se(r);if(o){var n=se(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return ae(this,t)});function c(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c);var r=new f;r.update(t,e);var o=r.finish();return(n=u.call(this,o)).parents=t,n.returnStates=e,ae(n,le(n))}return e=c,n=[{key:"isEmpty",value:function(){return this.returnStates[0]===oe.EMPTY_RETURN_STATE}},{key:"getParent",value:function(t){return this.parents[t]}},{key:"getReturnState",value:function(t){return this.returnStates[t]}},{key:"equals",value:function(t){return this===t||t instanceof c&&this.hashCode()===t.hashCode()&&i(this.returnStates,t.returnStates)&&i(this.parents,t.parents)}},{key:"toString",value:function(){if(this.isEmpty())return"[]";for(var t="[",e=0;e<this.returnStates.length;e++)e>0&&(t+=", "),this.returnStates[e]!==oe.EMPTY_RETURN_STATE?(t+=this.returnStates[e],null!==this.parents[e]?t=t+" "+this.parents[e]:t+="null"):t+="$";return t+"]"}},{key:"length",get:function(){return this.returnStates.length}}],n&&ue(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(oe);function pe(t){return pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pe(t)}function ye(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==pe(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==pe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===pe(o)?o:String(o)),r)}var o}function he(t,e){return he=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},he(t,e)}function be(t){return be=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},be(t)}var ve=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&he(t,e)}(c,t);var e,n,r,o,i,u=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=be(o);if(i){var n=be(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===pe(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c);var r,o=new f;return null!==t?o.update(t,e):o.update(1),r=o.finish(),(n=u.call(this,r)).parentCtx=t,n.returnState=e,n}return e=c,r=[{key:"create",value:function(t,e){return e===oe.EMPTY_RETURN_STATE&&null===t?oe.EMPTY:new c(t,e)}}],(n=[{key:"getParent",value:function(t){return this.parentCtx}},{key:"getReturnState",value:function(t){return this.returnState}},{key:"equals",value:function(t){return this===t||t instanceof c&&this.hashCode()===t.hashCode()&&this.returnState===t.returnState&&(null==this.parentCtx?null==t.parentCtx:this.parentCtx.equals(t.parentCtx))}},{key:"toString",value:function(){var t=null===this.parentCtx?"":this.parentCtx.toString();return 0===t.length?this.returnState===oe.EMPTY_RETURN_STATE?"$":""+this.returnState:this.returnState+" "+t}},{key:"length",get:function(){return 1}}])&&ye(e.prototype,n),r&&ye(e,r),Object.defineProperty(e,"prototype",{writable:!1}),c}(oe);function de(t){return de="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},de(t)}function me(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==de(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==de(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===de(o)?o:String(o)),r)}var o}function ge(t,e){return ge=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ge(t,e)}function Se(t){return Se=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Se(t)}var Oe=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ge(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Se(r);if(o){var n=Se(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===de(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this,null,oe.EMPTY_RETURN_STATE)}return e=u,(n=[{key:"isEmpty",value:function(){return!0}},{key:"getParent",value:function(t){return null}},{key:"getReturnState",value:function(t){return this.returnState}},{key:"equals",value:function(t){return this===t}},{key:"toString",value:function(){return"$"}}])&&me(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(ve);function we(t){return we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},we(t)}function _e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==we(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==we(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===we(o)?o:String(o)),r)}var o}oe.EMPTY=new Oe;var Pe="h-",Te=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data={},this.hashFunction=e||p,this.equalsFunction=n||y}var e,n;return e=t,n=[{key:"set",value:function(t,e){var n=Pe+this.hashFunction(t);if(n in this.data){for(var r=this.data[n],o=0;o<r.length;o++){var i=r[o];if(this.equalsFunction(t,i.key)){var u=i.value;return i.value=e,u}}return r.push({key:t,value:e}),e}return this.data[n]=[{key:t,value:e}],e}},{key:"containsKey",value:function(t){var e=Pe+this.hashFunction(t);if(e in this.data)for(var n=this.data[e],r=0;r<n.length;r++){var o=n[r];if(this.equalsFunction(t,o.key))return!0}return!1}},{key:"get",value:function(t){var e=Pe+this.hashFunction(t);if(e in this.data)for(var n=this.data[e],r=0;r<n.length;r++){var o=n[r];if(this.equalsFunction(t,o.key))return o.value}return null}},{key:"entries",value:function(){var t=this;return Object.keys(this.data).filter((function(t){return t.startsWith(Pe)})).flatMap((function(e){return t.data[e]}),this)}},{key:"getKeys",value:function(){return this.entries().map((function(t){return t.key}))}},{key:"getValues",value:function(){return this.entries().map((function(t){return t.value}))}},{key:"toString",value:function(){return"["+this.entries().map((function(t){return"{"+t.key+":"+t.value+"}"})).join(", ")+"]"}},{key:"length",get:function(){var t=this;return Object.keys(this.data).filter((function(t){return t.startsWith(Pe)})).map((function(e){return t.data[e].length}),this).reduce((function(t,e){return t+e}),0)}}],n&&_e(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ee(t,e){if(null==e&&(e=ee.EMPTY),null===e.parentCtx||e===ee.EMPTY)return oe.EMPTY;var n=Ee(t,e.parentCtx),r=t.states[e.invokingState].transitions[0];return ve.create(n,r.followState.stateNumber)}function ke(t,e,n){if(t.isEmpty())return t;var r=n.get(t)||null;if(null!==r)return r;if(null!==(r=e.get(t)))return n.set(t,r),r;for(var o=!1,i=[],u=0;u<i.length;u++){var c=ke(t.getParent(u),e,n);if(o||c!==t.getParent(u)){if(!o){i=[];for(var a=0;a<t.length;a++)i[a]=t.getParent(a);o=!0}i[u]=c}}if(!o)return e.add(t),n.set(t,t),t;var l;return l=0===i.length?oe.EMPTY:1===i.length?ve.create(i[0],t.getReturnState(0)):new fe(i,t.returnStates),e.add(l),n.set(l,l),n.set(t,l),l}function je(t,e,n,r){if(t===e)return t;if(t instanceof ve&&e instanceof ve)return function(t,e,n,r){if(null!==r){var o=r.get(t,e);if(null!==o)return o;if(null!==(o=r.get(e,t)))return o}var i=function(t,e,n){if(n){if(t===oe.EMPTY)return oe.EMPTY;if(e===oe.EMPTY)return oe.EMPTY}else{if(t===oe.EMPTY&&e===oe.EMPTY)return oe.EMPTY;if(t===oe.EMPTY){var r=[e.returnState,oe.EMPTY_RETURN_STATE],o=[e.parentCtx,null];return new fe(o,r)}if(e===oe.EMPTY){var i=[t.returnState,oe.EMPTY_RETURN_STATE],u=[t.parentCtx,null];return new fe(u,i)}}return null}(t,e,n);if(null!==i)return null!==r&&r.set(t,e,i),i;if(t.returnState===e.returnState){var u=je(t.parentCtx,e.parentCtx,n,r);if(u===t.parentCtx)return t;if(u===e.parentCtx)return e;var c=ve.create(u,t.returnState);return null!==r&&r.set(t,e,c),c}var a=null;if((t===e||null!==t.parentCtx&&t.parentCtx===e.parentCtx)&&(a=t.parentCtx),null!==a){var l=[t.returnState,e.returnState];t.returnState>e.returnState&&(l[0]=e.returnState,l[1]=t.returnState);var s=new fe([a,a],l);return null!==r&&r.set(t,e,s),s}var f=[t.returnState,e.returnState],p=[t.parentCtx,e.parentCtx];t.returnState>e.returnState&&(f[0]=e.returnState,f[1]=t.returnState,p=[e.parentCtx,t.parentCtx]);var y=new fe(p,f);return null!==r&&r.set(t,e,y),y}(t,e,n,r);if(n){if(t instanceof Oe)return t;if(e instanceof Oe)return e}return t instanceof ve&&(t=new fe([t.getParent()],[t.returnState])),e instanceof ve&&(e=new fe([e.getParent()],[e.returnState])),function(t,e,n,r){if(null!==r){var o=r.get(t,e);if(null!==o)return oe.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> previous"),o;if(null!==(o=r.get(e,t)))return oe.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> previous"),o}for(var i=0,u=0,c=0,a=new Array(t.returnStates.length+e.returnStates.length).fill(0),l=new Array(t.returnStates.length+e.returnStates.length).fill(null);i<t.returnStates.length&&u<e.returnStates.length;){var s=t.parents[i],f=e.parents[u];if(t.returnStates[i]===e.returnStates[u]){var p=t.returnStates[i];p===oe.EMPTY_RETURN_STATE&&null===s&&null===f||null!==s&&null!==f&&s===f?(l[c]=s,a[c]=p):(l[c]=je(s,f,n,r),a[c]=p),i+=1,u+=1}else t.returnStates[i]<e.returnStates[u]?(l[c]=s,a[c]=t.returnStates[i],i+=1):(l[c]=f,a[c]=e.returnStates[u],u+=1);c+=1}if(i<t.returnStates.length)for(var y=i;y<t.returnStates.length;y++)l[c]=t.parents[y],a[c]=t.returnStates[y],c+=1;else for(var h=u;h<e.returnStates.length;h++)l[c]=e.parents[h],a[c]=e.returnStates[h],c+=1;if(c<l.length){if(1===c){var b=ve.create(l[0],a[0]);return null!==r&&r.set(t,e,b),b}l=l.slice(0,c),a=a.slice(0,c)}var v=new fe(l,a);return v.equals(t)?(null!==r&&r.set(t,e,t),oe.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> a"),t):v.equals(e)?(null!==r&&r.set(t,e,e),oe.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> b"),e):(function(t){for(var e=new Te,n=0;n<t.length;n++){var r=t[n];e.containsKey(r)||e.set(r,r)}for(var o=0;o<t.length;o++)t[o]=e.get(t[o])}(l),null!==r&&r.set(t,e,v),oe.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> "+v),v)}(t,e,n,r)}function xe(t){return xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},xe(t)}function Re(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==xe(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==xe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===xe(o)?o:String(o)),r)}var o}var Ce=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=[]}var e,n;return e=t,(n=[{key:"add",value:function(t){this.data[t]=!0}},{key:"or",value:function(t){var e=this;Object.keys(t.data).map((function(t){return e.add(t)}),this)}},{key:"remove",value:function(t){delete this.data[t]}},{key:"has",value:function(t){return!0===this.data[t]}},{key:"values",value:function(){return Object.keys(this.data)}},{key:"minValue",value:function(){return Math.min.apply(null,this.values())}},{key:"hashCode",value:function(){return f.hashStuff(this.values())}},{key:"equals",value:function(e){return e instanceof t&&i(this.data,e.data)}},{key:"toString",value:function(){return"{"+this.values().join(", ")+"}"}},{key:"length",get:function(){return this.values().length}}])&&Re(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ae(t){return Ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ae(t)}function Ne(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ae(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ae(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ae(o)?o:String(o)),r)}var o}var Ie=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.atn=e}var e,n;return e=t,n=[{key:"getDecisionLookahead",value:function(e){if(null===e)return null;for(var n=e.transitions.length,r=[],o=0;o<n;o++){r[o]=new V;var i=new g;this._LOOK(e.transition(o).target,null,oe.EMPTY,r[o],i,new Ce,!1,!1),(0===r[o].length||r[o].contains(t.HIT_PRED))&&(r[o]=null)}return r}},{key:"LOOK",value:function(t,e,n){var r=new V,o=null!==(n=n||null)?Ee(t.atn,n):null;return this._LOOK(t,e,o,r,new g,new Ce,!0,!0),r}},{key:"_LOOK",value:function(e,n,r,i,u,c,a,l){var s=new L({state:e,alt:0,context:r},null);if(!u.has(s)){if(u.add(s),e===n){if(null===r)return void i.addOne(o.EPSILON);if(r.isEmpty()&&l)return void i.addOne(o.EOF)}if(e instanceof $){if(null===r)return void i.addOne(o.EPSILON);if(r.isEmpty()&&l)return void i.addOne(o.EOF);if(r!==oe.EMPTY){var f=c.has(e.ruleIndex);try{c.remove(e.ruleIndex);for(var p=0;p<r.length;p++){var y=this.atn.states[r.getReturnState(p)];this._LOOK(y,n,r.getParent(p),i,u,c,a,l)}}finally{f&&c.add(e.ruleIndex)}return}}for(var h=0;h<e.transitions.length;h++){var b=e.transitions[h];if(b.constructor===it){if(c.has(b.target.ruleIndex))continue;var v=ve.create(r,b.followState.stateNumber);try{c.add(b.target.ruleIndex),this._LOOK(b.target,n,v,i,u,c,a,l)}finally{c.remove(b.target.ruleIndex)}}else if(b instanceof Tt)a?this._LOOK(b.target,n,r,i,u,c,a,l):i.addOne(t.HIT_PRED);else if(b.isEpsilon)this._LOOK(b.target,n,r,i,u,c,a,l);else if(b.constructor===Ot)i.addRange(o.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType);else{var d=b.label;null!==d&&(b instanceof vt&&(d=d.complement(o.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType)),i.addSet(d))}}}}}],n&&Ne(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Le(t){return Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Le(t)}function De(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Le(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Le(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Le(o)?o:String(o)),r)}var o}Ie.HIT_PRED=o.INVALID_TYPE;var Fe=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.grammarType=e,this.maxTokenType=n,this.states=[],this.decisionToState=[],this.ruleToStartState=[],this.ruleToStopState=null,this.modeNameToStartState={},this.ruleToTokenType=null,this.lexerActions=null,this.modeToStartState=[]}var e,n;return e=t,(n=[{key:"nextTokensInContext",value:function(t,e){return new Ie(this).LOOK(t,null,e)}},{key:"nextTokensNoContext",value:function(t){return null!==t.nextTokenWithinRule||(t.nextTokenWithinRule=this.nextTokensInContext(t,null),t.nextTokenWithinRule.readOnly=!0),t.nextTokenWithinRule}},{key:"nextTokens",value:function(t,e){return void 0===e?this.nextTokensNoContext(t):this.nextTokensInContext(t,e)}},{key:"addState",value:function(t){null!==t&&(t.atn=this,t.stateNumber=this.states.length),this.states.push(t)}},{key:"removeState",value:function(t){this.states[t.stateNumber]=null}},{key:"defineDecisionState",value:function(t){return this.decisionToState.push(t),t.decision=this.decisionToState.length-1,t.decision}},{key:"getDecisionState",value:function(t){return 0===this.decisionToState.length?null:this.decisionToState[t]}},{key:"getExpectedTokens",value:function(t,e){if(t<0||t>=this.states.length)throw"Invalid state number.";var n=this.states[t],r=this.nextTokens(n);if(!r.contains(o.EPSILON))return r;var i=new V;for(i.addSet(r),i.removeOne(o.EPSILON);null!==e&&e.invokingState>=0&&r.contains(o.EPSILON);){var u=this.states[e.invokingState].transitions[0];r=this.nextTokens(u.followState),i.addSet(r),i.removeOne(o.EPSILON),e=e.parentCtx}return r.contains(o.EPSILON)&&i.addOne(o.EOF),i}}])&&De(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();Fe.INVALID_ALT_NUMBER=0;function Be(t){return Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Be(t)}function Me(t,e){return Me=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Me(t,e)}function Ue(t){return Ue=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ue(t)}var Ve=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Me(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ue(n);if(r){var o=Ue(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Be(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.BASIC,t}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(H);function ze(t){return ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ze(t)}function qe(t,e){return qe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},qe(t,e)}function He(t,e){if(e&&("object"===ze(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Ke(t)}function Ke(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ye(t){return Ye=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ye(t)}var Ge=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&qe(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ye(n);if(r){var o=Ye(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return He(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).decision=-1,t.nonGreedy=!1,He(t,Ke(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(H);function We(t){return We="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},We(t)}function Xe(t,e){return Xe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Xe(t,e)}function $e(t,e){if(e&&("object"===We(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Je(t)}function Je(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Qe(t){return Qe=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Qe(t)}var Ze=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Xe(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Qe(n);if(r){var o=Qe(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return $e(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).endState=null,$e(t,Je(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ge);function tn(t){return tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},tn(t)}function en(t,e){return en=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},en(t,e)}function nn(t,e){if(e&&("object"===tn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return rn(t)}function rn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function on(t){return on=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},on(t)}var un=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&en(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=on(n);if(r){var o=on(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return nn(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.BLOCK_END,t.startState=null,nn(t,rn(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(H);function cn(t){return cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},cn(t)}function an(t,e){return an=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},an(t,e)}function ln(t,e){if(e&&("object"===cn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return sn(t)}function sn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function fn(t){return fn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},fn(t)}var pn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&an(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=fn(n);if(r){var o=fn(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return ln(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.LOOP_END,t.loopBackState=null,ln(t,sn(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(H);function yn(t){return yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yn(t)}function hn(t,e){return hn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},hn(t,e)}function bn(t,e){if(e&&("object"===yn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return vn(t)}function vn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function dn(t){return dn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},dn(t)}var mn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&hn(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=dn(n);if(r){var o=dn(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return bn(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.RULE_START,t.stopState=null,t.isPrecedenceRule=!1,bn(t,vn(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(H);function gn(t){return gn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},gn(t)}function Sn(t,e){return Sn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Sn(t,e)}function On(t,e){if(e&&("object"===gn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return wn(t)}function wn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _n(t){return _n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_n(t)}var Pn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Sn(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_n(n);if(r){var o=_n(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return On(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.TOKEN_START,On(t,wn(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ge);function Tn(t){return Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Tn(t)}function En(t,e){return En=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},En(t,e)}function kn(t,e){if(e&&("object"===Tn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return jn(t)}function jn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function xn(t){return xn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},xn(t)}var Rn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&En(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=xn(n);if(r){var o=xn(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return kn(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.PLUS_LOOP_BACK,kn(t,jn(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ge);function Cn(t){return Cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Cn(t)}function An(t,e){return An=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},An(t,e)}function Nn(t,e){if(e&&("object"===Cn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return In(t)}function In(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ln(t){return Ln=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ln(t)}var Dn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&An(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ln(n);if(r){var o=Ln(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return Nn(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.STAR_LOOP_BACK,Nn(t,In(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(H);function Fn(t){return Fn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fn(t)}function Bn(t,e){return Bn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Bn(t,e)}function Mn(t,e){if(e&&("object"===Fn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Un(t)}function Un(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Vn(t){return Vn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Vn(t)}var zn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Bn(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Vn(n);if(r){var o=Vn(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return Mn(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.STAR_LOOP_ENTRY,t.loopBackState=null,t.isPrecedenceDecision=null,Mn(t,Un(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ge);function qn(t){return qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qn(t)}function Hn(t,e){return Hn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Hn(t,e)}function Kn(t,e){if(e&&("object"===qn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Yn(t)}function Yn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Gn(t){return Gn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Gn(t)}var Wn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Hn(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Gn(n);if(r){var o=Gn(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return Kn(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.PLUS_BLOCK_START,t.loopBackState=null,Kn(t,Yn(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ze);function Xn(t){return Xn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Xn(t)}function $n(t,e){return $n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},$n(t,e)}function Jn(t,e){if(e&&("object"===Xn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Qn(t)}function Qn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Zn(t){return Zn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Zn(t)}var tr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&$n(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Zn(n);if(r){var o=Zn(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return Jn(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.STAR_BLOCK_START,Jn(t,Qn(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ze);function er(t){return er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},er(t)}function nr(t,e){return nr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},nr(t,e)}function rr(t,e){if(e&&("object"===er(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return or(t)}function or(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ir(t){return ir=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ir(t)}var ur=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&nr(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ir(n);if(r){var o=ir(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return rr(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).stateType=H.BLOCK_START,rr(t,or(t))}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ze);function cr(t){return cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},cr(t)}function ar(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==cr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==cr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===cr(o)?o:String(o)),r)}var o}function lr(t,e){return lr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},lr(t,e)}function sr(t){return sr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},sr(t)}var fr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&lr(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=sr(r);if(o){var n=sr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===cr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t)).label_=e,n.label=n.makeLabel(),n.serializationType=tt.ATOM,n}return e=u,(n=[{key:"makeLabel",value:function(){var t=new V;return t.addOne(this.label_),t}},{key:"matches",value:function(t,e,n){return this.label_===t}},{key:"toString",value:function(){return this.label_}}])&&ar(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(tt);function pr(t){return pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pr(t)}function yr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==pr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==pr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===pr(o)?o:String(o)),r)}var o}function hr(t,e){return hr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},hr(t,e)}function br(t){return br=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},br(t)}var vr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&hr(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=br(r);if(o){var n=br(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===pr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,t)).serializationType=tt.RANGE,r.start=e,r.stop=n,r.label=r.makeLabel(),r}return e=u,(n=[{key:"makeLabel",value:function(){var t=new V;return t.addRange(this.start,this.stop),t}},{key:"matches",value:function(t,e,n){return t>=this.start&&t<=this.stop}},{key:"toString",value:function(){return"'"+String.fromCharCode(this.start)+"'..'"+String.fromCharCode(this.stop)+"'"}}])&&yr(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(tt);function dr(t){return dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},dr(t)}function mr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==dr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==dr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===dr(o)?o:String(o)),r)}var o}function gr(t,e){return gr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},gr(t,e)}function Sr(t){return Sr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Sr(t)}var Or=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&gr(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Sr(r);if(o){var n=Sr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===dr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(o=i.call(this,t)).serializationType=tt.ACTION,o.ruleIndex=e,o.actionIndex=void 0===n?-1:n,o.isCtxDependent=void 0!==r&&r,o.isEpsilon=!0,o}return e=u,(n=[{key:"matches",value:function(t,e,n){return!1}},{key:"toString",value:function(){return"action_"+this.ruleIndex+":"+this.actionIndex}}])&&mr(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(tt);function wr(t){return wr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},wr(t)}function _r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==wr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==wr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===wr(o)?o:String(o)),r)}var o}function Pr(t,e){return Pr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Pr(t,e)}function Tr(t){return Tr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Tr(t)}var Er=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Pr(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Tr(r);if(o){var n=Tr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===wr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t)).serializationType=tt.EPSILON,n.isEpsilon=!0,n.outermostPrecedenceReturn=e,n}return e=u,(n=[{key:"matches",value:function(t,e,n){return!1}},{key:"toString",value:function(){return"epsilon"}}])&&_r(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(tt);function kr(t){return kr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},kr(t)}function jr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==kr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==kr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===kr(o)?o:String(o)),r)}var o}function xr(t,e){return xr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},xr(t,e)}function Rr(t){return Rr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Rr(t)}var Cr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&xr(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Rr(r);if(o){var n=Rr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===kr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this)).ruleIndex=void 0===t?-1:t,r.predIndex=void 0===e?-1:e,r.isCtxDependent=void 0!==n&&n,r}return e=u,(n=[{key:"evaluate",value:function(t,e){var n=this.isCtxDependent?e:null;return t.sempred(n,this.ruleIndex,this.predIndex)}},{key:"updateHashCode",value:function(t){t.update(this.ruleIndex,this.predIndex,this.isCtxDependent)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.ruleIndex===t.ruleIndex&&this.predIndex===t.predIndex&&this.isCtxDependent===t.isCtxDependent}},{key:"toString",value:function(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"}}])&&jr(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(j);function Ar(t){return Ar="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ar(t)}function Nr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ar(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ar(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ar(o)?o:String(o)),r)}var o}function Ir(t,e){return Ir=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ir(t,e)}function Lr(t){return Lr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Lr(t)}j.NONE=new Cr;var Dr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ir(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Lr(r);if(o){var n=Lr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ar(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(o=i.call(this,t)).serializationType=tt.PREDICATE,o.ruleIndex=e,o.predIndex=n,o.isCtxDependent=r,o.isEpsilon=!0,o}return e=u,(n=[{key:"matches",value:function(t,e,n){return!1}},{key:"getPredicate",value:function(){return new Cr(this.ruleIndex,this.predIndex,this.isCtxDependent)}},{key:"toString",value:function(){return"pred_"+this.ruleIndex+":"+this.predIndex}}])&&Nr(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Tt);function Fr(t){return Fr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fr(t)}function Br(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Fr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Fr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Fr(o)?o:String(o)),r)}var o}function Mr(t,e){return Mr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Mr(t,e)}function Ur(t){return Ur=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ur(t)}var Vr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Mr(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ur(r);if(o){var n=Ur(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Fr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this)).precedence=void 0===t?0:t,e}return e=u,(n=[{key:"evaluate",value:function(t,e){return t.precpred(e,this.precedence)}},{key:"evalPrecedence",value:function(t,e){return t.precpred(e,this.precedence)?j.NONE:null}},{key:"compareTo",value:function(t){return this.precedence-t.precedence}},{key:"updateHashCode",value:function(t){t.update(this.precedence)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.precedence===t.precedence}},{key:"toString",value:function(){return"{"+this.precedence+">=prec}?"}}])&&Br(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(j);function zr(t){return zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},zr(t)}function qr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==zr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==zr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===zr(o)?o:String(o)),r)}var o}function Hr(t,e){return Hr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Hr(t,e)}function Kr(t){return Kr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Kr(t)}j.PrecedencePredicate=Vr;var Yr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Hr(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Kr(r);if(o){var n=Kr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===zr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t)).serializationType=tt.PRECEDENCE,n.precedence=e,n.isEpsilon=!0,n}return e=u,(n=[{key:"matches",value:function(t,e,n){return!1}},{key:"getPredicate",value:function(){return new Vr(this.precedence)}},{key:"toString",value:function(){return this.precedence+" >= _p"}}])&&qr(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Tt);function Gr(t){return Gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Gr(t)}function Wr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Gr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Gr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Gr(o)?o:String(o)),r)}var o}function Xr(t,e,n){return e&&Wr(t.prototype,e),n&&Wr(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var $r=Xr((function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),void 0===e&&(e=null),this.readOnly=!1,this.verifyATN=null===e||e.verifyATN,this.generateRuleBypassTransitions=null!==e&&e.generateRuleBypassTransitions}));$r.defaultOptions=new $r,$r.defaultOptions.readOnly=!0;function Jr(t){return Jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Jr(t)}function Qr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Jr(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Jr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Jr(o)?o:String(o)),r)}var o}var Zr=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.actionType=e,this.isPositionDependent=!1}var e,n;return e=t,(n=[{key:"hashCode",value:function(){var t=new f;return this.updateHashCode(t),t.finish()}},{key:"updateHashCode",value:function(t){t.update(this.actionType)}},{key:"equals",value:function(t){return this===t}}])&&Qr(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function to(t){return to="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},to(t)}function eo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==to(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==to(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===to(o)?o:String(o)),r)}var o}function no(t,e){return no=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},no(t,e)}function ro(t){return ro=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ro(t)}var oo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&no(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ro(r);if(o){var n=ro(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===to(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this,6)}return e=u,(n=[{key:"execute",value:function(t){t.skip()}},{key:"toString",value:function(){return"skip"}}])&&eo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function io(t){return io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},io(t)}function uo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==io(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==io(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===io(o)?o:String(o)),r)}var o}function co(t,e){return co=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},co(t,e)}function ao(t){return ao=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ao(t)}oo.INSTANCE=new oo;var lo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&co(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ao(r);if(o){var n=ao(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===io(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,0)).channel=t,e}return e=u,(n=[{key:"execute",value:function(t){t._channel=this.channel}},{key:"updateHashCode",value:function(t){t.update(this.actionType,this.channel)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.channel===t.channel}},{key:"toString",value:function(){return"channel("+this.channel+")"}}])&&uo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function so(t){return so="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},so(t)}function fo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==so(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==so(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===so(o)?o:String(o)),r)}var o}function po(t,e){return po=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},po(t,e)}function yo(t){return yo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},yo(t)}var ho=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&po(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=yo(r);if(o){var n=yo(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===so(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,1)).ruleIndex=t,n.actionIndex=e,n.isPositionDependent=!0,n}return e=u,(n=[{key:"execute",value:function(t){t.action(null,this.ruleIndex,this.actionIndex)}},{key:"updateHashCode",value:function(t){t.update(this.actionType,this.ruleIndex,this.actionIndex)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.ruleIndex===t.ruleIndex&&this.actionIndex===t.actionIndex}}])&&fo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function bo(t){return bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},bo(t)}function vo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==bo(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==bo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===bo(o)?o:String(o)),r)}var o}function mo(t,e){return mo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},mo(t,e)}function go(t){return go=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},go(t)}var So=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&mo(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=go(r);if(o){var n=go(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===bo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this,3)}return e=u,(n=[{key:"execute",value:function(t){t.more()}},{key:"toString",value:function(){return"more"}}])&&vo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function Oo(t){return Oo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oo(t)}function wo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Oo(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Oo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Oo(o)?o:String(o)),r)}var o}function _o(t,e){return _o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_o(t,e)}function Po(t){return Po=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Po(t)}So.INSTANCE=new So;var To=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_o(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Po(r);if(o){var n=Po(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Oo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,7)).type=t,e}return e=u,(n=[{key:"execute",value:function(t){t.type=this.type}},{key:"updateHashCode",value:function(t){t.update(this.actionType,this.type)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.type===t.type}},{key:"toString",value:function(){return"type("+this.type+")"}}])&&wo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function Eo(t){return Eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Eo(t)}function ko(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Eo(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Eo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Eo(o)?o:String(o)),r)}var o}function jo(t,e){return jo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},jo(t,e)}function xo(t){return xo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},xo(t)}var Ro=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&jo(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=xo(r);if(o){var n=xo(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Eo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,5)).mode=t,e}return e=u,(n=[{key:"execute",value:function(t){t.pushMode(this.mode)}},{key:"updateHashCode",value:function(t){t.update(this.actionType,this.mode)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.mode===t.mode}},{key:"toString",value:function(){return"pushMode("+this.mode+")"}}])&&ko(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function Co(t){return Co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Co(t)}function Ao(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Co(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Co(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Co(o)?o:String(o)),r)}var o}function No(t,e){return No=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},No(t,e)}function Io(t){return Io=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Io(t)}var Lo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&No(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Io(r);if(o){var n=Io(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Co(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this,4)}return e=u,(n=[{key:"execute",value:function(t){t.popMode()}},{key:"toString",value:function(){return"popMode"}}])&&Ao(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function Do(t){return Do="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Do(t)}function Fo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Do(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Do(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Do(o)?o:String(o)),r)}var o}function Bo(t,e){return Bo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Bo(t,e)}function Mo(t){return Mo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Mo(t)}Lo.INSTANCE=new Lo;var Uo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Bo(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Mo(r);if(o){var n=Mo(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Do(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,2)).mode=t,e}return e=u,(n=[{key:"execute",value:function(t){t.mode(this.mode)}},{key:"updateHashCode",value:function(t){t.update(this.actionType,this.mode)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.mode===t.mode}},{key:"toString",value:function(){return"mode("+this.mode+")"}}])&&Fo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function Vo(t){return Vo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Vo(t)}function zo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Vo(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Vo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Vo(o)?o:String(o)),r)}var o}function qo(t,e){var n=[];return n[t-1]=e,n.map((function(t){return e}))}var Ho=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),null==e&&(e=$r.defaultOptions),this.deserializationOptions=e,this.stateFactories=null,this.actionFactories=null}var e,n;return e=t,n=[{key:"deserialize",value:function(t){var e=this.reset(t);this.checkVersion(e),e&&this.skipUUID();var n=this.readATN();this.readStates(n,e),this.readRules(n,e),this.readModes(n);var r=[];return this.readSets(n,r,this.readInt.bind(this)),e&&this.readSets(n,r,this.readInt32.bind(this)),this.readEdges(n,r),this.readDecisions(n),this.readLexerActions(n,e),this.markPrecedenceDecisions(n),this.verifyATN(n),this.deserializationOptions.generateRuleBypassTransitions&&1===n.grammarType&&(this.generateRuleBypassTransitions(n),this.verifyATN(n)),n}},{key:"reset",value:function(t){if(3===(t.charCodeAt?t.charCodeAt(0):t[0])){var e=t.split("").map((function(t){var e=t.charCodeAt(0);return e>1?e-2:e+65534}));return e[0]=t.charCodeAt(0),this.data=e,this.pos=0,!0}return this.data=t,this.pos=0,!1}},{key:"skipUUID",value:function(){for(var t=0;t++<8;)this.readInt()}},{key:"checkVersion",value:function(t){var e=this.readInt();if(!t&&4!==e)throw"Could not deserialize ATN with version "+e+" (expected 4)."}},{key:"readATN",value:function(){var t=this.readInt(),e=this.readInt();return new Fe(t,e)}},{key:"readStates",value:function(t,e){for(var n,r,o,i=[],u=[],c=this.readInt(),a=0;a<c;a++){var l=this.readInt();if(l!==H.INVALID_TYPE){var s=this.readInt();e&&65535===s&&(s=-1);var f=this.stateFactory(l,s);if(l===H.LOOP_END){var p=this.readInt();i.push([f,p])}else if(f instanceof Ze){var y=this.readInt();u.push([f,y])}t.addState(f)}else t.addState(null)}for(n=0;n<i.length;n++)(r=i[n])[0].loopBackState=t.states[r[1]];for(n=0;n<u.length;n++)(r=u[n])[0].endState=t.states[r[1]];var h=this.readInt();for(n=0;n<h;n++)o=this.readInt(),t.states[o].nonGreedy=!0;var b=this.readInt();for(n=0;n<b;n++)o=this.readInt(),t.states[o].isPrecedenceRule=!0}},{key:"readRules",value:function(t,e){var n,r=this.readInt();for(0===t.grammarType&&(t.ruleToTokenType=qo(r,0)),t.ruleToStartState=qo(r,0),n=0;n<r;n++){var i=this.readInt();if(t.ruleToStartState[n]=t.states[i],0===t.grammarType){var u=this.readInt();e&&65535===u&&(u=o.EOF),t.ruleToTokenType[n]=u}}for(t.ruleToStopState=qo(r,0),n=0;n<t.states.length;n++){var c=t.states[n];c instanceof $&&(t.ruleToStopState[c.ruleIndex]=c,t.ruleToStartState[c.ruleIndex].stopState=c)}}},{key:"readModes",value:function(t){for(var e=this.readInt(),n=0;n<e;n++){var r=this.readInt();t.modeToStartState.push(t.states[r])}}},{key:"readSets",value:function(t,e,n){for(var r=this.readInt(),o=0;o<r;o++){var i=new V;e.push(i);var u=this.readInt();0!==this.readInt()&&i.addOne(-1);for(var c=0;c<u;c++){var a=n(),l=n();i.addRange(a,l)}}}},{key:"readEdges",value:function(t,e){var n,r,o,i,u,c=this.readInt();for(n=0;n<c;n++){var a=this.readInt(),l=this.readInt(),s=this.readInt(),f=this.readInt(),p=this.readInt(),y=this.readInt();i=this.edgeFactory(t,s,a,l,f,p,y,e),t.states[a].addTransition(i)}for(n=0;n<t.states.length;n++)for(o=t.states[n],r=0;r<o.transitions.length;r++){var h=o.transitions[r];if(h instanceof it){var b=-1;t.ruleToStartState[h.target.ruleIndex].isPrecedenceRule&&0===h.precedence&&(b=h.target.ruleIndex),i=new Er(h.followState,b),t.ruleToStopState[h.target.ruleIndex].addTransition(i)}}for(n=0;n<t.states.length;n++){if((o=t.states[n])instanceof Ze){if(null===o.endState)throw"IllegalState";if(null!==o.endState.startState)throw"IllegalState";o.endState.startState=o}if(o instanceof Rn)for(r=0;r<o.transitions.length;r++)(u=o.transitions[r].target)instanceof Wn&&(u.loopBackState=o);else if(o instanceof Dn)for(r=0;r<o.transitions.length;r++)(u=o.transitions[r].target)instanceof zn&&(u.loopBackState=o)}}},{key:"readDecisions",value:function(t){for(var e=this.readInt(),n=0;n<e;n++){var r=this.readInt(),o=t.states[r];t.decisionToState.push(o),o.decision=n}}},{key:"readLexerActions",value:function(t,e){if(0===t.grammarType){var n=this.readInt();t.lexerActions=qo(n,null);for(var r=0;r<n;r++){var o=this.readInt(),i=this.readInt();e&&65535===i&&(i=-1);var u=this.readInt();e&&65535===u&&(u=-1),t.lexerActions[r]=this.lexerActionFactory(o,i,u)}}}},{key:"generateRuleBypassTransitions",value:function(t){var e,n=t.ruleToStartState.length;for(e=0;e<n;e++)t.ruleToTokenType[e]=t.maxTokenType+e+1;for(e=0;e<n;e++)this.generateRuleBypassTransition(t,e)}},{key:"generateRuleBypassTransition",value:function(t,e){var n,r,o=new ur;o.ruleIndex=e,t.addState(o);var i=new un;i.ruleIndex=e,t.addState(i),o.endState=i,t.defineDecisionState(o),i.startState=o;var u=null,c=null;if(t.ruleToStartState[e].isPrecedenceRule){for(c=null,n=0;n<t.states.length;n++)if(r=t.states[n],this.stateIsEndStateFor(r,e)){c=r,u=r.loopBackState.transitions[0];break}if(null===u)throw"Couldn't identify final state of the precedence rule prefix section."}else c=t.ruleToStopState[e];for(n=0;n<t.states.length;n++){r=t.states[n];for(var a=0;a<r.transitions.length;a++){var l=r.transitions[a];l!==u&&l.target===c&&(l.target=i)}}for(var s=t.ruleToStartState[e],f=s.transitions.length;f>0;)o.addTransition(s.transitions[f-1]),s.transitions=s.transitions.slice(-1);t.ruleToStartState[e].addTransition(new Er(o)),i.addTransition(new Er(c));var p=new Ve;t.addState(p),p.addTransition(new fr(i,t.ruleToTokenType[e])),o.addTransition(new Er(p))}},{key:"stateIsEndStateFor",value:function(t,e){if(t.ruleIndex!==e)return null;if(!(t instanceof zn))return null;var n=t.transitions[t.transitions.length-1].target;return n instanceof pn&&n.epsilonOnlyTransitions&&n.transitions[0].target instanceof $?t:null}},{key:"markPrecedenceDecisions",value:function(t){for(var e=0;e<t.states.length;e++){var n=t.states[e];if(n instanceof zn&&t.ruleToStartState[n.ruleIndex].isPrecedenceRule){var r=n.transitions[n.transitions.length-1].target;r instanceof pn&&r.epsilonOnlyTransitions&&r.transitions[0].target instanceof $&&(n.isPrecedenceDecision=!0)}}}},{key:"verifyATN",value:function(t){if(this.deserializationOptions.verifyATN)for(var e=0;e<t.states.length;e++){var n=t.states[e];if(null!==n)if(this.checkCondition(n.epsilonOnlyTransitions||n.transitions.length<=1),n instanceof Wn)this.checkCondition(null!==n.loopBackState);else if(n instanceof zn)if(this.checkCondition(null!==n.loopBackState),this.checkCondition(2===n.transitions.length),n.transitions[0].target instanceof tr)this.checkCondition(n.transitions[1].target instanceof pn),this.checkCondition(!n.nonGreedy);else{if(!(n.transitions[0].target instanceof pn))throw"IllegalState";this.checkCondition(n.transitions[1].target instanceof tr),this.checkCondition(n.nonGreedy)}else n instanceof Dn?(this.checkCondition(1===n.transitions.length),this.checkCondition(n.transitions[0].target instanceof zn)):n instanceof pn?this.checkCondition(null!==n.loopBackState):n instanceof mn?this.checkCondition(null!==n.stopState):n instanceof Ze?this.checkCondition(null!==n.endState):n instanceof un?this.checkCondition(null!==n.startState):n instanceof Ge?this.checkCondition(n.transitions.length<=1||n.decision>=0):this.checkCondition(n.transitions.length<=1||n instanceof $)}}},{key:"checkCondition",value:function(t,e){if(!t)throw null==e&&(e="IllegalState"),e}},{key:"readInt",value:function(){return this.data[this.pos++]}},{key:"readInt32",value:function(){return this.readInt()|this.readInt()<<16}},{key:"edgeFactory",value:function(t,e,n,r,i,u,c,a){var l=t.states[r];switch(e){case tt.EPSILON:return new Er(l);case tt.RANGE:return new vr(l,0!==c?o.EOF:i,u);case tt.RULE:return new it(t.states[i],u,c,l);case tt.PREDICATE:return new Dr(l,i,u,0!==c);case tt.PRECEDENCE:return new Yr(l,i);case tt.ATOM:return new fr(l,0!==c?o.EOF:i);case tt.ACTION:return new Or(l,i,u,0!==c);case tt.SET:return new st(l,a[i]);case tt.NOT_SET:return new vt(l,a[i]);case tt.WILDCARD:return new Ot(l);default:throw"The specified transition type: "+e+" is not valid."}}},{key:"stateFactory",value:function(t,e){if(null===this.stateFactories){var n=[];n[H.INVALID_TYPE]=null,n[H.BASIC]=function(){return new Ve},n[H.RULE_START]=function(){return new mn},n[H.BLOCK_START]=function(){return new ur},n[H.PLUS_BLOCK_START]=function(){return new Wn},n[H.STAR_BLOCK_START]=function(){return new tr},n[H.TOKEN_START]=function(){return new Pn},n[H.RULE_STOP]=function(){return new $},n[H.BLOCK_END]=function(){return new un},n[H.STAR_LOOP_BACK]=function(){return new Dn},n[H.STAR_LOOP_ENTRY]=function(){return new zn},n[H.PLUS_LOOP_BACK]=function(){return new Rn},n[H.LOOP_END]=function(){return new pn},this.stateFactories=n}if(t>this.stateFactories.length||null===this.stateFactories[t])throw"The specified state type "+t+" is not valid.";var r=this.stateFactories[t]();if(null!==r)return r.ruleIndex=e,r}},{key:"lexerActionFactory",value:function(t,e,n){if(null===this.actionFactories){var r=[];r[0]=function(t,e){return new lo(t)},r[1]=function(t,e){return new ho(t,e)},r[2]=function(t,e){return new Uo(t)},r[3]=function(t,e){return So.INSTANCE},r[4]=function(t,e){return Lo.INSTANCE},r[5]=function(t,e){return new Ro(t)},r[6]=function(t,e){return oo.INSTANCE},r[7]=function(t,e){return new To(t)},this.actionFactories=r}if(t>this.actionFactories.length||null===this.actionFactories[t])throw"The specified lexer action type "+t+" is not valid.";return this.actionFactories[t](e,n)}}],n&&zo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ko(t){return Ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ko(t)}function Yo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ko(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ko(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ko(o)?o:String(o)),r)}var o}var Go=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"syntaxError",value:function(t,e,n,r,o,i){}},{key:"reportAmbiguity",value:function(t,e,n,r,o,i,u){}},{key:"reportAttemptingFullContext",value:function(t,e,n,r,o,i){}},{key:"reportContextSensitivity",value:function(t,e,n,r,o,i){}}])&&Yo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Wo(t){return Wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Wo(t)}function Xo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Wo(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Wo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Wo(o)?o:String(o)),r)}var o}function $o(t,e){return $o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},$o(t,e)}function Jo(t){return Jo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Jo(t)}var Qo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&$o(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Jo(r);if(o){var n=Jo(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Wo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this)}return e=u,(n=[{key:"syntaxError",value:function(t,e,n,r,o,i){console.error("line "+n+":"+r+" "+o)}}])&&Xo(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Go);function Zo(t){return Zo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Zo(t)}function ti(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Zo(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Zo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Zo(o)?o:String(o)),r)}var o}function ei(t,e){return ei=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ei(t,e)}function ni(t,e){if(e&&("object"===Zo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ri(t)}function ri(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function oi(t){return oi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},oi(t)}Qo.INSTANCE=new Qo;var ii=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ei(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=oi(r);if(o){var n=oi(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return ni(this,t)});function u(t){var e;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),e=i.call(this),null===t)throw"delegates";return e.delegates=t,ni(e,ri(e))}return e=u,n=[{key:"syntaxError",value:function(t,e,n,r,o,i){this.delegates.map((function(u){return u.syntaxError(t,e,n,r,o,i)}))}},{key:"reportAmbiguity",value:function(t,e,n,r,o,i,u){this.delegates.map((function(c){return c.reportAmbiguity(t,e,n,r,o,i,u)}))}},{key:"reportAttemptingFullContext",value:function(t,e,n,r,o,i){this.delegates.map((function(u){return u.reportAttemptingFullContext(t,e,n,r,o,i)}))}},{key:"reportContextSensitivity",value:function(t,e,n,r,o,i){this.delegates.map((function(u){return u.reportContextSensitivity(t,e,n,r,o,i)}))}}],n&&ti(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Go);function ui(t){return ui="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ui(t)}function ci(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ui(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ui(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ui(o)?o:String(o)),r)}var o}var ai=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._listeners=[Qo.INSTANCE],this._interp=null,this._stateNumber=-1}var e,n;return e=t,n=[{key:"checkVersion",value:function(t){var e="4.13.0";e!==t&&console.log("ANTLR runtime and generated code versions disagree: "+e+"!="+t)}},{key:"addErrorListener",value:function(t){this._listeners.push(t)}},{key:"removeErrorListeners",value:function(){this._listeners=[]}},{key:"getLiteralNames",value:function(){return Object.getPrototypeOf(this).constructor.literalNames||[]}},{key:"getSymbolicNames",value:function(){return Object.getPrototypeOf(this).constructor.symbolicNames||[]}},{key:"getTokenNames",value:function(){if(!this.tokenNames){var t=this.getLiteralNames(),e=this.getSymbolicNames(),n=t.length>e.length?t.length:e.length;this.tokenNames=[];for(var r=0;r<n;r++)this.tokenNames[r]=t[r]||e[r]||"<INVALID"}return this.tokenNames}},{key:"getTokenTypeMap",value:function(){var t=this.getTokenNames();if(null===t)throw"The current recognizer does not provide a list of token names.";var e=this.tokenTypeMapCache[t];return void 0===e&&(e=t.reduce((function(t,e,n){t[e]=n})),e.EOF=o.EOF,this.tokenTypeMapCache[t]=e),e}},{key:"getRuleIndexMap",value:function(){var t=this.ruleNames;if(null===t)throw"The current recognizer does not provide a list of rule names.";var e=this.ruleIndexMapCache[t];return void 0===e&&(e=t.reduce((function(t,e,n){t[e]=n})),this.ruleIndexMapCache[t]=e),e}},{key:"getTokenType",value:function(t){var e=this.getTokenTypeMap()[t];return void 0!==e?e:o.INVALID_TYPE}},{key:"getErrorHeader",value:function(t){return"line "+t.getOffendingToken().line+":"+t.getOffendingToken().column}},{key:"getTokenErrorDisplay",value:function(t){if(null===t)return"<no token>";var e=t.text;return null===e&&(e=t.type===o.EOF?"<EOF>":"<"+t.type+">"),"'"+(e=e.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t"))+"'"}},{key:"getErrorListenerDispatch",value:function(){return new ii(this._listeners)}},{key:"sempred",value:function(t,e,n){return!0}},{key:"precpred",value:function(t,e){return!0}},{key:"atn",get:function(){return this._interp.atn}},{key:"state",get:function(){return this._stateNumber},set:function(t){this._stateNumber=t}}],n&&ci(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function li(t){return li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},li(t)}function si(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==li(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==li(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===li(o)?o:String(o)),r)}var o}function fi(t,e){return fi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},fi(t,e)}function pi(t){return pi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},pi(t)}ai.tokenTypeMapCache={},ai.ruleIndexMapCache={};var yi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&fi(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=pi(r);if(i){var n=pi(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===li(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t,e,n,r,i){var a;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(a=u.call(this)).source=void 0!==t?t:c.EMPTY_SOURCE,a.type=void 0!==e?e:null,a.channel=void 0!==n?n:o.DEFAULT_CHANNEL,a.start=void 0!==r?r:-1,a.stop=void 0!==i?i:-1,a.tokenIndex=-1,null!==a.source[0]?(a.line=t[0].line,a.column=t[0].column):a.column=-1,a}return e=c,(n=[{key:"clone",value:function(){var t=new c(this.source,this.type,this.channel,this.start,this.stop);return t.tokenIndex=this.tokenIndex,t.line=this.line,t.column=this.column,t.text=this.text,t}},{key:"cloneWithType",value:function(t){var e=new c(this.source,t,this.channel,this.start,this.stop);return e.tokenIndex=this.tokenIndex,e.line=this.line,e.column=this.column,t===o.EOF&&(e.text=""),e}},{key:"toString",value:function(){var t=this.text;return t=null!==t?t.replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t"):"<no text>","[@"+this.tokenIndex+","+this.start+":"+this.stop+"='"+t+"',<"+this.type+">"+(this.channel>0?",channel="+this.channel:"")+","+this.line+":"+this.column+"]"}},{key:"text",get:function(){if(null!==this._text)return this._text;var t=this.getInputStream();if(null===t)return null;var e=t.size;return this.start<e&&this.stop<e?t.getText(this.start,this.stop):"<EOF>"},set:function(t){this._text=t}}])&&si(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(o);function hi(t){return hi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},hi(t)}function bi(t,e){return bi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},bi(t,e)}function vi(t){return vi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},vi(t)}function di(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==hi(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==hi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===hi(o)?o:String(o)),r)}var o}function mi(t,e,n){return e&&di(t.prototype,e),n&&di(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function gi(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}yi.EMPTY_SOURCE=[null,null];var Si=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&bi(t,e)}(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=vi(e);if(n){var o=vi(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return function(t,e){if(e&&("object"===hi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function o(t){var e;return gi(this,o),(e=r.call(this)).copyText=void 0!==t&&t,e}return mi(o,[{key:"create",value:function(t,e,n,r,o,i,u,c){var a=new yi(t,e,r,o,i);return a.line=u,a.column=c,null!==n?a.text=n:this.copyText&&null!==t[1]&&(a.text=t[1].getText(o,i)),a}},{key:"createThin",value:function(t,e){var n=new yi(null,t);return n.text=e,n}}]),o}(mi((function t(){gi(this,t)})));function Oi(t){return Oi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oi(t)}function wi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Oi(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Oi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Oi(o)?o:String(o)),r)}var o}function _i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Pi(t){var e="function"==typeof Map?new Map:void 0;return Pi=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return Ti(t,arguments,ji(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),ki(r,t)},Pi(t)}function Ti(t,e,n){return Ti=Ei()?Reflect.construct.bind():function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&ki(o,n.prototype),o},Ti.apply(null,arguments)}function Ei(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function ki(t,e){return ki=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ki(t,e)}function ji(t){return ji=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ji(t)}Si.DEFAULT=new Si;var xi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ki(t,e)}(u,t);var e,n,r,o,i=(r=u,o=Ei(),function(){var t,e=ji(r);if(o){var n=ji(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Oi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _i(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),e=i.call(this,t.message),Error.captureStackTrace&&Error.captureStackTrace(_i(e),u),e.message=t.message,e.recognizer=t.recognizer,e.input=t.input,e.ctx=t.ctx,e.offendingToken=null,e.offendingState=-1,null!==e.recognizer&&(e.offendingState=e.recognizer.state),e}return e=u,(n=[{key:"getExpectedTokens",value:function(){return null!==this.recognizer?this.recognizer.atn.getExpectedTokens(this.offendingState,this.ctx):null}},{key:"toString",value:function(){return this.message}}])&&wi(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Pi(Error));function Ri(t){return Ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ri(t)}function Ci(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ri(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ri(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ri(o)?o:String(o)),r)}var o}function Ai(t,e){return Ai=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ai(t,e)}function Ni(t){return Ni=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ni(t)}var Ii=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ai(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ni(r);if(o){var n=Ni(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ri(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(o=i.call(this,{message:"",recognizer:t,input:e,ctx:null})).startIndex=n,o.deadEndConfigs=r,o}return e=u,(n=[{key:"toString",value:function(){var t="";return this.startIndex>=0&&this.startIndex<this.input.size&&(t=this.input.getText(new B(this.startIndex,this.startIndex))),"LexerNoViableAltException"+t}}])&&Ci(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(xi);function Li(t){return Li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Li(t)}function Di(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Li(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Li(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Li(o)?o:String(o)),r)}var o}function Fi(t,e){return Fi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Fi(t,e)}function Bi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Mi(t){return Mi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Mi(t)}var Ui=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Fi(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Mi(r);if(i){var n=Mi(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Li(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Bi(t)}(this,t)});function c(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(e=u.call(this))._input=t,e._factory=Si.DEFAULT,e._tokenFactorySourcePair=[Bi(e),t],e._interp=null,e._token=null,e._tokenStartCharIndex=-1,e._tokenStartLine=-1,e._tokenStartColumn=-1,e._hitEOF=!1,e._channel=o.DEFAULT_CHANNEL,e._type=o.INVALID_TYPE,e._modeStack=[],e._mode=c.DEFAULT_MODE,e._text=null,e}return e=c,n=[{key:"reset",value:function(){null!==this._input&&this._input.seek(0),this._token=null,this._type=o.INVALID_TYPE,this._channel=o.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartColumn=-1,this._tokenStartLine=-1,this._text=null,this._hitEOF=!1,this._mode=c.DEFAULT_MODE,this._modeStack=[],this._interp.reset()}},{key:"nextToken",value:function(){if(null===this._input)throw"nextToken requires a non-null input stream.";var t=this._input.mark();try{for(;;){if(this._hitEOF)return this.emitEOF(),this._token;this._token=null,this._channel=o.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartColumn=this._interp.column,this._tokenStartLine=this._interp.line,this._text=null;for(var e=!1;;){this._type=o.INVALID_TYPE;var n=c.SKIP;try{n=this._interp.match(this._input,this._mode)}catch(t){if(!(t instanceof xi))throw console.log(t.stack),t;this.notifyListeners(t),this.recover(t)}if(this._input.LA(1)===o.EOF&&(this._hitEOF=!0),this._type===o.INVALID_TYPE&&(this._type=n),this._type===c.SKIP){e=!0;break}if(this._type!==c.MORE)break}if(!e)return null===this._token&&this.emit(),this._token}}finally{this._input.release(t)}}},{key:"skip",value:function(){this._type=c.SKIP}},{key:"more",value:function(){this._type=c.MORE}},{key:"mode",value:function(t){this._mode=t}},{key:"pushMode",value:function(t){this._interp.debug&&console.log("pushMode "+t),this._modeStack.push(this._mode),this.mode(t)}},{key:"popMode",value:function(){if(0===this._modeStack.length)throw"Empty Stack";return this._interp.debug&&console.log("popMode back to "+this._modeStack.slice(0,-1)),this.mode(this._modeStack.pop()),this._mode}},{key:"emitToken",value:function(t){this._token=t}},{key:"emit",value:function(){var t=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.getCharIndex()-1,this._tokenStartLine,this._tokenStartColumn);return this.emitToken(t),t}},{key:"emitEOF",value:function(){var t=this.column,e=this.line,n=this._factory.create(this._tokenFactorySourcePair,o.EOF,null,o.DEFAULT_CHANNEL,this._input.index,this._input.index-1,e,t);return this.emitToken(n),n}},{key:"getCharIndex",value:function(){return this._input.index}},{key:"getAllTokens",value:function(){for(var t=[],e=this.nextToken();e.type!==o.EOF;)t.push(e),e=this.nextToken();return t}},{key:"notifyListeners",value:function(t){var e=this._tokenStartCharIndex,n=this._input.index,r=this._input.getText(e,n),o="token recognition error at: '"+this.getErrorDisplay(r)+"'";this.getErrorListenerDispatch().syntaxError(this,null,this._tokenStartLine,this._tokenStartColumn,o,t)}},{key:"getErrorDisplay",value:function(t){for(var e=[],n=0;n<t.length;n++)e.push(t[n]);return e.join("")}},{key:"getErrorDisplayForChar",value:function(t){return t.charCodeAt(0)===o.EOF?"<EOF>":"\n"===t?"\\n":"\t"===t?"\\t":"\r"===t?"\\r":t}},{key:"getCharErrorDisplay",value:function(t){return"'"+this.getErrorDisplayForChar(t)+"'"}},{key:"recover",value:function(t){this._input.LA(1)!==o.EOF&&(t instanceof Ii?this._interp.consume(this._input):this._input.consume())}},{key:"inputStream",get:function(){return this._input},set:function(t){this._input=null,this._tokenFactorySourcePair=[this,this._input],this.reset(),this._input=t,this._tokenFactorySourcePair=[this,this._input]}},{key:"sourceName",get:function(){return this._input.sourceName}},{key:"type",get:function(){return this._type},set:function(t){this._type=t}},{key:"line",get:function(){return this._interp.line},set:function(t){this._interp.line=t}},{key:"column",get:function(){return this._interp.column},set:function(t){this._interp.column=t}},{key:"text",get:function(){return null!==this._text?this._text:this._interp.getText(this._input)},set:function(t){this._text=t}}],n&&Di(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(ai);function Vi(t){return Vi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Vi(t)}function zi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Vi(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Vi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Vi(o)?o:String(o)),r)}var o}function qi(t){return t.hashCodeForConfigSet()}function Hi(t,e){return t===e||null!==t&&null!==e&&t.equalsForConfigSet(e)}Ui.DEFAULT_MODE=0,Ui.MORE=-2,Ui.SKIP=-3,Ui.DEFAULT_TOKEN_CHANNEL=o.DEFAULT_CHANNEL,Ui.HIDDEN=o.HIDDEN_CHANNEL,Ui.MIN_CHAR_VALUE=0,Ui.MAX_CHAR_VALUE=1114111;var Ki=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.configLookup=new g(qi,Hi),this.fullCtx=void 0===e||e,this.readOnly=!1,this.configs=[],this.uniqueAlt=0,this.conflictingAlts=null,this.hasSemanticContext=!1,this.dipsIntoOuterContext=!1,this.cachedHashCode=-1}var e,n;return e=t,n=[{key:"add",value:function(t,e){if(void 0===e&&(e=null),this.readOnly)throw"This set is readonly";t.semanticContext!==j.NONE&&(this.hasSemanticContext=!0),t.reachesIntoOuterContext>0&&(this.dipsIntoOuterContext=!0);var n=this.configLookup.add(t);if(n===t)return this.cachedHashCode=-1,this.configs.push(t),!0;var r=!this.fullCtx,o=je(n.context,t.context,r,e);return n.reachesIntoOuterContext=Math.max(n.reachesIntoOuterContext,t.reachesIntoOuterContext),t.precedenceFilterSuppressed&&(n.precedenceFilterSuppressed=!0),n.context=o,!0}},{key:"getStates",value:function(){for(var t=new g,e=0;e<this.configs.length;e++)t.add(this.configs[e].state);return t}},{key:"getPredicates",value:function(){for(var t=[],e=0;e<this.configs.length;e++){var n=this.configs[e].semanticContext;n!==j.NONE&&t.push(n.semanticContext)}return t}},{key:"optimizeConfigs",value:function(t){if(this.readOnly)throw"This set is readonly";if(0!==this.configLookup.length)for(var e=0;e<this.configs.length;e++){var n=this.configs[e];n.context=t.getCachedContext(n.context)}}},{key:"addAll",value:function(t){for(var e=0;e<t.length;e++)this.add(t[e]);return!1}},{key:"equals",value:function(e){return this===e||e instanceof t&&i(this.configs,e.configs)&&this.fullCtx===e.fullCtx&&this.uniqueAlt===e.uniqueAlt&&this.conflictingAlts===e.conflictingAlts&&this.hasSemanticContext===e.hasSemanticContext&&this.dipsIntoOuterContext===e.dipsIntoOuterContext}},{key:"hashCode",value:function(){var t=new f;return t.update(this.configs),t.finish()}},{key:"updateHashCode",value:function(t){this.readOnly?(-1===this.cachedHashCode&&(this.cachedHashCode=this.hashCode()),t.update(this.cachedHashCode)):t.update(this.hashCode())}},{key:"isEmpty",value:function(){return 0===this.configs.length}},{key:"contains",value:function(t){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.contains(t)}},{key:"containsFast",value:function(t){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.containsFast(t)}},{key:"clear",value:function(){if(this.readOnly)throw"This set is readonly";this.configs=[],this.cachedHashCode=-1,this.configLookup=new g}},{key:"setReadonly",value:function(t){this.readOnly=t,t&&(this.configLookup=null)}},{key:"toString",value:function(){return b(this.configs)+(this.hasSemanticContext?",hasSemanticContext="+this.hasSemanticContext:"")+(this.uniqueAlt!==Fe.INVALID_ALT_NUMBER?",uniqueAlt="+this.uniqueAlt:"")+(null!==this.conflictingAlts?",conflictingAlts="+this.conflictingAlts:"")+(this.dipsIntoOuterContext?",dipsIntoOuterContext":"")}},{key:"items",get:function(){return this.configs}},{key:"length",get:function(){return this.configs.length}}],n&&zi(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Yi(t){return Yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Yi(t)}function Gi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Yi(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Yi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Yi(o)?o:String(o)),r)}var o}var Wi=function(){function t(e,n){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),null===e&&(e=-1),null===n&&(n=new Ki),this.stateNumber=e,this.configs=n,this.edges=null,this.isAcceptState=!1,this.prediction=0,this.lexerActionExecutor=null,this.requiresFullContext=!1,this.predicates=null,this}var e,n;return e=t,n=[{key:"getAltSet",value:function(){var t=new g;if(null!==this.configs)for(var e=0;e<this.configs.length;e++){var n=this.configs[e];t.add(n.alt)}return 0===t.length?null:t}},{key:"equals",value:function(e){return this===e||e instanceof t&&this.configs.equals(e.configs)}},{key:"toString",value:function(){var t=this.stateNumber+":"+this.configs;return this.isAcceptState&&(t+="=>",null!==this.predicates?t+=this.predicates:t+=this.prediction),t}},{key:"hashCode",value:function(){var t=new f;return t.update(this.configs),t.finish()}}],n&&Gi(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Xi(t){return Xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Xi(t)}function $i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Xi(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Xi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Xi(o)?o:String(o)),r)}var o}var Ji=function(){function t(e,n){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.atn=e,this.sharedContextCache=n,this}var e,n;return e=t,n=[{key:"getCachedContext",value:function(t){if(null===this.sharedContextCache)return t;var e=new Te;return ke(t,this.sharedContextCache,e)}}],n&&$i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Qi(t){return Qi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Qi(t)}function Zi(t,e){return Zi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Zi(t,e)}function tu(t){return tu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},tu(t)}Ji.ERROR=new Wi(2147483647,new Ki);var eu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Zi(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=tu(n);if(r){var o=tu(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Qi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this)).configLookup=new g,t}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Ki);function nu(t){return nu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},nu(t)}function ru(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==nu(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==nu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===nu(o)?o:String(o)),r)}var o}function ou(){return ou="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=au(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},ou.apply(this,arguments)}function iu(t,e){return iu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},iu(t,e)}function uu(t,e){if(e&&("object"===nu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return cu(t)}function cu(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function au(t){return au=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},au(t)}var lu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&iu(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=au(r);if(o){var n=au(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return uu(this,t)});function u(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),n=i.call(this,t,e);var r=t.lexerActionExecutor||null;return n.lexerActionExecutor=r||(null!==e?e.lexerActionExecutor:null),n.passedThroughNonGreedyDecision=null!==e&&n.checkNonGreedyDecision(e,n.state),n.hashCodeForConfigSet=u.prototype.hashCode,n.equalsForConfigSet=u.prototype.equals,uu(n,cu(n))}return e=u,(n=[{key:"updateHashCode",value:function(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext,this.passedThroughNonGreedyDecision,this.lexerActionExecutor)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.passedThroughNonGreedyDecision===t.passedThroughNonGreedyDecision&&(this.lexerActionExecutor?this.lexerActionExecutor.equals(t.lexerActionExecutor):!t.lexerActionExecutor)&&ou(au(u.prototype),"equals",this).call(this,t)}},{key:"checkNonGreedyDecision",value:function(t,e){return t.passedThroughNonGreedyDecision||e instanceof Ge&&e.nonGreedy}}])&&ru(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(L);function su(t){return su="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},su(t)}function fu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==su(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==su(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===su(o)?o:String(o)),r)}var o}function pu(t,e){return pu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},pu(t,e)}function yu(t){return yu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},yu(t)}var hu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&pu(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=yu(r);if(o){var n=yu(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===su(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e.actionType)).offset=t,n.action=e,n.isPositionDependent=!0,n}return e=u,(n=[{key:"execute",value:function(t){this.action.execute(t)}},{key:"updateHashCode",value:function(t){t.update(this.actionType,this.offset,this.action)}},{key:"equals",value:function(t){return this===t||t instanceof u&&this.offset===t.offset&&this.action===t.action}}])&&fu(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zr);function bu(t){return bu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},bu(t)}function vu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==bu(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==bu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===bu(o)?o:String(o)),r)}var o}var du=function(){function t(e){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.lexerActions=null===e?[]:e,this.cachedHashCode=f.hashStuff(e),this}var e,n,r;return e=t,n=[{key:"fixOffsetBeforeMatch",value:function(e){for(var n=null,r=0;r<this.lexerActions.length;r++)!this.lexerActions[r].isPositionDependent||this.lexerActions[r]instanceof hu||(null===n&&(n=this.lexerActions.concat([])),n[r]=new hu(e,this.lexerActions[r]));return null===n?this:new t(n)}},{key:"execute",value:function(t,e,n){var r=!1,o=e.index;try{for(var i=0;i<this.lexerActions.length;i++){var u=this.lexerActions[i];if(u instanceof hu){var c=u.offset;e.seek(n+c),u=u.action,r=n+c!==o}else u.isPositionDependent&&(e.seek(o),r=!1);u.execute(t)}}finally{r&&e.seek(o)}}},{key:"hashCode",value:function(){return this.cachedHashCode}},{key:"updateHashCode",value:function(t){t.update(this.cachedHashCode)}},{key:"equals",value:function(e){if(this===e)return!0;if(e instanceof t){if(this.cachedHashCode!=e.cachedHashCode)return!1;if(this.lexerActions.length!=e.lexerActions.length)return!1;for(var n=this.lexerActions.length,r=0;r<n;++r)if(!this.lexerActions[r].equals(e.lexerActions[r]))return!1;return!0}return!1}}],r=[{key:"append",value:function(e,n){return new t(null===e?[n]:e.lexerActions.concat([n]))}}],n&&vu(e.prototype,n),r&&vu(e,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function mu(t,e){return mu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},mu(t,e)}function gu(t){return gu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},gu(t)}function Su(t){return Su="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Su(t)}function Ou(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function wu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Su(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Su(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Su(o)?o:String(o)),r)}var o}function _u(t,e,n){return e&&wu(t.prototype,e),n&&wu(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function Pu(t){t.index=-1,t.line=0,t.column=-1,t.dfaState=null}var Tu=function(){function t(){Ou(this,t),Pu(this)}return _u(t,[{key:"reset",value:function(){Pu(this)}}]),t}(),Eu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&mu(t,e)}(i,t);var e,n,r=(e=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=gu(e);if(n){var o=gu(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return function(t,e){if(e&&("object"===Su(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(t,e,n,o){var u;return Ou(this,i),(u=r.call(this,e,o)).decisionToDFA=n,u.recog=t,u.startIndex=-1,u.line=1,u.column=0,u.mode=Ui.DEFAULT_MODE,u.prevAccept=new Tu,u}return _u(i,[{key:"copyState",value:function(t){this.column=t.column,this.line=t.line,this.mode=t.mode,this.startIndex=t.startIndex}},{key:"match",value:function(t,e){this.mode=e;var n=t.mark();try{this.startIndex=t.index,this.prevAccept.reset();var r=this.decisionToDFA[e];return null===r.s0?this.matchATN(t):this.execATN(t,r.s0)}finally{t.release(n)}}},{key:"reset",value:function(){this.prevAccept.reset(),this.startIndex=-1,this.line=1,this.column=0,this.mode=Ui.DEFAULT_MODE}},{key:"matchATN",value:function(t){var e=this.atn.modeToStartState[this.mode];i.debug&&console.log("matchATN mode "+this.mode+" start: "+e);var n=this.mode,r=this.computeStartState(t,e),o=r.hasSemanticContext;r.hasSemanticContext=!1;var u=this.addDFAState(r);o||(this.decisionToDFA[this.mode].s0=u);var c=this.execATN(t,u);return i.debug&&console.log("DFA after matchATN: "+this.decisionToDFA[n].toLexerString()),c}},{key:"execATN",value:function(t,e){i.debug&&console.log("start state closure="+e.configs),e.isAcceptState&&this.captureSimState(this.prevAccept,t,e);for(var n=t.LA(1),r=e;;){i.debug&&console.log("execATN loop starting closure: "+r.configs);var u=this.getExistingTargetState(r,n);if(null===u&&(u=this.computeTargetState(t,r,n)),u===Ji.ERROR)break;if(n!==o.EOF&&this.consume(t),u.isAcceptState&&(this.captureSimState(this.prevAccept,t,u),n===o.EOF))break;n=t.LA(1),r=u}return this.failOrAccept(this.prevAccept,t,r.configs,n)}},{key:"getExistingTargetState",value:function(t,e){if(null===t.edges||e<i.MIN_DFA_EDGE||e>i.MAX_DFA_EDGE)return null;var n=t.edges[e-i.MIN_DFA_EDGE];return void 0===n&&(n=null),i.debug&&null!==n&&console.log("reuse state "+t.stateNumber+" edge to "+n.stateNumber),n}},{key:"computeTargetState",value:function(t,e,n){var r=new eu;return this.getReachableConfigSet(t,e.configs,r,n),0===r.items.length?(r.hasSemanticContext||this.addDFAEdge(e,n,Ji.ERROR),Ji.ERROR):this.addDFAEdge(e,n,null,r)}},{key:"failOrAccept",value:function(t,e,n,r){if(null!==this.prevAccept.dfaState){var i=t.dfaState.lexerActionExecutor;return this.accept(e,i,this.startIndex,t.index,t.line,t.column),t.dfaState.prediction}if(r===o.EOF&&e.index===this.startIndex)return o.EOF;throw new Ii(this.recog,e,this.startIndex,n)}},{key:"getReachableConfigSet",value:function(t,e,n,r){for(var u=Fe.INVALID_ALT_NUMBER,c=0;c<e.items.length;c++){var a=e.items[c],l=a.alt===u;if(!l||!a.passedThroughNonGreedyDecision){i.debug&&console.log("testing %s at %s\n",this.getTokenName(r),a.toString(this.recog,!0));for(var s=0;s<a.state.transitions.length;s++){var f=a.state.transitions[s],p=this.getReachableTarget(f,r);if(null!==p){var y=a.lexerActionExecutor;null!==y&&(y=y.fixOffsetBeforeMatch(t.index-this.startIndex));var h=r===o.EOF,b=new lu({state:p,lexerActionExecutor:y},a);this.closure(t,b,n,l,!0,h)&&(u=a.alt)}}}}}},{key:"accept",value:function(t,e,n,r,o,u){i.debug&&console.log("ACTION %s\n",e),t.seek(r),this.line=o,this.column=u,null!==e&&null!==this.recog&&e.execute(this.recog,t,n)}},{key:"getReachableTarget",value:function(t,e){return t.matches(e,0,Ui.MAX_CHAR_VALUE)?t.target:null}},{key:"computeStartState",value:function(t,e){for(var n=oe.EMPTY,r=new eu,o=0;o<e.transitions.length;o++){var i=e.transitions[o].target,u=new lu({state:i,alt:o+1,context:n},null);this.closure(t,u,r,!1,!1,!1)}return r}},{key:"closure",value:function(t,e,n,r,o,u){var c=null;if(i.debug&&console.log("closure("+e.toString(this.recog,!0)+")"),e.state instanceof $){if(i.debug&&(null!==this.recog?console.log("closure at %s rule stop %s\n",this.recog.ruleNames[e.state.ruleIndex],e):console.log("closure at rule stop %s\n",e)),null===e.context||e.context.hasEmptyPath()){if(null===e.context||e.context.isEmpty())return n.add(e),!0;n.add(new lu({state:e.state,context:oe.EMPTY},e)),r=!0}if(null!==e.context&&!e.context.isEmpty())for(var a=0;a<e.context.length;a++)if(e.context.getReturnState(a)!==oe.EMPTY_RETURN_STATE){var l=e.context.getParent(a),s=this.atn.states[e.context.getReturnState(a)];c=new lu({state:s,context:l},e),r=this.closure(t,c,n,r,o,u)}return r}e.state.epsilonOnlyTransitions||r&&e.passedThroughNonGreedyDecision||n.add(e);for(var f=0;f<e.state.transitions.length;f++){var p=e.state.transitions[f];null!==(c=this.getEpsilonTarget(t,e,p,n,o,u))&&(r=this.closure(t,c,n,r,o,u))}return r}},{key:"getEpsilonTarget",value:function(t,e,n,r,u,c){var a=null;if(n.serializationType===tt.RULE){var l=ve.create(e.context,n.followState.stateNumber);a=new lu({state:n.target,context:l},e)}else{if(n.serializationType===tt.PRECEDENCE)throw"Precedence predicates are not supported in lexers.";if(n.serializationType===tt.PREDICATE)i.debug&&console.log("EVAL rule "+n.ruleIndex+":"+n.predIndex),r.hasSemanticContext=!0,this.evaluatePredicate(t,n.ruleIndex,n.predIndex,u)&&(a=new lu({state:n.target},e));else if(n.serializationType===tt.ACTION)if(null===e.context||e.context.hasEmptyPath()){var s=du.append(e.lexerActionExecutor,this.atn.lexerActions[n.actionIndex]);a=new lu({state:n.target,lexerActionExecutor:s},e)}else a=new lu({state:n.target},e);else n.serializationType===tt.EPSILON?a=new lu({state:n.target},e):n.serializationType!==tt.ATOM&&n.serializationType!==tt.RANGE&&n.serializationType!==tt.SET||c&&n.matches(o.EOF,0,Ui.MAX_CHAR_VALUE)&&(a=new lu({state:n.target},e))}return a}},{key:"evaluatePredicate",value:function(t,e,n,r){if(null===this.recog)return!0;if(!r)return this.recog.sempred(null,e,n);var o=this.column,i=this.line,u=t.index,c=t.mark();try{return this.consume(t),this.recog.sempred(null,e,n)}finally{this.column=o,this.line=i,t.seek(u),t.release(c)}}},{key:"captureSimState",value:function(t,e,n){t.index=e.index,t.line=this.line,t.column=this.column,t.dfaState=n}},{key:"addDFAEdge",value:function(t,e,n,r){if(void 0===n&&(n=null),void 0===r&&(r=null),null===n&&null!==r){var o=r.hasSemanticContext;if(r.hasSemanticContext=!1,n=this.addDFAState(r),o)return n}return e<i.MIN_DFA_EDGE||e>i.MAX_DFA_EDGE||(i.debug&&console.log("EDGE "+t+" -> "+n+" upon "+e),null===t.edges&&(t.edges=[]),t.edges[e-i.MIN_DFA_EDGE]=n),n}},{key:"addDFAState",value:function(t){for(var e=new Wi(null,t),n=null,r=0;r<t.items.length;r++){var o=t.items[r];if(o.state instanceof $){n=o;break}}null!==n&&(e.isAcceptState=!0,e.lexerActionExecutor=n.lexerActionExecutor,e.prediction=this.atn.ruleToTokenType[n.state.ruleIndex]);var i=this.decisionToDFA[this.mode],u=i.states.get(e);if(null!==u)return u;var c=e;return c.stateNumber=i.states.length,t.setReadonly(!0),c.configs=t,i.states.add(c),c}},{key:"getDFA",value:function(t){return this.decisionToDFA[t]}},{key:"getText",value:function(t){return t.getText(this.startIndex,t.index-1)}},{key:"consume",value:function(t){t.LA(1)==="\n".charCodeAt(0)?(this.line+=1,this.column=0):this.column+=1,t.consume()}},{key:"getTokenName",value:function(t){return-1===t?"EOF":"'"+String.fromCharCode(t)+"'"}}]),i}(Ji);function ku(t){return ku="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ku(t)}function ju(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ku(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ku(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ku(o)?o:String(o)),r)}var o}Eu.debug=!1,Eu.dfa_debug=!1,Eu.MIN_DFA_EDGE=0,Eu.MAX_DFA_EDGE=127;var xu=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.alt=n,this.pred=e}var e,n;return e=t,(n=[{key:"toString",value:function(){return"("+this.pred+", "+this.alt+")"}}])&&ju(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ru(t){return Ru="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ru(t)}function Cu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ru(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ru(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ru(o)?o:String(o)),r)}var o}var Au=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data={}}var e,n;return e=t,(n=[{key:"get",value:function(t){return this.data["k-"+t]||null}},{key:"set",value:function(t,e){this.data["k-"+t]=e}},{key:"values",value:function(){var t=this;return Object.keys(this.data).filter((function(t){return t.startsWith("k-")})).map((function(e){return t.data[e]}),this)}}])&&Cu(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Nu={SLL:0,LL:1,LL_EXACT_AMBIG_DETECTION:2,hasSLLConflictTerminatingPrediction:function(t,e){if(Nu.allConfigsInRuleStopStates(e))return!0;if(t===Nu.SLL&&e.hasSemanticContext){for(var n=new Ki,r=0;r<e.items.length;r++){var o=e.items[r];o=new L({semanticContext:j.NONE},o),n.add(o)}e=n}var i=Nu.getConflictingAltSubsets(e);return Nu.hasConflictingAltSet(i)&&!Nu.hasStateAssociatedWithOneAlt(e)},hasConfigInRuleStopState:function(t){for(var e=0;e<t.items.length;e++)if(t.items[e].state instanceof $)return!0;return!1},allConfigsInRuleStopStates:function(t){for(var e=0;e<t.items.length;e++)if(!(t.items[e].state instanceof $))return!1;return!0},resolvesToJustOneViableAlt:function(t){return Nu.getSingleViableAlt(t)},allSubsetsConflict:function(t){return!Nu.hasNonConflictingAltSet(t)},hasNonConflictingAltSet:function(t){for(var e=0;e<t.length;e++)if(1===t[e].length)return!0;return!1},hasConflictingAltSet:function(t){for(var e=0;e<t.length;e++)if(t[e].length>1)return!0;return!1},allSubsetsEqual:function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n];if(null===e)e=r;else if(r!==e)return!1}return!0},getUniqueAlt:function(t){var e=Nu.getAlts(t);return 1===e.length?e.minValue():Fe.INVALID_ALT_NUMBER},getAlts:function(t){var e=new Ce;return t.map((function(t){e.or(t)})),e},getConflictingAltSubsets:function(t){var e=new Te;return e.hashFunction=function(t){f.hashStuff(t.state.stateNumber,t.context)},e.equalsFunction=function(t,e){return t.state.stateNumber===e.state.stateNumber&&t.context.equals(e.context)},t.items.map((function(t){var n=e.get(t);null===n&&(n=new Ce,e.set(t,n)),n.add(t.alt)})),e.getValues()},getStateToAltMap:function(t){var e=new Au;return t.items.map((function(t){var n=e.get(t.state);null===n&&(n=new Ce,e.set(t.state,n)),n.add(t.alt)})),e},hasStateAssociatedWithOneAlt:function(t){for(var e=Nu.getStateToAltMap(t).values(),n=0;n<e.length;n++)if(1===e[n].length)return!0;return!1},getSingleViableAlt:function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n].minValue();if(null===e)e=r;else if(e!==r)return Fe.INVALID_ALT_NUMBER}return e}};const Iu=Nu;function Lu(t){return Lu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Lu(t)}function Du(t,e){return Du=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Du(t,e)}function Fu(t){return Fu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Fu(t)}var Bu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Du(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Fu(n);if(r){var o=Fu(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Lu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(t,e,n,r,u,c){var a;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),c=c||t._ctx,r=r||t.getCurrentToken(),n=n||t.getCurrentToken(),e=e||t.getInputStream(),(a=o.call(this,{message:"",recognizer:t,input:e,ctx:c})).deadEndConfigs=u,a.startToken=n,a.offendingToken=r,a}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(xi);function Mu(t){return Mu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Mu(t)}function Uu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Mu(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Mu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Mu(o)?o:String(o)),r)}var o}var Vu=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.defaultMapCtor=e||Te,this.cacheMap=new this.defaultMapCtor}var e,n;return e=t,(n=[{key:"get",value:function(t,e){var n=this.cacheMap.get(t)||null;return null===n?null:n.get(e)||null}},{key:"set",value:function(t,e,n){var r=this.cacheMap.get(t)||null;null===r&&(r=new this.defaultMapCtor,this.cacheMap.set(t,r)),r.set(e,n)}}])&&Uu(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function zu(t){return zu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},zu(t)}function qu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==zu(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==zu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===zu(o)?o:String(o)),r)}var o}function Hu(t,e){return Hu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Hu(t,e)}function Ku(t){return Ku=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ku(t)}var Yu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Hu(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ku(r);if(i){var n=Ku(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===zu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t,e,n,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(o=u.call(this,e,r)).parser=t,o.decisionToDFA=n,o.predictionMode=Iu.LL,o._input=null,o._startIndex=0,o._outerContext=null,o._dfa=null,o.mergeCache=null,o.debug=!1,o.debug_closure=!1,o.debug_add=!1,o.trace_atn_sim=!1,o.dfa_debug=!1,o.retry_debug=!1,o}return e=c,n=[{key:"reset",value:function(){}},{key:"adaptivePredict",value:function(t,e,n){(this.debug||this.trace_atn_sim)&&console.log("adaptivePredict decision "+e+" exec LA(1)=="+this.getLookaheadName(t)+" line "+t.LT(1).line+":"+t.LT(1).column),this._input=t,this._startIndex=t.index,this._outerContext=n;var r=this.decisionToDFA[e];this._dfa=r;var o=t.mark(),i=t.index;try{var u;if(null===(u=r.precedenceDfa?r.getPrecedenceStartState(this.parser.getPrecedence()):r.s0)){null===n&&(n=ee.EMPTY),this.debug&&console.log("predictATN decision "+r.decision+" exec LA(1)=="+this.getLookaheadName(t)+", outerContext="+n.toString(this.parser.ruleNames));var c=this.computeStartState(r.atnStartState,ee.EMPTY,!1);r.precedenceDfa?(r.s0.configs=c,c=this.applyPrecedenceFilter(c),u=this.addDFAState(r,new Wi(null,c)),r.setPrecedenceStartState(this.parser.getPrecedence(),u)):(u=this.addDFAState(r,new Wi(null,c)),r.s0=u)}var a=this.execATN(r,u,t,i,n);return this.debug&&console.log("DFA after predictATN: "+r.toString(this.parser.literalNames,this.parser.symbolicNames)),a}finally{this._dfa=null,this.mergeCache=null,t.seek(i),t.release(o)}}},{key:"execATN",value:function(t,e,n,r,i){var u;(this.debug||this.trace_atn_sim)&&console.log("execATN decision "+t.decision+", DFA state "+e+", LA(1)=="+this.getLookaheadName(n)+" line "+n.LT(1).line+":"+n.LT(1).column);var c=e;this.debug&&console.log("s0 = "+e);for(var a=n.LA(1);;){var l=this.getExistingTargetState(c,a);if(null===l&&(l=this.computeTargetState(t,c,a)),l===Ji.ERROR){var s=this.noViableAlt(n,i,c.configs,r);if(n.seek(r),(u=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(c.configs,i))!==Fe.INVALID_ALT_NUMBER)return u;throw s}if(l.requiresFullContext&&this.predictionMode!==Iu.SLL){var f=null;if(null!==l.predicates){this.debug&&console.log("DFA state has preds in DFA sim LL failover");var p=n.index;if(p!==r&&n.seek(r),1===(f=this.evalSemanticContext(l.predicates,i,!0)).length)return this.debug&&console.log("Full LL avoided"),f.minValue();p!==r&&n.seek(p)}this.dfa_debug&&console.log("ctx sensitive state "+i+" in "+l);var y=this.computeStartState(t.atnStartState,i,!0);return this.reportAttemptingFullContext(t,f,l.configs,r,n.index),this.execATNWithFullContext(t,l,y,n,r,i)}if(l.isAcceptState){if(null===l.predicates)return l.prediction;var h=n.index;n.seek(r);var b=this.evalSemanticContext(l.predicates,i,!0);if(0===b.length)throw this.noViableAlt(n,i,l.configs,r);return 1===b.length||this.reportAmbiguity(t,l,r,h,!1,b,l.configs),b.minValue()}c=l,a!==o.EOF&&(n.consume(),a=n.LA(1))}}},{key:"getExistingTargetState",value:function(t,e){var n=t.edges;return null===n?null:n[e+1]||null}},{key:"computeTargetState",value:function(t,e,n){var r=this.computeReachSet(e.configs,n,!1);if(null===r)return this.addDFAEdge(t,e,n,Ji.ERROR),Ji.ERROR;var o=new Wi(null,r),i=this.getUniqueAlt(r);if(this.debug){var u=Iu.getConflictingAltSubsets(r);console.log("SLL altSubSets="+b(u)+", configs="+r+", predict="+i+", allSubsetsConflict="+Iu.allSubsetsConflict(u)+", conflictingAlts="+this.getConflictingAlts(r))}return i!==Fe.INVALID_ALT_NUMBER?(o.isAcceptState=!0,o.configs.uniqueAlt=i,o.prediction=i):Iu.hasSLLConflictTerminatingPrediction(this.predictionMode,r)&&(o.configs.conflictingAlts=this.getConflictingAlts(r),o.requiresFullContext=!0,o.isAcceptState=!0,o.prediction=o.configs.conflictingAlts.minValue()),o.isAcceptState&&o.configs.hasSemanticContext&&(this.predicateDFAState(o,this.atn.getDecisionState(t.decision)),null!==o.predicates&&(o.prediction=Fe.INVALID_ALT_NUMBER)),this.addDFAEdge(t,e,n,o)}},{key:"predicateDFAState",value:function(t,e){var n=e.transitions.length,r=this.getConflictingAltsOrUniqueAlt(t.configs),o=this.getPredsForAmbigAlts(r,t.configs,n);null!==o?(t.predicates=this.getPredicatePredictions(r,o),t.prediction=Fe.INVALID_ALT_NUMBER):t.prediction=r.minValue()}},{key:"execATNWithFullContext",value:function(t,e,n,r,i,u){(this.debug||this.trace_atn_sim)&&console.log("execATNWithFullContext "+n);var c,a=!1,l=n;r.seek(i);for(var s=r.LA(1),f=-1;;){if(null===(c=this.computeReachSet(l,s,!0))){var p=this.noViableAlt(r,u,l,i);r.seek(i);var y=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(l,u);if(y!==Fe.INVALID_ALT_NUMBER)return y;throw p}var h=Iu.getConflictingAltSubsets(c);if(this.debug&&console.log("LL altSubSets="+h+", predict="+Iu.getUniqueAlt(h)+", resolvesToJustOneViableAlt="+Iu.resolvesToJustOneViableAlt(h)),c.uniqueAlt=this.getUniqueAlt(c),c.uniqueAlt!==Fe.INVALID_ALT_NUMBER){f=c.uniqueAlt;break}if(this.predictionMode!==Iu.LL_EXACT_AMBIG_DETECTION){if((f=Iu.resolvesToJustOneViableAlt(h))!==Fe.INVALID_ALT_NUMBER)break}else if(Iu.allSubsetsConflict(h)&&Iu.allSubsetsEqual(h)){a=!0,f=Iu.getSingleViableAlt(h);break}l=c,s!==o.EOF&&(r.consume(),s=r.LA(1))}return c.uniqueAlt!==Fe.INVALID_ALT_NUMBER?(this.reportContextSensitivity(t,f,c,i,r.index),f):(this.reportAmbiguity(t,e,i,r.index,a,null,c),f)}},{key:"computeReachSet",value:function(t,e,n){this.debug&&console.log("in computeReachSet, starting closure: "+t),null===this.mergeCache&&(this.mergeCache=new Vu);for(var r=new Ki(n),i=null,u=0;u<t.items.length;u++){var c=t.items[u];if(this.debug&&console.log("testing "+this.getTokenName(e)+" at "+c),c.state instanceof $)(n||e===o.EOF)&&(null===i&&(i=[]),i.push(c),this.debug_add&&console.log("added "+c+" to skippedStopStates"));else for(var a=0;a<c.state.transitions.length;a++){var l=c.state.transitions[a],s=this.getReachableTarget(l,e);if(null!==s){var f=new L({state:s},c);r.add(f,this.mergeCache),this.debug_add&&console.log("added "+f+" to intermediate")}}}var p=null;if(null===i&&e!==o.EOF&&(1===r.items.length||this.getUniqueAlt(r)!==Fe.INVALID_ALT_NUMBER)&&(p=r),null===p){p=new Ki(n);for(var y=new g,h=e===o.EOF,b=0;b<r.items.length;b++)this.closure(r.items[b],p,y,!1,n,h)}if(e===o.EOF&&(p=this.removeAllConfigsNotInRuleStopState(p,p===r)),!(null===i||n&&Iu.hasConfigInRuleStopState(p)))for(var v=0;v<i.length;v++)p.add(i[v],this.mergeCache);return this.trace_atn_sim&&console.log("computeReachSet "+t+" -> "+p),0===p.items.length?null:p}},{key:"removeAllConfigsNotInRuleStopState",value:function(t,e){if(Iu.allConfigsInRuleStopStates(t))return t;for(var n=new Ki(t.fullCtx),r=0;r<t.items.length;r++){var i=t.items[r];if(i.state instanceof $)n.add(i,this.mergeCache);else if(e&&i.state.epsilonOnlyTransitions&&this.atn.nextTokens(i.state).contains(o.EPSILON)){var u=this.atn.ruleToStopState[i.state.ruleIndex];n.add(new L({state:u},i),this.mergeCache)}}return n}},{key:"computeStartState",value:function(t,e,n){var r=Ee(this.atn,e),o=new Ki(n);this.trace_atn_sim&&console.log("computeStartState from ATN state "+t+" initialContext="+r.toString(this.parser));for(var i=0;i<t.transitions.length;i++){var u=t.transitions[i].target,c=new L({state:u,alt:i+1,context:r},null),a=new g;this.closure(c,o,a,!0,n,!1)}return o}},{key:"applyPrecedenceFilter",value:function(t){for(var e,n=[],r=new Ki(t.fullCtx),o=0;o<t.items.length;o++)if(1===(e=t.items[o]).alt){var i=e.semanticContext.evalPrecedence(this.parser,this._outerContext);null!==i&&(n[e.state.stateNumber]=e.context,i!==e.semanticContext?r.add(new L({semanticContext:i},e),this.mergeCache):r.add(e,this.mergeCache))}for(var u=0;u<t.items.length;u++)if(1!==(e=t.items[u]).alt){if(!e.precedenceFilterSuppressed){var c=n[e.state.stateNumber]||null;if(null!==c&&c.equals(e.context))continue}r.add(e,this.mergeCache)}return r}},{key:"getReachableTarget",value:function(t,e){return t.matches(e,0,this.atn.maxTokenType)?t.target:null}},{key:"getPredsForAmbigAlts",value:function(t,e,n){for(var r=[],o=0;o<e.items.length;o++){var i=e.items[o];t.has(i.alt)&&(r[i.alt]=j.orContext(r[i.alt]||null,i.semanticContext))}for(var u=0,c=1;c<n+1;c++){var a=r[c]||null;null===a?r[c]=j.NONE:a!==j.NONE&&(u+=1)}return 0===u&&(r=null),this.debug&&console.log("getPredsForAmbigAlts result "+b(r)),r}},{key:"getPredicatePredictions",value:function(t,e){for(var n=[],r=!1,o=1;o<e.length;o++){var i=e[o];null!==t&&t.has(o)&&n.push(new xu(i,o)),i!==j.NONE&&(r=!0)}return r?n:null}},{key:"getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule",value:function(t,e){var n=this.splitAccordingToSemanticValidity(t,e),r=n[0],o=n[1],i=this.getAltThatFinishedDecisionEntryRule(r);return i!==Fe.INVALID_ALT_NUMBER||o.items.length>0&&(i=this.getAltThatFinishedDecisionEntryRule(o))!==Fe.INVALID_ALT_NUMBER?i:Fe.INVALID_ALT_NUMBER}},{key:"getAltThatFinishedDecisionEntryRule",value:function(t){for(var e=[],n=0;n<t.items.length;n++){var r=t.items[n];(r.reachesIntoOuterContext>0||r.state instanceof $&&r.context.hasEmptyPath())&&e.indexOf(r.alt)<0&&e.push(r.alt)}return 0===e.length?Fe.INVALID_ALT_NUMBER:Math.min.apply(null,e)}},{key:"splitAccordingToSemanticValidity",value:function(t,e){for(var n=new Ki(t.fullCtx),r=new Ki(t.fullCtx),o=0;o<t.items.length;o++){var i=t.items[o];i.semanticContext!==j.NONE?i.semanticContext.evaluate(this.parser,e)?n.add(i):r.add(i):n.add(i)}return[n,r]}},{key:"evalSemanticContext",value:function(t,e,n){for(var r=new Ce,o=0;o<t.length;o++){var i=t[o];if(i.pred!==j.NONE){var u=i.pred.evaluate(this.parser,e);if((this.debug||this.dfa_debug)&&console.log("eval pred "+i+"="+u),u&&((this.debug||this.dfa_debug)&&console.log("PREDICT "+i.alt),r.add(i.alt),!n))break}else if(r.add(i.alt),!n)break}return r}},{key:"closure",value:function(t,e,n,r,o,i){this.closureCheckingStopState(t,e,n,r,o,0,i)}},{key:"closureCheckingStopState",value:function(t,e,n,r,o,i,u){if((this.trace_atn_sim||this.debug_closure)&&console.log("closure("+t.toString(this.parser,!0)+")"),t.state instanceof $){if(!t.context.isEmpty()){for(var c=0;c<t.context.length;c++)if(t.context.getReturnState(c)!==oe.EMPTY_RETURN_STATE){var a=this.atn.states[t.context.getReturnState(c)],l=t.context.getParent(c),s={state:a,alt:t.alt,context:l,semanticContext:t.semanticContext},f=new L(s,null);f.reachesIntoOuterContext=t.reachesIntoOuterContext,this.closureCheckingStopState(f,e,n,r,o,i-1,u)}else{if(o){e.add(new L({state:t.state,context:oe.EMPTY},t),this.mergeCache);continue}this.debug&&console.log("FALLING off rule "+this.getRuleName(t.state.ruleIndex)),this.closure_(t,e,n,r,o,i,u)}return}if(o)return void e.add(t,this.mergeCache);this.debug&&console.log("FALLING off rule "+this.getRuleName(t.state.ruleIndex))}this.closure_(t,e,n,r,o,i,u)}},{key:"closure_",value:function(t,e,n,r,o,i,u){var c=t.state;c.epsilonOnlyTransitions||e.add(t,this.mergeCache);for(var a=0;a<c.transitions.length;a++)if(0!==a||!this.canDropLoopEntryEdgeInLeftRecursiveRule(t)){var l=c.transitions[a],s=r&&!(l instanceof Or),f=this.getEpsilonTarget(t,l,s,0===i,o,u);if(null!==f){var p=i;if(t.state instanceof $){if(null!==this._dfa&&this._dfa.precedenceDfa&&l.outermostPrecedenceReturn===this._dfa.atnStartState.ruleIndex&&(f.precedenceFilterSuppressed=!0),f.reachesIntoOuterContext+=1,n.add(f)!==f)continue;e.dipsIntoOuterContext=!0,p-=1,this.debug&&console.log("dips into outer ctx: "+f)}else{if(!l.isEpsilon&&n.add(f)!==f)continue;l instanceof it&&p>=0&&(p+=1)}this.closureCheckingStopState(f,e,n,s,o,p,u)}}}},{key:"canDropLoopEntryEdgeInLeftRecursiveRule",value:function(t){var e=t.state;if(e.stateType!==H.STAR_LOOP_ENTRY)return!1;if(e.stateType!==H.STAR_LOOP_ENTRY||!e.isPrecedenceDecision||t.context.isEmpty()||t.context.hasEmptyPath())return!1;for(var n=t.context.length,r=0;r<n;r++)if(this.atn.states[t.context.getReturnState(r)].ruleIndex!==e.ruleIndex)return!1;for(var o=e.transitions[0].target.endState.stateNumber,i=this.atn.states[o],u=0;u<n;u++){var c=t.context.getReturnState(u),a=this.atn.states[c];if(1!==a.transitions.length||!a.transitions[0].isEpsilon)return!1;var l=a.transitions[0].target;if(!(a.stateType===H.BLOCK_END&&l===e||a===i||l===i||l.stateType===H.BLOCK_END&&1===l.transitions.length&&l.transitions[0].isEpsilon&&l.transitions[0].target===e))return!1}return!0}},{key:"getRuleName",value:function(t){return null!==this.parser&&t>=0?this.parser.ruleNames[t]:"<rule "+t+">"}},{key:"getEpsilonTarget",value:function(t,e,n,r,i,u){switch(e.serializationType){case tt.RULE:return this.ruleTransition(t,e);case tt.PRECEDENCE:return this.precedenceTransition(t,e,n,r,i);case tt.PREDICATE:return this.predTransition(t,e,n,r,i);case tt.ACTION:return this.actionTransition(t,e);case tt.EPSILON:return new L({state:e.target},t);case tt.ATOM:case tt.RANGE:case tt.SET:return u&&e.matches(o.EOF,0,1)?new L({state:e.target},t):null;default:return null}}},{key:"actionTransition",value:function(t,e){if(this.debug){var n=-1===e.actionIndex?65535:e.actionIndex;console.log("ACTION edge "+e.ruleIndex+":"+n)}return new L({state:e.target},t)}},{key:"precedenceTransition",value:function(t,e,n,r,o){this.debug&&(console.log("PRED (collectPredicates="+n+") "+e.precedence+">=_p, ctx dependent=true"),null!==this.parser&&console.log("context surrounding pred is "+b(this.parser.getRuleInvocationStack())));var i=null;if(n&&r)if(o){var u=this._input.index;this._input.seek(this._startIndex);var c=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(u),c&&(i=new L({state:e.target},t))}else{var a=j.andContext(t.semanticContext,e.getPredicate());i=new L({state:e.target,semanticContext:a},t)}else i=new L({state:e.target},t);return this.debug&&console.log("config from pred transition="+i),i}},{key:"predTransition",value:function(t,e,n,r,o){this.debug&&(console.log("PRED (collectPredicates="+n+") "+e.ruleIndex+":"+e.predIndex+", ctx dependent="+e.isCtxDependent),null!==this.parser&&console.log("context surrounding pred is "+b(this.parser.getRuleInvocationStack())));var i=null;if(n&&(e.isCtxDependent&&r||!e.isCtxDependent))if(o){var u=this._input.index;this._input.seek(this._startIndex);var c=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(u),c&&(i=new L({state:e.target},t))}else{var a=j.andContext(t.semanticContext,e.getPredicate());i=new L({state:e.target,semanticContext:a},t)}else i=new L({state:e.target},t);return this.debug&&console.log("config from pred transition="+i),i}},{key:"ruleTransition",value:function(t,e){this.debug&&console.log("CALL rule "+this.getRuleName(e.target.ruleIndex)+", ctx="+t.context);var n=e.followState,r=ve.create(t.context,n.stateNumber);return new L({state:e.target,context:r},t)}},{key:"getConflictingAlts",value:function(t){var e=Iu.getConflictingAltSubsets(t);return Iu.getAlts(e)}},{key:"getConflictingAltsOrUniqueAlt",value:function(t){var e=null;return t.uniqueAlt!==Fe.INVALID_ALT_NUMBER?(e=new Ce).add(t.uniqueAlt):e=t.conflictingAlts,e}},{key:"getTokenName",value:function(t){if(t===o.EOF)return"EOF";if(null!==this.parser&&null!==this.parser.literalNames){if(!(t>=this.parser.literalNames.length&&t>=this.parser.symbolicNames.length))return(this.parser.literalNames[t]||this.parser.symbolicNames[t])+"<"+t+">";console.log(t+" ttype out of range: "+this.parser.literalNames),console.log(""+this.parser.getInputStream().getTokens())}return""+t}},{key:"getLookaheadName",value:function(t){return this.getTokenName(t.LA(1))}},{key:"dumpDeadEndConfigs",value:function(t){console.log("dead end configs: ");for(var e=t.getDeadEndConfigs(),n=0;n<e.length;n++){var r=e[n],o="no edges";if(r.state.transitions.length>0){var i=r.state.transitions[0];i instanceof fr?o="Atom "+this.getTokenName(i.label):i instanceof st&&(o=(i instanceof vt?"~":"")+"Set "+i.set)}console.error(r.toString(this.parser,!0)+":"+o)}}},{key:"noViableAlt",value:function(t,e,n,r){return new Bu(this.parser,t,t.get(r),t.LT(1),n,e)}},{key:"getUniqueAlt",value:function(t){for(var e=Fe.INVALID_ALT_NUMBER,n=0;n<t.items.length;n++){var r=t.items[n];if(e===Fe.INVALID_ALT_NUMBER)e=r.alt;else if(r.alt!==e)return Fe.INVALID_ALT_NUMBER}return e}},{key:"addDFAEdge",value:function(t,e,n,r){if(this.debug&&console.log("EDGE "+e+" -> "+r+" upon "+this.getTokenName(n)),null===r)return null;if(r=this.addDFAState(t,r),null===e||n<-1||n>this.atn.maxTokenType)return r;if(null===e.edges&&(e.edges=[]),e.edges[n+1]=r,this.debug){var o=null===this.parser?null:this.parser.literalNames,i=null===this.parser?null:this.parser.symbolicNames;console.log("DFA=\n"+t.toString(o,i))}return r}},{key:"addDFAState",value:function(t,e){if(e===Ji.ERROR)return e;var n=t.states.get(e);return null!==n?(this.trace_atn_sim&&console.log("addDFAState "+e+" exists"),n):(e.stateNumber=t.states.length,e.configs.readOnly||(e.configs.optimizeConfigs(this),e.configs.setReadonly(!0)),this.trace_atn_sim&&console.log("addDFAState new "+e),t.states.add(e),this.debug&&console.log("adding new DFA state: "+e),e)}},{key:"reportAttemptingFullContext",value:function(t,e,n,r,o){if(this.debug||this.retry_debug){var i=new B(r,o+1);console.log("reportAttemptingFullContext decision="+t.decision+":"+n+", input="+this.parser.getTokenStream().getText(i))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser,t,r,o,e,n)}},{key:"reportContextSensitivity",value:function(t,e,n,r,o){if(this.debug||this.retry_debug){var i=new B(r,o+1);console.log("reportContextSensitivity decision="+t.decision+":"+n+", input="+this.parser.getTokenStream().getText(i))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser,t,r,o,e,n)}},{key:"reportAmbiguity",value:function(t,e,n,r,o,i,u){if(this.debug||this.retry_debug){var c=new B(n,r+1);console.log("reportAmbiguity "+i+":"+u+", input="+this.parser.getTokenStream().getText(c))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser,t,n,r,o,i,u)}}],n&&qu(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(Ji);function Gu(t){return Gu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Gu(t)}function Wu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Gu(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Gu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Gu(o)?o:String(o)),r)}var o}var Xu=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.cache=new Te}var e,n;return e=t,(n=[{key:"add",value:function(t){if(t===oe.EMPTY)return oe.EMPTY;var e=this.cache.get(t)||null;return null!==e?e:(this.cache.set(t,t),t)}},{key:"get",value:function(t){return this.cache.get(t)||null}},{key:"length",get:function(){return this.cache.length}}])&&Wu(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();const $u={ATN:Fe,ATNDeserializer:Ho,LexerATNSimulator:Eu,ParserATNSimulator:Yu,PredictionMode:Iu,PredictionContextCache:Xu};function Ju(t){return Ju="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ju(t)}function Qu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ju(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ju(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ju(o)?o:String(o)),r)}var o}var Zu=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.dfa=e,this.literalNames=n||[],this.symbolicNames=r||[]}var e,n;return e=t,n=[{key:"toString",value:function(){if(null===this.dfa.s0)return null;for(var t="",e=this.dfa.sortedStates(),n=0;n<e.length;n++){var r=e[n];if(null!==r.edges)for(var o=r.edges.length,i=0;i<o;i++){var u=r.edges[i]||null;null!==u&&2147483647!==u.stateNumber&&(t=(t=(t=(t=(t=(t=t.concat(this.getStateString(r))).concat("-")).concat(this.getEdgeLabel(i))).concat("->")).concat(this.getStateString(u))).concat("\n"))}}return 0===t.length?null:t}},{key:"getEdgeLabel",value:function(t){return 0===t?"EOF":null!==this.literalNames||null!==this.symbolicNames?this.literalNames[t-1]||this.symbolicNames[t-1]:String.fromCharCode(t-1)}},{key:"getStateString",value:function(t){var e=(t.isAcceptState?":":"")+"s"+t.stateNumber+(t.requiresFullContext?"^":"");return t.isAcceptState?null!==t.predicates?e+"=>"+b(t.predicates):e+"=>"+t.prediction.toString():e}}],n&&Qu(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function tc(t){return tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},tc(t)}function ec(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==tc(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==tc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===tc(o)?o:String(o)),r)}var o}function nc(t,e){return nc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},nc(t,e)}function rc(t){return rc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},rc(t)}var oc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&nc(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=rc(r);if(o){var n=rc(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===tc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this,t,null)}return e=u,n=[{key:"getEdgeLabel",value:function(t){return"'"+String.fromCharCode(t)+"'"}}],n&&ec(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Zu);function ic(t){return ic="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ic(t)}function uc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ic(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ic(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ic(o)?o:String(o)),r)}var o}var cc=function(){function t(e,n){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),void 0===n&&(n=0),this.atnStartState=e,this.decision=n,this._states=new g,this.s0=null,this.precedenceDfa=!1,e instanceof zn&&e.isPrecedenceDecision){this.precedenceDfa=!0;var r=new Wi(null,new Ki);r.edges=[],r.isAcceptState=!1,r.requiresFullContext=!1,this.s0=r}}var e,n;return e=t,(n=[{key:"getPrecedenceStartState",value:function(t){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";return t<0||t>=this.s0.edges.length?null:this.s0.edges[t]||null}},{key:"setPrecedenceStartState",value:function(t,e){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";t<0||(this.s0.edges[t]=e)}},{key:"setPrecedenceDfa",value:function(t){if(this.precedenceDfa!==t){if(this._states=new g,t){var e=new Wi(null,new Ki);e.edges=[],e.isAcceptState=!1,e.requiresFullContext=!1,this.s0=e}else this.s0=null;this.precedenceDfa=t}}},{key:"sortedStates",value:function(){return this._states.values().sort((function(t,e){return t.stateNumber-e.stateNumber}))}},{key:"toString",value:function(t,e){return t=t||null,e=e||null,null===this.s0?"":new Zu(this,t,e).toString()}},{key:"toLexerString",value:function(){return null===this.s0?"":new oc(this).toString()}},{key:"states",get:function(){return this._states}}])&&uc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();const ac={DFA:cc,DFASerializer:Zu,LexerDFASerializer:oc,PredPrediction:xu},lc={PredictionContext:oe},sc={Interval:B,IntervalSet:V};function fc(t){return fc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},fc(t)}function pc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==fc(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==fc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===fc(o)?o:String(o)),r)}var o}var yc=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"visitTerminal",value:function(t){}},{key:"visitErrorNode",value:function(t){}},{key:"enterEveryRule",value:function(t){}},{key:"exitEveryRule",value:function(t){}}])&&pc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function hc(t){return hc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},hc(t)}function bc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==hc(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==hc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===hc(o)?o:String(o)),r)}var o}var vc=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"visit",value:function(t){return Array.isArray(t)?t.map((function(t){return t.accept(this)}),this):t.accept(this)}},{key:"visitChildren",value:function(t){return t.children?this.visit(t.children):null}},{key:"visitTerminal",value:function(t){}},{key:"visitErrorNode",value:function(t){}}])&&bc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function dc(t){return dc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},dc(t)}function mc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==dc(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==dc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===dc(o)?o:String(o)),r)}var o}var gc=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"walk",value:function(t,e){if(e instanceof Wt||void 0!==e.isErrorNode&&e.isErrorNode())t.visitErrorNode(e);else if(e instanceof Ht)t.visitTerminal(e);else{this.enterRule(t,e);for(var n=0;n<e.getChildCount();n++){var r=e.getChild(n);this.walk(t,r)}this.exitRule(t,e)}}},{key:"enterRule",value:function(t,e){var n=e.ruleContext;t.enterEveryRule(n),n.enterRule(t)}},{key:"exitRule",value:function(t,e){var n=e.ruleContext;n.exitRule(t),t.exitEveryRule(n)}}],n&&mc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();gc.DEFAULT=new gc;const Sc={Trees:$t,RuleNode:Ut,ErrorNode:Wt,TerminalNode:Ht,ParseTreeListener:yc,ParseTreeVisitor:vc,ParseTreeWalker:gc};function Oc(t){return Oc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oc(t)}function wc(t,e){return wc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},wc(t,e)}function _c(t){return _c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_c(t)}var Pc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&wc(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_c(n);if(r){var o=_c(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Oc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,{message:"",recognizer:t,input:t.getInputStream(),ctx:t._ctx})).offendingToken=t.getCurrentToken(),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(xi);function Tc(t){return Tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Tc(t)}function Ec(t,e){return Ec=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ec(t,e)}function kc(t){return kc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},kc(t)}var jc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ec(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=kc(n);if(r){var o=kc(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Tc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(t,e,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),r=o.call(this,{message:xc(e,n||null),recognizer:t,input:t.getInputStream(),ctx:t._ctx});var u=t._interp.atn.states[t.state].transitions[0];return u instanceof Dr?(r.ruleIndex=u.ruleIndex,r.predicateIndex=u.predIndex):(r.ruleIndex=0,r.predicateIndex=0),r.predicate=e,r.offendingToken=t.getCurrentToken(),r}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(xi);function xc(t,e){return null!==e?e:"failed predicate: {"+t+"}?"}function Rc(t){return Rc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Rc(t)}function Cc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Rc(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Rc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Rc(o)?o:String(o)),r)}var o}function Ac(t,e){return Ac=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ac(t,e)}function Nc(t){return Nc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Nc(t)}var Ic=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ac(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Nc(r);if(o){var n=Nc(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Rc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),t=t||!0,(e=i.call(this)).exactOnly=t,e}return e=u,n=[{key:"reportAmbiguity",value:function(t,e,n,r,o,i,u){if(!this.exactOnly||o){var c="reportAmbiguity d="+this.getDecisionDescription(t,e)+": ambigAlts="+this.getConflictingAlts(i,u)+", input='"+t.getTokenStream().getText(new B(n,r))+"'";t.notifyErrorListeners(c)}}},{key:"reportAttemptingFullContext",value:function(t,e,n,r,o,i){var u="reportAttemptingFullContext d="+this.getDecisionDescription(t,e)+", input='"+t.getTokenStream().getText(new B(n,r))+"'";t.notifyErrorListeners(u)}},{key:"reportContextSensitivity",value:function(t,e,n,r,o,i){var u="reportContextSensitivity d="+this.getDecisionDescription(t,e)+", input='"+t.getTokenStream().getText(new B(n,r))+"'";t.notifyErrorListeners(u)}},{key:"getDecisionDescription",value:function(t,e){var n=e.decision,r=e.atnStartState.ruleIndex,o=t.ruleNames;if(r<0||r>=o.length)return""+n;var i=o[r]||null;return null===i||0===i.length?""+n:"".concat(n," (").concat(i,")")}},{key:"getConflictingAlts",value:function(t,e){if(null!==t)return t;for(var n=new Ce,r=0;r<e.items.length;r++)n.add(e.items[r].alt);return"{".concat(n.values().join(", "),"}")}}],n&&Cc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Go);function Lc(t){return Lc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Lc(t)}function Dc(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Fc(t){var e="function"==typeof Map?new Map:void 0;return Fc=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return Bc(t,arguments,Vc(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Uc(r,t)},Fc(t)}function Bc(t,e,n){return Bc=Mc()?Reflect.construct.bind():function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&Uc(o,n.prototype),o},Bc.apply(null,arguments)}function Mc(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function Uc(t,e){return Uc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Uc(t,e)}function Vc(t){return Vc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Vc(t)}var zc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Uc(t,e)}(i,t);var e,n,r,o=(n=i,r=Mc(),function(){var t,e=Vc(n);if(r){var o=Vc(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Lc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Dc(t)}(this,t)});function i(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this),Error.captureStackTrace(Dc(t),i),t}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Fc(Error));function qc(t){return qc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qc(t)}function Hc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==qc(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==qc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===qc(o)?o:String(o)),r)}var o}function Kc(t){return Kc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Kc(t)}function Yc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Kc(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Kc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Kc(o)?o:String(o)),r)}var o}function Gc(t,e){return Gc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Gc(t,e)}function Wc(t){return Wc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Wc(t)}var Xc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Gc(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Wc(r);if(i){var n=Wc(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Kc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(t=u.call(this)).errorRecoveryMode=!1,t.lastErrorIndex=-1,t.lastErrorStates=null,t.nextTokensContext=null,t.nextTokenState=0,t}return e=c,n=[{key:"reset",value:function(t){this.endErrorCondition(t)}},{key:"beginErrorCondition",value:function(t){this.errorRecoveryMode=!0}},{key:"inErrorRecoveryMode",value:function(t){return this.errorRecoveryMode}},{key:"endErrorCondition",value:function(t){this.errorRecoveryMode=!1,this.lastErrorStates=null,this.lastErrorIndex=-1}},{key:"reportMatch",value:function(t){this.endErrorCondition(t)}},{key:"reportError",value:function(t,e){this.inErrorRecoveryMode(t)||(this.beginErrorCondition(t),e instanceof Bu?this.reportNoViableAlternative(t,e):e instanceof Pc?this.reportInputMismatch(t,e):e instanceof jc?this.reportFailedPredicate(t,e):(console.log("unknown recognition error type: "+e.constructor.name),console.log(e.stack),t.notifyErrorListeners(e.getOffendingToken(),e.getMessage(),e)))}},{key:"recover",value:function(t,e){this.lastErrorIndex===t.getInputStream().index&&null!==this.lastErrorStates&&this.lastErrorStates.indexOf(t.state)>=0&&t.consume(),this.lastErrorIndex=t._input.index,null===this.lastErrorStates&&(this.lastErrorStates=[]),this.lastErrorStates.push(t.state);var n=this.getErrorRecoverySet(t);this.consumeUntil(t,n)}},{key:"sync",value:function(t){if(!this.inErrorRecoveryMode(t)){var e=t._interp.atn.states[t.state],n=t.getTokenStream().LA(1),r=t.atn.nextTokens(e);if(r.contains(n))return this.nextTokensContext=null,void(this.nextTokenState=H.INVALID_STATE_NUMBER);if(r.contains(o.EPSILON))null===this.nextTokensContext&&(this.nextTokensContext=t._ctx,this.nextTokensState=t._stateNumber);else switch(e.stateType){case H.BLOCK_START:case H.STAR_BLOCK_START:case H.PLUS_BLOCK_START:case H.STAR_LOOP_ENTRY:if(null!==this.singleTokenDeletion(t))return;throw new Pc(t);case H.PLUS_LOOP_BACK:case H.STAR_LOOP_BACK:this.reportUnwantedToken(t);var i=new V;i.addSet(t.getExpectedTokens());var u=i.addSet(this.getErrorRecoverySet(t));this.consumeUntil(t,u)}}}},{key:"reportNoViableAlternative",value:function(t,e){var n,r=t.getTokenStream();n=null!==r?e.startToken.type===o.EOF?"<EOF>":r.getText(new B(e.startToken.tokenIndex,e.offendingToken.tokenIndex)):"<unknown input>";var i="no viable alternative at input "+this.escapeWSAndQuote(n);t.notifyErrorListeners(i,e.offendingToken,e)}},{key:"reportInputMismatch",value:function(t,e){var n="mismatched input "+this.getTokenErrorDisplay(e.offendingToken)+" expecting "+e.getExpectedTokens().toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e.offendingToken,e)}},{key:"reportFailedPredicate",value:function(t,e){var n="rule "+t.ruleNames[t._ctx.ruleIndex]+" "+e.message;t.notifyErrorListeners(n,e.offendingToken,e)}},{key:"reportUnwantedToken",value:function(t){if(!this.inErrorRecoveryMode(t)){this.beginErrorCondition(t);var e=t.getCurrentToken(),n="extraneous input "+this.getTokenErrorDisplay(e)+" expecting "+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e,null)}}},{key:"reportMissingToken",value:function(t){if(!this.inErrorRecoveryMode(t)){this.beginErrorCondition(t);var e=t.getCurrentToken(),n="missing "+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames)+" at "+this.getTokenErrorDisplay(e);t.notifyErrorListeners(n,e,null)}}},{key:"recoverInline",value:function(t){var e=this.singleTokenDeletion(t);if(null!==e)return t.consume(),e;if(this.singleTokenInsertion(t))return this.getMissingSymbol(t);throw new Pc(t)}},{key:"singleTokenInsertion",value:function(t){var e=t.getTokenStream().LA(1),n=t._interp.atn,r=n.states[t.state].transitions[0].target;return!!n.nextTokens(r,t._ctx).contains(e)&&(this.reportMissingToken(t),!0)}},{key:"singleTokenDeletion",value:function(t){var e=t.getTokenStream().LA(2);if(this.getExpectedTokens(t).contains(e)){this.reportUnwantedToken(t),t.consume();var n=t.getCurrentToken();return this.reportMatch(t),n}return null}},{key:"getMissingSymbol",value:function(t){var e,n=t.getCurrentToken(),r=this.getExpectedTokens(t).first();e=r===o.EOF?"<missing EOF>":"<missing "+t.literalNames[r]+">";var i=n,u=t.getTokenStream().LT(-1);return i.type===o.EOF&&null!==u&&(i=u),t.getTokenFactory().create(i.source,r,e,o.DEFAULT_CHANNEL,-1,-1,i.line,i.column)}},{key:"getExpectedTokens",value:function(t){return t.getExpectedTokens()}},{key:"getTokenErrorDisplay",value:function(t){if(null===t)return"<no token>";var e=t.text;return null===e&&(e=t.type===o.EOF?"<EOF>":"<"+t.type+">"),this.escapeWSAndQuote(e)}},{key:"escapeWSAndQuote",value:function(t){return"'"+(t=(t=(t=t.replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/\t/g,"\\t"))+"'"}},{key:"getErrorRecoverySet",value:function(t){for(var e=t._interp.atn,n=t._ctx,r=new V;null!==n&&n.invokingState>=0;){var i=e.states[n.invokingState].transitions[0],u=e.nextTokens(i.followState);r.addSet(u),n=n.parentCtx}return r.removeOne(o.EPSILON),r}},{key:"consumeUntil",value:function(t,e){for(var n=t.getTokenStream().LA(1);n!==o.EOF&&!e.contains(n);)t.consume(),n=t.getTokenStream().LA(1)}}],n&&Yc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"reset",value:function(t){}},{key:"recoverInline",value:function(t){}},{key:"recover",value:function(t,e){}},{key:"sync",value:function(t){}},{key:"inErrorRecoveryMode",value:function(t){}},{key:"reportError",value:function(t){}}])&&Hc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}());function $c(t){return $c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},$c(t)}function Jc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==$c(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==$c(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===$c(o)?o:String(o)),r)}var o}function Qc(t,e){return Qc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Qc(t,e)}function Zc(t){return Zc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Zc(t)}var ta=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Qc(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Zc(r);if(o){var n=Zc(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===$c(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this)}return e=u,n=[{key:"recover",value:function(t,e){for(var n=t._ctx;null!==n;)n.exception=e,n=n.parentCtx;throw new zc(e)}},{key:"recoverInline",value:function(t){this.recover(t,new Pc(t))}},{key:"sync",value:function(t){}}],n&&Jc(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Xc);const ea={RecognitionException:xi,NoViableAltException:Bu,LexerNoViableAltException:Ii,InputMismatchException:Pc,FailedPredicateException:jc,DiagnosticErrorListener:Ic,BailErrorStrategy:ta,DefaultErrorStrategy:Xc,ErrorListener:Go};function na(t){return na="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},na(t)}function ra(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==na(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==na(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===na(o)?o:String(o)),r)}var o}var oa=function(){function t(e,n){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.name="<empty>",this.strdata=e,this.decodeToUnicodeCodePoints=n||!1,this._index=0,this.data=[],this.decodeToUnicodeCodePoints)for(var r=0;r<this.strdata.length;){var o=this.strdata.codePointAt(r);this.data.push(o),r+=o<=65535?1:2}else{this.data=new Array(this.strdata.length);for(var i=0;i<this.strdata.length;i++)this.data[i]=this.strdata.charCodeAt(i)}this._size=this.data.length}var e,n;return e=t,n=[{key:"reset",value:function(){this._index=0}},{key:"consume",value:function(){if(this._index>=this._size)throw"cannot consume EOF";this._index+=1}},{key:"LA",value:function(t){if(0===t)return 0;t<0&&(t+=1);var e=this._index+t-1;return e<0||e>=this._size?o.EOF:this.data[e]}},{key:"LT",value:function(t){return this.LA(t)}},{key:"mark",value:function(){return-1}},{key:"release",value:function(t){}},{key:"seek",value:function(t){t<=this._index?this._index=t:this._index=Math.min(t,this._size)}},{key:"getText",value:function(t,e){if(e>=this._size&&(e=this._size-1),t>=this._size)return"";if(this.decodeToUnicodeCodePoints){for(var n="",r=t;r<=e;r++)n+=String.fromCodePoint(this.data[r]);return n}return this.strdata.slice(t,e+1)}},{key:"toString",value:function(){return this.strdata}},{key:"index",get:function(){return this._index}},{key:"size",get:function(){return this._size}}],n&&ra(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function ia(t){return ia="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ia(t)}function ua(t,e){return ua=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ua(t,e)}function ca(t){return ca=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ca(t)}var aa=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ua(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ca(n);if(r){var o=ca(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===ia(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function i(t,e){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,t,e)}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(oa),la=n(92);function sa(t){return sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},sa(t)}function fa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==sa(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==sa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===sa(o)?o:String(o)),r)}var o}function pa(t,e){return pa=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},pa(t,e)}function ya(t){return ya=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ya(t)}var ha="undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node,ba=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&pa(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ya(r);if(o){var n=ya(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===sa(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n){var r;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),!ha)throw new Error("FileStream is only available when running in Node!");var o=la.readFileSync(t,e||"utf-8");return(r=i.call(this,o,n)).fileName=t,r}return e=u,n=[{key:"fromPath",value:function(t,e,n){if(!ha)throw new Error("FileStream is only available when running in Node!");la.readFile(t,e,(function(t,e){var r=null;null!==e&&(r=new oa(e,!0)),n(t,r)}))}}],null&&0,n&&fa(e,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(aa);const va={fromString:function(t){return new oa(t,!0)},fromBlob:function(t,e,n,r){var o=new window.FileReader;o.onload=function(t){var e=new oa(t.target.result,!0);n(e)},o.onerror=r,o.readAsText(t,e)},fromBuffer:function(t,e){return new oa(t.toString(e),!0)},fromPath:function(t,e,n){ba.fromPath(t,e,n)},fromPathSync:function(t,e){return new ba(t,e)}},da={arrayToString:b,stringToCharArray:function(t){for(var e=new Uint16Array(t.length),n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}};function ma(t){return ma="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ma(t)}function ga(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==ma(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ma(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===ma(o)?o:String(o)),r)}var o}function Sa(t,e,n){return e&&ga(t.prototype,e),n&&ga(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function Oa(t){return Oa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oa(t)}function wa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Oa(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Oa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Oa(o)?o:String(o)),r)}var o}function _a(t,e){return _a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_a(t,e)}function Pa(t){return Pa=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Pa(t)}var Ta=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_a(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Pa(r);if(i){var n=Pa(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Oa(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(e=u.call(this)).tokenSource=t,e.tokens=[],e.index=-1,e.fetchedEOF=!1,e}return e=c,n=[{key:"mark",value:function(){return 0}},{key:"release",value:function(t){}},{key:"reset",value:function(){this.seek(0)}},{key:"seek",value:function(t){this.lazyInit(),this.index=this.adjustSeekIndex(t)}},{key:"size",get:function(){return this.tokens.length}},{key:"get",value:function(t){return this.lazyInit(),this.tokens[t]}},{key:"consume",value:function(){if(!(this.index>=0&&(this.fetchedEOF?this.index<this.tokens.length-1:this.index<this.tokens.length))&&this.LA(1)===o.EOF)throw"cannot consume EOF";this.sync(this.index+1)&&(this.index=this.adjustSeekIndex(this.index+1))}},{key:"sync",value:function(t){var e=t-this.tokens.length+1;return!(e>0)||this.fetch(e)>=e}},{key:"fetch",value:function(t){if(this.fetchedEOF)return 0;for(var e=0;e<t;e++){var n=this.tokenSource.nextToken();if(n.tokenIndex=this.tokens.length,this.tokens.push(n),n.type===o.EOF)return this.fetchedEOF=!0,e+1}return t}},{key:"getTokens",value:function(t,e,n){if(void 0===n&&(n=null),t<0||e<0)return null;this.lazyInit();var r=[];e>=this.tokens.length&&(e=this.tokens.length-1);for(var i=t;i<e;i++){var u=this.tokens[i];if(u.type===o.EOF)break;(null===n||n.contains(u.type))&&r.push(u)}return r}},{key:"LA",value:function(t){return this.LT(t).type}},{key:"LB",value:function(t){return this.index-t<0?null:this.tokens[this.index-t]}},{key:"LT",value:function(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);var e=this.index+t-1;return this.sync(e),e>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[e]}},{key:"adjustSeekIndex",value:function(t){return t}},{key:"lazyInit",value:function(){-1===this.index&&this.setup()}},{key:"setup",value:function(){this.sync(0),this.index=this.adjustSeekIndex(0)}},{key:"setTokenSource",value:function(t){this.tokenSource=t,this.tokens=[],this.index=-1,this.fetchedEOF=!1}},{key:"nextTokenOnChannel",value:function(t,e){if(this.sync(t),t>=this.tokens.length)return-1;for(var n=this.tokens[t];n.channel!==this.channel;){if(n.type===o.EOF)return-1;t+=1,this.sync(t),n=this.tokens[t]}return t}},{key:"previousTokenOnChannel",value:function(t,e){for(;t>=0&&this.tokens[t].channel!==e;)t-=1;return t}},{key:"getHiddenTokensToRight",value:function(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+" not in 0.."+this.tokens.length-1;var n=this.nextTokenOnChannel(t+1,Ui.DEFAULT_TOKEN_CHANNEL),r=t+1,o=-1===n?this.tokens.length-1:n;return this.filterForChannel(r,o,e)}},{key:"getHiddenTokensToLeft",value:function(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+" not in 0.."+this.tokens.length-1;var n=this.previousTokenOnChannel(t-1,Ui.DEFAULT_TOKEN_CHANNEL);if(n===t-1)return null;var r=n+1,o=t-1;return this.filterForChannel(r,o,e)}},{key:"filterForChannel",value:function(t,e,n){for(var r=[],o=t;o<e+1;o++){var i=this.tokens[o];-1===n?i.channel!==Ui.DEFAULT_TOKEN_CHANNEL&&r.push(i):i.channel===n&&r.push(i)}return 0===r.length?null:r}},{key:"getSourceName",value:function(){return this.tokenSource.getSourceName()}},{key:"getText",value:function(t){this.lazyInit(),this.fill(),t||(t=new B(0,this.tokens.length-1));var e=t.start;e instanceof o&&(e=e.tokenIndex);var n=t.stop;if(n instanceof o&&(n=n.tokenIndex),null===e||null===n||e<0||n<0)return"";n>=this.tokens.length&&(n=this.tokens.length-1);for(var r="",i=e;i<n+1;i++){var u=this.tokens[i];if(u.type===o.EOF)break;r+=u.text}return r}},{key:"fill",value:function(){for(this.lazyInit();1e3===this.fetch(1e3););}}],n&&wa(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(Sa((function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)})));function Ea(t){return Ea="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ea(t)}function ka(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ea(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ea(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ea(o)?o:String(o)),r)}var o}function ja(t,e){return ja=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ja(t,e)}function xa(t){return xa=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},xa(t)}Object.defineProperty(Ta,"size",{get:function(){return this.tokens.length}});var Ra=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ja(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=xa(r);if(i){var n=xa(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ea(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(n=u.call(this,t)).channel=void 0===e?o.DEFAULT_CHANNEL:e,n}return e=c,n=[{key:"adjustSeekIndex",value:function(t){return this.nextTokenOnChannel(t,this.channel)}},{key:"LB",value:function(t){if(0===t||this.index-t<0)return null;for(var e=this.index,n=1;n<=t;)e=this.previousTokenOnChannel(e-1,this.channel),n+=1;return e<0?null:this.tokens[e]}},{key:"LT",value:function(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);for(var e=this.index,n=1;n<t;)this.sync(e+1)&&(e=this.nextTokenOnChannel(e+1,this.channel)),n+=1;return this.tokens[e]}},{key:"getNumberOfOnChannelTokens",value:function(){var t=0;this.fill();for(var e=0;e<this.tokens.length;e++){var n=this.tokens[e];if(n.channel===this.channel&&(t+=1),n.type===o.EOF)break}return t}}],n&&ka(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(Ta);function Ca(t){return Ca="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ca(t)}function Aa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ca(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ca(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ca(o)?o:String(o)),r)}var o}function Na(t,e){return Na=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Na(t,e)}function Ia(t){return Ia=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ia(t)}var La=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Na(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ia(r);if(o){var n=Ia(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ca(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this)).parser=t,e}return e=u,(n=[{key:"enterEveryRule",value:function(t){console.log("enter   "+this.parser.ruleNames[t.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)}},{key:"visitTerminal",value:function(t){console.log("consume "+t.symbol+" rule "+this.parser.ruleNames[this.parser._ctx.ruleIndex])}},{key:"exitEveryRule",value:function(t){console.log("exit    "+this.parser.ruleNames[t.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)}}])&&Aa(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(yc);function Da(t){return Da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Da(t)}function Fa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Da(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Da(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Da(o)?o:String(o)),r)}var o}function Ba(t,e){return Ba=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ba(t,e)}function Ma(t){return Ma=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ma(t)}var Ua=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ba(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ma(r);if(i){var n=Ma(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Da(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(e=u.call(this))._input=null,e._errHandler=new Xc,e._precedenceStack=[],e._precedenceStack.push(0),e._ctx=null,e.buildParseTrees=!0,e._tracer=null,e._parseListeners=null,e._syntaxErrors=0,e.setInputStream(t),e}return e=c,n=[{key:"reset",value:function(){null!==this._input&&this._input.seek(0),this._errHandler.reset(this),this._ctx=null,this._syntaxErrors=0,this.setTrace(!1),this._precedenceStack=[],this._precedenceStack.push(0),null!==this._interp&&this._interp.reset()}},{key:"match",value:function(t){var e=this.getCurrentToken();return e.type===t?(this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(e)),e}},{key:"matchWildcard",value:function(){var t=this.getCurrentToken();return t.type>0?(this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(t)),t}},{key:"getParseListeners",value:function(){return this._parseListeners||[]}},{key:"addParseListener",value:function(t){if(null===t)throw"listener";null===this._parseListeners&&(this._parseListeners=[]),this._parseListeners.push(t)}},{key:"removeParseListener",value:function(t){if(null!==this._parseListeners){var e=this._parseListeners.indexOf(t);e>=0&&this._parseListeners.splice(e,1),0===this._parseListeners.length&&(this._parseListeners=null)}}},{key:"removeParseListeners",value:function(){this._parseListeners=null}},{key:"triggerEnterRuleEvent",value:function(){if(null!==this._parseListeners){var t=this._ctx;this._parseListeners.forEach((function(e){e.enterEveryRule(t),t.enterRule(e)}))}}},{key:"triggerExitRuleEvent",value:function(){if(null!==this._parseListeners){var t=this._ctx;this._parseListeners.slice(0).reverse().forEach((function(e){t.exitRule(e),e.exitEveryRule(t)}))}}},{key:"getTokenFactory",value:function(){return this._input.tokenSource._factory}},{key:"setTokenFactory",value:function(t){this._input.tokenSource._factory=t}},{key:"getATNWithBypassAlts",value:function(){var t=this.getSerializedATN();if(null===t)throw"The current parser does not support an ATN with bypass alternatives.";var e=this.bypassAltsAtnCache[t];if(null===e){var n=new $r;n.generateRuleBypassTransitions=!0,e=new Ho(n).deserialize(t),this.bypassAltsAtnCache[t]=e}return e}},{key:"getInputStream",value:function(){return this.getTokenStream()}},{key:"setInputStream",value:function(t){this.setTokenStream(t)}},{key:"getTokenStream",value:function(){return this._input}},{key:"setTokenStream",value:function(t){this._input=null,this.reset(),this._input=t}},{key:"syntaxErrorsCount",get:function(){return this._syntaxErrors}},{key:"getCurrentToken",value:function(){return this._input.LT(1)}},{key:"notifyErrorListeners",value:function(t,e,n){n=n||null,null===(e=e||null)&&(e=this.getCurrentToken()),this._syntaxErrors+=1;var r=e.line,o=e.column;this.getErrorListenerDispatch().syntaxError(this,e,r,o,t,n)}},{key:"consume",value:function(){var t=this.getCurrentToken();t.type!==o.EOF&&this.getInputStream().consume();var e,n=null!==this._parseListeners&&this._parseListeners.length>0;return(this.buildParseTrees||n)&&((e=this._errHandler.inErrorRecoveryMode(this)?this._ctx.addErrorNode(t):this._ctx.addTokenNode(t)).invokingState=this.state,n&&this._parseListeners.forEach((function(t){e instanceof Wt||void 0!==e.isErrorNode&&e.isErrorNode()?t.visitErrorNode(e):e instanceof Ht&&t.visitTerminal(e)}))),t}},{key:"addContextToParseTree",value:function(){null!==this._ctx.parentCtx&&this._ctx.parentCtx.addChild(this._ctx)}},{key:"enterRule",value:function(t,e,n){this.state=e,this._ctx=t,this._ctx.start=this._input.LT(1),this.buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}},{key:"exitRule",value:function(){this._ctx.stop=this._input.LT(-1),this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx.parentCtx}},{key:"enterOuterAlt",value:function(t,e){t.setAltNumber(e),this.buildParseTrees&&this._ctx!==t&&null!==this._ctx.parentCtx&&(this._ctx.parentCtx.removeLastChild(),this._ctx.parentCtx.addChild(t)),this._ctx=t}},{key:"getPrecedence",value:function(){return 0===this._precedenceStack.length?-1:this._precedenceStack[this._precedenceStack.length-1]}},{key:"enterRecursionRule",value:function(t,e,n,r){this.state=e,this._precedenceStack.push(r),this._ctx=t,this._ctx.start=this._input.LT(1),this.triggerEnterRuleEvent()}},{key:"pushNewRecursionContext",value:function(t,e,n){var r=this._ctx;r.parentCtx=t,r.invokingState=e,r.stop=this._input.LT(-1),this._ctx=t,this._ctx.start=r.start,this.buildParseTrees&&this._ctx.addChild(r),this.triggerEnterRuleEvent()}},{key:"unrollRecursionContexts",value:function(t){this._precedenceStack.pop(),this._ctx.stop=this._input.LT(-1);var e=this._ctx,n=this.getParseListeners();if(null!==n&&n.length>0)for(;this._ctx!==t;)this.triggerExitRuleEvent(),this._ctx=this._ctx.parentCtx;else this._ctx=t;e.parentCtx=t,this.buildParseTrees&&null!==t&&t.addChild(e)}},{key:"getInvokingContext",value:function(t){for(var e=this._ctx;null!==e;){if(e.ruleIndex===t)return e;e=e.parentCtx}return null}},{key:"precpred",value:function(t,e){return e>=this._precedenceStack[this._precedenceStack.length-1]}},{key:"inContext",value:function(t){return!1}},{key:"isExpectedToken",value:function(t){var e=this._interp.atn,n=this._ctx,r=e.states[this.state],i=e.nextTokens(r);if(i.contains(t))return!0;if(!i.contains(o.EPSILON))return!1;for(;null!==n&&n.invokingState>=0&&i.contains(o.EPSILON);){var u=e.states[n.invokingState].transitions[0];if((i=e.nextTokens(u.followState)).contains(t))return!0;n=n.parentCtx}return!(!i.contains(o.EPSILON)||t!==o.EOF)}},{key:"getExpectedTokens",value:function(){return this._interp.atn.getExpectedTokens(this.state,this._ctx)}},{key:"getExpectedTokensWithinCurrentRule",value:function(){var t=this._interp.atn,e=t.states[this.state];return t.nextTokens(e)}},{key:"getRuleIndex",value:function(t){var e=this.getRuleIndexMap()[t];return null!==e?e:-1}},{key:"getRuleInvocationStack",value:function(t){null===(t=t||null)&&(t=this._ctx);for(var e=[];null!==t;){var n=t.ruleIndex;n<0?e.push("n/a"):e.push(this.ruleNames[n]),t=t.parentCtx}return e}},{key:"getDFAStrings",value:function(){return this._interp.decisionToDFA.toString()}},{key:"dumpDFA",value:function(){for(var t=!1,e=0;e<this._interp.decisionToDFA.length;e++){var n=this._interp.decisionToDFA[e];n.states.length>0&&(t&&console.log(),this.printer.println("Decision "+n.decision+":"),this.printer.print(n.toString(this.literalNames,this.symbolicNames)),t=!0)}}},{key:"getSourceName",value:function(){return this._input.sourceName}},{key:"setTrace",value:function(t){t?(null!==this._tracer&&this.removeParseListener(this._tracer),this._tracer=new La(this),this.addParseListener(this._tracer)):(this.removeParseListener(this._tracer),this._tracer=null)}}],n&&Fa(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(ai);function Va(t){return Va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Va(t)}function za(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Va(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Va(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Va(o)?o:String(o)),r)}var o}function qa(t,e){return qa=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},qa(t,e)}function Ha(t){return Ha=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ha(t)}Ua.bypassAltsAtnCache={};var Ka=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&qa(t,e)}(c,t);var e,n,r,i,u=(r=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ha(r);if(i){var n=Ha(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Va(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function c(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),(e=u.call(this)).parentCtx=null,e.symbol=t,e}return e=c,(n=[{key:"getChild",value:function(t){return null}},{key:"getSymbol",value:function(){return this.symbol}},{key:"getParent",value:function(){return this.parentCtx}},{key:"getPayload",value:function(){return this.symbol}},{key:"getSourceInterval",value:function(){if(null===this.symbol)return B.INVALID_INTERVAL;var t=this.symbol.tokenIndex;return new B(t,t)}},{key:"getChildCount",value:function(){return 0}},{key:"accept",value:function(t){return t.visitTerminal(this)}},{key:"getText",value:function(){return this.symbol.text}},{key:"toString",value:function(){return this.symbol.type===o.EOF?"<EOF>":this.symbol.text}}])&&za(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(Ht);function Ya(t){return Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ya(t)}function Ga(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ya(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ya(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ya(o)?o:String(o)),r)}var o}function Wa(t,e){return Wa=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Wa(t,e)}function Xa(t){return Xa=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Xa(t)}var $a=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Wa(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Xa(r);if(o){var n=Xa(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ya(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i.call(this,t)}return e=u,(n=[{key:"isErrorNode",value:function(){return!0}},{key:"accept",value:function(t){return t.visitErrorNode(this)}}])&&Ga(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(Ka);function Ja(t){return Ja="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ja(t)}function Qa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==Ja(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==Ja(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===Ja(o)?o:String(o)),r)}var o}function Za(t,e){return Za=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Za(t,e)}function tl(t){return tl=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},tl(t)}var el=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Za(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=tl(r);if(o){var n=tl(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ja(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t,e)).children=null,n.start=null,n.stop=null,n.exception=null,n}return e=u,n=[{key:"copyFrom",value:function(t){this.parentCtx=t.parentCtx,this.invokingState=t.invokingState,this.children=null,this.start=t.start,this.stop=t.stop,t.children&&(this.children=[],t.children.map((function(t){t instanceof $a&&(this.children.push(t),t.parentCtx=this)}),this))}},{key:"enterRule",value:function(t){}},{key:"exitRule",value:function(t){}},{key:"addChild",value:function(t){return null===this.children&&(this.children=[]),this.children.push(t),t}},{key:"removeLastChild",value:function(){null!==this.children&&this.children.pop()}},{key:"addTokenNode",value:function(t){var e=new Ka(t);return this.addChild(e),e.parentCtx=this,e}},{key:"addErrorNode",value:function(t){var e=new $a(t);return this.addChild(e),e.parentCtx=this,e}},{key:"getChild",value:function(t,e){if(e=e||null,null===this.children||t<0||t>=this.children.length)return null;if(null===e)return this.children[t];for(var n=0;n<this.children.length;n++){var r=this.children[n];if(r instanceof e){if(0===t)return r;t-=1}}return null}},{key:"getToken",value:function(t,e){if(null===this.children||e<0||e>=this.children.length)return null;for(var n=0;n<this.children.length;n++){var r=this.children[n];if(r instanceof Ht&&r.symbol.type===t){if(0===e)return r;e-=1}}return null}},{key:"getTokens",value:function(t){if(null===this.children)return[];for(var e=[],n=0;n<this.children.length;n++){var r=this.children[n];r instanceof Ht&&r.symbol.type===t&&e.push(r)}return e}},{key:"getTypedRuleContext",value:function(t,e){return this.getChild(e,t)}},{key:"getTypedRuleContexts",value:function(t){if(null===this.children)return[];for(var e=[],n=0;n<this.children.length;n++){var r=this.children[n];r instanceof t&&e.push(r)}return e}},{key:"getChildCount",value:function(){return null===this.children?0:this.children.length}},{key:"getSourceInterval",value:function(){return null===this.start||null===this.stop?B.INVALID_INTERVAL:new B(this.start.tokenIndex,this.stop.tokenIndex)}}],n&&Qa(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(ee);function nl(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&rl(t,e)}function rl(t,e){return rl=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},rl(t,e)}function ol(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=il(t);if(e){var o=il(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"===ul(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,n)}}function il(t){return il=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},il(t)}function ul(t){return ul="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ul(t)}function cl(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return al(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?al(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,u=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return u=t.done,t},e:function(t){c=!0,i=t},f:function(){try{u||null==n.return||n.return()}finally{if(c)throw i}}}}function al(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ll(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function sl(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,pl(r.key),r)}}function fl(t,e,n){return e&&sl(t.prototype,e),n&&sl(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function pl(t){var e=function(t,e){if("object"!==ul(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==ul(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===ul(e)?e:String(e)}ee.EMPTY=new el;var yl,hl,bl,vl=function(){function t(e){ll(this,t),this.tokens=e,this.programs=new Map}return fl(t,[{key:"getTokenStream",value:function(){return this.tokens}},{key:"insertAfter",value:function(e,n){var r,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.DEFAULT_PROGRAM_NAME;r="number"==typeof e?e:e.tokenIndex;var i=this.getProgram(o),u=new gl(this.tokens,r,i.length,n);i.push(u)}},{key:"insertBefore",value:function(e,n){var r,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.DEFAULT_PROGRAM_NAME;r="number"==typeof e?e:e.tokenIndex;var i=this.getProgram(o),u=new ml(this.tokens,r,i.length,n);i.push(u)}},{key:"replaceSingle",value:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.DEFAULT_PROGRAM_NAME;this.replace(e,e,n,r)}},{key:"replace",value:function(e,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.DEFAULT_PROGRAM_NAME;if("number"!=typeof e&&(e=e.tokenIndex),"number"!=typeof n&&(n=n.tokenIndex),e>n||e<0||n<0||n>=this.tokens.size)throw new RangeError("replace: range invalid: ".concat(e,"..").concat(n,"(size=").concat(this.tokens.size,")"));var i=this.getProgram(o),u=new Sl(this.tokens,e,n,i.length,r);i.push(u)}},{key:"delete",value:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.DEFAULT_PROGRAM_NAME;void 0===n&&(n=e),this.replace(e,n,null,r)}},{key:"getProgram",value:function(t){var e=this.programs.get(t);return null==e&&(e=this.initializeProgram(t)),e}},{key:"initializeProgram",value:function(t){var e=[];return this.programs.set(t,e),e}},{key:"getText",value:function(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.DEFAULT_PROGRAM_NAME;n=e instanceof B?e:new B(0,this.tokens.size-1),"string"==typeof e&&(r=e);var i=this.programs.get(r),u=n.start,c=n.stop;if(c>this.tokens.size-1&&(c=this.tokens.size-1),u<0&&(u=0),null==i||0===i.length)return this.tokens.getText(new B(u,c));for(var a=[],l=this.reduceToSingleOperationPerIndex(i),s=u;s<=c&&s<this.tokens.size;){var f=l.get(s);l.delete(s);var p=this.tokens.get(s);null==f?(p.type!==o.EOF&&a.push(String(p.text)),s++):s=f.execute(a)}if(c===this.tokens.size-1){var y,h=cl(l.values());try{for(h.s();!(y=h.n()).done;){var b=y.value;b.index>=this.tokens.size-1&&a.push(b.text.toString())}}catch(t){h.e(t)}finally{h.f()}}return a.join("")}},{key:"reduceToSingleOperationPerIndex",value:function(t){for(var e=0;e<t.length;e++){var n=t[e];if(null!=n&&n instanceof Sl){var r,o=n,i=cl(this.getKindOfOps(t,ml,e));try{for(i.s();!(r=i.n()).done;){var u=r.value;u.index===o.index?(t[u.instructionIndex]=void 0,o.text=u.text.toString()+(null!=o.text?o.text.toString():"")):u.index>o.index&&u.index<=o.lastIndex&&(t[u.instructionIndex]=void 0)}}catch(t){i.e(t)}finally{i.f()}var c,a=cl(this.getKindOfOps(t,Sl,e));try{for(a.s();!(c=a.n()).done;){var l=c.value;if(l.index>=o.index&&l.lastIndex<=o.lastIndex)t[l.instructionIndex]=void 0;else{var s=l.lastIndex<o.index||l.index>o.lastIndex;if(null!=l.text||null!=o.text||s){if(!s)throw new Error("replace op boundaries of ".concat(o," overlap with previous ").concat(l))}else t[l.instructionIndex]=void 0,o.index=Math.min(l.index,o.index),o.lastIndex=Math.max(l.lastIndex,o.lastIndex)}}}catch(t){a.e(t)}finally{a.f()}}}for(var f=0;f<t.length;f++){var p=t[f];if(null!=p&&p instanceof ml){var y,h=p,b=cl(this.getKindOfOps(t,ml,f));try{for(b.s();!(y=b.n()).done;){var v=y.value;v.index===h.index&&(v instanceof gl?(h.text=this.catOpText(v.text,h.text),t[v.instructionIndex]=void 0):v instanceof ml&&(h.text=this.catOpText(h.text,v.text),t[v.instructionIndex]=void 0))}}catch(t){b.e(t)}finally{b.f()}var d,m=cl(this.getKindOfOps(t,Sl,f));try{for(m.s();!(d=m.n()).done;){var g=d.value;if(h.index!==g.index){if(h.index>=g.index&&h.index<=g.lastIndex)throw new Error("insert op ".concat(h," within boundaries of previous ").concat(g))}else g.text=this.catOpText(h.text,g.text),t[f]=void 0}}catch(t){m.e(t)}finally{m.f()}}}var S,O=new Map,w=cl(t);try{for(w.s();!(S=w.n()).done;){var _=S.value;if(null!=_){if(null!=O.get(_.index))throw new Error("should only be one op per index");O.set(_.index,_)}}}catch(t){w.e(t)}finally{w.f()}return O}},{key:"catOpText",value:function(t,e){var n="",r="";return null!=t&&(n=t.toString()),null!=e&&(r=e.toString()),n+r}},{key:"getKindOfOps",value:function(t,e,n){return t.slice(0,n).filter((function(t){return t&&t instanceof e}))}}]),t}();yl=vl,bl="default",(hl=pl(hl="DEFAULT_PROGRAM_NAME"))in yl?Object.defineProperty(yl,hl,{value:bl,enumerable:!0,configurable:!0,writable:!0}):yl[hl]=bl;var dl=function(){function t(e,n,r,o){ll(this,t),this.tokens=e,this.instructionIndex=r,this.index=n,this.text=void 0===o?"":o}return fl(t,[{key:"toString",value:function(){var t=this.constructor.name,e=t.indexOf("$");return"<"+(t=t.substring(e+1,t.length))+"@"+this.tokens.get(this.index)+':"'+this.text+'">'}}]),t}(),ml=function(t){nl(n,t);var e=ol(n);function n(t,r,o,i){return ll(this,n),e.call(this,t,r,o,i)}return fl(n,[{key:"execute",value:function(t){return this.text&&t.push(this.text.toString()),this.tokens.get(this.index).type!==o.EOF&&t.push(String(this.tokens.get(this.index).text)),this.index+1}}]),n}(dl),gl=function(t){nl(n,t);var e=ol(n);function n(t,r,o,i){return ll(this,n),e.call(this,t,r+1,o,i)}return fl(n)}(ml),Sl=function(t){nl(n,t);var e=ol(n);function n(t,r,o,i,u){var c;return ll(this,n),(c=e.call(this,t,r,i,u)).lastIndex=o,c}return fl(n,[{key:"execute",value:function(t){return this.text&&t.push(this.text.toString()),this.lastIndex+1}},{key:"toString",value:function(){return null==this.text?"<DeleteOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+">":"<ReplaceOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+':"'+this.text+'">'}}]),n}(dl);const Ol={atn:$u,dfa:ac,context:lc,misc:sc,tree:Sc,error:ea,Token:o,CommonToken:yi,CharStreams:va,CharStream:aa,InputStream:aa,CommonTokenStream:Ra,Lexer:Ui,Parser:Ua,ParserRuleContext:el,Interval:B,IntervalSet:V,LL1Analyzer:Ie,Utils:da,TokenStreamRewriter:vl}})();var o=exports;for(var i in r)o[i]=r[i];r.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})})();
//# sourceMappingURL=antlr4.web.cjs.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const LoadPrimaryPage_1 = __webpack_require__(/*! ./LoadPrimaryPage */ "./src/LoadPrimaryPage.ts");
const LoadExpressionTestPage_1 = __webpack_require__(/*! ./LoadExpressionTestPage */ "./src/LoadExpressionTestPage.ts");
const LoadInputParseTestPage_1 = __webpack_require__(/*! ./LoadInputParseTestPage */ "./src/LoadInputParseTestPage.ts");
const LoadSolverPage_1 = __webpack_require__(/*! ./LoadSolverPage */ "./src/LoadSolverPage.ts");
const LoadSimplificationTestPage_1 = __webpack_require__(/*! ./LoadSimplificationTestPage */ "./src/LoadSimplificationTestPage.ts");
window.onload = () => {
    setTimeout(function () {
        /**
          * Populate html elements by their class.
          */
        const classes = document.getElementsByTagName('body')[0].classList;
        if (classes.contains('expressionTestPage')) {
            (0, LoadExpressionTestPage_1.loadExpressionsTestPage)();
        }
        else if (classes.contains('primaryIntegrator')) {
            (0, LoadPrimaryPage_1.loadPrimaryPage)();
        }
        else if (classes.contains('inputParseTest')) {
            (0, LoadInputParseTestPage_1.loadInputParseTestPage)();
        }
        else if (classes.contains('solve_in_steps')) {
            (0, LoadSolverPage_1.loadSolverPage)();
        }
        else if (classes.contains('mathTests')) {
            (0, LoadSimplificationTestPage_1.loadSimplificationTestPage)();
        }
    }, 100);
};

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLGlCQUFpQixnQ0FBZ0M7QUFDeEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDZCQUE2Qjs7QUFFbEQ7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsMEJBQTBCLHNCQUFzQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBCQUEwQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZGQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBOztBQUVBLGVBQWUsbUJBQU8sQ0FBQyw0REFBZTs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFD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QUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaEpBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxHQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQy9EQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMsa0VBQWE7QUFDcEMsaUJBQWlCLG1CQUFPLENBQUMsc0VBQWU7QUFDeEMsc0JBQXNCLG1CQUFPLENBQUMsbUZBQXVCO0FBQ3JELDZCQUE2QixtQkFBTyxDQUFDLG9HQUE2Qjs7QUFFbEU7O0FBRUEsaUJBQWlCO0FBQ2pCLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaFFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FB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LG1CQUFPLENBQUMsd0VBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9COzs7Ozs7Ozs7Ozs7QUMzcENQO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMseURBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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LHNCQUFzQixNQUFNLHlEQUF5RCxjQUFjLGdDQUFnQyxpRUFBaUUsRUFBRSxnQ0FBZ0MsNk1BQTZNLEtBQUssS0FBSyxVQUFVLDJQQUEyUCxJQUFJLGNBQWMseUJBQXlCLG9EQUFvRCxTQUFTLEVBQUU7QUFDL2xoVDs7Ozs7O1VDREE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7Ozs7Ozs7QUN0QmE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLG1CQUFPLENBQUMsbURBQW1CO0FBQ3JELGlDQUFpQyxtQkFBTyxDQUFDLGlFQUEwQjtBQUNuRSxpQ0FBaUMsbUJBQU8sQ0FBQyxpRUFBMEI7QUFDbkUseUJBQXlCLG1CQUFPLENBQUMsaURBQWtCO0FBQ25ELHFDQUFxQyxtQkFBTyxDQUFDLHlFQUE4QjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vbm9kZV9tb2R1bGVzL25ncmFwaC5ldmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL25vZGVfbW9kdWxlcy9uZ3JhcGguZ3JhcGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL25vZGVfbW9kdWxlcy9uZ3JhcGgucGF0aC9hLXN0YXIvTm9kZUhlYXAuanMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL25vZGVfbW9kdWxlcy9uZ3JhcGgucGF0aC9hLXN0YXIvYS1ncmVlZHktc3Rhci5qcyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vbm9kZV9tb2R1bGVzL25ncmFwaC5wYXRoL2Etc3Rhci9hLXN0YXIuanMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL25vZGVfbW9kdWxlcy9uZ3JhcGgucGF0aC9hLXN0YXIvZGVmYXVsdFNldHRpbmdzLmpzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9ub2RlX21vZHVsZXMvbmdyYXBoLnBhdGgvYS1zdGFyL2hldXJpc3RpY3MuanMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL25vZGVfbW9kdWxlcy9uZ3JhcGgucGF0aC9hLXN0YXIvbWFrZVNlYXJjaFN0YXRlUG9vbC5qcyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vbm9kZV9tb2R1bGVzL25ncmFwaC5wYXRoL2Etc3Rhci9uYmEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL25vZGVfbW9kdWxlcy9uZ3JhcGgucGF0aC9hLXN0YXIvbmJhL21ha2VOQkFTZWFyY2hTdGF0ZVBvb2wuanMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL25vZGVfbW9kdWxlcy9uZ3JhcGgucGF0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL0xvYWRFeHByZXNzaW9uVGVzdFBhZ2UudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9Mb2FkSW5wdXRQYXJzZVRlc3RQYWdlLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvTG9hZFByaW1hcnlQYWdlLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvTG9hZFNpbXBsaWZpY2F0aW9uVGVzdFBhZ2UudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9Mb2FkU29sdmVyUGFnZS50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvQXJndW1lbnQudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL0NvbnZlbmllbnRFeHByZXNzaW9ucy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvR3JhcGgudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL0dyYXBoTWluaXB1bGF0b3IudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL01hdGhHcmFwaE5vZGUudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL1JlbGF0aW9uc2hpcC50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvRGVyaXZhdGlvblJ1bGVzLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9EZXJpdmVyLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9SZWxhdGlvbmFsRGVyaXZhdGlvblJ1bGUudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL2FsZ2VicmEvRGl2aWRlT25Cb3RoU2lkZXMudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL2FsZ2VicmEvU3VidHJhY3RGcm9tQm90aFNpZGVzLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9jYWxjdWx1cy9CcmVha0Rlcml2YXRpdmVzT3ZlckFkZGl0aW9uLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9jYWxjdWx1cy9Qb3dlclJ1bGUudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL2NhbGN1bHVzL1Byb2R1Y3RSdWxlLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9jYWxjdWx1cy9QdWxsQ29uc3RhbnRzRnJvbURlcml2YXRpdmVzLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9jYWxjdWx1cy9RdW90aWVudFJ1bGUudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL2NhbGN1bHVzL1VTdWJzdGl0dXRpb24udHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL3JlY3Vyc2lvbi50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0FkZGl0aXZlSWRlbnRpdHkudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL3NpbXBsaWZpY2F0aW9ucy9Bbnl0aGluZ1RpbWVzWmVyby50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0Fzc29jaWF0aXZlUHJvcGVydHlPZlByb2R1Y3RzQW5kU3Vtcy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0NhbmNlbE5lZ2F0aXZlcy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0NvbWJpbmVDb21tb25GYWN0b3JzTXVsdGlwbGljYXRpb24udHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL3NpbXBsaWZpY2F0aW9ucy9Db21iaW5lQ29tbW9uVGVybXNBZGRpdGlvbi50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0NvbWJpbmVJbnRlZ2VyRmFjdG9ycy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0NvbWJpbmVQcm9kdWN0c0FuZEZyYWN0aW9ucy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0Rpc3RyaWJ1dGl2ZVByb3BlcnR5LnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9zaW1wbGlmaWNhdGlvbnMvRGl2aWRlRnJhY3Rpb25zLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9zaW1wbGlmaWNhdGlvbnMvRGl2aXNpb25JZGVudGl0eS50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0V2YWx1YXRlU3Vtcy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0V4cG9uZW50VG9aZXJvLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9zaW1wbGlmaWNhdGlvbnMvRXhwb25lbnRpYWxJZGVudGl0eS50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL0ZPSUwudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL3NpbXBsaWZpY2F0aW9ucy9Mb2dPZk9uZS50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL011bHRpcGxpY2F0aXZlSWRlbnRpdHkudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL3NpbXBsaWZpY2F0aW9ucy9NdWx0aXBseUV4cG9uZW50UG93ZXJzLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9zaW1wbGlmaWNhdGlvbnMvT3JkZXJQcm9kdWN0cy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL09yZGVyU3Vtcy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZGVyaXZhdGlvbnMvc2ltcGxpZmljYXRpb25zL1JlbW92ZUNvbW1vbkZhY3RvcnNPblRvcEFuZEJvdHRvbU9mRnJhY3Rpb24udHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2Rlcml2YXRpb25zL3NpbXBsaWZpY2F0aW9ucy9TdWJ0cmFjdEV4cG9uZW50c09uRnJhY3Rpb25zLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9kZXJpdmF0aW9ucy9zaW1wbGlmaWNhdGlvbnMvU3VtQ29lZmZpY2llbnRzT2ZBZGRlZFRlcm1zLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9leHByZXNzaW9ucy9EZXJpdmF0aXZlLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9leHByZXNzaW9ucy9FeHBvbmVudC50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZXhwcmVzc2lvbnMvRXhwcmVzc2lvbi50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZXhwcmVzc2lvbnMvRnJhY3Rpb24udHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2V4cHJlc3Npb25zL0ludGVnZXIudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2V4cHJlc3Npb25zL0ludGVncmFsLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi9leHByZXNzaW9ucy9Mb2dhcml0aG0udHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2V4cHJlc3Npb25zL1Byb2R1Y3QudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL2V4cHJlc3Npb25zL1N1bS50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvZXhwcmVzc2lvbnMvVmFyaWFibGUudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL3VpZWxlbWVudHMvQXJndW1lbnROb2RlVmlldy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdWllbGVtZW50cy9FZGdlVmlldy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdWllbGVtZW50cy9FZGl0YWJsZU1hdGhWaWV3LnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi91aWVsZW1lbnRzL0V4cGxhbmF0aW9uUG9wdXAudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL3VpZWxlbWVudHMvRXhwcmVzc2lvbk5vZGVWaWV3LnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi91aWVsZW1lbnRzL0dyYXBoTm9kZVZpZXcudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL3VpZWxlbWVudHMvVG91Y2hHZXN0dXJlUmVjb2duaXplci50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdWllbGVtZW50cy9VSVByZWZlcmVuY2VzLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi91aWVsZW1lbnRzL1dlYkdyYXBoVmlldy50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdXNlcmlucHV0L0FudGxyTWF0aFBhcnNlci50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdXNlcmlucHV0L0ZsYXR0ZW5lci50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdXNlcmlucHV0L01hdGhWaXNpdG9ySW1wbC50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdXNlcmlucHV0L2FyaXRobWV0aWNMZXhlci50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdXNlcmlucHV0L2FyaXRobWV0aWNQYXJzZXIudHMiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYXRobGliL3VzZXJpbnB1dC9hcml0aG1ldGljVmlzaXRvci50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vc3JjL21hdGhsaWIvdXRpbC9NYXRoTUxIZWxwZXJzLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliLnRzIiwid2VicGFjazovL2ludGVncmF0b3IvLi9zcmMvbWF0aGxpYi91dGlsL2Fzc2VydC50cyIsIndlYnBhY2s6Ly9pbnRlZ3JhdG9yLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9kaXN0L2FudGxyNC53ZWIuY2pzIiwid2VicGFjazovL2ludGVncmF0b3Ivd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRvci8uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXZlbnRpZnkoc3ViamVjdCkge1xuICB2YWxpZGF0ZVN1YmplY3Qoc3ViamVjdCk7XG5cbiAgdmFyIGV2ZW50c1N0b3JhZ2UgPSBjcmVhdGVFdmVudHNTdG9yYWdlKHN1YmplY3QpO1xuICBzdWJqZWN0Lm9uID0gZXZlbnRzU3RvcmFnZS5vbjtcbiAgc3ViamVjdC5vZmYgPSBldmVudHNTdG9yYWdlLm9mZjtcbiAgc3ViamVjdC5maXJlID0gZXZlbnRzU3RvcmFnZS5maXJlO1xuICByZXR1cm4gc3ViamVjdDtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50c1N0b3JhZ2Uoc3ViamVjdCkge1xuICAvLyBTdG9yZSBhbGwgZXZlbnQgbGlzdGVuZXJzIHRvIHRoaXMgaGFzaC4gS2V5IGlzIGV2ZW50IG5hbWUsIHZhbHVlIGlzIGFycmF5XG4gIC8vIG9mIGNhbGxiYWNrIHJlY29yZHMuXG4gIC8vXG4gIC8vIEEgY2FsbGJhY2sgcmVjb3JkIGNvbnNpc3RzIG9mIGNhbGxiYWNrIGZ1bmN0aW9uIGFuZCBpdHMgb3B0aW9uYWwgY29udGV4dDpcbiAgLy8geyAnZXZlbnROYW1lJyA9PiBbe2NhbGxiYWNrOiBmdW5jdGlvbiwgY3R4OiBvYmplY3R9XSB9XG4gIHZhciByZWdpc3RlcmVkRXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgaXMgZXhwZWN0ZWQgdG8gYmUgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgdmFyIGhhbmRsZXJzID0gcmVnaXN0ZXJlZEV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgaWYgKCFoYW5kbGVycykge1xuICAgICAgICBoYW5kbGVycyA9IHJlZ2lzdGVyZWRFdmVudHNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgaGFuZGxlcnMucHVzaCh7Y2FsbGJhY2s6IGNhbGxiYWNrLCBjdHg6IGN0eH0pO1xuXG4gICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9LFxuXG4gICAgb2ZmOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHdhbnRUb1JlbW92ZUFsbCA9ICh0eXBlb2YgZXZlbnROYW1lID09PSAndW5kZWZpbmVkJyk7XG4gICAgICBpZiAod2FudFRvUmVtb3ZlQWxsKSB7XG4gICAgICAgIC8vIEtpbGxpbmcgb2xkIGV2ZW50cyBzdG9yYWdlIHNob3VsZCBiZSBlbm91Z2ggaW4gdGhpcyBjYXNlOlxuICAgICAgICByZWdpc3RlcmVkRXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWdpc3RlcmVkRXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdmFyIGRlbGV0ZUFsbENhbGxiYWNrc0ZvckV2ZW50ID0gKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJyk7XG4gICAgICAgIGlmIChkZWxldGVBbGxDYWxsYmFja3NGb3JFdmVudCkge1xuICAgICAgICAgIGRlbGV0ZSByZWdpc3RlcmVkRXZlbnRzW2V2ZW50TmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHJlZ2lzdGVyZWRFdmVudHNbZXZlbnROYW1lXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1tpXS5jYWxsYmFjayA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfSxcblxuICAgIGZpcmU6IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSByZWdpc3RlcmVkRXZlbnRzW2V2ZW50TmFtZV07XG4gICAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpcmVBcmd1bWVudHM7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZmlyZUFyZ3VtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgfVxuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgY2FsbGJhY2tJbmZvID0gY2FsbGJhY2tzW2ldO1xuICAgICAgICBjYWxsYmFja0luZm8uY2FsbGJhY2suYXBwbHkoY2FsbGJhY2tJbmZvLmN0eCwgZmlyZUFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVTdWJqZWN0KHN1YmplY3QpIHtcbiAgaWYgKCFzdWJqZWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudGlmeSBjYW5ub3QgdXNlIGZhbHN5IG9iamVjdCBhcyBldmVudHMgc3ViamVjdCcpO1xuICB9XG4gIHZhciByZXNlcnZlZFdvcmRzID0gWydvbicsICdmaXJlJywgJ29mZiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc2VydmVkV29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3ViamVjdC5oYXNPd25Qcm9wZXJ0eShyZXNlcnZlZFdvcmRzW2ldKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViamVjdCBjYW5ub3QgYmUgZXZlbnRpZmllZCwgc2luY2UgaXQgYWxyZWFkeSBoYXMgcHJvcGVydHkgJ1wiICsgcmVzZXJ2ZWRXb3Jkc1tpXSArIFwiJ1wiKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBDb250YWlucyBkZWZpbml0aW9uIG9mIHRoZSBjb3JlIGdyYXBoIG9iamVjdC5cbiAqL1xuXG4vLyBUT0RPOiBuZWVkIHRvIGNoYW5nZSBzdG9yYWdlIGxheWVyOlxuLy8gMS4gQmUgYWJsZSB0byBnZXQgYWxsIG5vZGVzIE8oMSlcbi8vIDIuIEJlIGFibGUgdG8gZ2V0IG51bWJlciBvZiBsaW5rcyBPKDEpXG5cbi8qKlxuICogQGV4YW1wbGVcbiAqICB2YXIgZ3JhcGggPSByZXF1aXJlKCduZ3JhcGguZ3JhcGgnKSgpO1xuICogIGdyYXBoLmFkZE5vZGUoMSk7ICAgICAvLyBncmFwaCBoYXMgb25lIG5vZGUuXG4gKiAgZ3JhcGguYWRkTGluaygyLCAzKTsgIC8vIG5vdyBncmFwaCBjb250YWlucyB0aHJlZSBub2RlcyBhbmQgb25lIGxpbmsuXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUdyYXBoO1xuXG52YXIgZXZlbnRpZnkgPSByZXF1aXJlKCduZ3JhcGguZXZlbnRzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBncmFwaFxuICovXG5mdW5jdGlvbiBjcmVhdGVHcmFwaChvcHRpb25zKSB7XG4gIC8vIEdyYXBoIHN0cnVjdHVyZSBpcyBtYWludGFpbmVkIGFzIGRpY3Rpb25hcnkgb2Ygbm9kZXNcbiAgLy8gYW5kIGFycmF5IG9mIGxpbmtzLiBFYWNoIG5vZGUgaGFzICdsaW5rcycgcHJvcGVydHkgd2hpY2hcbiAgLy8gaG9sZCBhbGwgbGlua3MgcmVsYXRlZCB0byB0aGF0IG5vZGUuIEFuZCBnZW5lcmFsIGxpbmtzXG4gIC8vIGFycmF5IGlzIHVzZWQgdG8gc3BlZWQgdXAgYWxsIGxpbmtzIGVudW1lcmF0aW9uLiBUaGlzIGlzIGluZWZmaWNpZW50XG4gIC8vIGluIHRlcm1zIG9mIG1lbW9yeSwgYnV0IHNpbXBsaWZpZXMgY29kaW5nLlxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCd1bmlxdWVMaW5rSWQnIGluIG9wdGlvbnMpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnbmdyYXBoLmdyYXBoOiBTdGFydGluZyBmcm9tIHZlcnNpb24gMC4xNCBgdW5pcXVlTGlua0lkYCBpcyBkZXByZWNhdGVkLlxcbicgK1xuICAgICAgJ1VzZSBgbXVsdGlncmFwaGAgb3B0aW9uIGluc3RlYWRcXG4nLFxuICAgICAgJ1xcbicsXG4gICAgICAnTm90ZTogdGhlcmUgaXMgYWxzbyBjaGFuZ2UgaW4gZGVmYXVsdCBiZWhhdmlvcjogRnJvbSBub3cgb24gZWFjaCBncmFwaFxcbicrXG4gICAgICAnaXMgY29uc2lkZXJlZCB0byBiZSBub3QgYSBtdWx0aWdyYXBoIGJ5IGRlZmF1bHQgKGVhY2ggZWRnZSBpcyB1bmlxdWUpLidcbiAgICApO1xuXG4gICAgb3B0aW9ucy5tdWx0aWdyYXBoID0gb3B0aW9ucy51bmlxdWVMaW5rSWQ7XG4gIH1cblxuICAvLyBEZWFyIHJlYWRlciwgdGhlIG5vbi1tdWx0aWdyYXBocyBkbyBub3QgZ3VhcmFudGVlIHRoYXQgdGhlcmUgaXMgb25seVxuICAvLyBvbmUgbGluayBmb3IgYSBnaXZlbiBwYWlyIG9mIG5vZGUuIFdoZW4gdGhpcyBvcHRpb24gaXMgc2V0IHRvIGZhbHNlXG4gIC8vIHdlIGNhbiBzYXZlIHNvbWUgbWVtb3J5IGFuZCBDUFUgKDE4JSBmYXN0ZXIgZm9yIG5vbi1tdWx0aWdyYXBoKTtcbiAgaWYgKG9wdGlvbnMubXVsdGlncmFwaCA9PT0gdW5kZWZpbmVkKSBvcHRpb25zLm11bHRpZ3JhcGggPSBmYWxzZTtcblxuICBpZiAodHlwZW9mIE1hcCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFRPRE86IFNob3VsZCB3ZSBwb2x5ZmlsbCBpdCBvdXJzZWx2ZXM/IFdlIGRvbid0IHVzZSBtdWNoIG9wZXJhdGlvbnMgdGhlcmUuLlxuICAgIHRocm93IG5ldyBFcnJvcignbmdyYXBoLmdyYXBoIHJlcXVpcmVzIGBNYXBgIHRvIGJlIGRlZmluZWQuIFBsZWFzZSBwb2x5ZmlsbCBpdCBiZWZvcmUgdXNpbmcgbmdyYXBoJyk7XG4gIH0gXG5cbiAgdmFyIG5vZGVzID0gbmV3IE1hcCgpOyAvLyBub2RlSWQgPT4gTm9kZVxuICB2YXIgbGlua3MgPSBuZXcgTWFwKCk7IC8vIGxpbmtJZCA9PiBMaW5rXG4gICAgLy8gSGFzaCBvZiBtdWx0aS1lZGdlcy4gVXNlZCB0byB0cmFjayBpZHMgb2YgZWRnZXMgYmV0d2VlbiBzYW1lIG5vZGVzXG4gIHZhciBtdWx0aUVkZ2VzID0ge307XG4gIHZhciBzdXNwZW5kRXZlbnRzID0gMDtcblxuICB2YXIgY3JlYXRlTGluayA9IG9wdGlvbnMubXVsdGlncmFwaCA/IGNyZWF0ZVVuaXF1ZUxpbmsgOiBjcmVhdGVTaW5nbGVMaW5rLFxuXG4gICAgLy8gT3VyIGdyYXBoIEFQSSBwcm92aWRlcyBtZWFucyB0byBsaXN0ZW4gdG8gZ3JhcGggY2hhbmdlcy4gVXNlcnMgY2FuIHN1YnNjcmliZVxuICAgIC8vIHRvIGJlIG5vdGlmaWVkIGFib3V0IGNoYW5nZXMgaW4gdGhlIGdyYXBoIGJ5IHVzaW5nIGBvbmAgbWV0aG9kLiBIb3dldmVyXG4gICAgLy8gaW4gc29tZSBjYXNlcyB0aGV5IGRvbid0IHVzZSBpdC4gVG8gYXZvaWQgdW5uZWNlc3NhcnkgbWVtb3J5IGNvbnN1bXB0aW9uXG4gICAgLy8gd2Ugd2lsbCBub3QgcmVjb3JkIGdyYXBoIGNoYW5nZXMgdW50aWwgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgc3Vic2NyaWJlci5cbiAgICAvLyBDb2RlIGJlbG93IHN1cHBvcnRzIHRoaXMgb3B0aW1pemF0aW9uLlxuICAgIC8vXG4gICAgLy8gQWNjdW11bGF0ZXMgYWxsIGNoYW5nZXMgbWFkZSBkdXJpbmcgZ3JhcGggdXBkYXRlcy5cbiAgICAvLyBFYWNoIGNoYW5nZSBlbGVtZW50IGNvbnRhaW5zOlxuICAgIC8vICBjaGFuZ2VUeXBlIC0gb25lIG9mIHRoZSBzdHJpbmdzOiAnYWRkJywgJ3JlbW92ZScgb3IgJ3VwZGF0ZSc7XG4gICAgLy8gIG5vZGUgLSBpZiBjaGFuZ2UgaXMgcmVsYXRlZCB0byBub2RlIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIGNoYW5nZWQgZ3JhcGgncyBub2RlO1xuICAgIC8vICBsaW5rIC0gaWYgY2hhbmdlIGlzIHJlbGF0ZWQgdG8gbGluayB0aGlzIHByb3BlcnR5IGlzIHNldCB0byBjaGFuZ2VkIGdyYXBoJ3MgbGluaztcbiAgICBjaGFuZ2VzID0gW10sXG4gICAgcmVjb3JkTGlua0NoYW5nZSA9IG5vb3AsXG4gICAgcmVjb3JkTm9kZUNoYW5nZSA9IG5vb3AsXG4gICAgZW50ZXJNb2RpZmljYXRpb24gPSBub29wLFxuICAgIGV4aXRNb2RpZmljYXRpb24gPSBub29wO1xuXG4gIC8vIHRoaXMgaXMgb3VyIHB1YmxpYyBBUEk6XG4gIHZhciBncmFwaFBhcnQgPSB7XG4gICAgLyoqXG4gICAgICogU29tZXRpbWVzIGR1Y2sgdHlwaW5nIGNvdWxkIGJlIHNsb3cuIEdpdmluZyBjbGllbnRzIGEgaGludCBhYm91dCBkYXRhIHN0cnVjdHVyZVxuICAgICAqIHZpYSBleHBsaWNpdCB2ZXJzaW9uIG51bWJlciBoZXJlOlxuICAgICAqL1xuICAgIHZlcnNpb246IDIwLjAsXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIG5vZGUgdG8gdGhlIGdyYXBoLiBJZiBub2RlIHdpdGggZ2l2ZW4gaWQgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGdyYXBoXG4gICAgICogaXRzIGRhdGEgaXMgZXh0ZW5kZWQgd2l0aCB3aGF0ZXZlciBjb21lcyBpbiAnZGF0YScgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZUlkIHRoZSBub2RlJ3MgaWRlbnRpZmllci4gQSBzdHJpbmcgb3IgbnVtYmVyIGlzIHByZWZlcnJlZC5cbiAgICAgKiBAcGFyYW0gW2RhdGFdIGFkZGl0aW9uYWwgZGF0YSBmb3IgdGhlIG5vZGUgYmVpbmcgYWRkZWQuIElmIG5vZGUgYWxyZWFkeVxuICAgICAqICAgZXhpc3RzIGl0cyBkYXRhIG9iamVjdCBpcyBhdWdtZW50ZWQgd2l0aCB0aGUgbmV3IG9uZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge25vZGV9IFRoZSBuZXdseSBhZGRlZCBub2RlIG9yIG5vZGUgd2l0aCBnaXZlbiBpZCBpZiBpdCBhbHJlYWR5IGV4aXN0cy5cbiAgICAgKi9cbiAgICBhZGROb2RlOiBhZGROb2RlLFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpbmsgdG8gdGhlIGdyYXBoLiBUaGUgZnVuY3Rpb24gYWx3YXlzIGNyZWF0ZSBhIG5ld1xuICAgICAqIGxpbmsgYmV0d2VlbiB0d28gbm9kZXMuIElmIG9uZSBvZiB0aGUgbm9kZXMgZG9lcyBub3QgZXhpc3RzXG4gICAgICogYSBuZXcgbm9kZSBpcyBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZyb21JZCBsaW5rIHN0YXJ0IG5vZGUgaWQ7XG4gICAgICogQHBhcmFtIHRvSWQgbGluayBlbmQgbm9kZSBpZDtcbiAgICAgKiBAcGFyYW0gW2RhdGFdIGFkZGl0aW9uYWwgZGF0YSB0byBiZSBzZXQgb24gdGhlIG5ldyBsaW5rO1xuICAgICAqXG4gICAgICogQHJldHVybiB7bGlua30gVGhlIG5ld2x5IGNyZWF0ZWQgbGlua1xuICAgICAqL1xuICAgIGFkZExpbms6IGFkZExpbmssXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxpbmsgZnJvbSB0aGUgZ3JhcGguIElmIGxpbmsgZG9lcyBub3QgZXhpc3QgZG9lcyBub3RoaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbmsgLSBvYmplY3QgcmV0dXJuZWQgYnkgYWRkTGluaygpIG9yIGdldExpbmtzKCkgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgbGluayB3YXMgcmVtb3ZlZDsgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIHJlbW92ZUxpbms6IHJlbW92ZUxpbmssXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIG5vZGUgd2l0aCBnaXZlbiBpZCBmcm9tIHRoZSBncmFwaC4gSWYgbm9kZSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZ3JhcGhcbiAgICAgKiBkb2VzIG5vdGhpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZUlkIG5vZGUncyBpZGVudGlmaWVyIHBhc3NlZCB0byBhZGROb2RlKCkgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIG5vZGUgd2FzIHJlbW92ZWQ7IGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICByZW1vdmVOb2RlOiByZW1vdmVOb2RlLFxuXG4gICAgLyoqXG4gICAgICogR2V0cyBub2RlIHdpdGggZ2l2ZW4gaWRlbnRpZmllci4gSWYgbm9kZSBkb2VzIG5vdCBleGlzdCB1bmRlZmluZWQgdmFsdWUgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZUlkIHJlcXVlc3RlZCBub2RlIGlkZW50aWZpZXI7XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtub2RlfSBpbiB3aXRoIHJlcXVlc3RlZCBpZGVudGlmaWVyIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoIG5vZGUgZXhpc3RzLlxuICAgICAqL1xuICAgIGdldE5vZGU6IGdldE5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG51bWJlciBvZiBub2RlcyBpbiB0aGlzIGdyYXBoLlxuICAgICAqXG4gICAgICogQHJldHVybiBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIGdyYXBoLlxuICAgICAqL1xuICAgIGdldE5vZGVDb3VudDogZ2V0Tm9kZUNvdW50LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0b3RhbCBudW1iZXIgb2YgbGlua3MgaW4gdGhlIGdyYXBoLlxuICAgICAqL1xuICAgIGdldExpbmtDb3VudDogZ2V0TGlua0NvdW50LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0b3RhbCBudW1iZXIgb2YgbGlua3MgaW4gdGhlIGdyYXBoLlxuICAgICAqL1xuICAgIGdldEVkZ2VDb3VudDogZ2V0TGlua0NvdW50LFxuXG4gICAgLyoqXG4gICAgICogU3lub255bSBmb3IgYGdldExpbmtDb3VudCgpYFxuICAgICAqL1xuICAgIGdldExpbmtzQ291bnQ6IGdldExpbmtDb3VudCxcbiAgICBcbiAgICAvKipcbiAgICAgKiBTeW5vbnltIGZvciBgZ2V0Tm9kZUNvdW50KClgXG4gICAgICovXG4gICAgZ2V0Tm9kZXNDb3VudDogZ2V0Tm9kZUNvdW50LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgbGlua3MgKGluYm91bmQgYW5kIG91dGJvdW5kKSBmcm9tIHRoZSBub2RlIHdpdGggZ2l2ZW4gaWQuXG4gICAgICogSWYgbm9kZSB3aXRoIGdpdmVuIGlkIGlzIG5vdCBmb3VuZCBudWxsIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGVJZCByZXF1ZXN0ZWQgbm9kZSBpZGVudGlmaWVyLlxuICAgICAqXG4gICAgICogQHJldHVybiBTZXQgb2YgbGlua3MgZnJvbSBhbmQgdG8gcmVxdWVzdGVkIG5vZGUgaWYgc3VjaCBub2RlIGV4aXN0cztcbiAgICAgKiAgIG90aGVyd2lzZSBudWxsIGlzIHJldHVybmVkLlxuICAgICAqL1xuICAgIGdldExpbmtzOiBnZXRMaW5rcyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgY2FsbGJhY2sgb24gZWFjaCBub2RlIG9mIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb24obm9kZSl9IGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGJlIGludm9rZWQuIFRoZSBmdW5jdGlvblxuICAgICAqICAgaXMgcGFzc2VkIG9uZSBhcmd1bWVudDogdmlzaXRlZCBub2RlLlxuICAgICAqL1xuICAgIGZvckVhY2hOb2RlOiBmb3JFYWNoTm9kZSxcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgY2FsbGJhY2sgb24gZXZlcnkgbGlua2VkIChhZGphY2VudCkgbm9kZSB0byB0aGUgZ2l2ZW4gb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGVJZCBJZGVudGlmaWVyIG9mIHRoZSByZXF1ZXN0ZWQgbm9kZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uKG5vZGUsIGxpbmspfSBjYWxsYmFjayBGdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gYWxsIGxpbmtlZCBub2Rlcy5cbiAgICAgKiAgIFRoZSBmdW5jdGlvbiBpcyBwYXNzZWQgdHdvIHBhcmFtZXRlcnM6IGFkamFjZW50IG5vZGUgYW5kIGxpbmsgb2JqZWN0IGl0c2VsZi5cbiAgICAgKiBAcGFyYW0gb3JpZW50ZWQgaWYgdHJ1ZSBncmFwaCB0cmVhdGVkIGFzIG9yaWVudGVkLlxuICAgICAqL1xuICAgIGZvckVhY2hMaW5rZWROb2RlOiBmb3JFYWNoTGlua2VkTm9kZSxcblxuICAgIC8qKlxuICAgICAqIEVudW1lcmF0ZXMgYWxsIGxpbmtzIGluIHRoZSBncmFwaFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbihsaW5rKX0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGFsbCBsaW5rcyBpbiB0aGUgZ3JhcGguXG4gICAgICogICBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkIG9uZSBwYXJhbWV0ZXI6IGdyYXBoJ3MgbGluayBvYmplY3QuXG4gICAgICpcbiAgICAgKiBMaW5rIG9iamVjdCBjb250YWlucyBhdCBsZWFzdCB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAgICAgKiAgZnJvbUlkIC0gbm9kZSBpZCB3aGVyZSBsaW5rIHN0YXJ0cztcbiAgICAgKiAgdG9JZCAtIG5vZGUgaWQgd2hlcmUgbGluayBlbmRzLFxuICAgICAqICBkYXRhIC0gYWRkaXRpb25hbCBkYXRhIHBhc3NlZCB0byBncmFwaC5hZGRMaW5rKCkgbWV0aG9kLlxuICAgICAqL1xuICAgIGZvckVhY2hMaW5rOiBmb3JFYWNoTGluayxcblxuICAgIC8qKlxuICAgICAqIFN1c3BlbmQgYWxsIG5vdGlmaWNhdGlvbnMgYWJvdXQgZ3JhcGggY2hhbmdlcyB1bnRpbFxuICAgICAqIGVuZFVwZGF0ZSBpcyBjYWxsZWQuXG4gICAgICovXG4gICAgYmVnaW5VcGRhdGU6IGVudGVyTW9kaWZpY2F0aW9uLFxuXG4gICAgLyoqXG4gICAgICogUmVzdW1lcyBhbGwgbm90aWZpY2F0aW9ucyBhYm91dCBncmFwaCBjaGFuZ2VzIGFuZCBmaXJlc1xuICAgICAqIGdyYXBoICdjaGFuZ2VkJyBldmVudCBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgcGVuZGluZyBjaGFuZ2VzLlxuICAgICAqL1xuICAgIGVuZFVwZGF0ZTogZXhpdE1vZGlmaWNhdGlvbixcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIG5vZGVzIGFuZCBsaW5rcyBmcm9tIHRoZSBncmFwaC5cbiAgICAgKi9cbiAgICBjbGVhcjogY2xlYXIsXG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlcmUgaXMgYSBsaW5rIGJldHdlZW4gdHdvIG5vZGVzLlxuICAgICAqIE9wZXJhdGlvbiBjb21wbGV4aXR5IGlzIE8obikgd2hlcmUgbiAtIG51bWJlciBvZiBsaW5rcyBvZiBhIG5vZGUuXG4gICAgICogTk9URTogdGhpcyBmdW5jdGlvbiBpcyBzeW5vbnltIGZvciBnZXRMaW5rKClcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGxpbmsgaWYgdGhlcmUgaXMgb25lLiBudWxsIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBoYXNMaW5rOiBnZXRMaW5rLFxuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0cyB3aGV0aGVyIHRoZXJlIGlzIGEgbm9kZSB3aXRoIGdpdmVuIGlkXG4gICAgICogXG4gICAgICogT3BlcmF0aW9uIGNvbXBsZXhpdHkgaXMgTygxKVxuICAgICAqIE5PVEU6IHRoaXMgZnVuY3Rpb24gaXMgc3lub255bSBmb3IgZ2V0Tm9kZSgpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBub2RlIGlmIHRoZXJlIGlzIG9uZTsgRmFsc3kgdmFsdWUgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGhhc05vZGU6IGdldE5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGVkZ2UgYmV0d2VlbiB0d28gbm9kZXMuXG4gICAgICogT3BlcmF0aW9uIGNvbXBsZXhpdHkgaXMgTyhuKSB3aGVyZSBuIC0gbnVtYmVyIG9mIGxpbmtzIG9mIGEgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmcm9tSWQgbGluayBzdGFydCBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRvSWQgbGluayBlbmQgaWRlbnRpZmllclxuICAgICAqXG4gICAgICogQHJldHVybnMgbGluayBpZiB0aGVyZSBpcyBvbmU7IHVuZGVmaW5lZCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgZ2V0TGluazogZ2V0TGlua1xuICB9O1xuXG4gIC8vIHRoaXMgd2lsbCBhZGQgYG9uKClgIGFuZCBgZmlyZSgpYCBtZXRob2RzLlxuICBldmVudGlmeShncmFwaFBhcnQpO1xuXG4gIG1vbml0b3JTdWJzY3JpYmVycygpO1xuXG4gIHJldHVybiBncmFwaFBhcnQ7XG5cbiAgZnVuY3Rpb24gbW9uaXRvclN1YnNjcmliZXJzKCkge1xuICAgIHZhciByZWFsT24gPSBncmFwaFBhcnQub247XG5cbiAgICAvLyByZXBsYWNlIHJlYWwgYG9uYCB3aXRoIG91ciB0ZW1wb3Jhcnkgb24sIHdoaWNoIHdpbGwgdHJpZ2dlciBjaGFuZ2VcbiAgICAvLyBtb2RpZmljYXRpb24gbW9uaXRvcmluZzpcbiAgICBncmFwaFBhcnQub24gPSBvbjtcblxuICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgLy8gbm93IGl0J3MgdGltZSB0byBzdGFydCB0cmFja2luZyBzdHVmZjpcbiAgICAgIGdyYXBoUGFydC5iZWdpblVwZGF0ZSA9IGVudGVyTW9kaWZpY2F0aW9uID0gZW50ZXJNb2RpZmljYXRpb25SZWFsO1xuICAgICAgZ3JhcGhQYXJ0LmVuZFVwZGF0ZSA9IGV4aXRNb2RpZmljYXRpb24gPSBleGl0TW9kaWZpY2F0aW9uUmVhbDtcbiAgICAgIHJlY29yZExpbmtDaGFuZ2UgPSByZWNvcmRMaW5rQ2hhbmdlUmVhbDtcbiAgICAgIHJlY29yZE5vZGVDaGFuZ2UgPSByZWNvcmROb2RlQ2hhbmdlUmVhbDtcblxuICAgICAgLy8gdGhpcyB3aWxsIHJlcGxhY2UgY3VycmVudCBgb25gIG1ldGhvZCB3aXRoIHJlYWwgcHViL3N1YiBmcm9tIGBldmVudGlmeWAuXG4gICAgICBncmFwaFBhcnQub24gPSByZWFsT247XG4gICAgICAvLyBkZWxlZ2F0ZSB0byByZWFsIGBvbmAgaGFuZGxlcjpcbiAgICAgIHJldHVybiByZWFsT24uYXBwbHkoZ3JhcGhQYXJ0LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZExpbmtDaGFuZ2VSZWFsKGxpbmssIGNoYW5nZVR5cGUpIHtcbiAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgbGluazogbGluayxcbiAgICAgIGNoYW5nZVR5cGU6IGNoYW5nZVR5cGVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZE5vZGVDaGFuZ2VSZWFsKG5vZGUsIGNoYW5nZVR5cGUpIHtcbiAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgbm9kZTogbm9kZSxcbiAgICAgIGNoYW5nZVR5cGU6IGNoYW5nZVR5cGVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE5vZGUobm9kZUlkLCBkYXRhKSB7XG4gICAgaWYgKG5vZGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbm9kZSBpZGVudGlmaWVyJyk7XG4gICAgfVxuXG4gICAgZW50ZXJNb2RpZmljYXRpb24oKTtcblxuICAgIHZhciBub2RlID0gZ2V0Tm9kZShub2RlSWQpO1xuICAgIGlmICghbm9kZSkge1xuICAgICAgbm9kZSA9IG5ldyBOb2RlKG5vZGVJZCwgZGF0YSk7XG4gICAgICByZWNvcmROb2RlQ2hhbmdlKG5vZGUsICdhZGQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5kYXRhID0gZGF0YTtcbiAgICAgIHJlY29yZE5vZGVDaGFuZ2Uobm9kZSwgJ3VwZGF0ZScpO1xuICAgIH1cblxuICAgIG5vZGVzLnNldChub2RlSWQsIG5vZGUpO1xuXG4gICAgZXhpdE1vZGlmaWNhdGlvbigpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Tm9kZShub2RlSWQpIHtcbiAgICByZXR1cm4gbm9kZXMuZ2V0KG5vZGVJZCk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGVJZCkge1xuICAgIHZhciBub2RlID0gZ2V0Tm9kZShub2RlSWQpO1xuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGVudGVyTW9kaWZpY2F0aW9uKCk7XG5cbiAgICB2YXIgcHJldkxpbmtzID0gbm9kZS5saW5rcztcbiAgICBpZiAocHJldkxpbmtzKSB7XG4gICAgICBwcmV2TGlua3MuZm9yRWFjaChyZW1vdmVMaW5rSW5zdGFuY2UpO1xuICAgICAgbm9kZS5saW5rcyA9IG51bGw7XG4gICAgfVxuXG4gICAgbm9kZXMuZGVsZXRlKG5vZGVJZCk7XG5cbiAgICByZWNvcmROb2RlQ2hhbmdlKG5vZGUsICdyZW1vdmUnKTtcblxuICAgIGV4aXRNb2RpZmljYXRpb24oKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cblxuICBmdW5jdGlvbiBhZGRMaW5rKGZyb21JZCwgdG9JZCwgZGF0YSkge1xuICAgIGVudGVyTW9kaWZpY2F0aW9uKCk7XG5cbiAgICB2YXIgZnJvbU5vZGUgPSBnZXROb2RlKGZyb21JZCkgfHwgYWRkTm9kZShmcm9tSWQpO1xuICAgIHZhciB0b05vZGUgPSBnZXROb2RlKHRvSWQpIHx8IGFkZE5vZGUodG9JZCk7XG5cbiAgICB2YXIgbGluayA9IGNyZWF0ZUxpbmsoZnJvbUlkLCB0b0lkLCBkYXRhKTtcbiAgICB2YXIgaXNVcGRhdGUgPSBsaW5rcy5oYXMobGluay5pZCk7XG5cbiAgICBsaW5rcy5zZXQobGluay5pZCwgbGluayk7XG5cbiAgICAvLyBUT0RPOiB0aGlzIGlzIG5vdCBjb29sLiBPbiBsYXJnZSBncmFwaHMgcG90ZW50aWFsbHkgd291bGQgY29uc3VtZSBtb3JlIG1lbW9yeS5cbiAgICBhZGRMaW5rVG9Ob2RlKGZyb21Ob2RlLCBsaW5rKTtcbiAgICBpZiAoZnJvbUlkICE9PSB0b0lkKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgd2UgYXJlIG5vdCBkdXBsaWNhdGluZyBsaW5rcyBmb3Igc2VsZi1sb29wc1xuICAgICAgYWRkTGlua1RvTm9kZSh0b05vZGUsIGxpbmspO1xuICAgIH1cblxuICAgIHJlY29yZExpbmtDaGFuZ2UobGluaywgaXNVcGRhdGUgPyAndXBkYXRlJyA6ICdhZGQnKTtcblxuICAgIGV4aXRNb2RpZmljYXRpb24oKTtcblxuICAgIHJldHVybiBsaW5rO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2luZ2xlTGluayhmcm9tSWQsIHRvSWQsIGRhdGEpIHtcbiAgICB2YXIgbGlua0lkID0gbWFrZUxpbmtJZChmcm9tSWQsIHRvSWQpO1xuICAgIHZhciBwcmV2TGluayA9IGxpbmtzLmdldChsaW5rSWQpO1xuICAgIGlmIChwcmV2TGluaykge1xuICAgICAgcHJldkxpbmsuZGF0YSA9IGRhdGE7XG4gICAgICByZXR1cm4gcHJldkxpbms7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBMaW5rKGZyb21JZCwgdG9JZCwgZGF0YSwgbGlua0lkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaXF1ZUxpbmsoZnJvbUlkLCB0b0lkLCBkYXRhKSB7XG4gICAgLy8gVE9ETzogRmluZCBhIGJldHRlci9mYXN0ZXIgd2F5IHRvIHN0b3JlIG11bHRpZ3JhcGhzXG4gICAgdmFyIGxpbmtJZCA9IG1ha2VMaW5rSWQoZnJvbUlkLCB0b0lkKTtcbiAgICB2YXIgaXNNdWx0aUVkZ2UgPSBtdWx0aUVkZ2VzLmhhc093blByb3BlcnR5KGxpbmtJZCk7XG4gICAgaWYgKGlzTXVsdGlFZGdlIHx8IGdldExpbmsoZnJvbUlkLCB0b0lkKSkge1xuICAgICAgaWYgKCFpc011bHRpRWRnZSkge1xuICAgICAgICBtdWx0aUVkZ2VzW2xpbmtJZF0gPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHN1ZmZpeCA9ICdAJyArICgrK211bHRpRWRnZXNbbGlua0lkXSk7XG4gICAgICBsaW5rSWQgPSBtYWtlTGlua0lkKGZyb21JZCArIHN1ZmZpeCwgdG9JZCArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBMaW5rKGZyb21JZCwgdG9JZCwgZGF0YSwgbGlua0lkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5vZGVDb3VudCgpIHtcbiAgICByZXR1cm4gbm9kZXMuc2l6ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExpbmtDb3VudCgpIHtcbiAgICByZXR1cm4gbGlua3Muc2l6ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExpbmtzKG5vZGVJZCkge1xuICAgIHZhciBub2RlID0gZ2V0Tm9kZShub2RlSWQpO1xuICAgIHJldHVybiBub2RlID8gbm9kZS5saW5rcyA6IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVMaW5rKGxpbmssIG90aGVySWQpIHtcbiAgICBpZiAob3RoZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsaW5rID0gZ2V0TGluayhsaW5rLCBvdGhlcklkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbW92ZUxpbmtJbnN0YW5jZShsaW5rKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUxpbmtJbnN0YW5jZShsaW5rKSB7XG4gICAgaWYgKCFsaW5rKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghbGlua3MuZ2V0KGxpbmsuaWQpKSByZXR1cm4gZmFsc2U7XG5cbiAgICBlbnRlck1vZGlmaWNhdGlvbigpO1xuXG4gICAgbGlua3MuZGVsZXRlKGxpbmsuaWQpO1xuXG4gICAgdmFyIGZyb21Ob2RlID0gZ2V0Tm9kZShsaW5rLmZyb21JZCk7XG4gICAgdmFyIHRvTm9kZSA9IGdldE5vZGUobGluay50b0lkKTtcblxuICAgIGlmIChmcm9tTm9kZSkge1xuICAgICAgZnJvbU5vZGUubGlua3MuZGVsZXRlKGxpbmspO1xuICAgIH1cblxuICAgIGlmICh0b05vZGUpIHtcbiAgICAgIHRvTm9kZS5saW5rcy5kZWxldGUobGluayk7XG4gICAgfVxuXG4gICAgcmVjb3JkTGlua0NoYW5nZShsaW5rLCAncmVtb3ZlJyk7XG5cbiAgICBleGl0TW9kaWZpY2F0aW9uKCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExpbmsoZnJvbU5vZGVJZCwgdG9Ob2RlSWQpIHtcbiAgICBpZiAoZnJvbU5vZGVJZCA9PT0gdW5kZWZpbmVkIHx8IHRvTm9kZUlkID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGxpbmtzLmdldChtYWtlTGlua0lkKGZyb21Ob2RlSWQsIHRvTm9kZUlkKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBlbnRlck1vZGlmaWNhdGlvbigpO1xuICAgIGZvckVhY2hOb2RlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJlbW92ZU5vZGUobm9kZS5pZCk7XG4gICAgfSk7XG4gICAgZXhpdE1vZGlmaWNhdGlvbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yRWFjaExpbmsoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdmFsdWVzSXRlcmF0b3IgPSBsaW5rcy52YWx1ZXMoKTtcbiAgICAgIHZhciBuZXh0VmFsdWUgPSB2YWx1ZXNJdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIW5leHRWYWx1ZS5kb25lKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayhuZXh0VmFsdWUudmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7IC8vIGNsaWVudCBkb2Vzbid0IHdhbnQgdG8gcHJvY2VlZC4gUmV0dXJuLlxuICAgICAgICB9XG4gICAgICAgIG5leHRWYWx1ZSA9IHZhbHVlc0l0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmb3JFYWNoTGlua2VkTm9kZShub2RlSWQsIGNhbGxiYWNrLCBvcmllbnRlZCkge1xuICAgIHZhciBub2RlID0gZ2V0Tm9kZShub2RlSWQpO1xuXG4gICAgaWYgKG5vZGUgJiYgbm9kZS5saW5rcyAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChvcmllbnRlZCkge1xuICAgICAgICByZXR1cm4gZm9yRWFjaE9yaWVudGVkTGluayhub2RlLmxpbmtzLCBub2RlSWQsIGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmb3JFYWNoTm9uT3JpZW50ZWRMaW5rKG5vZGUubGlua3MsIG5vZGVJZCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgZnVuY3Rpb24gZm9yRWFjaE5vbk9yaWVudGVkTGluayhsaW5rcywgbm9kZUlkLCBjYWxsYmFjaykge1xuICAgIHZhciBxdWl0RmFzdDtcblxuICAgIHZhciB2YWx1ZXNJdGVyYXRvciA9IGxpbmtzLnZhbHVlcygpO1xuICAgIHZhciBuZXh0VmFsdWUgPSB2YWx1ZXNJdGVyYXRvci5uZXh0KCk7XG4gICAgd2hpbGUgKCFuZXh0VmFsdWUuZG9uZSkge1xuICAgICAgdmFyIGxpbmsgPSBuZXh0VmFsdWUudmFsdWU7XG4gICAgICB2YXIgbGlua2VkTm9kZUlkID0gbGluay5mcm9tSWQgPT09IG5vZGVJZCA/IGxpbmsudG9JZCA6IGxpbmsuZnJvbUlkO1xuICAgICAgcXVpdEZhc3QgPSBjYWxsYmFjayhub2Rlcy5nZXQobGlua2VkTm9kZUlkKSwgbGluayk7XG4gICAgICBpZiAocXVpdEZhc3QpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIENsaWVudCBkb2VzIG5vdCBuZWVkIG1vcmUgaXRlcmF0aW9ucy4gQnJlYWsgbm93LlxuICAgICAgfVxuICAgICAgbmV4dFZhbHVlID0gdmFsdWVzSXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgZnVuY3Rpb24gZm9yRWFjaE9yaWVudGVkTGluayhsaW5rcywgbm9kZUlkLCBjYWxsYmFjaykge1xuICAgIHZhciBxdWl0RmFzdDtcbiAgICB2YXIgdmFsdWVzSXRlcmF0b3IgPSBsaW5rcy52YWx1ZXMoKTtcbiAgICB2YXIgbmV4dFZhbHVlID0gdmFsdWVzSXRlcmF0b3IubmV4dCgpO1xuICAgIHdoaWxlICghbmV4dFZhbHVlLmRvbmUpIHtcbiAgICAgIHZhciBsaW5rID0gbmV4dFZhbHVlLnZhbHVlO1xuICAgICAgaWYgKGxpbmsuZnJvbUlkID09PSBub2RlSWQpIHtcbiAgICAgICAgcXVpdEZhc3QgPSBjYWxsYmFjayhub2Rlcy5nZXQobGluay50b0lkKSwgbGluayk7XG4gICAgICAgIGlmIChxdWl0RmFzdCkge1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBDbGllbnQgZG9lcyBub3QgbmVlZCBtb3JlIGl0ZXJhdGlvbnMuIEJyZWFrIG5vdy5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dFZhbHVlID0gdmFsdWVzSXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHdlIHdpbGwgbm90IGZpcmUgYW55dGhpbmcgdW50aWwgdXNlcnMgb2YgdGhpcyBsaWJyYXJ5IGV4cGxpY2l0bHkgY2FsbCBgb24oKWBcbiAgLy8gbWV0aG9kLlxuICBmdW5jdGlvbiBub29wKCkge31cblxuICAvLyBFbnRlciwgRXhpdCBtb2RpZmljYXRpb24gYWxsb3dzIGJ1bGsgZ3JhcGggdXBkYXRlcyB3aXRob3V0IGZpcmluZyBldmVudHMuXG4gIGZ1bmN0aW9uIGVudGVyTW9kaWZpY2F0aW9uUmVhbCgpIHtcbiAgICBzdXNwZW5kRXZlbnRzICs9IDE7XG4gIH1cblxuICBmdW5jdGlvbiBleGl0TW9kaWZpY2F0aW9uUmVhbCgpIHtcbiAgICBzdXNwZW5kRXZlbnRzIC09IDE7XG4gICAgaWYgKHN1c3BlbmRFdmVudHMgPT09IDAgJiYgY2hhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICBncmFwaFBhcnQuZmlyZSgnY2hhbmdlZCcsIGNoYW5nZXMpO1xuICAgICAgY2hhbmdlcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZvckVhY2hOb2RlKGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBpcyBleHBlY3RlZCB0byBpdGVyYXRlIG92ZXIgZ3JhcGggbm9kZXMuIFlvdSBwYXNzZWQgJyArIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzSXRlcmF0b3IgPSBub2Rlcy52YWx1ZXMoKTtcbiAgICB2YXIgbmV4dFZhbHVlID0gdmFsdWVzSXRlcmF0b3IubmV4dCgpO1xuICAgIHdoaWxlICghbmV4dFZhbHVlLmRvbmUpIHtcbiAgICAgIGlmIChjYWxsYmFjayhuZXh0VmFsdWUudmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBjbGllbnQgZG9lc24ndCB3YW50IHRvIHByb2NlZWQuIFJldHVybi5cbiAgICAgIH1cbiAgICAgIG5leHRWYWx1ZSA9IHZhbHVlc0l0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbnRlcm5hbCBzdHJ1Y3R1cmUgdG8gcmVwcmVzZW50IG5vZGU7XG4gKi9cbmZ1bmN0aW9uIE5vZGUoaWQsIGRhdGEpIHtcbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLmxpbmtzID0gbnVsbDtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbn1cblxuZnVuY3Rpb24gYWRkTGlua1RvTm9kZShub2RlLCBsaW5rKSB7XG4gIGlmIChub2RlLmxpbmtzKSB7XG4gICAgbm9kZS5saW5rcy5hZGQobGluayk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5saW5rcyA9IG5ldyBTZXQoW2xpbmtdKTtcbiAgfVxufVxuXG4vKipcbiAqIEludGVybmFsIHN0cnVjdHVyZSB0byByZXByZXNlbnQgbGlua3M7XG4gKi9cbmZ1bmN0aW9uIExpbmsoZnJvbUlkLCB0b0lkLCBkYXRhLCBpZCkge1xuICB0aGlzLmZyb21JZCA9IGZyb21JZDtcbiAgdGhpcy50b0lkID0gdG9JZDtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5pZCA9IGlkO1xufVxuXG5mdW5jdGlvbiBtYWtlTGlua0lkKGZyb21JZCwgdG9JZCkge1xuICByZXR1cm4gZnJvbUlkLnRvU3RyaW5nKCkgKyAn8J+RiSAnICsgdG9JZC50b1N0cmluZygpO1xufVxuIiwiLyoqXG4gKiBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci90aW55cXVldWVcbiAqIENvcHlyaWdodCAoYykgMjAxNywgVmxhZGltaXIgQWdhZm9ua2luIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3VybmVyL3RpbnlxdWV1ZS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBcbiAqIEFkYXB0ZWQgZm9yIFBhdGhGaW5kaW5nIG5lZWRzIGJ5IEBhbnZha2FcbiAqIENvcHlyaWdodCAoYykgMjAxNywgQW5kcmVpIEthc2hjaGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBOb2RlSGVhcDtcblxuZnVuY3Rpb24gTm9kZUhlYXAoZGF0YSwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTm9kZUhlYXApKSByZXR1cm4gbmV3IE5vZGVIZWFwKGRhdGEsIG9wdGlvbnMpO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgIC8vIGFzc3VtZSBmaXJzdCBhcmd1bWVudCBpcyBvdXIgY29uZmlnIG9iamVjdDtcbiAgICBvcHRpb25zID0gZGF0YTtcbiAgICBkYXRhID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB0aGlzLmRhdGEgPSBkYXRhIHx8IFtdO1xuICB0aGlzLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gIHRoaXMuY29tcGFyZSA9IG9wdGlvbnMuY29tcGFyZSB8fCBkZWZhdWx0Q29tcGFyZTtcbiAgdGhpcy5zZXROb2RlSWQgPSBvcHRpb25zLnNldE5vZGVJZCB8fCBub29wO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKHZhciBpID0gKHRoaXMubGVuZ3RoID4+IDEpOyBpID49IDA7IGktLSkgdGhpcy5fZG93bihpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnNldE5vZGVJZCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgdGhpcy5zZXROb2RlSWQodGhpcy5kYXRhW2ldLCBpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuXG5Ob2RlSGVhcC5wcm90b3R5cGUgPSB7XG5cbiAgcHVzaDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLmRhdGEucHVzaChpdGVtKTtcbiAgICB0aGlzLnNldE5vZGVJZChpdGVtLCB0aGlzLmxlbmd0aCk7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgICB0aGlzLl91cCh0aGlzLmxlbmd0aCAtIDEpO1xuICB9LFxuXG4gIHBvcDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHZhciB0b3AgPSB0aGlzLmRhdGFbMF07XG4gICAgdGhpcy5sZW5ndGgtLTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZGF0YVswXSA9IHRoaXMuZGF0YVt0aGlzLmxlbmd0aF07XG4gICAgICB0aGlzLnNldE5vZGVJZCh0aGlzLmRhdGFbMF0sIDApO1xuICAgICAgdGhpcy5fZG93bigwKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhLnBvcCgpO1xuXG4gICAgcmV0dXJuIHRvcDtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVswXTtcbiAgfSxcblxuICB1cGRhdGVJdGVtOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgdGhpcy5fZG93bihwb3MpO1xuICAgIHRoaXMuX3VwKHBvcyk7XG4gIH0sXG5cbiAgX3VwOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgdmFyIGNvbXBhcmUgPSB0aGlzLmNvbXBhcmU7XG4gICAgdmFyIHNldE5vZGVJZCA9IHRoaXMuc2V0Tm9kZUlkO1xuICAgIHZhciBpdGVtID0gZGF0YVtwb3NdO1xuXG4gICAgd2hpbGUgKHBvcyA+IDApIHtcbiAgICAgIHZhciBwYXJlbnQgPSAocG9zIC0gMSkgPj4gMTtcbiAgICAgIHZhciBjdXJyZW50ID0gZGF0YVtwYXJlbnRdO1xuICAgICAgaWYgKGNvbXBhcmUoaXRlbSwgY3VycmVudCkgPj0gMCkgYnJlYWs7XG4gICAgICAgIGRhdGFbcG9zXSA9IGN1cnJlbnQ7XG5cbiAgICAgICBzZXROb2RlSWQoY3VycmVudCwgcG9zKTtcbiAgICAgICBwb3MgPSBwYXJlbnQ7XG4gICAgfVxuXG4gICAgZGF0YVtwb3NdID0gaXRlbTtcbiAgICBzZXROb2RlSWQoaXRlbSwgcG9zKTtcbiAgfSxcblxuICBfZG93bjogZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgIHZhciBjb21wYXJlID0gdGhpcy5jb21wYXJlO1xuICAgIHZhciBoYWxmTGVuZ3RoID0gdGhpcy5sZW5ndGggPj4gMTtcbiAgICB2YXIgaXRlbSA9IGRhdGFbcG9zXTtcbiAgICB2YXIgc2V0Tm9kZUlkID0gdGhpcy5zZXROb2RlSWQ7XG5cbiAgICB3aGlsZSAocG9zIDwgaGFsZkxlbmd0aCkge1xuICAgICAgdmFyIGxlZnQgPSAocG9zIDw8IDEpICsgMTtcbiAgICAgIHZhciByaWdodCA9IGxlZnQgKyAxO1xuICAgICAgdmFyIGJlc3QgPSBkYXRhW2xlZnRdO1xuXG4gICAgICBpZiAocmlnaHQgPCB0aGlzLmxlbmd0aCAmJiBjb21wYXJlKGRhdGFbcmlnaHRdLCBiZXN0KSA8IDApIHtcbiAgICAgICAgbGVmdCA9IHJpZ2h0O1xuICAgICAgICBiZXN0ID0gZGF0YVtyaWdodF07XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyZShiZXN0LCBpdGVtKSA+PSAwKSBicmVhaztcblxuICAgICAgZGF0YVtwb3NdID0gYmVzdDtcbiAgICAgIHNldE5vZGVJZChiZXN0LCBwb3MpO1xuICAgICAgcG9zID0gbGVmdDtcbiAgICB9XG5cbiAgICBkYXRhW3Bvc10gPSBpdGVtO1xuICAgIHNldE5vZGVJZChpdGVtLCBwb3MpO1xuICB9XG59OyIsIi8qKlxuICogUGVyZm9ybXMgc3Vib3B0aW1hbCwgZ3JlZWQgQSBTdGFyIHBhdGggZmluZGluZy5cbiAqIFRoaXMgZmluZGVyIGRvZXMgbm90IG5lY2Vzc2FyeSBmaW5kcyB0aGUgc2hvcnRlc3QgcGF0aC4gVGhlIHBhdGhcbiAqIHRoYXQgaXQgZmluZHMgaXMgdmVyeSBjbG9zZSB0byB0aGUgc2hvcnRlc3Qgb25lLiBJdCBpcyB2ZXJ5IGZhc3QgdGhvdWdoLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFTdGFyQmk7XG5cbnZhciBOb2RlSGVhcCA9IHJlcXVpcmUoJy4vTm9kZUhlYXAnKTtcbnZhciBtYWtlU2VhcmNoU3RhdGVQb29sID0gcmVxdWlyZSgnLi9tYWtlU2VhcmNoU3RhdGVQb29sJyk7XG52YXIgaGV1cmlzdGljcyA9IHJlcXVpcmUoJy4vaGV1cmlzdGljcycpO1xudmFyIGRlZmF1bHRTZXR0aW5ncyA9IHJlcXVpcmUoJy4vZGVmYXVsdFNldHRpbmdzJyk7XG5cbnZhciBCWV9GUk9NID0gMTtcbnZhciBCWV9UTyA9IDI7XG52YXIgTk9fUEFUSCA9IGRlZmF1bHRTZXR0aW5ncy5OT19QQVRIO1xuXG5tb2R1bGUuZXhwb3J0cy5sMiA9IGhldXJpc3RpY3MubDI7XG5tb2R1bGUuZXhwb3J0cy5sMSA9IGhldXJpc3RpY3MubDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBwYXRoZmluZGVyLiBBIHBhdGhmaW5kZXIgaGFzIGp1c3Qgb25lIG1ldGhvZDpcbiAqIGBmaW5kKGZyb21JZCwgdG9JZClgLCBpdCBtYXkgYmUgZXh0ZW5kZWQgaW4gZnV0dXJlLlxuICogXG4gKiBOT1RFOiBBbGdvcml0aG0gaW1wbGVtZW50ZWQgaW4gdGhpcyBjb2RlIERPRVMgTk9UIGZpbmQgb3B0aW1hbCBwYXRoLlxuICogWWV0IHRoZSBwYXRoIHRoYXQgaXQgZmluZHMgaXMgYWx3YXlzIG5lYXIgb3B0aW1hbCwgYW5kIGl0IGZpbmRzIGl0IHZlcnkgZmFzdC5cbiAqIFxuICogQHBhcmFtIHtuZ3JhcGguZ3JhcGh9IGdyYXBoIGluc3RhbmNlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FudmFrYS9uZ3JhcGguZ3JhcGhcbiAqIFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhhdCBjb25maWd1cmVzIHNlYXJjaFxuICogQHBhcmFtIHtGdW5jdGlvbihhLCBiKX0gb3B0aW9ucy5oZXVyaXN0aWMgLSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlc3RpbWF0ZWQgZGlzdGFuY2UgYmV0d2VlblxuICogbm9kZXMgYGFgIGFuZCBgYmAuICBEZWZhdWx0cyBmdW5jdGlvbiByZXR1cm5zIDAsIHdoaWNoIG1ha2VzIHRoaXMgc2VhcmNoIGVxdWl2YWxlbnQgdG8gRGlqa3N0cmEgc2VhcmNoLlxuICogQHBhcmFtIHtGdW5jdGlvbihhLCBiKX0gb3B0aW9ucy5kaXN0YW5jZSAtIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFjdHVhbCBkaXN0YW5jZSBiZXR3ZWVuIHR3b1xuICogbm9kZXMgYGFgIGFuZCBgYmAuIEJ5IGRlZmF1bHQgdGhpcyBpcyBzZXQgdG8gcmV0dXJuIGdyYXBoLXRoZW9yZXRpY2FsIGRpc3RhbmNlIChhbHdheXMgMSk7XG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMub3JpZW50ZWQgLSB3aGV0aGVyIGdyYXBoIHNob3VsZCBiZSBjb25zaWRlcmVkIG9yaWVudGVkIG9yIG5vdC5cbiAqIFxuICogQHJldHVybnMge09iamVjdH0gQSBwYXRoZmluZGVyIHdpdGggc2luZ2xlIG1ldGhvZCBgZmluZCgpYC5cbiAqL1xuZnVuY3Rpb24gYVN0YXJCaShncmFwaCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgLy8gd2hldGhlciB0cmF2ZXJzYWwgc2hvdWxkIGJlIGNvbnNpZGVyZWQgb3ZlciBvcmllbnRlZCBncmFwaC5cbiAgdmFyIG9yaWVudGVkID0gb3B0aW9ucy5vcmllbnRlZDtcblxuICB2YXIgaGV1cmlzdGljID0gb3B0aW9ucy5oZXVyaXN0aWM7XG4gIGlmICghaGV1cmlzdGljKSBoZXVyaXN0aWMgPSBkZWZhdWx0U2V0dGluZ3MuaGV1cmlzdGljO1xuXG4gIHZhciBkaXN0YW5jZSA9IG9wdGlvbnMuZGlzdGFuY2U7XG4gIGlmICghZGlzdGFuY2UpIGRpc3RhbmNlID0gZGVmYXVsdFNldHRpbmdzLmRpc3RhbmNlO1xuICB2YXIgcG9vbCA9IG1ha2VTZWFyY2hTdGF0ZVBvb2woKTtcblxuICByZXR1cm4ge1xuICAgIGZpbmQ6IGZpbmRcbiAgfTtcblxuICBmdW5jdGlvbiBmaW5kKGZyb21JZCwgdG9JZCkge1xuICAgIC8vIE5vdCBzdXJlIGlmIHdlIHNob3VsZCByZXR1cm4gTk9fUEFUSCBvciB0aHJvdy4gVGhyb3cgc2VlbSB0byBiZSBtb3JlXG4gICAgLy8gaGVscGZ1bCB0byBkZWJ1ZyBlcnJvcnMuIFNvLCB0aHJvd2luZy5cbiAgICB2YXIgZnJvbSA9IGdyYXBoLmdldE5vZGUoZnJvbUlkKTtcbiAgICBpZiAoIWZyb20pIHRocm93IG5ldyBFcnJvcignZnJvbUlkIGlzIG5vdCBkZWZpbmVkIGluIHRoaXMgZ3JhcGg6ICcgKyBmcm9tSWQpO1xuICAgIHZhciB0byA9IGdyYXBoLmdldE5vZGUodG9JZCk7XG4gICAgaWYgKCF0bykgdGhyb3cgbmV3IEVycm9yKCd0b0lkIGlzIG5vdCBkZWZpbmVkIGluIHRoaXMgZ3JhcGg6ICcgKyB0b0lkKTtcblxuICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuIFtmcm9tXTsgLy8gdHJpdmlhbCBjYXNlLlxuXG4gICAgcG9vbC5yZXNldCgpO1xuXG4gICAgdmFyIGNhbGxWaXNpdG9yID0gb3JpZW50ZWQgPyBvcmllbnRlZFZpc2l0b3IgOiBub25PcmllbnRlZFZpc2l0b3I7XG5cbiAgICAvLyBNYXBzIG5vZGVJZCB0byBOb2RlU2VhcmNoU3RhdGUuXG4gICAgdmFyIG5vZGVTdGF0ZSA9IG5ldyBNYXAoKTtcblxuICAgIHZhciBvcGVuU2V0RnJvbSA9IG5ldyBOb2RlSGVhcCh7XG4gICAgICBjb21wYXJlOiBkZWZhdWx0U2V0dGluZ3MuY29tcGFyZUZTY29yZSxcbiAgICAgIHNldE5vZGVJZDogZGVmYXVsdFNldHRpbmdzLnNldEhlYXBJbmRleFxuICAgIH0pO1xuXG4gICAgdmFyIG9wZW5TZXRUbyA9IG5ldyBOb2RlSGVhcCh7XG4gICAgICBjb21wYXJlOiBkZWZhdWx0U2V0dGluZ3MuY29tcGFyZUZTY29yZSxcbiAgICAgIHNldE5vZGVJZDogZGVmYXVsdFNldHRpbmdzLnNldEhlYXBJbmRleFxuICAgIH0pO1xuXG5cbiAgICB2YXIgc3RhcnROb2RlID0gcG9vbC5jcmVhdGVOZXdTdGF0ZShmcm9tKTtcbiAgICBub2RlU3RhdGUuc2V0KGZyb21JZCwgc3RhcnROb2RlKTtcblxuICAgIC8vIEZvciB0aGUgZmlyc3Qgbm9kZSwgZlNjb3JlIGlzIGNvbXBsZXRlbHkgaGV1cmlzdGljLlxuICAgIHN0YXJ0Tm9kZS5mU2NvcmUgPSBoZXVyaXN0aWMoZnJvbSwgdG8pO1xuICAgIC8vIFRoZSBjb3N0IG9mIGdvaW5nIGZyb20gc3RhcnQgdG8gc3RhcnQgaXMgemVyby5cbiAgICBzdGFydE5vZGUuZGlzdGFuY2VUb1NvdXJjZSA9IDA7XG4gICAgb3BlblNldEZyb20ucHVzaChzdGFydE5vZGUpO1xuICAgIHN0YXJ0Tm9kZS5vcGVuID0gQllfRlJPTTtcblxuICAgIHZhciBlbmROb2RlID0gcG9vbC5jcmVhdGVOZXdTdGF0ZSh0byk7XG4gICAgZW5kTm9kZS5mU2NvcmUgPSBoZXVyaXN0aWModG8sIGZyb20pO1xuICAgIGVuZE5vZGUuZGlzdGFuY2VUb1NvdXJjZSA9IDA7XG4gICAgb3BlblNldFRvLnB1c2goZW5kTm9kZSk7XG4gICAgZW5kTm9kZS5vcGVuID0gQllfVE87XG5cbiAgICAvLyBDb3N0IG9mIHRoZSBiZXN0IHNvbHV0aW9uIGZvdW5kIHNvIGZhci4gVXNlZCBmb3IgYWNjdXJhdGUgdGVybWluYXRpb25cbiAgICB2YXIgbE1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB2YXIgbWluRnJvbTtcbiAgICB2YXIgbWluVG87XG5cbiAgICB2YXIgY3VycmVudFNldCA9IG9wZW5TZXRGcm9tO1xuICAgIHZhciBjdXJyZW50T3BlbmVyID0gQllfRlJPTTtcblxuICAgIHdoaWxlIChvcGVuU2V0RnJvbS5sZW5ndGggPiAwICYmIG9wZW5TZXRUby5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAob3BlblNldEZyb20ubGVuZ3RoIDwgb3BlblNldFRvLmxlbmd0aCkge1xuICAgICAgICAvLyB3ZSBwaWNrIGEgc2V0IHdpdGggbGVzcyBlbGVtZW50c1xuICAgICAgICBjdXJyZW50T3BlbmVyID0gQllfRlJPTTtcbiAgICAgICAgY3VycmVudFNldCA9IG9wZW5TZXRGcm9tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudE9wZW5lciA9IEJZX1RPO1xuICAgICAgICBjdXJyZW50U2V0ID0gb3BlblNldFRvO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudCA9IGN1cnJlbnRTZXQucG9wKCk7XG5cbiAgICAgIC8vIG5vIG5lZWQgdG8gdmlzaXQgdGhpcyBub2RlIGFueW1vcmVcbiAgICAgIGN1cnJlbnQuY2xvc2VkID0gdHJ1ZTtcblxuICAgICAgaWYgKGN1cnJlbnQuZGlzdGFuY2VUb1NvdXJjZSA+IGxNaW4pIGNvbnRpbnVlO1xuXG4gICAgICBncmFwaC5mb3JFYWNoTGlua2VkTm9kZShjdXJyZW50Lm5vZGUuaWQsIGNhbGxWaXNpdG9yKTtcblxuICAgICAgaWYgKG1pbkZyb20gJiYgbWluVG8pIHtcbiAgICAgICAgLy8gVGhpcyBpcyBub3QgbmVjZXNzYXJ5IHRoZSBiZXN0IHBhdGgsIGJ1dCB3ZSBhcmUgc28gZ3JlZWR5IHRoYXQgd2VcbiAgICAgICAgLy8gY2FuJ3QgcmVzaXN0OlxuICAgICAgICByZXR1cm4gcmVjb25zdHJ1Y3RCaURpcmVjdGlvbmFsUGF0aChtaW5Gcm9tLCBtaW5Ubyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE5PX1BBVEg7IC8vIE5vIHBhdGguXG5cbiAgICBmdW5jdGlvbiBub25PcmllbnRlZFZpc2l0b3Iob3RoZXJOb2RlLCBsaW5rKSB7XG4gICAgICByZXR1cm4gdmlzaXROb2RlKG90aGVyTm9kZSwgbGluaywgY3VycmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3JpZW50ZWRWaXNpdG9yKG90aGVyTm9kZSwgbGluaykge1xuICAgICAgLy8gRm9yIG9yaXRuZWQgZ3JhcGhzIHdlIG5lZWQgdG8gcmV2ZXJzZSBncmFwaCwgd2hlbiB0cmF2ZWxpbmdcbiAgICAgIC8vIGJhY2t3YXJkcy4gU28sIHdlIHVzZSBub24tb3JpZW50ZWQgbmdyYXBoJ3MgdHJhdmVyc2FsLCBhbmQgXG4gICAgICAvLyBmaWx0ZXIgbGluayBvcmllbnRhdGlvbiBoZXJlLlxuICAgICAgaWYgKGN1cnJlbnRPcGVuZXIgPT09IEJZX0ZST00pIHtcbiAgICAgICAgaWYgKGxpbmsuZnJvbUlkID09PSBjdXJyZW50Lm5vZGUuaWQpIHJldHVybiB2aXNpdE5vZGUob3RoZXJOb2RlLCBsaW5rLCBjdXJyZW50KVxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50T3BlbmVyID09PSBCWV9UTykge1xuICAgICAgICBpZiAobGluay50b0lkID09PSBjdXJyZW50Lm5vZGUuaWQpIHJldHVybiB2aXNpdE5vZGUob3RoZXJOb2RlLCBsaW5rLCBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5FeGl0KGN1cnJlbnROb2RlKSB7XG4gICAgICB2YXIgb3BlbmVyID0gY3VycmVudE5vZGUub3BlblxuICAgICAgaWYgKG9wZW5lciAmJiBvcGVuZXIgIT09IGN1cnJlbnRPcGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWNvbnN0cnVjdEJpRGlyZWN0aW9uYWxQYXRoKGEsIGIpIHtcbiAgICAgIHZhciBwYXRoT2ZOb2RlcyA9IFtdO1xuICAgICAgdmFyIGFQYXJlbnQgPSBhO1xuICAgICAgd2hpbGUoYVBhcmVudCkge1xuICAgICAgICBwYXRoT2ZOb2Rlcy5wdXNoKGFQYXJlbnQubm9kZSk7XG4gICAgICAgIGFQYXJlbnQgPSBhUGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIHZhciBiUGFyZW50ID0gYjtcbiAgICAgIHdoaWxlIChiUGFyZW50KSB7XG4gICAgICAgIHBhdGhPZk5vZGVzLnVuc2hpZnQoYlBhcmVudC5ub2RlKTtcbiAgICAgICAgYlBhcmVudCA9IGJQYXJlbnQucGFyZW50XG4gICAgICB9XG4gICAgICByZXR1cm4gcGF0aE9mTm9kZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmlzaXROb2RlKG90aGVyTm9kZSwgbGluaywgY2FtZUZyb20pIHtcbiAgICAgIHZhciBvdGhlclNlYXJjaFN0YXRlID0gbm9kZVN0YXRlLmdldChvdGhlck5vZGUuaWQpO1xuICAgICAgaWYgKCFvdGhlclNlYXJjaFN0YXRlKSB7XG4gICAgICAgIG90aGVyU2VhcmNoU3RhdGUgPSBwb29sLmNyZWF0ZU5ld1N0YXRlKG90aGVyTm9kZSk7XG4gICAgICAgIG5vZGVTdGF0ZS5zZXQob3RoZXJOb2RlLmlkLCBvdGhlclNlYXJjaFN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG90aGVyU2VhcmNoU3RhdGUuY2xvc2VkKSB7XG4gICAgICAgIC8vIEFscmVhZHkgcHJvY2Vzc2VkIHRoaXMgbm9kZS5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FuRXhpdChvdGhlclNlYXJjaFN0YXRlLCBjYW1lRnJvbSkpIHtcbiAgICAgICAgLy8gdGhpcyBub2RlIHdhcyBvcGVuZWQgYnkgYWx0ZXJuYXRpdmUgb3BlbmVyLiBUaGUgc2V0cyBpbnRlcnNlY3Qgbm93LFxuICAgICAgICAvLyB3ZSBmb3VuZCBhbiBvcHRpbWFsIHBhdGgsIHRoYXQgZ29lcyB0aHJvdWdoICp0aGlzKiBub2RlLiBIb3dldmVyLCB0aGVyZVxuICAgICAgICAvLyBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGlzIGlzIHRoZSBnbG9iYWwgb3B0aW1hbCBzb2x1dGlvbiBwYXRoLlxuXG4gICAgICAgIHZhciBwb3RlbnRpYWxMTWluID0gb3RoZXJTZWFyY2hTdGF0ZS5kaXN0YW5jZVRvU291cmNlICsgY2FtZUZyb20uZGlzdGFuY2VUb1NvdXJjZTtcbiAgICAgICAgaWYgKHBvdGVudGlhbExNaW4gPCBsTWluKSB7XG4gICAgICAgICAgbWluRnJvbSA9IG90aGVyU2VhcmNoU3RhdGU7XG4gICAgICAgICAgbWluVG8gPSBjYW1lRnJvbVxuICAgICAgICAgIGxNaW4gPSBwb3RlbnRpYWxMTWluO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGFyZSBkb25lIHdpdGggdGhpcyBub2RlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZW50YXRpdmVEaXN0YW5jZSA9IGNhbWVGcm9tLmRpc3RhbmNlVG9Tb3VyY2UgKyBkaXN0YW5jZShvdGhlclNlYXJjaFN0YXRlLm5vZGUsIGNhbWVGcm9tLm5vZGUsIGxpbmspO1xuXG4gICAgICBpZiAodGVudGF0aXZlRGlzdGFuY2UgPj0gb3RoZXJTZWFyY2hTdGF0ZS5kaXN0YW5jZVRvU291cmNlKSB7XG4gICAgICAgIC8vIFRoaXMgd291bGQgb25seSBtYWtlIG91ciBwYXRoIGxvbmdlci4gSWdub3JlIHRoaXMgcm91dGUuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hvb3NlIHRhcmdldCBiYXNlZCBvbiBjdXJyZW50IHdvcmtpbmcgc2V0OlxuICAgICAgdmFyIHRhcmdldCA9IChjdXJyZW50T3BlbmVyID09PSBCWV9GUk9NKSA/IHRvIDogZnJvbTtcbiAgICAgIHZhciBuZXdGU2NvcmUgPSB0ZW50YXRpdmVEaXN0YW5jZSArIGhldXJpc3RpYyhvdGhlclNlYXJjaFN0YXRlLm5vZGUsIHRhcmdldCk7XG4gICAgICBpZiAobmV3RlNjb3JlID49IGxNaW4pIHtcbiAgICAgICAgLy8gdGhpcyBjYW4ndCBiZSBvcHRpbWFsIHBhdGgsIGFzIHdlIGhhdmUgYWxyZWFkeSBmb3VuZCBhIHNob3J0ZXIgcGF0aC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgb3RoZXJTZWFyY2hTdGF0ZS5mU2NvcmUgPSBuZXdGU2NvcmU7XG5cbiAgICAgIGlmIChvdGhlclNlYXJjaFN0YXRlLm9wZW4gPT09IDApIHtcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBub2RlIGluIHRoZSBjdXJyZW50IHNldFxuICAgICAgICBjdXJyZW50U2V0LnB1c2gob3RoZXJTZWFyY2hTdGF0ZSk7XG4gICAgICAgIGN1cnJlbnRTZXQudXBkYXRlSXRlbShvdGhlclNlYXJjaFN0YXRlLmhlYXBJbmRleCk7XG5cbiAgICAgICAgb3RoZXJTZWFyY2hTdGF0ZS5vcGVuID0gY3VycmVudE9wZW5lcjtcbiAgICAgIH1cblxuICAgICAgLy8gYmluZ28hIHdlIGZvdW5kIHNob3J0ZXIgcGF0aDpcbiAgICAgIG90aGVyU2VhcmNoU3RhdGUucGFyZW50ID0gY2FtZUZyb207XG4gICAgICBvdGhlclNlYXJjaFN0YXRlLmRpc3RhbmNlVG9Tb3VyY2UgPSB0ZW50YXRpdmVEaXN0YW5jZTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogUGVyZm9ybXMgYSB1bmktZGlyZWN0aW9uYWwgQSBTdGFyIHNlYXJjaCBvbiBncmFwaC5cbiAqIFxuICogV2Ugd2lsbCB0cnkgdG8gbWluaW1pemUgZihuKSA9IGcobikgKyBoKG4pLCB3aGVyZVxuICogZyhuKSBpcyBhY3R1YWwgZGlzdGFuY2UgZnJvbSBzb3VyY2Ugbm9kZSB0byBgbmAsIGFuZFxuICogaChuKSBpcyBoZXVyaXN0aWMgZGlzdGFuY2UgZnJvbSBgbmAgdG8gdGFyZ2V0IG5vZGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYVN0YXJQYXRoU2VhcmNoO1xuXG52YXIgTm9kZUhlYXAgPSByZXF1aXJlKCcuL05vZGVIZWFwJyk7XG52YXIgbWFrZVNlYXJjaFN0YXRlUG9vbCA9IHJlcXVpcmUoJy4vbWFrZVNlYXJjaFN0YXRlUG9vbCcpO1xudmFyIGhldXJpc3RpY3MgPSByZXF1aXJlKCcuL2hldXJpc3RpY3MnKTtcbnZhciBkZWZhdWx0U2V0dGluZ3MgPSByZXF1aXJlKCcuL2RlZmF1bHRTZXR0aW5ncy5qcycpO1xuXG52YXIgTk9fUEFUSCA9IGRlZmF1bHRTZXR0aW5ncy5OT19QQVRIO1xuXG5tb2R1bGUuZXhwb3J0cy5sMiA9IGhldXJpc3RpY3MubDI7XG5tb2R1bGUuZXhwb3J0cy5sMSA9IGhldXJpc3RpY3MubDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBwYXRoZmluZGVyLiBBIHBhdGhmaW5kZXIgaGFzIGp1c3Qgb25lIG1ldGhvZDpcbiAqIGBmaW5kKGZyb21JZCwgdG9JZClgLCBpdCBtYXkgYmUgZXh0ZW5kZWQgaW4gZnV0dXJlLlxuICogXG4gKiBAcGFyYW0ge25ncmFwaC5ncmFwaH0gZ3JhcGggaW5zdGFuY2UuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW52YWthL25ncmFwaC5ncmFwaFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhhdCBjb25maWd1cmVzIHNlYXJjaFxuICogQHBhcmFtIHtGdW5jdGlvbihhLCBiKX0gb3B0aW9ucy5oZXVyaXN0aWMgLSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlc3RpbWF0ZWQgZGlzdGFuY2UgYmV0d2VlblxuICogbm9kZXMgYGFgIGFuZCBgYmAuIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG5ldmVyIG92ZXJlc3RpbWF0ZSBhY3R1YWwgZGlzdGFuY2UgYmV0d2VlbiB0d29cbiAqIG5vZGVzIChvdGhlcndpc2UgdGhlIGZvdW5kIHBhdGggd2lsbCBub3QgYmUgdGhlIHNob3J0ZXN0KS4gRGVmYXVsdHMgZnVuY3Rpb24gcmV0dXJucyAwLFxuICogd2hpY2ggbWFrZXMgdGhpcyBzZWFyY2ggZXF1aXZhbGVudCB0byBEaWprc3RyYSBzZWFyY2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9uKGEsIGIpfSBvcHRpb25zLmRpc3RhbmNlIC0gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYWN0dWFsIGRpc3RhbmNlIGJldHdlZW4gdHdvXG4gKiBub2RlcyBgYWAgYW5kIGBiYC4gQnkgZGVmYXVsdCB0aGlzIGlzIHNldCB0byByZXR1cm4gZ3JhcGgtdGhlb3JldGljYWwgZGlzdGFuY2UgKGFsd2F5cyAxKTtcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5vcmllbnRlZCAtIHdoZXRoZXIgZ3JhcGggc2hvdWxkIGJlIGNvbnNpZGVyZWQgb3JpZW50ZWQgb3Igbm90LlxuICogXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBIHBhdGhmaW5kZXIgd2l0aCBzaW5nbGUgbWV0aG9kIGBmaW5kKClgLlxuICovXG5mdW5jdGlvbiBhU3RhclBhdGhTZWFyY2goZ3JhcGgsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIC8vIHdoZXRoZXIgdHJhdmVyc2FsIHNob3VsZCBiZSBjb25zaWRlcmVkIG92ZXIgb3JpZW50ZWQgZ3JhcGguXG4gIHZhciBvcmllbnRlZCA9IG9wdGlvbnMub3JpZW50ZWQ7XG5cbiAgdmFyIGhldXJpc3RpYyA9IG9wdGlvbnMuaGV1cmlzdGljO1xuICBpZiAoIWhldXJpc3RpYykgaGV1cmlzdGljID0gZGVmYXVsdFNldHRpbmdzLmhldXJpc3RpYztcblxuICB2YXIgZGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlO1xuICBpZiAoIWRpc3RhbmNlKSBkaXN0YW5jZSA9IGRlZmF1bHRTZXR0aW5ncy5kaXN0YW5jZTtcbiAgdmFyIHBvb2wgPSBtYWtlU2VhcmNoU3RhdGVQb29sKCk7XG5cbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBGaW5kcyBhIHBhdGggYmV0d2VlbiBub2RlIGBmcm9tSWRgIGFuZCBgdG9JZGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBvZiBub2RlcyBiZXR3ZWVuIGB0b0lkYCBhbmQgYGZyb21JZGAuIEVtcHR5IGFycmF5IGlzIHJldHVybmVkXG4gICAgICogaWYgbm8gcGF0aCBpcyBmb3VuZC5cbiAgICAgKi9cbiAgICBmaW5kOiBmaW5kXG4gIH07XG5cbiAgZnVuY3Rpb24gZmluZChmcm9tSWQsIHRvSWQpIHtcbiAgICB2YXIgZnJvbSA9IGdyYXBoLmdldE5vZGUoZnJvbUlkKTtcbiAgICBpZiAoIWZyb20pIHRocm93IG5ldyBFcnJvcignZnJvbUlkIGlzIG5vdCBkZWZpbmVkIGluIHRoaXMgZ3JhcGg6ICcgKyBmcm9tSWQpO1xuICAgIHZhciB0byA9IGdyYXBoLmdldE5vZGUodG9JZCk7XG4gICAgaWYgKCF0bykgdGhyb3cgbmV3IEVycm9yKCd0b0lkIGlzIG5vdCBkZWZpbmVkIGluIHRoaXMgZ3JhcGg6ICcgKyB0b0lkKTtcbiAgICBwb29sLnJlc2V0KCk7XG5cbiAgICAvLyBNYXBzIG5vZGVJZCB0byBOb2RlU2VhcmNoU3RhdGUuXG4gICAgdmFyIG5vZGVTdGF0ZSA9IG5ldyBNYXAoKTtcblxuICAgIC8vIHRoZSBub2RlcyB0aGF0IHdlIHN0aWxsIG5lZWQgdG8gZXZhbHVhdGVcbiAgICB2YXIgb3BlblNldCA9IG5ldyBOb2RlSGVhcCh7XG4gICAgICBjb21wYXJlOiBkZWZhdWx0U2V0dGluZ3MuY29tcGFyZUZTY29yZSxcbiAgICAgIHNldE5vZGVJZDogZGVmYXVsdFNldHRpbmdzLnNldEhlYXBJbmRleFxuICAgIH0pO1xuXG4gICAgdmFyIHN0YXJ0Tm9kZSA9IHBvb2wuY3JlYXRlTmV3U3RhdGUoZnJvbSk7XG4gICAgbm9kZVN0YXRlLnNldChmcm9tSWQsIHN0YXJ0Tm9kZSk7XG5cbiAgICAvLyBGb3IgdGhlIGZpcnN0IG5vZGUsIGZTY29yZSBpcyBjb21wbGV0ZWx5IGhldXJpc3RpYy5cbiAgICBzdGFydE5vZGUuZlNjb3JlID0gaGV1cmlzdGljKGZyb20sIHRvKTtcblxuICAgIC8vIFRoZSBjb3N0IG9mIGdvaW5nIGZyb20gc3RhcnQgdG8gc3RhcnQgaXMgemVyby5cbiAgICBzdGFydE5vZGUuZGlzdGFuY2VUb1NvdXJjZSA9IDA7XG4gICAgb3BlblNldC5wdXNoKHN0YXJ0Tm9kZSk7XG4gICAgc3RhcnROb2RlLm9wZW4gPSAxO1xuXG4gICAgdmFyIGNhbWVGcm9tO1xuXG4gICAgd2hpbGUgKG9wZW5TZXQubGVuZ3RoID4gMCkge1xuICAgICAgY2FtZUZyb20gPSBvcGVuU2V0LnBvcCgpO1xuICAgICAgaWYgKGdvYWxSZWFjaGVkKGNhbWVGcm9tLCB0bykpIHJldHVybiByZWNvbnN0cnVjdFBhdGgoY2FtZUZyb20pO1xuXG4gICAgICAvLyBubyBuZWVkIHRvIHZpc2l0IHRoaXMgbm9kZSBhbnltb3JlXG4gICAgICBjYW1lRnJvbS5jbG9zZWQgPSB0cnVlO1xuICAgICAgZ3JhcGguZm9yRWFjaExpbmtlZE5vZGUoY2FtZUZyb20ubm9kZS5pZCwgdmlzaXROZWlnaGJvdXIsIG9yaWVudGVkKTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnb3QgaGVyZSwgdGhlbiB0aGVyZSBpcyBubyBwYXRoLlxuICAgIHJldHVybiBOT19QQVRIO1xuXG4gICAgZnVuY3Rpb24gdmlzaXROZWlnaGJvdXIob3RoZXJOb2RlLCBsaW5rKSB7XG4gICAgICB2YXIgb3RoZXJTZWFyY2hTdGF0ZSA9IG5vZGVTdGF0ZS5nZXQob3RoZXJOb2RlLmlkKTtcbiAgICAgIGlmICghb3RoZXJTZWFyY2hTdGF0ZSkge1xuICAgICAgICBvdGhlclNlYXJjaFN0YXRlID0gcG9vbC5jcmVhdGVOZXdTdGF0ZShvdGhlck5vZGUpO1xuICAgICAgICBub2RlU3RhdGUuc2V0KG90aGVyTm9kZS5pZCwgb3RoZXJTZWFyY2hTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdGhlclNlYXJjaFN0YXRlLmNsb3NlZCkge1xuICAgICAgICAvLyBBbHJlYWR5IHByb2Nlc3NlZCB0aGlzIG5vZGUuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvdGhlclNlYXJjaFN0YXRlLm9wZW4gPT09IDApIHtcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBub2RlLlxuICAgICAgICBvcGVuU2V0LnB1c2gob3RoZXJTZWFyY2hTdGF0ZSk7XG4gICAgICAgIG90aGVyU2VhcmNoU3RhdGUub3BlbiA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZW50YXRpdmVEaXN0YW5jZSA9IGNhbWVGcm9tLmRpc3RhbmNlVG9Tb3VyY2UgKyBkaXN0YW5jZShvdGhlck5vZGUsIGNhbWVGcm9tLm5vZGUsIGxpbmspO1xuICAgICAgaWYgKHRlbnRhdGl2ZURpc3RhbmNlID49IG90aGVyU2VhcmNoU3RhdGUuZGlzdGFuY2VUb1NvdXJjZSkge1xuICAgICAgICAvLyBUaGlzIHdvdWxkIG9ubHkgbWFrZSBvdXIgcGF0aCBsb25nZXIuIElnbm9yZSB0aGlzIHJvdXRlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGJpbmdvISB3ZSBmb3VuZCBzaG9ydGVyIHBhdGg6XG4gICAgICBvdGhlclNlYXJjaFN0YXRlLnBhcmVudCA9IGNhbWVGcm9tO1xuICAgICAgb3RoZXJTZWFyY2hTdGF0ZS5kaXN0YW5jZVRvU291cmNlID0gdGVudGF0aXZlRGlzdGFuY2U7XG4gICAgICBvdGhlclNlYXJjaFN0YXRlLmZTY29yZSA9IHRlbnRhdGl2ZURpc3RhbmNlICsgaGV1cmlzdGljKG90aGVyU2VhcmNoU3RhdGUubm9kZSwgdG8pO1xuXG4gICAgICBvcGVuU2V0LnVwZGF0ZUl0ZW0ob3RoZXJTZWFyY2hTdGF0ZS5oZWFwSW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnb2FsUmVhY2hlZChzZWFyY2hTdGF0ZSwgdGFyZ2V0Tm9kZSkge1xuICByZXR1cm4gc2VhcmNoU3RhdGUubm9kZSA9PT0gdGFyZ2V0Tm9kZTtcbn1cblxuZnVuY3Rpb24gcmVjb25zdHJ1Y3RQYXRoKHNlYXJjaFN0YXRlKSB7XG4gIHZhciBwYXRoID0gW3NlYXJjaFN0YXRlLm5vZGVdO1xuICB2YXIgcGFyZW50ID0gc2VhcmNoU3RhdGUucGFyZW50O1xuXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBwYXRoLnB1c2gocGFyZW50Lm5vZGUpO1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cbiIsIi8vIFdlIHJldXNlIGluc3RhbmNlIG9mIGFycmF5LCBidXQgd2UgdHJpZSB0byBmcmVlemUgaXQgYXMgd2VsbCxcbi8vIHNvIHRoYXQgY29uc3VtZXJzIGRvbid0IG1vZGlmeSBpdC4gTWF5YmUgaXQncyBhIGJhZCBpZGVhLlxudmFyIE5PX1BBVEggPSBbXTtcbmlmICh0eXBlb2YgT2JqZWN0LmZyZWV6ZSA9PT0gJ2Z1bmN0aW9uJykgT2JqZWN0LmZyZWV6ZShOT19QQVRIKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIFBhdGggc2VhcmNoIHNldHRpbmdzXG4gIGhldXJpc3RpYzogYmxpbmRIZXVyaXN0aWMsXG4gIGRpc3RhbmNlOiBjb25zdGFudERpc3RhbmNlLFxuICBjb21wYXJlRlNjb3JlOiBjb21wYXJlRlNjb3JlLFxuICBOT19QQVRIOiBOT19QQVRILFxuXG4gIC8vIGhlYXAgc2V0dGluZ3NcbiAgc2V0SGVhcEluZGV4OiBzZXRIZWFwSW5kZXgsXG5cbiAgLy8gbmJhOlxuICBzZXRIMTogc2V0SDEsXG4gIHNldEgyOiBzZXRIMixcbiAgY29tcGFyZUYxU2NvcmU6IGNvbXBhcmVGMVNjb3JlLFxuICBjb21wYXJlRjJTY29yZTogY29tcGFyZUYyU2NvcmUsXG59XG5cbmZ1bmN0aW9uIGJsaW5kSGV1cmlzdGljKC8qIGEsIGIgKi8pIHtcbiAgLy8gYmxpbmQgaGV1cmlzdGljIG1ha2VzIHRoaXMgc2VhcmNoIGVxdWFsIHRvIHBsYWluIERpamtzdHJhIHBhdGggc2VhcmNoLlxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnREaXN0YW5jZSgvKiBhLCBiICovKSB7XG4gIHJldHVybiAxO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlRlNjb3JlKGEsIGIpIHtcbiAgdmFyIHJlc3VsdCA9IGEuZlNjb3JlIC0gYi5mU2NvcmU7XG4gIC8vIFRPRE86IENhbiBJIGltcHJvdmUgc3BlZWQgd2l0aCBzbWFydGVyIHRpZXMtYnJlYWtpbmc/XG4gIC8vIEkgdHJpZWQgZGlzdGFuY2VUb1NvdXJjZSwgYnV0IGl0IGRpZG4ndCBzZWVtIHRvIGhhdmUgbXVjaCBlZmZlY3RcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc2V0SGVhcEluZGV4KG5vZGVTZWFyY2hTdGF0ZSwgaGVhcEluZGV4KSB7XG4gIG5vZGVTZWFyY2hTdGF0ZS5oZWFwSW5kZXggPSBoZWFwSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVGMVNjb3JlKGEsIGIpIHtcbiAgcmV0dXJuIGEuZjEgLSBiLmYxO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlRjJTY29yZShhLCBiKSB7XG4gIHJldHVybiBhLmYyIC0gYi5mMjtcbn1cblxuZnVuY3Rpb24gc2V0SDEobm9kZSwgaGVhcEluZGV4KSB7XG4gIG5vZGUuaDEgPSBoZWFwSW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNldEgyKG5vZGUsIGhlYXBJbmRleCkge1xuICBub2RlLmgyID0gaGVhcEluZGV4O1xufSIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBsMjogbDIsXG4gIGwxOiBsMVxufTtcblxuLyoqXG4gKiBFdWNsaWQgZGlzdGFuY2UgKGwyIG5vcm0pO1xuICogXG4gKiBAcGFyYW0geyp9IGEgXG4gKiBAcGFyYW0geyp9IGIgXG4gKi9cbmZ1bmN0aW9uIGwyKGEsIGIpIHtcbiAgdmFyIGR4ID0gYS54IC0gYi54O1xuICB2YXIgZHkgPSBhLnkgLSBiLnk7XG4gIHJldHVybiBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xufVxuXG4vKipcbiAqIE1hbmhhdHRhbiBkaXN0YW5jZSAobDEgbm9ybSk7XG4gKiBAcGFyYW0geyp9IGEgXG4gKiBAcGFyYW0geyp9IGIgXG4gKi9cbmZ1bmN0aW9uIGwxKGEsIGIpIHtcbiAgdmFyIGR4ID0gYS54IC0gYi54O1xuICB2YXIgZHkgPSBhLnkgLSBiLnk7XG4gIHJldHVybiBNYXRoLmFicyhkeCkgKyBNYXRoLmFicyhkeSk7XG59XG4iLCIvKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIHNpbmdsZSBzZWFyY2ggbm9kZSBpbiB0aGUgZXhwbG9yYXRpb24gdHJlZSBmb3JcbiAqIEEqIGFsZ29yaXRobS5cbiAqIFxuICogQHBhcmFtIHtPYmplY3R9IG5vZGUgIG9yaWdpbmFsIG5vZGUgaW4gdGhlIGdyYXBoXG4gKi9cbmZ1bmN0aW9uIE5vZGVTZWFyY2hTdGF0ZShub2RlKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG5cbiAgLy8gSG93IHdlIGNhbWUgdG8gdGhpcyBub2RlP1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG5cbiAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgdGhpcy5vcGVuID0gMDtcblxuICB0aGlzLmRpc3RhbmNlVG9Tb3VyY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIC8vIHRoZSBmKG4pID0gZyhuKSArIGgobikgdmFsdWVcbiAgdGhpcy5mU2NvcmUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbiAgLy8gdXNlZCB0byByZWNvbnN0cnVjdCBoZWFwIHdoZW4gZlNjb3JlIGlzIHVwZGF0ZWQuXG4gIHRoaXMuaGVhcEluZGV4ID0gLTE7XG59O1xuXG5mdW5jdGlvbiBtYWtlU2VhcmNoU3RhdGVQb29sKCkge1xuICB2YXIgY3VycmVudEluQ2FjaGUgPSAwO1xuICB2YXIgbm9kZUNhY2hlID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVOZXdTdGF0ZTogY3JlYXRlTmV3U3RhdGUsXG4gICAgcmVzZXQ6IHJlc2V0XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY3VycmVudEluQ2FjaGUgPSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTmV3U3RhdGUobm9kZSkge1xuICAgIHZhciBjYWNoZWQgPSBub2RlQ2FjaGVbY3VycmVudEluQ2FjaGVdO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIC8vIFRPRE86IFRoaXMgYWxtb3N0IGR1cGxpY2F0ZXMgY29uc3RydWN0b3IgY29kZS4gTm90IHN1cmUgaWZcbiAgICAgIC8vIGl0IHdvdWxkIGltcGFjdCBwZXJmb3JtYW5jZSBpZiBJIG1vdmUgdGhpcyBjb2RlIGludG8gYSBmdW5jdGlvblxuICAgICAgY2FjaGVkLm5vZGUgPSBub2RlO1xuICAgICAgLy8gSG93IHdlIGNhbWUgdG8gdGhpcyBub2RlP1xuICAgICAgY2FjaGVkLnBhcmVudCA9IG51bGw7XG5cbiAgICAgIGNhY2hlZC5jbG9zZWQgPSBmYWxzZTtcbiAgICAgIGNhY2hlZC5vcGVuID0gMDtcblxuICAgICAgY2FjaGVkLmRpc3RhbmNlVG9Tb3VyY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAvLyB0aGUgZihuKSA9IGcobikgKyBoKG4pIHZhbHVlXG4gICAgICBjYWNoZWQuZlNjb3JlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gICAgICAvLyB1c2VkIHRvIHJlY29uc3RydWN0IGhlYXAgd2hlbiBmU2NvcmUgaXMgdXBkYXRlZC5cbiAgICAgIGNhY2hlZC5oZWFwSW5kZXggPSAtMTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWQgPSBuZXcgTm9kZVNlYXJjaFN0YXRlKG5vZGUpO1xuICAgICAgbm9kZUNhY2hlW2N1cnJlbnRJbkNhY2hlXSA9IGNhY2hlZDtcbiAgICB9XG4gICAgY3VycmVudEluQ2FjaGUrKztcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IG1ha2VTZWFyY2hTdGF0ZVBvb2w7IiwibW9kdWxlLmV4cG9ydHMgPSBuYmE7XG5cbnZhciBOb2RlSGVhcCA9IHJlcXVpcmUoJy4uL05vZGVIZWFwJyk7XG52YXIgaGV1cmlzdGljcyA9IHJlcXVpcmUoJy4uL2hldXJpc3RpY3MnKTtcbnZhciBkZWZhdWx0U2V0dGluZ3MgPSByZXF1aXJlKCcuLi9kZWZhdWx0U2V0dGluZ3MuanMnKTtcbnZhciBtYWtlTkJBU2VhcmNoU3RhdGVQb29sID0gcmVxdWlyZSgnLi9tYWtlTkJBU2VhcmNoU3RhdGVQb29sLmpzJyk7XG5cbnZhciBOT19QQVRIID0gZGVmYXVsdFNldHRpbmdzLk5PX1BBVEg7XG5cbm1vZHVsZS5leHBvcnRzLmwyID0gaGV1cmlzdGljcy5sMjtcbm1vZHVsZS5leHBvcnRzLmwxID0gaGV1cmlzdGljcy5sMTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHBhdGhmaW5kZXIuIEEgcGF0aGZpbmRlciBoYXMganVzdCBvbmUgbWV0aG9kOlxuICogYGZpbmQoZnJvbUlkLCB0b0lkKWAuXG4gKiBcbiAqIFRoaXMgaXMgaW1wbGVtZW50YXRpb24gb2YgdGhlIE5CQSogYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiBcbiAqIFxuICogIFwiWWV0IGFub3RoZXIgYmlkaXJlY3Rpb25hbCBhbGdvcml0aG0gZm9yIHNob3J0ZXN0IHBhdGhzXCIgcGFwZXIgYnkgV2ltIFBpamxzIGFuZCBIZW5rIFBvc3RcbiAqIFxuICogVGhlIHBhcGVyIGlzIGF2YWlsYWJsZSBoZXJlOiBodHRwczovL3JlcHViLmV1ci5ubC9wdWIvMTYxMDAvZWkyMDA5LTEwLnBkZlxuICogXG4gKiBAcGFyYW0ge25ncmFwaC5ncmFwaH0gZ3JhcGggaW5zdGFuY2UuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW52YWthL25ncmFwaC5ncmFwaFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhhdCBjb25maWd1cmVzIHNlYXJjaFxuICogQHBhcmFtIHtGdW5jdGlvbihhLCBiKX0gb3B0aW9ucy5oZXVyaXN0aWMgLSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlc3RpbWF0ZWQgZGlzdGFuY2UgYmV0d2VlblxuICogbm9kZXMgYGFgIGFuZCBgYmAuIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG5ldmVyIG92ZXJlc3RpbWF0ZSBhY3R1YWwgZGlzdGFuY2UgYmV0d2VlbiB0d29cbiAqIG5vZGVzIChvdGhlcndpc2UgdGhlIGZvdW5kIHBhdGggd2lsbCBub3QgYmUgdGhlIHNob3J0ZXN0KS4gRGVmYXVsdHMgZnVuY3Rpb24gcmV0dXJucyAwLFxuICogd2hpY2ggbWFrZXMgdGhpcyBzZWFyY2ggZXF1aXZhbGVudCB0byBEaWprc3RyYSBzZWFyY2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9uKGEsIGIpfSBvcHRpb25zLmRpc3RhbmNlIC0gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYWN0dWFsIGRpc3RhbmNlIGJldHdlZW4gdHdvXG4gKiBub2RlcyBgYWAgYW5kIGBiYC4gQnkgZGVmYXVsdCB0aGlzIGlzIHNldCB0byByZXR1cm4gZ3JhcGgtdGhlb3JldGljYWwgZGlzdGFuY2UgKGFsd2F5cyAxKTtcbiAqIFxuICogQHJldHVybnMge09iamVjdH0gQSBwYXRoZmluZGVyIHdpdGggc2luZ2xlIG1ldGhvZCBgZmluZCgpYC5cbiAqL1xuZnVuY3Rpb24gbmJhKGdyYXBoLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAvLyB3aGV0aGVyIHRyYXZlcnNhbCBzaG91bGQgYmUgY29uc2lkZXJlZCBvdmVyIG9yaWVudGVkIGdyYXBoLlxuICB2YXIgb3JpZW50ZWQgPSBvcHRpb25zLm9yaWVudGVkO1xuICB2YXIgcXVpdEZhc3QgPSBvcHRpb25zLnF1aXRGYXN0O1xuXG4gIHZhciBoZXVyaXN0aWMgPSBvcHRpb25zLmhldXJpc3RpYztcbiAgaWYgKCFoZXVyaXN0aWMpIGhldXJpc3RpYyA9IGRlZmF1bHRTZXR0aW5ncy5oZXVyaXN0aWM7XG5cbiAgdmFyIGRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZTtcbiAgaWYgKCFkaXN0YW5jZSkgZGlzdGFuY2UgPSBkZWZhdWx0U2V0dGluZ3MuZGlzdGFuY2U7XG5cbiAgLy8gRHVyaW5nIHN0cmVzcyB0ZXN0cyBJIG5vdGljZWQgdGhhdCBnYXJiYWdlIGNvbGxlY3Rpb24gd2FzIG9uZSBvZiB0aGUgaGVhdmllc3RcbiAgLy8gY29udHJpYnV0b3JzIHRvIHRoZSBhbGdvcml0aG0ncyBzcGVlZC4gU28gSSdtIHVzaW5nIGFuIG9iamVjdCBwb29sIHRvIHJlY3ljbGUgbm9kZXMuXG4gIHZhciBwb29sID0gbWFrZU5CQVNlYXJjaFN0YXRlUG9vbCgpO1xuXG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogRmluZHMgYSBwYXRoIGJldHdlZW4gbm9kZSBgZnJvbUlkYCBhbmQgYHRvSWRgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gb2Ygbm9kZXMgYmV0d2VlbiBgdG9JZGAgYW5kIGBmcm9tSWRgLiBFbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuICAgICAqIGlmIG5vIHBhdGggaXMgZm91bmQuXG4gICAgICovXG4gICAgZmluZDogZmluZFxuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbmQoZnJvbUlkLCB0b0lkKSB7XG4gICAgLy8gSSBtdXN0IGFwb2xvZ2l6ZSBmb3IgdGhlIGNvZGUgZHVwbGljYXRpb24uIFRoaXMgd2FzIHRoZSBlYXNpZXN0IHdheSBmb3IgbWUgdG9cbiAgICAvLyBpbXBsZW1lbnQgdGhlIGFsZ29yaXRobSBmYXN0LlxuICAgIHZhciBmcm9tID0gZ3JhcGguZ2V0Tm9kZShmcm9tSWQpO1xuICAgIGlmICghZnJvbSkgdGhyb3cgbmV3IEVycm9yKCdmcm9tSWQgaXMgbm90IGRlZmluZWQgaW4gdGhpcyBncmFwaDogJyArIGZyb21JZCk7XG4gICAgdmFyIHRvID0gZ3JhcGguZ2V0Tm9kZSh0b0lkKTtcbiAgICBpZiAoIXRvKSB0aHJvdyBuZXcgRXJyb3IoJ3RvSWQgaXMgbm90IGRlZmluZWQgaW4gdGhpcyBncmFwaDogJyArIHRvSWQpO1xuXG4gICAgcG9vbC5yZXNldCgpO1xuXG4gICAgLy8gSSBtdXN0IGFsc28gYXBvbG9naXplIGZvciBzb21ld2hhdCBjcnlwdGljIG5hbWVzLiBUaGUgTkJBKiBpcyBiaS1kaXJlY3Rpb25hbFxuICAgIC8vIHNlYXJjaCBhbGdvcml0aG0sIHdoaWNoIG1lYW5zIGl0IHJ1bnMgdHdvIHNlYXJjaGVzIGluIHBhcmFsbGVsLiBPbmUgaXMgY2FsbGVkXG4gICAgLy8gZm9yd2FyZCBzZWFyY2ggYW5kIGl0IHJ1bnMgZnJvbSBzb3VyY2Ugbm9kZSB0byB0YXJnZXQsIHdoaWxlIHRoZSBvdGhlciBvbmVcbiAgICAvLyAoYmFja3dhcmQgc2VhcmNoKSBydW5zIGZyb20gdGFyZ2V0IHRvIHNvdXJjZS5cblxuICAgIC8vIEV2ZXJ5d2hlcmUgd2hlcmUgeW91IHNlZSBgMWAgaXQgbWVhbnMgaXQncyBmb3IgdGhlIGZvcndhcmQgc2VhcmNoLiBgMmAgaXMgZm9yIFxuICAgIC8vIGJhY2t3YXJkIHNlYXJjaC5cblxuICAgIC8vIEZvciBvcmllbnRlZCBncmFwaCBwYXRoIGZpbmRpbmcsIHdlIG5lZWQgdG8gcmV2ZXJzZSB0aGUgZ3JhcGgsIHNvIHRoYXRcbiAgICAvLyBiYWNrd2FyZCBzZWFyY2ggdmlzaXRzIGNvcnJlY3QgbGluay4gT2J2aW91c2x5IHdlIGRvbid0IHdhbnQgdG8gZHVwbGljYXRlXG4gICAgLy8gdGhlIGdyYXBoLCBpbnN0ZWFkIHdlIGFsd2F5cyB0cmF2ZXJzZSB0aGUgZ3JhcGggYXMgbm9uLW9yaWVudGVkLCBhbmQgZmlsdGVyXG4gICAgLy8gZWRnZXMgaW4gYHZpc2l0TjFPcmllbnRlZC92aXNpdE4yT3JpdGVudGVkYFxuICAgIHZhciBmb3J3YXJkVmlzaXRvciA9IG9yaWVudGVkID8gdmlzaXROMU9yaWVudGVkIDogdmlzaXROMTtcbiAgICB2YXIgcmV2ZXJzZVZpc2l0b3IgPSBvcmllbnRlZCA/IHZpc2l0TjJPcmllbnRlZCA6IHZpc2l0TjI7XG5cbiAgICAvLyBNYXBzIG5vZGVJZCB0byBOQkFTZWFyY2hTdGF0ZS5cbiAgICB2YXIgbm9kZVN0YXRlID0gbmV3IE1hcCgpO1xuXG4gICAgLy8gVGhlc2UgdHdvIGhlYXBzIHN0b3JlIG5vZGVzIGJ5IHRoZWlyIHVuZGVyZXN0aW1hdGVkIHZhbHVlcy5cbiAgICB2YXIgb3BlbjFTZXQgPSBuZXcgTm9kZUhlYXAoe1xuICAgICAgY29tcGFyZTogZGVmYXVsdFNldHRpbmdzLmNvbXBhcmVGMVNjb3JlLFxuICAgICAgc2V0Tm9kZUlkOiBkZWZhdWx0U2V0dGluZ3Muc2V0SDFcbiAgICB9KTtcbiAgICB2YXIgb3BlbjJTZXQgPSBuZXcgTm9kZUhlYXAoe1xuICAgICAgY29tcGFyZTogZGVmYXVsdFNldHRpbmdzLmNvbXBhcmVGMlNjb3JlLFxuICAgICAgc2V0Tm9kZUlkOiBkZWZhdWx0U2V0dGluZ3Muc2V0SDJcbiAgICB9KTtcblxuICAgIC8vIFRoaXMgaXMgd2hlcmUgYm90aCBzZWFyY2hlcyB3aWxsIG1lZXQuXG4gICAgdmFyIG1pbk5vZGU7XG5cbiAgICAvLyBUaGUgc21hbGxlc3QgcGF0aCBsZW5ndGggc2VlbiBzbyBmYXIgaXMgc3RvcmVkIGhlcmU6XG4gICAgdmFyIGxNaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbiAgICAvLyBXZSBzdGFydCBieSBwdXR0aW5nIHN0YXJ0L2VuZCBub2RlcyB0byB0aGUgY29ycmVzcG9uZGluZyBoZWFwc1xuICAgIC8vIElmIHZhcmlhYmxlIG5hbWVzIGxpa2UgYGYxYCwgYGcxYCBhcmUgdG9vIGNvbmZ1c2luZywgcGxlYXNlIHJlZmVyXG4gICAgLy8gdG8gbWFrZU5CQVNlYXJjaFN0YXRlUG9vbC5qcyBmaWxlLCB3aGljaCBoYXMgZGV0YWlsZWQgZGVzY3JpcHRpb24uXG4gICAgdmFyIHN0YXJ0Tm9kZSA9IHBvb2wuY3JlYXRlTmV3U3RhdGUoZnJvbSk7XG4gICAgbm9kZVN0YXRlLnNldChmcm9tSWQsIHN0YXJ0Tm9kZSk7IFxuICAgIHN0YXJ0Tm9kZS5nMSA9IDA7XG4gICAgdmFyIGYxID0gaGV1cmlzdGljKGZyb20sIHRvKTtcbiAgICBzdGFydE5vZGUuZjEgPSBmMTtcbiAgICBvcGVuMVNldC5wdXNoKHN0YXJ0Tm9kZSk7XG5cbiAgICB2YXIgZW5kTm9kZSA9IHBvb2wuY3JlYXRlTmV3U3RhdGUodG8pO1xuICAgIG5vZGVTdGF0ZS5zZXQodG9JZCwgZW5kTm9kZSk7XG4gICAgZW5kTm9kZS5nMiA9IDA7XG4gICAgdmFyIGYyID0gZjE7IC8vIHRoZXkgc2hvdWxkIGFncmVlIG9yaWdpbmFsbHlcbiAgICBlbmROb2RlLmYyID0gZjI7XG4gICAgb3BlbjJTZXQucHVzaChlbmROb2RlKVxuXG4gICAgLy8gdGhlIGBjYW1lRnJvbWAgdmFyaWFibGUgaXMgYWNjZXNzZWQgYnkgYm90aCBzZWFyY2hlcywgc28gdGhhdCB3ZSBjYW4gc3RvcmUgcGFyZW50cy5cbiAgICB2YXIgY2FtZUZyb207XG5cbiAgICAvLyB0aGlzIGlzIHRoZSBtYWluIGFsZ29yaXRobSBsb29wOlxuICAgIHdoaWxlIChvcGVuMlNldC5sZW5ndGggJiYgb3BlbjFTZXQubGVuZ3RoKSB7XG4gICAgICBpZiAob3BlbjFTZXQubGVuZ3RoIDwgb3BlbjJTZXQubGVuZ3RoKSB7XG4gICAgICAgIGZvcndhcmRTZWFyY2goKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldmVyc2VTZWFyY2goKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHF1aXRGYXN0ICYmIG1pbk5vZGUpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBwYXRoID0gcmVjb25zdHJ1Y3RQYXRoKG1pbk5vZGUpO1xuICAgIHJldHVybiBwYXRoOyAvLyB0aGUgcHVibGljIEFQSSBpcyBvdmVyXG5cbiAgICBmdW5jdGlvbiBmb3J3YXJkU2VhcmNoKCkge1xuICAgICAgY2FtZUZyb20gPSBvcGVuMVNldC5wb3AoKTtcbiAgICAgIGlmIChjYW1lRnJvbS5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjYW1lRnJvbS5jbG9zZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoY2FtZUZyb20uZjEgPCBsTWluICYmIChjYW1lRnJvbS5nMSArIGYyIC0gaGV1cmlzdGljKGZyb20sIGNhbWVGcm9tLm5vZGUpKSA8IGxNaW4pIHtcbiAgICAgICAgZ3JhcGguZm9yRWFjaExpbmtlZE5vZGUoY2FtZUZyb20ubm9kZS5pZCwgZm9yd2FyZFZpc2l0b3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3BlbjFTZXQubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgdXNlZCBpbiByZXZlcnNlIHNlYXJjaFxuICAgICAgICBmMSA9IG9wZW4xU2V0LnBlZWsoKS5mMTtcbiAgICAgIH0gXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmV2ZXJzZVNlYXJjaCgpIHtcbiAgICAgIGNhbWVGcm9tID0gb3BlbjJTZXQucG9wKCk7XG4gICAgICBpZiAoY2FtZUZyb20uY2xvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhbWVGcm9tLmNsb3NlZCA9IHRydWU7XG5cbiAgICAgIGlmIChjYW1lRnJvbS5mMiA8IGxNaW4gJiYgKGNhbWVGcm9tLmcyICsgZjEgLSBoZXVyaXN0aWMoY2FtZUZyb20ubm9kZSwgdG8pKSA8IGxNaW4pIHtcbiAgICAgICAgZ3JhcGguZm9yRWFjaExpbmtlZE5vZGUoY2FtZUZyb20ubm9kZS5pZCwgcmV2ZXJzZVZpc2l0b3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3BlbjJTZXQubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgdXNlZCBpbiBmb3J3YXJkIHNlYXJjaFxuICAgICAgICBmMiA9IG9wZW4yU2V0LnBlZWsoKS5mMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2aXNpdE4xKG90aGVyTm9kZSwgbGluaykge1xuICAgICAgdmFyIG90aGVyU2VhcmNoU3RhdGUgPSBub2RlU3RhdGUuZ2V0KG90aGVyTm9kZS5pZCk7XG4gICAgICBpZiAoIW90aGVyU2VhcmNoU3RhdGUpIHtcbiAgICAgICAgb3RoZXJTZWFyY2hTdGF0ZSA9IHBvb2wuY3JlYXRlTmV3U3RhdGUob3RoZXJOb2RlKTtcbiAgICAgICAgbm9kZVN0YXRlLnNldChvdGhlck5vZGUuaWQsIG90aGVyU2VhcmNoU3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3RoZXJTZWFyY2hTdGF0ZS5jbG9zZWQpIHJldHVybjtcblxuICAgICAgdmFyIHRlbnRhdGl2ZURpc3RhbmNlID0gY2FtZUZyb20uZzEgKyBkaXN0YW5jZShjYW1lRnJvbS5ub2RlLCBvdGhlck5vZGUsIGxpbmspO1xuXG4gICAgICBpZiAodGVudGF0aXZlRGlzdGFuY2UgPCBvdGhlclNlYXJjaFN0YXRlLmcxKSB7XG4gICAgICAgIG90aGVyU2VhcmNoU3RhdGUuZzEgPSB0ZW50YXRpdmVEaXN0YW5jZTtcbiAgICAgICAgb3RoZXJTZWFyY2hTdGF0ZS5mMSA9IHRlbnRhdGl2ZURpc3RhbmNlICsgaGV1cmlzdGljKG90aGVyU2VhcmNoU3RhdGUubm9kZSwgdG8pO1xuICAgICAgICBvdGhlclNlYXJjaFN0YXRlLnAxID0gY2FtZUZyb207XG4gICAgICAgIGlmIChvdGhlclNlYXJjaFN0YXRlLmgxIDwgMCkge1xuICAgICAgICAgIG9wZW4xU2V0LnB1c2gob3RoZXJTZWFyY2hTdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3BlbjFTZXQudXBkYXRlSXRlbShvdGhlclNlYXJjaFN0YXRlLmgxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHBvdGVudGlhbE1pbiA9IG90aGVyU2VhcmNoU3RhdGUuZzEgKyBvdGhlclNlYXJjaFN0YXRlLmcyO1xuICAgICAgaWYgKHBvdGVudGlhbE1pbiA8IGxNaW4pIHsgXG4gICAgICAgIGxNaW4gPSBwb3RlbnRpYWxNaW47XG4gICAgICAgIG1pbk5vZGUgPSBvdGhlclNlYXJjaFN0YXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpc2l0TjIob3RoZXJOb2RlLCBsaW5rKSB7XG4gICAgICB2YXIgb3RoZXJTZWFyY2hTdGF0ZSA9IG5vZGVTdGF0ZS5nZXQob3RoZXJOb2RlLmlkKTtcbiAgICAgIGlmICghb3RoZXJTZWFyY2hTdGF0ZSkge1xuICAgICAgICBvdGhlclNlYXJjaFN0YXRlID0gcG9vbC5jcmVhdGVOZXdTdGF0ZShvdGhlck5vZGUpO1xuICAgICAgICBub2RlU3RhdGUuc2V0KG90aGVyTm9kZS5pZCwgb3RoZXJTZWFyY2hTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdGhlclNlYXJjaFN0YXRlLmNsb3NlZCkgcmV0dXJuO1xuXG4gICAgICB2YXIgdGVudGF0aXZlRGlzdGFuY2UgPSBjYW1lRnJvbS5nMiArIGRpc3RhbmNlKGNhbWVGcm9tLm5vZGUsIG90aGVyTm9kZSwgbGluayk7XG5cbiAgICAgIGlmICh0ZW50YXRpdmVEaXN0YW5jZSA8IG90aGVyU2VhcmNoU3RhdGUuZzIpIHtcbiAgICAgICAgb3RoZXJTZWFyY2hTdGF0ZS5nMiA9IHRlbnRhdGl2ZURpc3RhbmNlO1xuICAgICAgICBvdGhlclNlYXJjaFN0YXRlLmYyID0gdGVudGF0aXZlRGlzdGFuY2UgKyBoZXVyaXN0aWMoZnJvbSwgb3RoZXJTZWFyY2hTdGF0ZS5ub2RlKTtcbiAgICAgICAgb3RoZXJTZWFyY2hTdGF0ZS5wMiA9IGNhbWVGcm9tO1xuICAgICAgICBpZiAob3RoZXJTZWFyY2hTdGF0ZS5oMiA8IDApIHtcbiAgICAgICAgICBvcGVuMlNldC5wdXNoKG90aGVyU2VhcmNoU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wZW4yU2V0LnVwZGF0ZUl0ZW0ob3RoZXJTZWFyY2hTdGF0ZS5oMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBwb3RlbnRpYWxNaW4gPSBvdGhlclNlYXJjaFN0YXRlLmcxICsgb3RoZXJTZWFyY2hTdGF0ZS5nMjtcbiAgICAgIGlmIChwb3RlbnRpYWxNaW4gPCBsTWluKSB7XG4gICAgICAgIGxNaW4gPSBwb3RlbnRpYWxNaW47XG4gICAgICAgIG1pbk5vZGUgPSBvdGhlclNlYXJjaFN0YXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpc2l0TjJPcmllbnRlZChvdGhlck5vZGUsIGxpbmspIHtcbiAgICAgIC8vIHdlIGFyZSBnb2luZyBiYWNrd2FyZHMsIGdyYXBoIG5lZWRzIHRvIGJlIHJldmVyc2VkLiBcbiAgICAgIGlmIChsaW5rLnRvSWQgPT09IGNhbWVGcm9tLm5vZGUuaWQpIHJldHVybiB2aXNpdE4yKG90aGVyTm9kZSwgbGluayk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZpc2l0TjFPcmllbnRlZChvdGhlck5vZGUsIGxpbmspIHtcbiAgICAgIC8vIHRoaXMgaXMgZm9yd2FyZCBkaXJlY3Rpb24sIHNvIHdlIHNob3VsZCBiZSBjb21pbmcgRlJPTTpcbiAgICAgIGlmIChsaW5rLmZyb21JZCA9PT0gY2FtZUZyb20ubm9kZS5pZCkgcmV0dXJuIHZpc2l0TjEob3RoZXJOb2RlLCBsaW5rKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb25zdHJ1Y3RQYXRoKHNlYXJjaFN0YXRlKSB7XG4gIGlmICghc2VhcmNoU3RhdGUpIHJldHVybiBOT19QQVRIO1xuXG4gIHZhciBwYXRoID0gW3NlYXJjaFN0YXRlLm5vZGVdO1xuICB2YXIgcGFyZW50ID0gc2VhcmNoU3RhdGUucDE7XG5cbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIHBhdGgucHVzaChwYXJlbnQubm9kZSk7XG4gICAgcGFyZW50ID0gcGFyZW50LnAxO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gc2VhcmNoU3RhdGUucDI7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgcGF0aC51bnNoaWZ0KGNoaWxkLm5vZGUpO1xuICAgIGNoaWxkID0gY2hpbGQucDI7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG1ha2VOQkFTZWFyY2hTdGF0ZVBvb2w7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgTkJBU2VhcmNoU3RhdGUuIFRoZSBpbnN0YW5jZSBzdG9yZXMgaW5mb3JtYXRpb25cbiAqIGFib3V0IHNlYXJjaCBzdGF0ZSwgYW5kIGlzIHVzZWQgYnkgTkJBKiBhbGdvcml0aG0uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG5vZGUgLSBvcmlnaW5hbCBncmFwaCBub2RlXG4gKi9cbmZ1bmN0aW9uIE5CQVNlYXJjaFN0YXRlKG5vZGUpIHtcbiAgLyoqXG4gICAqIE9yaWdpbmFsIGdyYXBoIG5vZGUuXG4gICAqL1xuICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gIC8qKlxuICAgKiBQYXJlbnQgb2YgdGhpcyBub2RlIGluIGZvcndhcmQgc2VhcmNoXG4gICAqL1xuICB0aGlzLnAxID0gbnVsbDtcblxuICAvKipcbiAgICogUGFyZW50IG9mIHRoaXMgbm9kZSBpbiByZXZlcnNlIHNlYXJjaFxuICAgKi9cbiAgdGhpcy5wMiA9IG51bGw7XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgc2V0IHRvIHRydWUsIHRoZW4gdGhlIG5vZGUgd2FzIGFscmVhZHkgcHJvY2Vzc2VkXG4gICAqIGFuZCB3ZSBzaG91bGQgbm90IHRvdWNoIGl0IGFueW1vcmUuXG4gICAqL1xuICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBBY3R1YWwgZGlzdGFuY2UgZnJvbSB0aGlzIG5vZGUgdG8gaXRzIHBhcmVudCBpbiBmb3J3YXJkIHNlYXJjaFxuICAgKi9cbiAgdGhpcy5nMSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblxuICAvKipcbiAgICogQWN0dWFsIGRpc3RhbmNlIGZyb20gdGhpcyBub2RlIHRvIGl0cyBwYXJlbnQgaW4gcmV2ZXJzZSBzZWFyY2hcbiAgICovXG4gIHRoaXMuZzIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cblxuICAvKipcbiAgICogVW5kZXJlc3RpbWF0ZWQgZGlzdGFuY2UgZnJvbSB0aGlzIG5vZGUgdG8gdGhlIHBhdGgtZmluZGluZyBzb3VyY2UuXG4gICAqL1xuICB0aGlzLmYxID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gIC8qKlxuICAgKiBVbmRlcmVzdGltYXRlZCBkaXN0YW5jZSBmcm9tIHRoaXMgbm9kZSB0byB0aGUgcGF0aC1maW5kaW5nIHRhcmdldC5cbiAgICovXG4gIHRoaXMuZjIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbiAgLy8gdXNlZCB0byByZWNvbnN0cnVjdCBoZWFwIHdoZW4gZlNjb3JlIGlzIHVwZGF0ZWQuIFRPRE86IGRvIEkgbmVlZCB0aGVtIGJvdGg/XG5cbiAgLyoqXG4gICAqIEluZGV4IG9mIHRoaXMgbm9kZSBpbiB0aGUgZm9yd2FyZCBoZWFwLlxuICAgKi9cbiAgdGhpcy5oMSA9IC0xO1xuXG4gIC8qKlxuICAgKiBJbmRleCBvZiB0aGlzIG5vZGUgaW4gdGhlIHJldmVyc2UgaGVhcC5cbiAgICovXG4gIHRoaXMuaDIgPSAtMTtcbn1cblxuLyoqXG4gKiBBcyBwYXRoLWZpbmRpbmcgaXMgbWVtb3J5LWludGVuc2l2ZSBwcm9jZXNzLCB3ZSB3YW50IHRvIHJlZHVjZSBwcmVzc3VyZSBvblxuICogZ2FyYmFnZSBjb2xsZWN0b3IuIFRoaXMgY2xhc3MgaGVscHMgdXMgdG8gcmVjeWNsZSBwYXRoLWZpbmRpbmcgbm9kZXMgYW5kIHNpZ25pZmljYW50bHlcbiAqIHJlZHVjZXMgdGhlIHNlYXJjaCB0aW1lICh+MjAlIGZhc3RlciB0aGFuIHdpdGhvdXQgaXQpLlxuICovXG5mdW5jdGlvbiBtYWtlTkJBU2VhcmNoU3RhdGVQb29sKCkge1xuICB2YXIgY3VycmVudEluQ2FjaGUgPSAwO1xuICB2YXIgbm9kZUNhY2hlID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE5CQVNlYXJjaFN0YXRlIGluc3RhbmNlXG4gICAgICovXG4gICAgY3JlYXRlTmV3U3RhdGU6IGNyZWF0ZU5ld1N0YXRlLFxuXG4gICAgLyoqXG4gICAgICogTWFya3MgYWxsIGNyZWF0ZWQgaW5zdGFuY2VzIGF2YWlsYWJsZSBmb3IgcmVjeWNsaW5nLlxuICAgICAqL1xuICAgIHJlc2V0OiByZXNldFxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGN1cnJlbnRJbkNhY2hlID0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5ld1N0YXRlKG5vZGUpIHtcbiAgICB2YXIgY2FjaGVkID0gbm9kZUNhY2hlW2N1cnJlbnRJbkNhY2hlXTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAvLyBUT0RPOiBUaGlzIGFsbW9zdCBkdXBsaWNhdGVzIGNvbnN0cnVjdG9yIGNvZGUuIE5vdCBzdXJlIGlmXG4gICAgICAvLyBpdCB3b3VsZCBpbXBhY3QgcGVyZm9ybWFuY2UgaWYgSSBtb3ZlIHRoaXMgY29kZSBpbnRvIGEgZnVuY3Rpb25cbiAgICAgIGNhY2hlZC5ub2RlID0gbm9kZTtcblxuICAgICAgLy8gSG93IHdlIGNhbWUgdG8gdGhpcyBub2RlP1xuICAgICAgY2FjaGVkLnAxID0gbnVsbDtcbiAgICAgIGNhY2hlZC5wMiA9IG51bGw7XG5cbiAgICAgIGNhY2hlZC5jbG9zZWQgPSBmYWxzZTtcblxuICAgICAgY2FjaGVkLmcxID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgY2FjaGVkLmcyID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgY2FjaGVkLmYxID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgY2FjaGVkLmYyID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gICAgICAvLyB1c2VkIHRvIHJlY29uc3RydWN0IGhlYXAgd2hlbiBmU2NvcmUgaXMgdXBkYXRlZC5cbiAgICAgIGNhY2hlZC5oMSA9IC0xO1xuICAgICAgY2FjaGVkLmgyID0gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlZCA9IG5ldyBOQkFTZWFyY2hTdGF0ZShub2RlKTtcbiAgICAgIG5vZGVDYWNoZVtjdXJyZW50SW5DYWNoZV0gPSBjYWNoZWQ7XG4gICAgfVxuICAgIGN1cnJlbnRJbkNhY2hlKys7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFTdGFyOiByZXF1aXJlKCcuL2Etc3Rhci9hLXN0YXIuanMnKSxcbiAgYUdyZWVkeTogcmVxdWlyZSgnLi9hLXN0YXIvYS1ncmVlZHktc3RhcicpLFxuICBuYmE6IHJlcXVpcmUoJy4vYS1zdGFyL25iYS9pbmRleC5qcycpLFxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRFeHByZXNzaW9uc1Rlc3RQYWdlID0gdm9pZCAwO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi9tYXRobGliL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IERlcml2YXRpdmVfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvZXhwcmVzc2lvbnMvRGVyaXZhdGl2ZVwiKTtcbmNvbnN0IEV4cG9uZW50XzEgPSByZXF1aXJlKFwiLi9tYXRobGliL2V4cHJlc3Npb25zL0V4cG9uZW50XCIpO1xuY29uc3QgRnJhY3Rpb25fMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvZXhwcmVzc2lvbnMvRnJhY3Rpb25cIik7XG5jb25zdCBJbnRlZ3JhbF8xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9leHByZXNzaW9ucy9JbnRlZ3JhbFwiKTtcbmNvbnN0IEVkaXRhYmxlTWF0aFZpZXdfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvdWllbGVtZW50cy9FZGl0YWJsZU1hdGhWaWV3XCIpO1xuLyoqXG4gKiBDYWxsZWQgYWZ0ZXIgdGhlIGRvbSBpcyBsb2FkZWQuXG4gKiBQb3B1bGF0ZXMgdGhlIGJvZHkgZWxlbWVudCBvZiB0aGUgZG9jdW1lbnRcbiAqIHdpdGggdGhlIHRlc3QgZXhwcmVzc2lvbnMgcGFnZVxuICovXG5mdW5jdGlvbiBsb2FkRXhwcmVzc2lvbnNUZXN0UGFnZSgpIHtcbiAgICBjb25zdCBwYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICBmdW5jdGlvbiBwKGNvbnRlbnQpIHtcbiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgZS5pbm5lclRleHQgPSBjb250ZW50O1xuICAgICAgICBwYWdlLmFwcGVuZChlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmlldyhleHApIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyBFZGl0YWJsZU1hdGhWaWV3XzEuRWRpdGFibGVNYXRoVmlldygpO1xuICAgICAgICBlLnZhbHVlID0gZXhwO1xuICAgICAgICBwYWdlLmFwcGVuZChlKTtcbiAgICB9XG4gICAgcChcIlRoZSBzdW0gb2YgYSwgYSwgYW5kIGFcIik7XG4gICAgdmlldygoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSk7XG4gICAgcChcIkludGVncmFsIG9mIGEgb3ZlciBiIHdpdGggcmVzcGVjdCB0byBjXCIpO1xuICAgIHZpZXcoSW50ZWdyYWxfMS5JbnRlZ3JhbC5vZihGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgcChcIkludGVncmFsIG9mIChhIG92ZXIgYSkgb3ZlciBiIHdpdGggcmVzcGVjdCB0byBjXCIpO1xuICAgIHZpZXcoSW50ZWdyYWxfMS5JbnRlZ3JhbC5vZihGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgcChcIkludGVncmFsIG9mICgoYSBvdmVyIGEpIG92ZXIgYSkgb3ZlciBiIHdpdGggcmVzcGVjdCB0byBjXCIpO1xuICAgIHZpZXcoSW50ZWdyYWxfMS5JbnRlZ3JhbC5vZihGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoRnJhY3Rpb25fMS5GcmFjdGlvbi5vZihDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgcChcIkludGVncmFsIG9mICgoKGEgb3ZlciBhKSBvdmVyIGEpIG92ZXIgYSkgb3ZlciBiIHdpdGggcmVzcGVjdCB0byBjXCIpO1xuICAgIHZpZXcoSW50ZWdyYWxfMS5JbnRlZ3JhbC5vZihGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoRnJhY3Rpb25fMS5GcmFjdGlvbi5vZihGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgcChcIkludGVncmFsIG9mICgoKChhIG92ZXIgYSkgb3ZlciBhKSBvdmVyIGEpIG92ZXIgYSkgb3ZlciBiIHdpdGggcmVzcGVjdCB0byBjXCIpO1xuICAgIHZpZXcoSW50ZWdyYWxfMS5JbnRlZ3JhbC5vZihGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoRnJhY3Rpb25fMS5GcmFjdGlvbi5vZihGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgcChcIlwiKTtcbiAgICB2aWV3KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5pbnQpKEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iKSwgRXhwb25lbnRfMS5FeHBvbmVudC5vZigoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54LCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSwgRnJhY3Rpb25fMS5GcmFjdGlvbi5vZigoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMikpKSksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgyKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSkpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54KSk7XG4gICAgcChcIlByb2R1Y3Qgb2YgeCBhbmQgeVwiKTtcbiAgICB2aWV3KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54LCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS55KSk7XG4gICAgcChcIlByb2R1Y3Qgb2YgKHgtMSksIC0xIGFuZCB5XCIpO1xuICAgIHZpZXcoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKENvbnZlbmllbnRFeHByZXNzaW9uc18xLngsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMSkpKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoLTEpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS55KSk7XG4gICAgcChcIk5lZ2F0aW9uIG9mIHggKFJlcGVkIGFzIHRoZSBwcm9wZHVjdCBvZiAtMSBhbmQgeClcIik7XG4gICAgdmlldygoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLngpKTtcbiAgICBwKFwiU3VtIG9mIHggYW5kIC14XCIpO1xuICAgIHZpZXcoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54KSkpO1xuICAgIHAoXCJTdW0gb2YgLXggYW5kIHhcIik7XG4gICAgdmlldygoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLngpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54KSk7XG4gICAgcChcIkRlcml2YXRpdmUgb2YgdGhlIHNxdWFyZSBvZiB4IHdpdGggcmVzcGVjdCB0byB4XCIpO1xuICAgIHZpZXcoRGVyaXZhdGl2ZV8xLkRlcml2YXRpdmUub2YoRXhwb25lbnRfMS5FeHBvbmVudC5vZihDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54LCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgyKSksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLngpKTtcbiAgICBwKFwiRGVyaXZhdGl2ZSAoKHheMikgLSAyKSB3aXRoIHJlc3BlY3QgdG8geFwiKTtcbiAgICB2aWV3KERlcml2YXRpdmVfMS5EZXJpdmF0aXZlLm9mKEV4cG9uZW50XzEuRXhwb25lbnQub2YoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoLTIpKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMikpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54KSk7XG4gICAgcChcIlwiKTtcbiAgICB2aWV3KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKDEpKTtcbiAgICBwKFwiXCIpO1xuICAgIHZpZXcoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMSkpO1xuICAgIHAoXCJcIik7XG4gICAgdmlldygoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKSk7XG4gICAgcChcIlwiKTtcbiAgICB2aWV3KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKDEpKTtcbn1cbmV4cG9ydHMubG9hZEV4cHJlc3Npb25zVGVzdFBhZ2UgPSBsb2FkRXhwcmVzc2lvbnNUZXN0UGFnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkSW5wdXRQYXJzZVRlc3RQYWdlID0gdm9pZCAwO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi9tYXRobGliL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEV4cG9uZW50XzEgPSByZXF1aXJlKFwiLi9tYXRobGliL2V4cHJlc3Npb25zL0V4cG9uZW50XCIpO1xuY29uc3QgTG9nYXJpdGhtXzEgPSByZXF1aXJlKFwiLi9tYXRobGliL2V4cHJlc3Npb25zL0xvZ2FyaXRobVwiKTtcbmNvbnN0IEVkaXRhYmxlTWF0aFZpZXdfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvdWllbGVtZW50cy9FZGl0YWJsZU1hdGhWaWV3XCIpO1xuY29uc3QgQW50bHJNYXRoUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9tYXRobGliL3VzZXJpbnB1dC9BbnRsck1hdGhQYXJzZXJcIik7XG4vKipcbiAqIENhbGxlZCBhZnRlciBET00gaXMgbG9hZGVkLlxuICogU3Vic3RpdHV0ZXMgdGhlIGJvZHkgZWxlbWVudCBpbiB0aGUgZG9jdW1lbnRcbiAqIHdpdGggdGhlIHByaW1hcnkgaW50ZWdyYXRvciB2aWV3LlxuICovXG5mdW5jdGlvbiBsb2FkSW5wdXRQYXJzZVRlc3RQYWdlKCkge1xuICAgIGNvbnN0IHBhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgIHBhZ2Uuc3R5bGUucGFkZGluZyA9IFwiOGNoXCI7XG4gICAgZnVuY3Rpb24gcChjb250ZW50KSB7XG4gICAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGUuaW5uZXJUZXh0ID0gY29udGVudDtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZpZXcoZXhwKSB7XG4gICAgICAgIGNvbnN0IGUgPSBuZXcgRWRpdGFibGVNYXRoVmlld18xLkVkaXRhYmxlTWF0aFZpZXcoKTtcbiAgICAgICAgZS52YWx1ZSA9IGV4cDtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByaW50IHRoZSBwYXJzZWQgZXhwcmVzc2lvbiB0byB0aGUgcGFnZS5cbiAgICAgKiBAcGFyYW0gaW5wdXQgVXNlciBpbnB1dCBzdHJpbmcgdG8gcGFyc2UuXG4gICAgICogQHBhcmFtIGV4cGxhbmF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXhwcmVzc2lvbihpbnB1dCwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgICAgIHBhZ2UuYXBwZW5kKHAoXCJJbnB1dDogICAgICAgXCIgKyBpbnB1dCkpO1xuICAgICAgICBpZiAoZXhwbGFuYXRpb24gIT0gbnVsbClcbiAgICAgICAgICAgIHBhZ2UuYXBwZW5kKHAoZXhwbGFuYXRpb24pKTtcbiAgICAgICAgcGFnZS5hcHBlbmQodmlldygoMCwgQW50bHJNYXRoUGFyc2VyXzEucGFyc2VFeHByZXNzaW9uKShpbnB1dCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGFrZXMgYW4gaW50ZXJuYWwgZXhwcmVzc2lvbiwgY29udmVydHMgaXRcbiAgICAgKiB0byBhIHN0cmluZywgdGhlbiBwYXJzZXMgdGhhdCBzdHJpbmcgaW50b1xuICAgICAqIGFuIGV4cHJlc3Npb24uXG4gICAgICogQHBhcmFtIGlucHV0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHdvV2F5KGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICAgICAgdGFibGUuc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgYmxhY2tcIjtcbiAgICAgICAgdGFibGUuc3R5bGUud2lkdGggPSAnNzAlJztcbiAgICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgY29uc3QgZGF0YTEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICBjb25zdCBkYXRhMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIGNvbnN0IGRhdGEzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgcm93LmFwcGVuZENoaWxkKGRhdGExKTtcbiAgICAgICAgcm93LmFwcGVuZENoaWxkKGRhdGEyKTtcbiAgICAgICAgcm93LmFwcGVuZENoaWxkKGRhdGEzKTtcbiAgICAgICAgZGF0YTEuc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgYmxhY2tcIjtcbiAgICAgICAgZGF0YTIuc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgYmxhY2tcIjtcbiAgICAgICAgZGF0YTMuc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgYmxhY2tcIjtcbiAgICAgICAgZGF0YTEuYXBwZW5kQ2hpbGQodmlldyhpbnB1dCkpO1xuICAgICAgICBjb25zdCB0ZXh0ID0gcChpbnB1dC50b1VuYW1iaWdpb3VzU3RyaW5nKCkpO1xuICAgICAgICB0ZXh0LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIHRleHQuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgZGF0YTIuYXBwZW5kQ2hpbGQodGV4dCk7XG4gICAgICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gKDAsIEFudGxyTWF0aFBhcnNlcl8xLnBhcnNlRXhwcmVzc2lvbikoaW5wdXQudG9VbmFtYmlnaW91c1N0cmluZygpKTtcbiAgICAgICAgZGF0YTMuYXBwZW5kQ2hpbGQodmlldyhwYXJzZVJlc3VsdCkpO1xuICAgICAgICBwYWdlLmFwcGVuZCh0YWJsZSk7XG4gICAgICAgIC8vIENvbmRpdGlvbmFsIGZvcm1hdHRpbmdcbiAgICAgICAgaWYgKGlucHV0ID09PSBwYXJzZVJlc3VsdCkge1xuICAgICAgICAgICAgZGF0YTMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodGdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhMy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEV4cHJlc3Npb24gc3RyaW5ncyB0byB0ZXN0XG4gICAgZXhwcmVzc2lvbihcImludCh4KWR4K2NcIik7XG4gICAgZXhwcmVzc2lvbihcImEvYmludHhcIik7XG4gICAgZXhwcmVzc2lvbihcImFeYitjXCIsIFwiVGhlICtjIHNob3VsZG4ndCBiZSBpbiB0aGUgZXhwb25lbnRcIik7XG4gICAgZXhwcmVzc2lvbihcImErYl5jXCIpO1xuICAgIGV4cHJlc3Npb24oXCIoYStiKV5jXCIpO1xuICAgIGV4cHJlc3Npb24oXCItYS1iK2NcIik7XG4gICAgZXhwcmVzc2lvbihcIi1hKy1iK2NcIik7XG4gICAgZXhwcmVzc2lvbihcImErYitjXCIpO1xuICAgIGV4cHJlc3Npb24oXCItKGErYilcIik7XG4gICAgZXhwcmVzc2lvbihcIi1hKGErYilcIik7XG4gICAgZXhwcmVzc2lvbihcImErKGIrYylcIik7XG4gICAgZXhwcmVzc2lvbihcImEtYi1jXCIpO1xuICAgIGV4cHJlc3Npb24oXCJhKmIrY1wiKTtcbiAgICBleHByZXNzaW9uKFwiYS9iK2NcIik7XG4gICAgZXhwcmVzc2lvbihcImEvYi9jXCIpO1xuICAgIGV4cHJlc3Npb24oXCJhYngtZFwiKTtcbiAgICBleHByZXNzaW9uKFwiLWFieC1kXCIpO1xuICAgIGV4cHJlc3Npb24oXCItYS1ieC1kXCIpO1xuICAgIGV4cHJlc3Npb24oXCJhYmNkXCIpO1xuICAgIGV4cHJlc3Npb24oXCJhKmIqYypkXCIpO1xuICAgIGV4cHJlc3Npb24oXCJhYipjZFwiKTtcbiAgICBleHByZXNzaW9uKFwiaW50NHgrMlwiKTtcbiAgICBleHByZXNzaW9uKFwiaW50KDR4KzIpXCIpO1xuICAgIGV4cHJlc3Npb24oXCJsb2d4XCIpO1xuICAgIGV4cHJlc3Npb24oXCJsb2coeClcIik7XG4gICAgZXhwcmVzc2lvbihcIig1LygyeC0zKS0oMy8oKDJ4LTMpXjIpKVwiKTtcbiAgICBleHByZXNzaW9uKFwiKDUvKDJ4LTMpLSgzLygyeC0zKV4yKVwiKTtcbiAgICBwYWdlLmFwcGVuZChwKFwiSW4gdGhlc2UgdGVzdHMsIGFuIHVuYW1iaWdpb3VzIGV4cHJlc3Npb24gaXMgd3JpdHRlbiBpbiB0aGUgXCIgK1xuICAgICAgICBcIiBzb3VyY2UgY29kZS4gSXQgaXMgdGhlbiBjb252ZXJ0ZWQgdG8gYW4gdW5hbWJpZ2lvdXMgc3RyaW5nIFwiICtcbiAgICAgICAgXCJyZXByZXNlbnRhdGlvbiwgYW5kIHRoZW4gcGFyc2VkIGJhY2sgaW50byBhbiBleHByZXNzaW9uLiBcIiArXG4gICAgICAgIFwiVGhlIGdvYWwgaXMgdGhhdCB0aGlzIHByb2Nlc3MgcHJlc2VydmVzIHRoZSBleHByZXNzaW9uLiBUaGlzIFwiICtcbiAgICAgICAgXCJyZXF1aXJlcyAxKSBleHByZXNzaW9uIC0+IHN0cmluZyBpcyB1bmFtYmlnaW91cyBhbmQgYWNjdXJhdGUgYW5kIDIpIFwiICtcbiAgICAgICAgXCJ0aGUgcGFyc2VyIGlzIHdvcmtpbmcgY29ycmVjdGx5LlwiKSk7XG4gICAgcGFnZS5hcHBlbmQocChcIlRoZSBmaXJzdCBjb2x1bW4gaXMgYXNzdW1lZCB0byBiZSBjb3JyZWN0LCB0aGUgbWlkZGxlIGNvbGx1bW4gaGFzIFwiICtcbiAgICAgICAgXCJ0aGUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgc3RyaW5nIHZlcnNpb24gb2YgdGhlIGZpcnN0IGNvbHVtbiwgXCIgK1xuICAgICAgICBcImFuZCB0aGUgbGFzdCBjb2x1bW4gY29udGFpbnMgdGhlIGV4cHJlc3Npb24gcGFyc2VkIGZyb20gdGhlIHNlY29uZCBjb2x1bW4uXCIpKTtcbiAgICB0d29XYXkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEueSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYykpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54LCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS55LCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgdHdvV2F5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKENvbnZlbmllbnRFeHByZXNzaW9uc18xLngsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmMpKTtcbiAgICB0d29XYXkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEueSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSkpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBFeHBvbmVudF8xLkV4cG9uZW50Lm9mKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmMpKSk7XG4gICAgdHdvV2F5KEV4cG9uZW50XzEuRXhwb25lbnQub2YoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmMpKTtcbiAgICB0d29XYXkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYykpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgdHdvV2F5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYikpKTtcbiAgICB0d29XYXkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpKSk7XG4gICAgdHdvV2F5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpKSkpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSkpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmMpKSk7XG4gICAgdHdvV2F5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYykpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuZnJhY3Rpb24pKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSk7XG4gICAgdHdvV2F5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5mcmFjdGlvbikoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmZyYWN0aW9uKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYykpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCksIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmQpKTtcbiAgICB0d29XYXkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCkpLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmQpKSk7XG4gICAgdHdvV2F5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLngpKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5kKSkpO1xuICAgIHR3b1dheSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYywgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuZCkpO1xuICAgIC8vIHR3b1dheShcImFiKmNkXCIpXG4gICAgLy8gdHdvV2F5KFwiaW50NHgrMlwiKVxuICAgIC8vIHR3b1dheShcImludCg0eCsyKVwiKVxuICAgIHR3b1dheShMb2dhcml0aG1fMS5Mb2dhcml0aG0ub2YoQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMTApKSk7XG59XG5leHBvcnRzLmxvYWRJbnB1dFBhcnNlVGVzdFBhZ2UgPSBsb2FkSW5wdXRQYXJzZVRlc3RQYWdlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRQcmltYXJ5UGFnZSA9IHZvaWQgMDtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBXZWJHcmFwaFZpZXdfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvdWllbGVtZW50cy9XZWJHcmFwaFZpZXdcIik7XG5jb25zdCBHcmFwaF8xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9HcmFwaFwiKTtcbmNvbnN0IERlcml2ZXJfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvZGVyaXZhdGlvbnMvRGVyaXZlclwiKTtcbmNvbnN0IEV4cHJlc3Npb25fMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvZXhwcmVzc2lvbnMvRXhwcmVzc2lvblwiKTtcbmNvbnN0IFJlbGF0aW9uYWxEZXJpdmF0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9kZXJpdmF0aW9ucy9SZWxhdGlvbmFsRGVyaXZhdGlvblJ1bGVcIik7XG5jb25zdCBTdWJ0cmFjdEZyb21Cb3RoU2lkZXNfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvZGVyaXZhdGlvbnMvYWxnZWJyYS9TdWJ0cmFjdEZyb21Cb3RoU2lkZXNcIik7XG5jb25zdCBEaXZpZGVPbkJvdGhTaWRlc18xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9kZXJpdmF0aW9ucy9hbGdlYnJhL0RpdmlkZU9uQm90aFNpZGVzXCIpO1xuY29uc3QgVmFyaWFibGVfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvZXhwcmVzc2lvbnMvVmFyaWFibGVcIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi9tYXRobGliL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvZXhwcmVzc2lvbnMvU3VtXCIpO1xuUmVsYXRpb25hbERlcml2YXRpb25SdWxlXzEuUmVsYXRpb25hbERlcml2YXRpb25SdWxlLnJ1bGVzLmFkZChuZXcgU3VidHJhY3RGcm9tQm90aFNpZGVzXzEuU3VidHJhY3RGcm9tQm90aFNpZGVzKCkpO1xuUmVsYXRpb25hbERlcml2YXRpb25SdWxlXzEuUmVsYXRpb25hbERlcml2YXRpb25SdWxlLnJ1bGVzLmFkZChuZXcgRGl2aWRlT25Cb3RoU2lkZXNfMS5EaXZpZGVPbkJvdGhTaWRlcygpKTtcbi8qKlxuICogQ2FsbGVkIGFmdGVyIERPTSBpcyBsb2FkZWQuXG4gKiBTdWJzdGl0dXRlcyB0aGUgYm9keSBlbGVtZW50IGluIHRoZSBkb2N1bWVudFxuICogd2l0aCB0aGUgcHJpbWFyeSBpbnRlZ3JhdG9yIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGxvYWRQcmltYXJ5UGFnZSgpIHtcbiAgICAvL2NvbnN0IHJvb3QgPSBEZXJpdmF0aXZlLm9mKHN1bShhLCBhLCBwcm9kdWN0KG51bSgyKSwgYikpLCBhKVxuICAgIC8vY29uc3Qgcm9vdCA9IERlcml2YXRpdmUub2YocHJvZHVjdChudW0oMyksIEV4cG9uZW50Lm9mKHgsIG51bSgyKSksIEV4cG9uZW50Lm9mKHgsIG51bSgzKSkpLCB4KVxuICAgIC8vY29uc3Qgcm9vdCA9IHByb2R1Y3QoRXhwb25lbnQub2YoeCwgbnVtKDMpKSwgRXhwb25lbnQub2YoeCwgbnVtKDQpKSwgeCwgeClcbiAgICAvL2NvbnN0IHJvb3QgPSBEZXJpdmF0aXZlLm9mKEZyYWN0aW9uLm9mKEV4cG9uZW50Lm9mKHgsIG51bSgyKSksIHgpLCB4KVxuICAgIC8vY29uc3Qgcm9vdCA9IEZyYWN0aW9uLm9mKHByb2R1Y3QobnVtKDIpLCB4LCBFeHBvbmVudC5vZih4LCBhKSwgYSksIHByb2R1Y3QobnVtKDIpLCBhLCBhLCB4KSlcbiAgICBjb25zdCByb290ID0gKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSk7XG4gICAgY29uc3QgZ3JhcGggPSBuZXcgR3JhcGhfMS5HcmFwaCgpLmFkZE5vZGUocm9vdCk7XG4gICAgY29uc3QgZGVyaXZlciA9IG5ldyBEZXJpdmVyXzEuRGVyaXZlcihncmFwaCk7XG4gICAgZGVyaXZlci5leHBhbmQoMzAsIGZhbHNlKTtcbiAgICAvL2NvbnNvbGUubG9nKFwiUmVzdWx0OiBcIiArIGdyYXBoKVxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dFwiKTtcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKCkgPT4ge1xuICAgICAgICAvL3BhcnNlKChpbnB1dCEgYXMgSFRNTFRleHRBcmVhRWxlbWVudCkudmFsdWUpXG4gICAgfSk7XG4gICAgY29uc3Qgb3V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXRib3hcIik7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBzaG93QXJndW1lbnRzOiBmYWxzZSxcbiAgICAgICAgZHJhd0VkZ2VMaW5lczogdHJ1ZSxcbiAgICAgICAgZGVidWdDb3JuZXJFbmFibGVkOiB0cnVlLFxuICAgIH07XG4gICAgY29uc3QgZ3JhcGhWaWV3ID0gbmV3IFdlYkdyYXBoVmlld18xLldlYkdyYXBoVmlldyhncmFwaCwgbmV3IFNldChbcm9vdF0pLCBjb25maWcpO1xuICAgIGdyYXBoVmlldy5zZXROb2RlQ29sb3JpbmdTY2hlbWUobiA9PiB7XG4gICAgICAgIGlmIChuIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGlmICghZGVyaXZlci5pc1NpbXBsaWZpZWQobikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibGlnaHRncmF5XCI7XG4gICAgICAgICAgICBpZiAobiBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0KVxuICAgICAgICAgICAgICAgIGlmIChkZXJpdmVyLnBhc3NlZEZhY3RvcmluZ1NpbXBsaWZpY2F0aW9uLmhhcyhuKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29yYWxcIjtcbiAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgU3VtXzEuU3VtKVxuICAgICAgICAgICAgICAgIGlmIChkZXJpdmVyLnBhc3NlZFBvbHlub21pYWxTaW1wbGlmaWNhdGlvbi5oYXMobikpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInllbGxvd1wiO1xuICAgICAgICAgICAgaWYgKGRlcml2ZXIucGFzc2VkQ29udmVyZ2VudFNpbXBsaWZpY2F0aW9uLmhhcyhuKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJsaWdodGdyZWVuXCI7XG4gICAgICAgICAgICBpZiAobiBpbnN0YW5jZW9mIFZhcmlhYmxlXzEuVmFyaWFibGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib3JhbmdlXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJsaWdodGJsdWVcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgIH0pO1xuICAgIGdyYXBoVmlldy5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIndlYi1ncmFwaHZpZXdcIik7XG4gICAgb3V0LmFwcGVuZENoaWxkKGdyYXBoVmlldyk7XG59XG5leHBvcnRzLmxvYWRQcmltYXJ5UGFnZSA9IGxvYWRQcmltYXJ5UGFnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkU2ltcGxpZmljYXRpb25UZXN0UGFnZSA9IHZvaWQgMDtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBEZXJpdmVyXzEgPSByZXF1aXJlKFwiLi9tYXRobGliL2Rlcml2YXRpb25zL0Rlcml2ZXJcIik7XG5jb25zdCBHcmFwaF8xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9HcmFwaFwiKTtcbmNvbnN0IEVkaXRhYmxlTWF0aFZpZXdfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvdWllbGVtZW50cy9FZGl0YWJsZU1hdGhWaWV3XCIpO1xuY29uc3QgQW50bHJNYXRoUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9tYXRobGliL3VzZXJpbnB1dC9BbnRsck1hdGhQYXJzZXJcIik7XG4vKipcbiAqIENhbGxlZCBhZnRlciBET00gaXMgbG9hZGVkLlxuICogU3Vic3RpdHV0ZXMgdGhlIGJvZHkgZWxlbWVudCBpbiB0aGUgZG9jdW1lbnRcbiAqIHdpdGggdGhlIHByaW1hcnkgaW50ZWdyYXRvciB2aWV3LlxuICovXG5mdW5jdGlvbiBsb2FkU2ltcGxpZmljYXRpb25UZXN0UGFnZSgpIHtcbiAgICBjb25zdCBwYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICBwYWdlLnN0eWxlLnBhZGRpbmcgPSBcIjhjaFwiO1xuICAgIGZ1bmN0aW9uIHAoY29udGVudCkge1xuICAgICAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICBlLmlubmVyVGV4dCA9IGNvbnRlbnQ7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2aWV3KGV4cCkge1xuICAgICAgICBjb25zdCBlID0gbmV3IEVkaXRhYmxlTWF0aFZpZXdfMS5FZGl0YWJsZU1hdGhWaWV3KCk7XG4gICAgICAgIGUudmFsdWUgPSBleHA7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdGVzdCBjb2x1bW4gdG8gdGhlIHBhZ2UuXG4gICAgICogQHBhcmFtIHN0YXJ0XG4gICAgICogQHBhcmFtIGFuc3cgVGhlIGNvcnJlY3Qgc2ltcGxpZmljYXRpb24gb2YgdGhlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2ltcGxpZnkoc3RhcnQsIGFuc3cpIHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICB0YWJsZS5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBibGFja1wiO1xuICAgICAgICB0YWJsZS5zdHlsZS53aWR0aCA9ICc4MCUnO1xuICAgICAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICBmdW5jdGlvbiBhcHBlbmQoY2VsbCkge1xuICAgICAgICAgICAgY2VsbC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBibGFja1wiO1xuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGExID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgY29uc3QgZGF0YTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICBjb25zdCBkYXRhMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIGFwcGVuZChkYXRhMSk7XG4gICAgICAgIGFwcGVuZChkYXRhMik7XG4gICAgICAgIGFwcGVuZChkYXRhMyk7XG4gICAgICAgIGRhdGExLmFwcGVuZENoaWxkKHZpZXcoc3RhcnQpKTtcbiAgICAgICAgY29uc3QgZ3JhcGggPSBuZXcgR3JhcGhfMS5HcmFwaCgpO1xuICAgICAgICBncmFwaC5hZGROb2RlKHN0YXJ0KTtcbiAgICAgICAgY29uc3QgZGVyaXZlciA9IG5ldyBEZXJpdmVyXzEuRGVyaXZlcihncmFwaCk7XG4gICAgICAgIGRlcml2ZXIuZXhwYW5kKDQwKTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGRlcml2ZXIuc2ltcGxpZmllZEV4cHJlc3Npb25zO1xuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzLmxlbmd0aCk7XG4gICAgICAgIGRhdGEyLmFwcGVuZENoaWxkKHZpZXcocmVzdWx0c1swXSkpO1xuICAgICAgICBkYXRhMy5hcHBlbmRDaGlsZCh2aWV3KGFuc3cpKTtcbiAgICAgICAgcGFnZS5hcHBlbmQodGFibGUpO1xuICAgICAgICAvLyBDb25kaXRpb25hbCBmb3JtYXR0aW5nXG4gICAgICAgIGlmIChyZXN1bHRzWzBdID09PSBhbnN3KSB7XG4gICAgICAgICAgICBkYXRhMi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0Z3JlZW5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICBjb25zdCBkYXRhNCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICBjb25zdCBkYXRhNSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICBjb25zdCBkYXRhNiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICBhcHBlbmQoZGF0YTQpO1xuICAgICAgICAgICAgYXBwZW5kKGRhdGE1KTtcbiAgICAgICAgICAgIGFwcGVuZChkYXRhNik7XG4gICAgICAgICAgICBkYXRhNC5pbm5lckhUTUwgPSByZXN1bHRzWzBdLnRvVW5hbWJpZ2lvdXNTdHJpbmcoKSArIFwiPGJyPlwiICsgYW5zdy50b1VuYW1iaWdpb3VzU3RyaW5nKCk7XG4gICAgICAgICAgICBkYXRhNS5pbm5lckhUTUwgPSBcIkhhc2hlczogPGJyPlwiICsgcmVzdWx0c1swXS5oYXNoICsgXCI8YnI+XCIgKyBhbnN3Lmhhc2g7XG4gICAgICAgICAgICBkYXRhNi5pbm5lckhUTUwgPSBcIklEczogXCIgKyByZXN1bHRzWzBdLmlkICsgXCI8YnI+XCIgKyBhbnN3LmlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgZm9yIHNpbXBsaWZ5IHRoYXQgcGFyc2VzIHN0cmluZ3NcbiAgICAgKiBAcGFyYW0gaW5wdXRcbiAgICAgKiBAcGFyYW0gYW5zd1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBTaW1wKGlucHV0LCBhbnN3KSB7XG4gICAgICAgIGNvbnN0IGlucHV0RXhwID0gKDAsIEFudGxyTWF0aFBhcnNlcl8xLnBhcnNlRXhwcmVzc2lvbikoaW5wdXQpO1xuICAgICAgICBjb25zdCBhbnN3RXhwID0gKDAsIEFudGxyTWF0aFBhcnNlcl8xLnBhcnNlRXhwcmVzc2lvbikoYW5zdyk7XG4gICAgICAgIHNpbXBsaWZ5KGlucHV0RXhwLCBhbnN3RXhwKTtcbiAgICB9XG4gICAgLy8gRXhwcmVzc2lvbnMgYW5kIHRoZWlyIGNvcnJlY3Qgc2ltcGxpZmljYXRpb25zXG4gICAgc2ltcGxpZnkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgyKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCkpO1xuICAgIHNpbXBsaWZ5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54LCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS54KSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnBvdykoQ29udmVuaWVudEV4cHJlc3Npb25zXzEueCwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMikpKTtcbiAgICBzaW1wbGlmeSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKDIpLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYikpO1xuICAgIHNpbXBsaWZ5KCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucG93KShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnBvdykoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYywgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYikpLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnBvdykoQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYiksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wb3cpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmMsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpKSk7XG4gICAgc2ltcGxpZnkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wb3cpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucG93KShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5jKSksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wb3cpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmMpKSk7XG4gICAgc2ltcGxpZnkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wb3cpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLmIpLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucG93KShDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5hLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5iKSksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wb3cpKENvbnZlbmllbnRFeHByZXNzaW9uc18xLmEsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgyKSwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuYikpKTtcbiAgICBwU2ltcChcIihhK2IpKGErYilcIiwgXCIoYStiKV4yXCIpO1xuICAgIHBTaW1wKFwiKGErYikoYS1iKVwiLCBcImFeMi1iXjJcIik7XG4gICAgcFNpbXAoXCJiXjIqYlwiLCBcImJeM1wiKTtcbiAgICAvLyBSYW5kb20gb25saW5lIHByb2JsZW1zXG4gICAgcFNpbXAoXCIoLSgxL3gpKzEpKCh4XjIpLyh4LTEpKVwiLCBcInhcIik7XG4gICAgcFNpbXAoXCIoM3grMjd5KzE1eikvKHgrOXkrNXopXCIsIFwiM1wiKTtcbiAgICBwU2ltcChcIih4XjItOSkvKHgrMylcIiwgXCIoeC0zKVwiKTtcbiAgICBwU2ltcChcIngrMyooMTAreSktN3gteVwiLCBcIi02eCsyeSszMFwiKTtcbiAgICBwU2ltcChcIig1LygyeC0zKS0oMy8oKDJ4LTMpXjIpKVwiLCBcIigyKDV4LTkpKS8oKDJ4LTMpXjIpXCIpO1xufVxuZXhwb3J0cy5sb2FkU2ltcGxpZmljYXRpb25UZXN0UGFnZSA9IGxvYWRTaW1wbGlmaWNhdGlvblRlc3RQYWdlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRTb2x2ZXJQYWdlID0gdm9pZCAwO1xuY29uc3QgRGVyaXZlcl8xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9kZXJpdmF0aW9ucy9EZXJpdmVyXCIpO1xuY29uc3QgR3JhcGhfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvR3JhcGhcIik7XG5jb25zdCBFZGl0YWJsZU1hdGhWaWV3XzEgPSByZXF1aXJlKFwiLi9tYXRobGliL3VpZWxlbWVudHMvRWRpdGFibGVNYXRoVmlld1wiKTtcbmNvbnN0IG5ncmFwaF9wYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5ncmFwaC5wYXRoXCIpKTtcbmNvbnN0IG5ncmFwaF9ncmFwaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJuZ3JhcGguZ3JhcGhcIikpO1xuY29uc3QgRXhwcmVzc2lvbl8xID0gcmVxdWlyZShcIi4vbWF0aGxpYi9leHByZXNzaW9ucy9FeHByZXNzaW9uXCIpO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvQXJndW1lbnRcIik7XG5jb25zdCBBcmd1bWVudE5vZGVWaWV3XzEgPSByZXF1aXJlKFwiLi9tYXRobGliL3VpZWxlbWVudHMvQXJndW1lbnROb2RlVmlld1wiKTtcbmNvbnN0IEV4cHJlc3Npb25Ob2RlVmlld18xID0gcmVxdWlyZShcIi4vbWF0aGxpYi91aWVsZW1lbnRzL0V4cHJlc3Npb25Ob2RlVmlld1wiKTtcbmNvbnN0IEdyYXBoTWluaXB1bGF0b3JfMSA9IHJlcXVpcmUoXCIuL21hdGhsaWIvR3JhcGhNaW5pcHVsYXRvclwiKTtcbmNvbnN0IEFudGxyTWF0aFBhcnNlcl8xID0gcmVxdWlyZShcIi4vbWF0aGxpYi91c2VyaW5wdXQvQW50bHJNYXRoUGFyc2VyXCIpO1xuZnVuY3Rpb24gbG9hZFNvbHZlclBhZ2UoKSB7XG4gICAgY29uc3QgaW5wdXRWaWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2JsZW0nKTtcbiAgICBjb25zdCBwcm9ibGVtVmlld0RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHByZXNzaW9uVmlld0RpdicpO1xuICAgIGNvbnN0IHNvbHV0aW9uVmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb2x1dGlvbicpO1xuICAgIGNvbnN0IHN0ZXBMaXN0VmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGVwcycpO1xuICAgIC8vIFBvcHVsYXRlIHVpXG4gICAgY29uc3QgcHJvYmxlbVZpZXcgPSBuZXcgRWRpdGFibGVNYXRoVmlld18xLkVkaXRhYmxlTWF0aFZpZXcoKTtcbiAgICBwcm9ibGVtVmlld0Rpdi5hcHBlbmRDaGlsZChwcm9ibGVtVmlldyk7XG4gICAgaW5wdXRWaWV3LmZvY3VzKCk7XG4gICAgaW5wdXRWaWV3LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCAoKSA9PiB7XG4gICAgICAgIC8vIFBhcnNlIGlucHV0XG4gICAgICAgIGxldCBleHA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleHAgPSAoMCwgQW50bHJNYXRoUGFyc2VyXzEucGFyc2VFeHByZXNzaW9uKShpbnB1dFZpZXcudmFsdWUpO1xuICAgICAgICAgICAgcHJvYmxlbVZpZXcudmFsdWUgPSBleHA7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHN0ZXBMaXN0Vmlldy5zdHlsZS5vcGFjaXR5ID0gXCIwLjZcIjtcbiAgICAgICAgICAgIHByb2JsZW1WaWV3LnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB3ZXJlIGFibGUgdG8gcGFyc2UgdGhlIGlucHV0XG4gICAgICAgIHN0ZXBMaXN0Vmlldy5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XG4gICAgICAgIC8vIENsZWFyIHRoZSBwcmV2aW91cyByZXN1bHRcbiAgICAgICAgd2hpbGUgKHN0ZXBMaXN0Vmlldy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzdGVwTGlzdFZpZXcucmVtb3ZlQ2hpbGQoc3RlcExpc3RWaWV3LmNoaWxkcmVuWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGVwcyA9IGdldFNvbHV0aW9uKGV4cCk7XG4gICAgICAgIC8vIERpc3BsYXkgbmV3IHJlc3VsdFxuICAgICAgICBzb2x1dGlvblZpZXcudmFsdWUgPSBzdGVwc1tzdGVwcy5sZW5ndGggLSAxXTtcbiAgICAgICAgc3RlcHMuZm9yRWFjaChzdGVwID0+IHtcbiAgICAgICAgICAgIGxldCB2aWV3O1xuICAgICAgICAgICAgaWYgKHN0ZXAgaW5zdGFuY2VvZiBBcmd1bWVudF8xLkFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgdmlldyA9IG5ldyBBcmd1bWVudE5vZGVWaWV3XzEuQXJndW1lbnROb2RlVmlldyhzdGVwLCB2aWV3ID0+IHsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGVwIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEV4cHJlc3Npb25Ob2RlVmlld18xLkV4cHJlc3Npb25Ob2RlVmlldyhzdGVwLCB2aWV3ID0+IHsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgICAgICAgICAgc3RlcExpc3RWaWV3LmFwcGVuZENoaWxkKHZpZXcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubG9hZFNvbHZlclBhZ2UgPSBsb2FkU29sdmVyUGFnZTtcbi8qKlxuICogU2ltcGxpZmllcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiByZXR1cm5pbmcgYW4gYXJyYXlcbiAqIG9mIHN0ZXBzIGVuZGluZyBpbiB0aGUgYW5zd2VyLlxuICogVGhlIGxhc3Qgbm9kZSB3aWxsIGJlIGFuIGV4cHJlc3Npb24uXG4gKi9cbmZ1bmN0aW9uIGdldFNvbHV0aW9uKHByb2JsZW0pIHtcbiAgICBjb25zdCBncmFwaCA9IG5ldyBHcmFwaF8xLkdyYXBoKCkuYWRkTm9kZShwcm9ibGVtKTtcbiAgICBjb25zdCBkZXJpdmVyID0gbmV3IERlcml2ZXJfMS5EZXJpdmVyKGdyYXBoKTtcbiAgICBkZXJpdmVyLmV4cGFuZCg1MCwgdHJ1ZSk7XG4gICAgbGV0IHNpbXBsaWZpZWQgPSBudWxsO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBncmFwaC5nZXROb2RlcygpKSB7XG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24pXG4gICAgICAgICAgICBpZiAoZGVyaXZlci5pc1NpbXBsaWZpZWQobm9kZSkpXG4gICAgICAgICAgICAgICAgc2ltcGxpZmllZCA9IG5vZGU7XG4gICAgfVxuICAgIC8vIENvcHkgdGhlIHJlc3VsdGluZyBncmFwaCBpbnRvIGEgbGlicmFyeSBpbXBsZW1lbnRhdGlvbiBvZiBncmFwaFxuICAgIGNvbnN0IGxpYnJhcnlHcmFwaCA9ICgwLCBuZ3JhcGhfZ3JhcGhfMS5kZWZhdWx0KSgpO1xuICAgIGdyYXBoLmdldE5vZGVzKCkuZm9yRWFjaChuID0+IHtcbiAgICAgICAgbGlicmFyeUdyYXBoLmFkZE5vZGUobi5pZCwgbik7XG4gICAgfSk7XG4gICAgLy8gSSBhc3N1bWUgdGhhdCBsaWJyYXJ5IGdyYXBoIGlzbid0IGRpcmVjdGVkXG4gICAgZm9yIChjb25zdCBlZGdlIG9mIEdyYXBoTWluaXB1bGF0b3JfMS5HcmFwaE1pbmlwdWxhdG9yLmRyb3BTeW1tZXRyaWMoZ3JhcGguZ2V0RWRnZXMoKSkpIHtcbiAgICAgICAgaWYgKGVkZ2UuZSBpbnN0YW5jZW9mIEFyZ3VtZW50XzEuQXJndW1lbnQpIHtcbiAgICAgICAgICAgIGxpYnJhcnlHcmFwaC5hZGRMaW5rKGVkZ2Uubi5pZCwgZWRnZS5lLmlkKTtcbiAgICAgICAgICAgIGxpYnJhcnlHcmFwaC5hZGRMaW5rKGVkZ2UuZS5pZCwgZWRnZS5uMS5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKGVkZ2UubiBpbnN0YW5jZW9mIEV4cHJlc3Npb24gJiYgZWRnZS5uMSBpbnN0YW5jZW9mIEV4cHJlc3Npb24pXG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhgZWRnZSAke2VkZ2Uubn0gQU5EICR7ZWRnZS5uMX1gKVxuICAgIH1cbiAgICAvLyBEbyBwYXRoIGZpbmRpbmcgb3BlcmF0aW9uIG9uIGl0XG4gICAgY29uc3QgcGF0aEZpbmRlciA9IG5ncmFwaF9wYXRoXzEuZGVmYXVsdC5uYmEobGlicmFyeUdyYXBoKTtcbiAgICBjb25zdCByZXN1bHRQYXRoID0gcGF0aEZpbmRlci5maW5kKHByb2JsZW0uaWQsIHNpbXBsaWZpZWQuaWQpLnJldmVyc2UoKTtcbiAgICByZXR1cm4gcmVzdWx0UGF0aC5tYXAobm9kZSA9PiB7XG4gICAgICAgIGlmIChub2RlLmRhdGEgaW5zdGFuY2VvZiBBcmd1bWVudF8xLkFyZ3VtZW50KVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgICAgICAgZWxzZSBpZiAobm9kZS5kYXRhIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24pXG4gICAgICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXJndW1lbnQgPSB2b2lkIDA7XG5jb25zdCBNYXRoR3JhcGhOb2RlXzEgPSByZXF1aXJlKFwiLi9NYXRoR3JhcGhOb2RlXCIpO1xuY29uc3QgYXNzZXJ0XzEgPSByZXF1aXJlKFwiLi91dGlsL2Fzc2VydFwiKTtcbi8qKlxuICogQ29ubmVjdHMgb25lIG9yIG1vcmUgbm9kZXMgKGdyb3VuZHMpIHRvIG9uZSBvciBtb3JlIG5vZGVzIChjbGFpbXMpLlxuICogQ29udGFpbnMgYW4gZXhwbGFuYXRpb24vYXJndW1lbnQgZm9yIHRoZSBjb25uZWN0aW9uLlxuICovXG5jbGFzcyBBcmd1bWVudCBleHRlbmRzIE1hdGhHcmFwaE5vZGVfMS5NYXRoR3JhcGhOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcihncm91bmRzLCBjbGFpbSwgYXJndW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ncm91bmRzID0gZ3JvdW5kcztcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLmdyb3VuZHMpO1xuICAgICAgICB0aGlzLmNsYWltID0gY2xhaW07XG4gICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgIH1cbiAgICBleHByZXNzaW9uRWRnZSA9IHRydWU7XG4gICAgZ2V0IHJlbGF0aW9uc2hpcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xhaW0ucjtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIkFyZ3VtZW50IFwiICsgdGhpcy5jbGFpbS5yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUd28gb3V0IG1hdGggZ3JhcGggbm9kZXMgdGhhdCBhcmUgcmVsYXRlZCBieSB0aGlzIEFydWdtZW50LlxuICAgICAqL1xuICAgIGNsYWltO1xuICAgIC8qKlxuICAgICAqIFRoZSBleHBsYW5hdGlvbiB0aGF0IGNvbm5lY3RzIHRoZSBhcmd1bWVudCdzIGdyb3VuZHMgdG9cbiAgICAgKiBpdCdzIGNsYWltZWQgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIHR3byBvdXQgbm9kZXMuXG4gICAgICpcbiAgICAgKi9cbiAgICBhcmd1bWVudDtcbiAgICAvKipcbiAgICAgKiBOb2RlcyB0aGF0IGhhdmUgYW4gZWRnZSBwb2ludGluZyB0byB0aGlzIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIGdyb3VuZHM7XG4gICAgcmVwT2soKSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKHRoaXMuZ3JvdW5kcyAhPSBudWxsKTtcbiAgICAgICAgZm9yIChjb25zdCBncm91bmQgb2YgdGhpcy5ncm91bmRzKSB7XG4gICAgICAgICAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KShncm91bmQgIT0gbnVsbCAmJiBncm91bmQgIT0gdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KSh0aGlzLmNsYWltLm4gIT0gbnVsbCAmJiB0aGlzLmNsYWltLm4gIT0gdW5kZWZpbmVkKTtcbiAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkodGhpcy5jbGFpbS5uMSAhPSBudWxsICYmIHRoaXMuY2xhaW0ubjEgIT0gdW5kZWZpbmVkKTtcbiAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkodGhpcy5jbGFpbS5yICE9IHVuZGVmaW5lZCAmJiB0aGlzLmNsYWltLnIgIT0gbnVsbCk7XG4gICAgfVxufVxuZXhwb3J0cy5Bcmd1bWVudCA9IEFyZ3VtZW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnkgPSBleHBvcnRzLnggPSBleHBvcnRzLmYgPSBleHBvcnRzLmUgPSBleHBvcnRzLmQgPSBleHBvcnRzLmMgPSBleHBvcnRzLmIgPSBleHBvcnRzLmEgPSBleHBvcnRzLnByb2R1Y3RBbmROb3RUaW1lc09uZSA9IGV4cG9ydHMucHJvZHVjdE9yTm90ID0gZXhwb3J0cy5lcXVpdmFsZW5jZUFyZ3VtZW50ID0gZXhwb3J0cy5pbnQgPSBleHBvcnRzLnYgPSBleHBvcnRzLm51bSA9IGV4cG9ydHMubmVnYXRpdmUgPSBleHBvcnRzLnByb2R1Y3QgPSBleHBvcnRzLnJlbW92ZU5ldyA9IGV4cG9ydHMucmVtb3ZlID0gZXhwb3J0cy5wb3cgPSBleHBvcnRzLm9yZGVyZWRQcm9kdWN0ID0gZXhwb3J0cy5zdW1Pck5vdCA9IGV4cG9ydHMuc3VtSW50dWl0aXZlID0gZXhwb3J0cy5zdW1FdmFsSW50ZWdlclRlcm1zID0gZXhwb3J0cy5vcmRlcmVkU3VtID0gZXhwb3J0cy5zdW0gPSBleHBvcnRzLmZyYWN0aW9uID0gdm9pZCAwO1xuY29uc3QgSW50ZWdlcl8xID0gcmVxdWlyZShcIi4vZXhwcmVzc2lvbnMvSW50ZWdlclwiKTtcbmNvbnN0IEZyYWN0aW9uXzEgPSByZXF1aXJlKFwiLi9leHByZXNzaW9ucy9GcmFjdGlvblwiKTtcbmNvbnN0IEludGVncmFsXzEgPSByZXF1aXJlKFwiLi9leHByZXNzaW9ucy9JbnRlZ3JhbFwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuL2V4cHJlc3Npb25zL1N1bVwiKTtcbmNvbnN0IFZhcmlhYmxlXzEgPSByZXF1aXJlKFwiLi9leHByZXNzaW9ucy9WYXJpYWJsZVwiKTtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi9Bcmd1bWVudFwiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcF8xID0gcmVxdWlyZShcIi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgYXNzZXJ0XzEgPSByZXF1aXJlKFwiLi91dGlsL2Fzc2VydFwiKTtcbmNvbnN0IEV4cG9uZW50XzEgPSByZXF1aXJlKFwiLi9leHByZXNzaW9ucy9FeHBvbmVudFwiKTtcbmZ1bmN0aW9uIGZyYWN0aW9uKG51bSwgZGVuKSB7XG4gICAgcmV0dXJuIEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YobnVtLCBkZW4pO1xufVxuZXhwb3J0cy5mcmFjdGlvbiA9IGZyYWN0aW9uO1xuLyoqXG4gKiBBIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgU3VtLm9mKClcbiAqL1xuZnVuY3Rpb24gc3VtKC4uLnRlcm1zKSB7XG4gICAgcmV0dXJuIFN1bV8xLlN1bS5vZih0ZXJtcyk7XG59XG5leHBvcnRzLnN1bSA9IHN1bTtcbi8qKlxuICogR2V0cyB0aGUgY29ycmVjdGx5IG9yZGVyZWQgc3VtIG9mIHRoZSBnaXZlbiBzdW0uXG4gKiAxICsgYSA9IGEgKyAxXG4gKiBGb2xsb3dzIHRoZSBzcGVjIGdpdmVuIGluIHRoZSBTdW0udHMgZmlsZS5cbiAqIEBwYXJhbSBzdW1cbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIG9yZGVyZWRTdW0oc3VtKSB7XG4gICAgY29uc3Qgb3JkZXJlZCA9ICgwLCBTdW1fMS5vcmRlclRlcm1zKSguLi5zdW0udGVybXMpO1xuICAgIHJldHVybiBTdW1fMS5TdW0ub2Yob3JkZXJlZCk7XG59XG5leHBvcnRzLm9yZGVyZWRTdW0gPSBvcmRlcmVkU3VtO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdW0gb2YgdGhlIGdpdmVuIHRlcm1zLCBldmFsdWF0aW5nIGFueSBpbnRlZ2VyIHRlcm1zLlxuICogUHV0cyBmaW5hbCBjb25zdGFudCBpbnRlZ2VyIGFzIHRoZSBsYXN0IHRlcm0uXG4gKiBJZiB0aGUgcmVzdWx0IGlzIGEgc3VtLCBpdCB3aWxsIG5vdCBoYXZlIHRoZSBpbnRlZ2VyIDAgYXMgYSB0ZXJtLlxuICogSWYgYWxsIGdpdmVuIHRlcm1zIHN1bSB0byB6ZXJvLCB0aGUgaW50ZWdlciB6ZXJvIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0gdGVybXNcbiAqL1xuZnVuY3Rpb24gc3VtRXZhbEludGVnZXJUZXJtcyguLi50ZXJtcykge1xuICAgIGNvbnN0IGludGVnZXJzID0gdGVybXMuZmlsdGVyKGUgPT4gZSBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyKS5sZW5ndGg7XG4gICAgaWYgKGludGVnZXJzIDwgMilcbiAgICAgICAgcmV0dXJuIHN1bSguLi50ZXJtcyk7XG4gICAgY29uc3Qgbm9uSW50VGVybXMgPSB0ZXJtcy5maWx0ZXIoZSA9PiAhKGUgaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcikpO1xuICAgIGNvbnN0IGludFRlcm0gPSB0ZXJtcy5maWx0ZXIoZSA9PiBlIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIpXG4gICAgICAgIC5tYXAoZSA9PiBlKVxuICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBudW0oYS52YWx1ZSArIGIudmFsdWUpKTtcbiAgICBpZiAoaW50VGVybS52YWx1ZSA9PSAwKSB7XG4gICAgICAgIGlmIChub25JbnRUZXJtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VtKC4uLm5vbkludFRlcm1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub25JbnRUZXJtcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vbkludFRlcm1zWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGludFRlcm07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChub25JbnRUZXJtcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGludFRlcm07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3VtKC4uLm5vbkludFRlcm1zLCBpbnRUZXJtKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuc3VtRXZhbEludGVnZXJUZXJtcyA9IHN1bUV2YWxJbnRlZ2VyVGVybXM7XG4vKipcbiAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGUgZ2l2ZW4gdGVybXMuIEV2YWx1YXRlcyBhbnlcbiAqIGludGVnZXIgdGVybXMuIEFkZGl0aW9uYWxseSBjYW5jZWxzIG91dCBhbnkgcG9zaXRpdmVcbiAqIG5lZ2F0aXZlIHRlcm1zLlxuICpcbiAqIFNpbXBsaWZpZXNcbiAqICB4ICsgYSAtIGEgPSB4XG4gKiB4ICsgYWIgLSBhYiA9IHhcbiAqIHggKyAyYWIgLSAyYWIgPSB4XG4gKiBhIC0gYSA9IDBcbiAqXG4gKiBEb2Vzbid0IGFmZmVjdFxuICogIHggKyAyYSAtIGFcbiAqIEBwYXJhbSB0ZXJtc1xuICovXG5mdW5jdGlvbiBzdW1JbnR1aXRpdmUoLi4udGVybXMpIHtcbiAgICBjb25zdCBpbnRFdmFsID0gc3VtRXZhbEludGVnZXJUZXJtcyguLi50ZXJtcyk7XG4gICAgaWYgKGludEV2YWwuY2xhc3MgIT0gU3VtXzEuU3VtVHlwZSlcbiAgICAgICAgcmV0dXJuIGludEV2YWw7XG4gICAgdGVybXMgPSBbLi4uaW50RXZhbC50ZXJtc107XG4gICAgLy8gRmluZCBvcHBvc2l0ZSBwYWlyc1xuICAgIC8vIFRoZXkgd2lsbCB0YWtlIHRoZSBmb3JtXG4gICAgLy8gICAgICBleHAgKyAtMSAqIGV4cFxuICAgIC8vIEkgYXNzdW1lIGhlcmUgdGhhdCB0aGUgb25seSB3YXkgdG8gbm90YXRlXG4gICAgLy8gbmVnYXRpdml0eSBpcyBieSBtdWx0aXBseWluZyBieSAtMVxuICAgIHRlcm1zOiBmb3IgKGNvbnN0IHQgb2YgdGVybXMpIHtcbiAgICAgICAgY29uc3Qgb3RoZXJUZXJtcyA9IFsuLi50ZXJtc107XG4gICAgICAgIHJlbW92ZShvdGhlclRlcm1zLCB0KTtcbiAgICAgICAgZm9yIChjb25zdCBvdGhlciBvZiBvdGhlclRlcm1zKSB7XG4gICAgICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCkge1xuICAgICAgICAgICAgICAgIGlmIChvdGhlci5pc05lZ2F0aW9uICYmIG90aGVyLm5lZ2F0aW9uID09PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0ZXJtcywgb3RoZXIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUodGVybXMsIHQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSB0ZXJtcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRlcm1zLmxlbmd0aCA9PSAwKVxuICAgICAgICByZXR1cm4gSW50ZWdlcl8xLkludGVnZXIub2YoMCk7XG4gICAgZWxzZSBpZiAodGVybXMubGVuZ3RoID09IDEpXG4gICAgICAgIHJldHVybiB0ZXJtc1swXTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBzdW0oLi4udGVybXMpO1xufVxuZXhwb3J0cy5zdW1JbnR1aXRpdmUgPSBzdW1JbnR1aXRpdmU7XG4vKipcbiAqIEZpbmRzIHRoZSBzdW0gb2YgdGhlIGdpdmVuIHRlcm1zIG9yIGlmIG9ubHkgMVxuICogaXMgZ2l2ZW4gcmV0dXJucyB0aGF0IHRlcm0uXG4gKiBAcGFyYW0gdGVybXNcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHN1bU9yTm90KC4uLnRlcm1zKSB7XG4gICAgaWYgKHRlcm1zLmxlbmd0aCA9PSAxKVxuICAgICAgICByZXR1cm4gdGVybXNbMF07XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gc3VtKC4uLnRlcm1zKTtcbn1cbmV4cG9ydHMuc3VtT3JOb3QgPSBzdW1Pck5vdDtcbi8qKlxuICogUHJvZHVjZXMgYSBwcm9kdWN0IGZyb20gdGhlIGdpdmVuIGZhY3RvcnNcbiAqIHdoZXJlIHRoZSBmYWN0b3JzIGFyZSBvcmRlcmVkIGFjY29yZGluZyB0byBjb252ZW50aW9uLlxuICogQHBhcmFtIGZhY3RvcnMgQXQgbGVhc3QgMlxuICovXG5mdW5jdGlvbiBvcmRlcmVkUHJvZHVjdCguLi5mYWN0b3JzKSB7XG4gICAgZmFjdG9ycy5zb3J0KFByb2R1Y3RfMS5mYWN0b3JPcmRlcik7XG4gICAgcmV0dXJuIHByb2R1Y3QoLi4uZmFjdG9ycyk7XG59XG5leHBvcnRzLm9yZGVyZWRQcm9kdWN0ID0gb3JkZXJlZFByb2R1Y3Q7XG4vKipcbiAqIENvbnZlbmllbmNlIHdyYXBwZXIgZnVuY3Rpb24gZm9yIEV4cG9uZW50Lm9mXG4gKiBAcGFyYW0gYmFzZVxuICogQHBhcmFtIHBvd2VyXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBwb3coYmFzZSwgcG93ZXIpIHtcbiAgICByZXR1cm4gRXhwb25lbnRfMS5FeHBvbmVudC5vZihiYXNlLCBwb3dlcik7XG59XG5leHBvcnRzLnBvdyA9IHBvdztcbi8qKlxuICogUmVtb3ZlcyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIGdpdmVuXG4gKiBlbGVtZW50IGZyb20gdGhlIGFycmF5LiBSZWFsbHkgc2hvdWxkIGJlXG4gKiBwYXJ0IG9mIHRoZSBzdGQgbGlicmFyeS4gSWRlbnRpZmllcyBvYmplY3RcbiAqIHdpdGggcmVmZXJlbmNpYWwgZXF1YWxpdHkuXG4gKiBAcGFyYW0gYXJyYXlcbiAqIEBwYXJhbSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZShhcnJheSwgZWxlbWVudCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICBhcnJheS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnJlbW92ZSA9IHJlbW92ZTtcbi8qKlxuICogR2V0cyBhIG5ldyBhcnJheSB3aXRob3V0IHRoZSBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgZ2l2ZW5cbiAqIGVsZW1lbnQuIFJlYWxseSBzaG91bGQgYmVcbiAqIHBhcnQgb2YgdGhlIHN0ZCBsaWJyYXJ5LiBJZGVudGlmaWVzIG9iamVjdFxuICogd2l0aCByZWZlcmVuY2lhbCBlcXVhbGl0eS5cbiAqIEBwYXJhbSBhcnJheVxuICogQHBhcmFtIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlTmV3KGFycmF5LCBlbGVtZW50KSB7XG4gICAgY29uc3QgaW5wdXQgPSBbLi4uYXJyYXldO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlucHV0W2ldID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICBpbnB1dC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiR2l2ZW4gYXJyYXkgZG9lc24ndCBjb250YWluIGVsZW1lbnQgXCIgKyBlbGVtZW50KTtcbn1cbmV4cG9ydHMucmVtb3ZlTmV3ID0gcmVtb3ZlTmV3O1xuZnVuY3Rpb24gcHJvZHVjdCguLi5mYWN0b3JzKSB7XG4gICAgZmFjdG9ycy5mb3JFYWNoKGYgPT4gKDAsIGFzc2VydF8xLmFzc2VydCkoZiAhPSBudWxsICYmIGYgIT0gdW5kZWZpbmVkLCBcIk1ha2luZyBwcm9kdWN0IHdpdGggbnVsbCBvciB1bmRlZmluZWQgZmFjdG9yXCIpKTtcbiAgICByZXR1cm4gUHJvZHVjdF8xLlByb2R1Y3Qub2YoZmFjdG9ycyk7XG59XG5leHBvcnRzLnByb2R1Y3QgPSBwcm9kdWN0O1xuZnVuY3Rpb24gbmVnYXRpdmUoZXhwcmVzc2lvbikge1xuICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKGV4cHJlc3Npb24gIT0gdW5kZWZpbmVkLCBcIlRha2luZyBuZWdhdGl2ZSBvZiB1bmRlZmluZWQgZXhwcmVzc2lvblwiKTtcbiAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyKVxuICAgICAgICByZXR1cm4gSW50ZWdlcl8xLkludGVnZXIub2YoLWV4cHJlc3Npb24udmFsdWUpO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIFByb2R1Y3RfMS5Qcm9kdWN0Lm9mKFtJbnRlZ2VyXzEuSW50ZWdlci5vZigtMSksIGV4cHJlc3Npb25dKTtcbn1cbmV4cG9ydHMubmVnYXRpdmUgPSBuZWdhdGl2ZTtcbmZ1bmN0aW9uIG51bSh2YWwpIHtcbiAgICByZXR1cm4gSW50ZWdlcl8xLkludGVnZXIub2YodmFsKTtcbn1cbmV4cG9ydHMubnVtID0gbnVtO1xuZnVuY3Rpb24gdihzeW1ib2wpIHtcbiAgICByZXR1cm4gVmFyaWFibGVfMS5WYXJpYWJsZS5vZihzeW1ib2wpO1xufVxuZXhwb3J0cy52ID0gdjtcbmZ1bmN0aW9uIGludChpbnRlZ3JhbmQsIHJlc3BlY3RUbykge1xuICAgIHJldHVybiBJbnRlZ3JhbF8xLkludGVncmFsLm9mKGludGVncmFuZCwgcmVzcGVjdFRvKTtcbn1cbmV4cG9ydHMuaW50ID0gaW50O1xuZnVuY3Rpb24gZXF1aXZhbGVuY2VBcmd1bWVudChmaXJzdCwgc2Vjb25kLCBleHBsYW5hdGlvbikge1xuICAgIHJldHVybiBuZXcgQXJndW1lbnRfMS5Bcmd1bWVudChzZXRPZihmaXJzdCksIHtcbiAgICAgICAgbjogZmlyc3QsXG4gICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgbjE6IHNlY29uZCxcbiAgICB9LCBleHBsYW5hdGlvbik7XG59XG5leHBvcnRzLmVxdWl2YWxlbmNlQXJndW1lbnQgPSBlcXVpdmFsZW5jZUFyZ3VtZW50O1xuLyoqXG4gKlxuICogQHJldHVybnMgVGhlIHByb2R1Y3Qgb2YgdGhlIGdpdmVuIGZhY3RvcnMsIG9yIHRoZSBvbmx5IGZhY3RvciBnaXZlblxuICogaWYgb25seSBvbmUgZ2l2ZW4uIFRocm93cyBpZiBubyBleHByZXNzaW9ucyBhcmUgZ2l2ZW4uXG4gKi9cbmZ1bmN0aW9uIHByb2R1Y3RPck5vdCguLi5leHByZXNzaW9ucykge1xuICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKGV4cHJlc3Npb25zLmxlbmd0aCA+IDApO1xuICAgIGlmIChleHByZXNzaW9ucy5sZW5ndGggPT0gMSlcbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb25zWzBdO1xuICAgIHJldHVybiBwcm9kdWN0KC4uLmV4cHJlc3Npb25zKTtcbn1cbmV4cG9ydHMucHJvZHVjdE9yTm90ID0gcHJvZHVjdE9yTm90O1xuLyoqXG4gKiBAcmV0dXJucyBUaGUgcHJvZHVjdCBvZiB0aGUgZ2l2ZW4gdGVybXMgZXhsY3VkaW5nIHRoZSBmaXJzdCBpZlxuICogICAgICAgICAgaXQncyBvbmUuIElmIHRoZSByZXN1bHRpbmcgdGVybXMgbGlzdCBpcyBvbmx5IG9uZSB0ZXJtLFxuICogICAgICAgICAgcmV0dXJucyB0aGUgb25seSB0ZXJtLlxuICovXG5mdW5jdGlvbiBwcm9kdWN0QW5kTm90VGltZXNPbmUoLi4uZXhwcmVzc2lvbnMpIHtcbiAgICBpZiAoZXhwcmVzc2lvbnNbMF0gaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlciAmJiBleHByZXNzaW9uc1swXS52YWx1ZSA9PSAxKSB7XG4gICAgICAgIGV4cHJlc3Npb25zLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiBwcm9kdWN0T3JOb3QoLi4uZXhwcmVzc2lvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvZHVjdE9yTm90KC4uLmV4cHJlc3Npb25zKTtcbn1cbmV4cG9ydHMucHJvZHVjdEFuZE5vdFRpbWVzT25lID0gcHJvZHVjdEFuZE5vdFRpbWVzT25lO1xuZnVuY3Rpb24gc2V0T2YoLi4uZXhwcmVzc2lvbnMpIHtcbiAgICBjb25zdCBvdXQgPSBuZXcgU2V0KCk7XG4gICAgZXhwcmVzc2lvbnMuZm9yRWFjaChlID0+IG91dC5hZGQoZSkpO1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLmEgPSB2KCdhJyk7XG5leHBvcnRzLmIgPSB2KCdiJyk7XG5leHBvcnRzLmMgPSB2KCdjJyk7XG5leHBvcnRzLmQgPSB2KCdkJyk7XG5leHBvcnRzLmUgPSB2KCdlJyk7XG5leHBvcnRzLmYgPSB2KCdmJyk7XG5leHBvcnRzLnggPSB2KCd4Jyk7XG5leHBvcnRzLnkgPSB2KCd5Jyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2l2ZW5FZGdlID0gZXhwb3J0cy5Bcmd1bWVudEVkZ2UgPSBleHBvcnRzLkdyYXBoID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuL0FyZ3VtZW50XCIpO1xuY29uc3QgYXNzZXJ0XzEgPSByZXF1aXJlKFwiLi91dGlsL2Fzc2VydFwiKTtcbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgZ3JhcGggb2YgZXhwcmVzc2lvbnMgYW5kIHN0YXRlbWVudHNcbiAqIGluY2x1ZGluZyBldmVyeXRoaW5nIHdlIGtub3cgYWJvdXQgYSBwcm9ibGVtLlxuICogQ29ubmVjdHMgR3JhcGhOb2RlcyB2aWEgSW5mZXJlbmNlcyBmb3IgZWRnZXMuXG4gKlxuICogSXQncyBhIGRpZ3JhcGguIFRPRE86IEl0IG1heSBhbHNvIG5lZWQgdG8gYmUgYSBtdWx0aWdyYXBoLi4uXG4gKi9cbmNsYXNzIEdyYXBoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5lZGdlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV4cHJlc3Npb24gdG8gdGhlIHByb2JsZW0uXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcmV0dXJucyB0aGUgc2FtZSBncmFwaCBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgYWRkTm9kZShub2RlKSB7XG4gICAgICAgIHRoaXMubm9kZXMuYWRkKG5vZGUpO1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEFyZ3VtZW50XzEuQXJndW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQXJndW1lbnQobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gdHdvIGVsZW1lbnRzIGdpdmVuIGJ5IHRoZSB1c2VyIHRvIHRoZSBncmFwaC5cbiAgICAgKiBTaG91bGQgbm90IGJlIGNhbGxlZCB0byBhZGQgZGVyaXZlZCB0cnV0aHMgYmMgdGhpcyB3b24ndCBzdG9yZSBhbiBleHBsYW5hdGlvbi5cbiAgICAgKiBBZGRzIGdpdmVuIG5vZGVzIGlmIHRoZXkgYXJlbid0IGFscmVhZHkgb24gdGhlIGdyYXBoLlxuICAgICAqIEBwYXJhbSBuXG4gICAgICogQHBhcmFtIG4xXG4gICAgICogQHBhcmFtIHJcbiAgICAgKiBAcmV0dXJucyBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAqL1xuICAgIGFkZFJlbGF0aW9uc2hpcChuLCBuMSwgcikge1xuICAgICAgICB0aGlzLmFkZE5vZGUobik7XG4gICAgICAgIHRoaXMuYWRkTm9kZShuMSk7XG4gICAgICAgIC8vIERlZmluZWQgYm90aCB3YXlzIGJlY2F1c2UgdGhlIHVzZXIgaXMgZ2l2aW5nIGl0XG4gICAgICAgIHRoaXMuaW50ZXJuYWxBZGQobiwgbjEsIG5ldyBHaXZlbkVkZ2UocikpO1xuICAgICAgICB0aGlzLmludGVybmFsQWRkKG4xLCBuLCBuZXcgR2l2ZW5FZGdlKHIpKTtcbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5vZGUgcmVwcmVzZW50aW5nIGFuIGFjdW11bGF0aW9uIG9mIGZhY3RzXG4gICAgICogdGhhdCBsZWFkcyB0byBhIGNvbmNsdXNpb24uXG4gICAgICogVGhlIHJlbGF0aW9uc2hpcCBjbGFpbWVkIGJ5IHRoZSBhcmd1bWVudCBpcyBkaXJlY3RlZFxuICAgICAqIGZyb20gbiB0byBuMSB3aXRoIHRoZSBhcmd1bWVudCBhcyB0aGUgZWRnZS5cbiAgICAgKiBAcGFyYW0gYVxuICAgICAqIEByZXR1cm5zIHRoZSBzYW1lIGdyYXBoIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBhZGRBcmd1bWVudChhKSB7XG4gICAgICAgIHRoaXMubm9kZXMuYWRkKGEpO1xuICAgICAgICAvLyBBZGQgdGhlIGdyb3VuZHNcbiAgICAgICAgZm9yIChjb25zdCBncm91bmQgb2YgYS5ncm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVzLmFkZChncm91bmQpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEFkZChncm91bmQsIGEsIEFyZ3VtZW50RWRnZS5Ubyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIHRoZSBjbGFpbVxuICAgICAgICBjb25zdCBjbGFpbSA9IGEuY2xhaW07XG4gICAgICAgIHRoaXMuYWRkTm9kZShjbGFpbS5uKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKGNsYWltLm4xKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbEFkZChhLCBjbGFpbS5uLCBBcmd1bWVudEVkZ2UuRnJvbSk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxBZGQoYSwgY2xhaW0ubjEsIEFyZ3VtZW50RWRnZS5Gcm9tKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbEFkZChjbGFpbS5uLCBjbGFpbS5uMSwgYSk7XG4gICAgICAgIHRoaXMucmVwT2soKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBzYW1lIGdyYXBoIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBhZGRBcmd1bWVudHMoLi4uYSkge1xuICAgICAgICBhLmZvckVhY2goYXJnID0+IHRoaXMuYWRkQXJndW1lbnQoYXJnKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBnaXZlbiBkaXJlY3RlZCBlZGdlIHRvIHRoZSBncmFwaC4gSWYgZWl0aGVyIG5vZGVcbiAgICAgKiBpcyBtaXNzaW5nIGZyb20gdGhlIGdyYXBoLCBhZGRzIGl0LlxuICAgICAqIEBwYXJhbSBuXG4gICAgICogQHBhcmFtIG4xXG4gICAgICogQHBhcmFtIGVcbiAgICAgKiBAcmV0dXJucyBUaGlzLlxuICAgICAqL1xuICAgIGFkZEVkZ2UobiwgbjEsIGUpIHtcbiAgICAgICAgdGhpcy5hZGROb2RlKG4pO1xuICAgICAgICB0aGlzLmFkZE5vZGUobjEpO1xuICAgICAgICB0aGlzLmludGVybmFsQWRkKG4sIG4xLCBlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2V0IG9mIG5laWdoYm9ycyBvZiBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIE5vZGVzIHRoYXQgYXJlIGFkamFjZW50IHRvIHRoaXMgbm9kZSwgZnJvbSB0aGlzIG5vZGUsIG9yIGVpdGhlci5cbiAgICAgKiBAcmV0dXJucyBVbmRlZmluZWQgaWYgdGhlIG5vZGUgaXNuJ3QgaW4gdGhpcyBncmFwaC4gT3RoZXJ3aXNlLCBhIHNldCBvZiBjb25uZWN0ZWQgbm9kZXMuXG4gICAgICogICAgICAgICAgSWYgdGhlIG5vZGUgaXMgaW4gdGhlIGdyYXBoIGJ1dCBpc24ndCBjb25uZWN0ZWQgdG8gYW55dGhpbmcsIHJldHVybnMgZW1wdHkgc2V0LlxuICAgICAqL1xuICAgIGdldE5laWdoYm9ycyhub2RlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLm5vZGVzLmhhcyhub2RlKSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gXCJvdXRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi50aGlzLmNvbm5lY3Rpb25zLmdldChub2RlKV07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFkamFjZW50VG8gPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLm5vZGVzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9ucy5nZXQobik/Lmhhcyhub2RlKSlcbiAgICAgICAgICAgICAgICBhZGphY2VudFRvLmFkZChuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlyZWN0aW9uID09IFwiaW5cIilcbiAgICAgICAgICAgIHJldHVybiBbLi4uYWRqYWNlbnRUb107XG4gICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLmNvbm5lY3Rpb25zLmdldChub2RlKSA/PyBbXSlcbiAgICAgICAgICAgIGFkamFjZW50VG8uYWRkKG4pO1xuICAgICAgICByZXR1cm4gWy4uLmFkamFjZW50VG9dO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHRoZSBudW1iZXIgb2YgZWRnZXMgdGhpcyBub2RlIGhhcy5cbiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSBiZWluZyBjb25zZGVyZWQuXG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiBDb3VudCBvbmx5IHRoZSBlZGdlcyBnb2luZyB0b3dhcmRzIHRoaXMgbm9kZSwgYXdheSBmcm9tXG4gICAgICogICAgICAgICAgaXQsIG9yIGJvdGguXG4gICAgICogQHJldHVybnMgPj0gMCwgdW5kZWZpbmVkIGlmIHRoZSBnaXZlbiBub2RlIGlzbid0IGluIHRoZSBncmFwaC5cbiAgICAgKi9cbiAgICBnZXREZWdyZWUobm9kZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5ub2Rlcy5oYXMobm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09IFwib3V0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25zLmdldChub2RlKT8uc2l6ZSA/PyAwO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkZWdJbiA9IDA7XG4gICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25zLmdldChuKSA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbnMuZ2V0KG4pLmhhcyhub2RlKSlcbiAgICAgICAgICAgICAgICBkZWdJbisrO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSBcImluXCIpXG4gICAgICAgICAgICByZXR1cm4gZGVnSW47XG4gICAgICAgIHJldHVybiBkZWdJbiArICh0aGlzLmNvbm5lY3Rpb25zLmdldChub2RlKT8uc2l6ZSA/PyAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG4gTm9kZSBpbiB0aGUgZ3JhcGguXG4gICAgICogQHBhcmFtIG4xIEluIHRoZSBncmFwaC5cbiAgICAgKiBAcmV0dXJucyBVbmRlZmluZWQgaWYgZWl0aGVyIG5vZGUgaXNuJ3QgaW4gdGhlIGdyYXBoIG9yIHRoZXkncmUgbm90XG4gICAgICogY29ubmVjdGVkLlxuICAgICAqL1xuICAgIGdldEVkZ2UobiwgbjEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRnZXMuZ2V0KG4pPy5nZXQobjEpO1xuICAgIH1cbiAgICBjb250YWlucyhub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzLmhhcyhub2RlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgQSBuZXcgc2V0IGNvbnRhaW5pbmcgYWxsIHRoZSBub2RlcyBpbiB0aGUgZ3JhcGhcbiAgICAgKi9cbiAgICBnZXROb2RlcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXQodGhpcy5ub2Rlcyk7XG4gICAgfVxuICAgIGdldEVkZ2VzKCkge1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZWRnZXMuZm9yRWFjaCgobWFwLCBmaXJzdCkgPT4ge1xuICAgICAgICAgICAgbWFwLmZvckVhY2goKGVkZ2UsIHNlY29uZCkgPT4ge1xuICAgICAgICAgICAgICAgIG91dC5hZGQoeyBuOiBmaXJzdCwgbjE6IHNlY29uZCwgZTogZWRnZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgbnVtTm9kZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzLnNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIGdyYXBoIG5vZGVzIGFuZCBlZGdlcyB0byB0aGlzIG9uZS5cbiAgICAgKiBAcGFyYW0gZ3JhcGhcbiAgICAgKiBAcmV0dXJucyB0aGUgc2FtZSBncmFwaCBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgYWRkR3JhcGgoZ3JhcGgpIHtcbiAgICAgICAgZ3JhcGgubm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgICAgIHRoaXMubm9kZXMuYWRkKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ3JhcGguZWRnZXMuZm9yRWFjaCgobWFwLCBub2RlMSkgPT4ge1xuICAgICAgICAgICAgbWFwLmZvckVhY2goKGVkZ2UsIG5vZGUyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVkZ2UgaW5zdGFuY2VvZiBBcmd1bWVudF8xLkFyZ3VtZW50KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEFyZ3VtZW50KGVkZ2UpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVkZ2UgPT0gXCJzdXBwb3J0c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxBZGQobm9kZTEsIG5vZGUyLCBBcmd1bWVudEVkZ2UuVG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlZGdlID09IFwiY2xhaW1zXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEFkZChub2RlMSwgbm9kZTIsIEFyZ3VtZW50RWRnZS5Gcm9tKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIEVkZ2UgVHlwZVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCBvdXQgPSBcIkdyYXBoKFYgPSB7XCI7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLm5vZGVzKSB7XG4gICAgICAgICAgICBvdXQgKz0gbm9kZS50b1N0cmluZygpICsgXCIsXCI7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ID0gb3V0LnN1YnN0cmluZygwLCBvdXQubGVuZ3RoIC0gMSkgKyBcIn0sIEUgPSB7XCI7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbnMuZm9yRWFjaCgoc2V0LCBzcmMpID0+IHtcbiAgICAgICAgICAgIHNldC5mb3JFYWNoKGRlc3QgPT4ge1xuICAgICAgICAgICAgICAgIG91dCArPSBzcmMudG9TdHJpbmcoKSArIFwiIC0+IFwiICsgZGVzdC50b1N0cmluZygpICsgXCIsIFwiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBvdXQgKz0gXCJ9IEVkZ2UgQ291bnQ6IFwiICsgdGhpcy5jb25uZWN0aW9ucy5zaXplO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBpbnRlcm5hbEFkZChuLCBuMSwgZSkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9ucy5nZXQobikgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9ucy5zZXQobiwgbmV3IFNldCgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25zLmdldChuKS5hZGQobjEpO1xuICAgICAgICBpZiAodGhpcy5lZGdlcy5nZXQobikgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVkZ2VzLnNldChuLCBuZXcgTWFwKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWRnZXMuZ2V0KG4pLnNldChuMSwgZSk7XG4gICAgICAgIHRoaXMucmVwT2soKTtcbiAgICB9XG4gICAgcmVwT2soKSB7XG4gICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT0gdW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFsbCBjb25uZWN0aW9ucy9lZGdlcyBoYXZlIG5vZGVzXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkodGhpcy5ub2Rlcy5oYXMoa2V5KSk7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKG4gPT4ge1xuICAgICAgICAgICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKHRoaXMubm9kZXMuaGFzKG4pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lZGdlcy5mb3JFYWNoKChtYXAsIGZpcnN0KSA9PiB7XG4gICAgICAgICAgICBtYXAuZm9yRWFjaCgoZWRnZSwgc2Vjb25kKSA9PiB7XG4gICAgICAgICAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkodGhpcy5ub2Rlcy5oYXMoZmlyc3QpKTtcbiAgICAgICAgICAgICAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KSh0aGlzLm5vZGVzLmhhcyhzZWNvbmQpKTtcbiAgICAgICAgICAgICAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KSh0aGlzLmNvbm5lY3Rpb25zLmdldChmaXJzdCkuaGFzKHNlY29uZCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub2RlcztcbiAgICAvLyBRdWlja2x5IGFjY2VzcyBhbGwgY29ubmVjdGlvbnMgb2YgYSBub2RlXG4gICAgY29ubmVjdGlvbnM7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGNvbm5lY3Rpb24gYmV0d2VlbiB0d28gbm9kZXNcbiAgICBlZGdlcztcbn1cbmV4cG9ydHMuR3JhcGggPSBHcmFwaDtcbnZhciBBcmd1bWVudEVkZ2U7XG4oZnVuY3Rpb24gKEFyZ3VtZW50RWRnZSkge1xuICAgIEFyZ3VtZW50RWRnZVtcIlRvXCJdID0gXCJzdXBwb3J0c1wiO1xuICAgIEFyZ3VtZW50RWRnZVtcIkZyb21cIl0gPSBcImNsYWltc1wiO1xufSkoQXJndW1lbnRFZGdlIHx8IChleHBvcnRzLkFyZ3VtZW50RWRnZSA9IEFyZ3VtZW50RWRnZSA9IHt9KSk7XG4vKipcbiAqIENvbW11bmljYXRlcyBhIHJlbGF0aW9uaGlwIGdpdmVuIGJ5IHRoZSB1c2VyLlxuICovXG5jbGFzcyBHaXZlbkVkZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHIpIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICB9XG4gICAgcjtcbn1cbmV4cG9ydHMuR2l2ZW5FZGdlID0gR2l2ZW5FZGdlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdyYXBoTWluaXB1bGF0b3IgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4vQXJndW1lbnRcIik7XG5jb25zdCBHcmFwaF8xID0gcmVxdWlyZShcIi4vR3JhcGhcIik7XG5jb25zdCBhc3NlcnRfMSA9IHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0XCIpO1xuLyoqXG4gKiBUb29sIHRvIGRvIG9wZXJhdGlvbnMgb24gZ3JhcGhzLlxuICovXG5jbGFzcyBHcmFwaE1pbmlwdWxhdG9yIHtcbiAgICAvKipcbiAgICAgKiBGaW5kIG5vZGVzIG9mIGNvbXBvbmVudHMgb2YgYSBncmFwaCB3aGVyZSBvbmx5IGVkZ2VzIGZvciB3aGljaFxuICAgICAqIHRoZSBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRydWUgYXJlIGNvbnNpZGVyZWQuXG4gICAgICogQHBhcmFtXG4gICAgICogQHBhcmFtIGlzQ29ubmVjdGVkXG4gICAgICovXG4gICAgc3RhdGljIGdldENvbXBvbmVudE5vZGVzKGlucHV0LCBpc0Nvbm5lY3RlZCkge1xuICAgICAgICBjb25zdCBpbmNsdWRlZE5vZGVzID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgaW5wdXQuZ2V0Tm9kZXMoKSkge1xuICAgICAgICAgICAgaWYgKGluY2x1ZGVkTm9kZXMuaGFzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRBbGxDb25uZWN0ZWQobikge1xuICAgICAgICAgICAgICAgIGluY2x1ZGVkTm9kZXMuYWRkKG4pO1xuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQuaGFzKG4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmFkZChuKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5laWdoYm9yIG9mIGlucHV0LmdldE5laWdoYm9ycyhuLCBcImJvdGhcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Nvbm5lY3RlZChpbnB1dC5nZXRFZGdlKG4sIG5laWdoYm9yKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgZ2V0QWxsQ29ubmVjdGVkKG5laWdoYm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0QWxsQ29ubmVjdGVkKG5vZGUpO1xuICAgICAgICAgICAgY29tcG9uZW50LmFkZChub2RlKTtcbiAgICAgICAgICAgIGNvbXBvbmVudHMuYWRkKGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkoaW5jbHVkZWROb2Rlcy5zaXplID09IGlucHV0Lm51bU5vZGVzKCkpO1xuICAgICAgICAvLyBBc3NlcnQgY29tcG9uZW50cyBhcmUgcGFpcndpc2UgZGlzam9pbnQgb2YgcHJvYmxlbXMgc2hvdyB1cFxuICAgICAgICByZXR1cm4gY29tcG9uZW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBncmFwaCB3aXRoIG9ubHkgdGhlIG5vZGVzIHdoaWNoIHBhc3MgdGhlIHByb3ZpZGVkXG4gICAgICogZmlsdGVyIGZ1bmN0aW9uLiBFZGdlcyBjb25uZWN0ZWQgdG8gcmVtb3ZlZCBub2RlcyBhcmUgcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBncmFwaFxuICAgICAqIEBwYXJhbSBpbmNsdWRlZFxuICAgICAqL1xuICAgIHN0YXRpYyBkcm9wTm9kZXMoZ3JhcGgsIGluY2x1ZGVkKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBHcmFwaF8xLkdyYXBoKCk7XG4gICAgICAgIGdyYXBoLmdldE5vZGVzKCkuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlZChuKSlcbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkTm9kZShuKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGdyYXBoLmdldEVkZ2VzKCkuZm9yRWFjaChlID0+IHtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlZChlLm4pICYmIGluY2x1ZGVkKGUubjEpKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5hZGRFZGdlKGUubiwgZS5uMSwgZS5lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgZXZlcnkgZWRnZSBpbiB0aGUgZ3JhcGguXG4gICAgICogQHBhcmFtIGlucHV0XG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UmVsYXRpb25zKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgaW5wdXQuZ2V0Tm9kZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvdGhlciBvZiBpbnB1dC5nZXROZWlnaGJvcnMobm9kZSwgXCJvdXRcIikpIHtcbiAgICAgICAgICAgICAgICBvdXQucHVzaCh7IGZpcnN0OiBub2RlLCBzZWNvbmQ6IG90aGVyLCBlOiBpbnB1dC5nZXRFZGdlKG5vZGUsIG90aGVyKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGdyYXBoIGludG8gc2V0cyBvZlxuICAgICAqIG5vZGVzIGdyb3VwZWQgYnkgZGVwdGggZnJvbSBhIGNlbnRlciBub2RlLlxuICAgICAqIEFzc3VtZXMgdGhlIGdyYXBoIGlzIGNvbm5lY3RlZC5cbiAgICAgKiBAcGFyYW0gcm9vdE5vZGVzIENvbnRhaW5zIGF0IGxlYXN0IG9uZSBub2RlIGluIHRoZSBncmFwaC5cbiAgICAgKiBAcGFyYW0gY291bnQgRnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIGlmIGFueSBnaXZlbiBub2RlIHNob3VsZCBiZVxuICAgICAqIGluY2x1ZGVkIGluIHRoZSBkZXB0aCBjb3VudC4gRGVmYXVsdHMgdG8gY291bnRpbmcgYWxsIG5vZGVzLiBOb2RlcyB0aGF0XG4gICAgICogYXJlbid0IGluY2x1ZGVkIHdvbid0IGJlIGluIHRoZSByZXR1cm5lZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyBNYXAgZnJvbSBkZXB0aCBpbiBncmFwaCB0byBhIHNldCBvZiBub2RlcyBhdCB0aGF0IGRlcHRoLlxuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIGdldExldmVscyhpbnB1dCwgcm9vdE5vZGVzLCBjb3VudCA9ICgpID0+IHRydWUpIHtcbiAgICAgICAgY29uc3Qgcm9vdHMgPSBuZXcgU2V0KHJvb3ROb2Rlcyk7XG4gICAgICAgIGNvbnN0IGRlcHRocyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlY3Vyc2l2ZWx5IG1hcHMgb3V0IGFsbCBub2RlcyBpbiB0aGUgZ3JhcGgsXG4gICAgICAgICAqIHB1dHRpbiB0aGVtIGluIHRoZSBkZXB0aHMgbWFwLlxuICAgICAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gbWFwTm9kZShub2RlLCBkZXB0aCA9IDApIHtcbiAgICAgICAgICAgIGlmIChyb290cy5oYXMobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBkZXB0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVwdGggPCAoZGVwdGhzLmdldChub2RlKSA/PyBOdW1iZXIuTUFYX1ZBTFVFKSkge1xuICAgICAgICAgICAgICAgIGRlcHRocy5zZXQobm9kZSwgZGVwdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmVpZ2hib3JzID0gWy4uLmlucHV0LmdldE5laWdoYm9ycyhub2RlLCBcImJvdGhcIildO1xuICAgICAgICAgICAgbmVpZ2hib3JzLmZpbHRlcih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBmb3VuZCBhIHNob3J0ZXIgcGF0aCB0byBpdCBvciB0aGVyZSB3YXMgbm8gZm91bmQgcGF0aCB0byBpdFxuICAgICAgICAgICAgICAgIHJldHVybiAoZGVwdGhzLmdldCh2YWx1ZSkgPT0gdW5kZWZpbmVkIHx8IGRlcHRocy5nZXQodmFsdWUpID4gZGVwdGgpICYmIHZhbHVlICE9PSBub2RlO1xuICAgICAgICAgICAgfSkuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgICAgICBtYXBOb2RlKG4sIGNvdW50KG5vZGUpID8gZGVwdGggKyAxIDogZGVwdGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWFwTm9kZShbLi4ucm9vdHNdWzBdKTtcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IE1hcCgpO1xuICAgICAgICBkZXB0aHMuZm9yRWFjaCgoZGVwdGgsIG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmICghY291bnQobm9kZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKG91dC5nZXQoZGVwdGgpID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG91dC5zZXQoZGVwdGgsIG5ldyBTZXQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQuZ2V0KGRlcHRoKS5hZGQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBncmFwaCBpcyBjb25uZWN0ZWQsIG1lYW5pbmcgdGhhdFxuICAgICAqIGl0J3MgcG9zc2libGUgdG8gdHJhdmVyc2UgYmV0d2VlbiBhbnkgdHdvIG5vZGVzIG9uIHRoZSBncmFwaC5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNDb25uZWN0ZWQoaW5wdXQpIHtcbiAgICAgICAgLy8gQ2hlY2sgZXZlcnkgbm9kZSBoYXMgYSBkZWdyZWUgb2YgMSBvciBtb3JlIG9yIGdyYXBoIG9ubHkgaGFzIDEgb3IgMCBlbGVtZW50c1xuICAgICAgICByZXR1cm4gWy4uLmlucHV0LmdldE5vZGVzKCldLm1hcChub2RlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5nZXREZWdyZWUobm9kZSwgXCJib3RoXCIpID4gMDtcbiAgICAgICAgfSkucmVkdWNlKChhLCBiKSA9PiBhICYmIGIpIHx8IGlucHV0Lm51bU5vZGVzKCkgPCAyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIGVkZ2VzIGxpc3QgcmV0dXJuaW5nIGEgbGlzdCB3aGVyZSBvbmx5IG9uZSBlZGdlXG4gICAgICogZnJvbSBhbnkgZWRnZSBsb29wcyBpcyBpbmNsdWRlZC5cbiAgICAgKiBGb3IgZXhhbXBsZSBpZiB0aGUgaW5wdXQgZWRnZXMgYXJlIGEgLT4gYiBhbmQgYiAtPiBhLFxuICAgICAqIHRoZSByZXN1bHQgd2lsbCBvbmx5IGNvbnRhaW4gYSAtPiBiLlxuICAgICAqIEBwYXJhbSBlZGdlc1xuICAgICAqL1xuICAgIHN0YXRpYyBkcm9wU3ltbWV0cmljKGVkZ2VzKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBhbHJlYWR5SGFzKGVkZ2UpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBvdXQpXG4gICAgICAgICAgICAgICAgaWYgKGVkZ2UubiA9PSBlLm4xICYmIGVkZ2UubjEgPT0gZS5uKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgZWRnZXMpIHtcbiAgICAgICAgICAgIGlmICghYWxyZWFkeUhhcyhlZGdlKSlcbiAgICAgICAgICAgICAgICBvdXQucHVzaChlZGdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGdyYXBoIHdpdGggb25seSB0aGUgZWRnZXMgd2hpY2ggcGFzc2VkIHRoZVxuICAgICAqIGZpbHRlciBmdW5jdGlvbi4gVGhlIHJlc3VsdGluZyBncmFwaCBtYXkgb3IgbWF5IG5vdCBiZSBjb25uZWN0ZWQuXG4gICAgICogQWxsIHRoZSBub2RlcyBvZiB0aGUgb3JpZ2luYWwgZ3JhcGggYXJlIGtlcHQuXG4gICAgICogQHBhcmFtIGVkZ2VGaWx0ZXIgUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBlZGdlIHNob3VsZCBiZSBpbmNsdWRlZCBpblxuICAgICAqICAgICAgdGhlIHJlc3VsdGluZyBncmFwaC5cbiAgICAgKiBOT1RFOiBOT1QgVEVTVEVEXG4gICAgICovXG4gICAgc3RhdGljIGRyb3BFZGdlcyhncmFwaCwgZWRnZUZpbHRlcikge1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgR3JhcGhfMS5HcmFwaCgpO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZ3JhcGguZ2V0Tm9kZXMoKSkge1xuICAgICAgICAgICAgb3V0LmFkZE5vZGUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBlZGdlIG9mIGdyYXBoLmdldEVkZ2VzKCkpIHtcbiAgICAgICAgICAgIGlmIChlZGdlRmlsdGVyKGVkZ2UpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVkZ2UgaW5zdGFuY2VvZiBBcmd1bWVudF8xLkFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC5hZGRBcmd1bWVudChlZGdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5leHBvcnRzLkdyYXBoTWluaXB1bGF0b3IgPSBHcmFwaE1pbmlwdWxhdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hdGhHcmFwaE5vZGUgPSB2b2lkIDA7XG5jbGFzcyBNYXRoR3JhcGhOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pZCA9IE1hdGhHcmFwaE5vZGUubmV4dElkO1xuICAgICAgICBNYXRoR3JhcGhOb2RlLm5leHRJZCsrO1xuICAgIH1cbiAgICBzdGF0aWMgbmV4dElkID0gMTtcbiAgICBpZDtcbn1cbmV4cG9ydHMuTWF0aEdyYXBoTm9kZSA9IE1hdGhHcmFwaE5vZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVsYXRpb25zaGlwID0gdm9pZCAwO1xuLyoqXG4gKiBBIHdheSBpbiB3aGljaCAyIGV4cHJlc3Npb25zIGNhbiBiZSByZWxhdGVkLlxuICovXG52YXIgUmVsYXRpb25zaGlwO1xuKGZ1bmN0aW9uIChSZWxhdGlvbnNoaXApIHtcbiAgICBSZWxhdGlvbnNoaXBbXCJFcXVhbFwiXSA9IFwiPVwiO1xufSkoUmVsYXRpb25zaGlwIHx8IChleHBvcnRzLlJlbGF0aW9uc2hpcCA9IFJlbGF0aW9uc2hpcCA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucG9seW5vbWlhbFNpbXBsaWZpY2F0aW9uUnVsZXMgPSBleHBvcnRzLmZhY3RvcmluZ1NpbXBsaWZpY2F0aW9uUnVsZXMgPSBleHBvcnRzLmNvbnZlcmdlbnRTaW1wbGlmaWNhdGlvblJ1bGVzID0gdm9pZCAwO1xuY29uc3QgQnJlYWtEZXJpdmF0aXZlc092ZXJBZGRpdGlvbl8xID0gcmVxdWlyZShcIi4vY2FsY3VsdXMvQnJlYWtEZXJpdmF0aXZlc092ZXJBZGRpdGlvblwiKTtcbmNvbnN0IFBvd2VyUnVsZV8xID0gcmVxdWlyZShcIi4vY2FsY3VsdXMvUG93ZXJSdWxlXCIpO1xuY29uc3QgUHJvZHVjdFJ1bGVfMSA9IHJlcXVpcmUoXCIuL2NhbGN1bHVzL1Byb2R1Y3RSdWxlXCIpO1xuY29uc3QgUHVsbENvbnN0YW50c0Zyb21EZXJpdmF0aXZlc18xID0gcmVxdWlyZShcIi4vY2FsY3VsdXMvUHVsbENvbnN0YW50c0Zyb21EZXJpdmF0aXZlc1wiKTtcbmNvbnN0IFF1b3RpZW50UnVsZV8xID0gcmVxdWlyZShcIi4vY2FsY3VsdXMvUXVvdGllbnRSdWxlXCIpO1xuY29uc3QgVVN1YnN0aXR1dGlvbl8xID0gcmVxdWlyZShcIi4vY2FsY3VsdXMvVVN1YnN0aXR1dGlvblwiKTtcbmNvbnN0IEFkZGl0aXZlSWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9BZGRpdGl2ZUlkZW50aXR5XCIpO1xuY29uc3QgQW55dGhpbmdUaW1lc1plcm9fMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9Bbnl0aGluZ1RpbWVzWmVyb1wiKTtcbmNvbnN0IEFzc29jaWF0aXZlUHJvcGVydHlPZlByb2R1Y3RzQW5kU3Vtc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL0Fzc29jaWF0aXZlUHJvcGVydHlPZlByb2R1Y3RzQW5kU3Vtc1wiKTtcbmNvbnN0IENhbmNlbE5lZ2F0aXZlc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL0NhbmNlbE5lZ2F0aXZlc1wiKTtcbmNvbnN0IENvbWJpbmVDb21tb25GYWN0b3JzTXVsdGlwbGljYXRpb25fMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9Db21iaW5lQ29tbW9uRmFjdG9yc011bHRpcGxpY2F0aW9uXCIpO1xuY29uc3QgQ29tYmluZUNvbW1vblRlcm1zQWRkaXRpb25fMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9Db21iaW5lQ29tbW9uVGVybXNBZGRpdGlvblwiKTtcbmNvbnN0IENvbWJpbmVJbnRlZ2VyRmFjdG9yc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL0NvbWJpbmVJbnRlZ2VyRmFjdG9yc1wiKTtcbmNvbnN0IENvbWJpbmVQcm9kdWN0c0FuZEZyYWN0aW9uc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL0NvbWJpbmVQcm9kdWN0c0FuZEZyYWN0aW9uc1wiKTtcbmNvbnN0IERpc3RyaWJ1dGl2ZVByb3BlcnR5XzEgPSByZXF1aXJlKFwiLi9zaW1wbGlmaWNhdGlvbnMvRGlzdHJpYnV0aXZlUHJvcGVydHlcIik7XG5jb25zdCBEaXZpZGVGcmFjdGlvbnNfMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9EaXZpZGVGcmFjdGlvbnNcIik7XG5jb25zdCBEaXZpc2lvbklkZW50aXR5XzEgPSByZXF1aXJlKFwiLi9zaW1wbGlmaWNhdGlvbnMvRGl2aXNpb25JZGVudGl0eVwiKTtcbmNvbnN0IEV2YWx1YXRlU3Vtc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL0V2YWx1YXRlU3Vtc1wiKTtcbmNvbnN0IEV4cG9uZW50aWFsSWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9FeHBvbmVudGlhbElkZW50aXR5XCIpO1xuY29uc3QgRXhwb25lbnRUb1plcm9fMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9FeHBvbmVudFRvWmVyb1wiKTtcbmNvbnN0IEZPSUxfMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9GT0lMXCIpO1xuY29uc3QgTG9nT2ZPbmVfMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9Mb2dPZk9uZVwiKTtcbmNvbnN0IE11bHRpcGxpY2F0aXZlSWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9NdWx0aXBsaWNhdGl2ZUlkZW50aXR5XCIpO1xuY29uc3QgTXVsdGlwbHlFeHBvbmVudFBvd2Vyc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL011bHRpcGx5RXhwb25lbnRQb3dlcnNcIik7XG5jb25zdCBPcmRlclByb2R1Y3RzXzEgPSByZXF1aXJlKFwiLi9zaW1wbGlmaWNhdGlvbnMvT3JkZXJQcm9kdWN0c1wiKTtcbmNvbnN0IE9yZGVyU3Vtc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL09yZGVyU3Vtc1wiKTtcbmNvbnN0IFJlbW92ZUNvbW1vbkZhY3RvcnNPblRvcEFuZEJvdHRvbU9mRnJhY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9SZW1vdmVDb21tb25GYWN0b3JzT25Ub3BBbmRCb3R0b21PZkZyYWN0aW9uXCIpO1xuY29uc3QgU3VidHJhY3RFeHBvbmVudHNPbkZyYWN0aW9uc18xID0gcmVxdWlyZShcIi4vc2ltcGxpZmljYXRpb25zL1N1YnRyYWN0RXhwb25lbnRzT25GcmFjdGlvbnNcIik7XG5jb25zdCBTdW1Db2VmZmljaWVudHNPZkFkZGVkVGVybXNfMSA9IHJlcXVpcmUoXCIuL3NpbXBsaWZpY2F0aW9ucy9TdW1Db2VmZmljaWVudHNPZkFkZGVkVGVybXNcIik7XG4vKipcbiAqIDEgaW5wdXQsIDEgb3V0cHV0XG4gKiBSZXdyaXRlIGV4cHJlc3Npb25zIHRvIGZvbGxvdyBtYXRoIGNvbnZlbnRpb25zXG4gKi9cbmNvbnN0IGNvbnZlbnRpb25SdWxlcyA9IFtcbiAgICBuZXcgT3JkZXJQcm9kdWN0c18xLk9yZGVyUHJvZHVjdHMoKSxcbiAgICBuZXcgT3JkZXJTdW1zXzEuT3JkZXJTdW1zKCksXG5dO1xuLyoqXG4gKiAxIGlucHV0LCAxIG91dHB1dFxuICovXG5jb25zdCBldmFsdWF0aXZlUnVsZXMgPSBbXG4gICAgbmV3IEV2YWx1YXRlU3Vtc18xLkV2YWx1YXRlU3VtcygpLFxuICAgIG5ldyBDYW5jZWxOZWdhdGl2ZXNfMS5DYW5jZWxOZWdhdGl2ZXMoKSxcbiAgICBuZXcgQ29tYmluZUludGVnZXJGYWN0b3JzXzEuQ29tYmluZUludGVnZXJGYWN0b3JzKCksXG5dO1xuY29uc3QgY29tYmluYXRvcmljUnVsZXMgPSBbXG4gICAgbmV3IFN1bUNvZWZmaWNpZW50c09mQWRkZWRUZXJtc18xLlN1bUNvZWZmaWNpZW50c09mQWRkZWRUZXJtcygpLFxuICAgIG5ldyBDb21iaW5lQ29tbW9uRmFjdG9yc011bHRpcGxpY2F0aW9uXzEuQ29tYmluZUNvbW1vbkZhY3RvcnNNdWx0aXBsaWNhdGlvbigpLFxuICAgIG5ldyBNdWx0aXBseUV4cG9uZW50UG93ZXJzXzEuTXVsdGlwbHlFeHBvbmVudFBvd2VycygpLFxuICAgIG5ldyBTdWJ0cmFjdEV4cG9uZW50c09uRnJhY3Rpb25zXzEuU3VidHJhY3RFeHBvbmVudHNPbkZyYWN0aW9ucygpLFxuICAgIG5ldyBDb21iaW5lUHJvZHVjdHNBbmRGcmFjdGlvbnNfMS5Db21iaW5lUHJvZHVjdHNBbmRGcmFjdGlvbnMoKSxcbl07XG5jb25zdCByZW1haW5pbmdOb0NvbnRleHRTaW1wbGlmaWNhdGlvblJ1bGVzID0gW1xuICAgIG5ldyBVU3Vic3RpdHV0aW9uXzEuVVN1YnN0aXR1dGlvbigpLFxuICAgIG5ldyBQb3dlclJ1bGVfMS5Qb3dlclJ1bGUoKSxcbiAgICBuZXcgUHVsbENvbnN0YW50c0Zyb21EZXJpdmF0aXZlc18xLlB1bGxDb25zdGFudHNGcm9tRGVyaXZhdGl2ZXMoKSxcbiAgICBuZXcgQXNzb2NpYXRpdmVQcm9wZXJ0eU9mUHJvZHVjdHNBbmRTdW1zXzEuQXNzb2NpYXRpdmVQcm9wZXJ0eU9mUHJvZHVjdHNBbmRTdW1zKCksXG4gICAgbmV3IFByb2R1Y3RSdWxlXzEuUHJvZHVjdFJ1bGUoKSxcbiAgICBuZXcgUXVvdGllbnRSdWxlXzEuUXVvdGllbnRSdWxlKCksXG4gICAgbmV3IERpdmlkZUZyYWN0aW9uc18xLkRpdmlkZUZyYWN0aW9ucygpLFxuICAgIG5ldyBSZW1vdmVDb21tb25GYWN0b3JzT25Ub3BBbmRCb3R0b21PZkZyYWN0aW9uXzEuUmVtb3ZlQ29tbW9uRmFjdG9yc0Zyb21Ub3BBbmRCb3R0b21PZkZyYWN0aW9uKCksXG4gICAgbmV3IEJyZWFrRGVyaXZhdGl2ZXNPdmVyQWRkaXRpb25fMS5CcmVha0Rlcml2YXRpdmVzT3ZlckFkZGl0aW9uKCksXG5dO1xuLyoqXG4gKiBBIGxpc3Qgb2Ygc2ltcGxpZmljYXRpb24gcnVsZXMuXG4gKiBJZiBhbmQgb25seSBpZiBhbiBlYXJsaWVyIHJ1bGUgZmFpbHMgdG9cbiAqIHByb2R1Y2UgZXF1aXZhbGVudCBleHByZXNzaW9ucyBzaG91bGQgbGF0ZXIgbGlzdHNcbiAqIGJlIHVzZWQuXG4gKiBUaGlzIGxpc3Qgb25seSBjb250YWlucyBydWxlcyB3aGljaCBjb252ZXJnZSB0byBvbmUgYW5zd2VyLlxuICovXG5leHBvcnRzLmNvbnZlcmdlbnRTaW1wbGlmaWNhdGlvblJ1bGVzID0gW1xuICAgIC8vIElkZW50aXR5IHJ1bGVzIGZpcnN0XG4gICAgbmV3IEFueXRoaW5nVGltZXNaZXJvXzEuQW55dGhpbmdUaW1lc1plcm8oKSxcbiAgICBuZXcgRXhwb25lbnRUb1plcm9fMS5FeHBvbmVudFRvWmVybygpLFxuICAgIG5ldyBNdWx0aXBsaWNhdGl2ZUlkZW50aXR5XzEuTXVsdGlwbGljYXRpdmVJZGVudGl0eSgpLFxuICAgIG5ldyBFeHBvbmVudGlhbElkZW50aXR5XzEuRXhwb25lbnRpYWxJZGVudGl0eSgpLFxuICAgIG5ldyBEaXZpc2lvbklkZW50aXR5XzEuRGl2aXNpb25JZGVudGl0eSgpLFxuICAgIG5ldyBBZGRpdGl2ZUlkZW50aXR5XzEuQWRkaXRpdmVJZGVudGl0eSgpLFxuICAgIG5ldyBMb2dPZk9uZV8xLkxvZ09mT25lKCksXG4gICAgLi4uZXZhbHVhdGl2ZVJ1bGVzLFxuICAgIC4uLmNvbWJpbmF0b3JpY1J1bGVzLFxuICAgIC4uLmNvbnZlbnRpb25SdWxlcyxcbiAgICAuLi5yZW1haW5pbmdOb0NvbnRleHRTaW1wbGlmaWNhdGlvblJ1bGVzLFxuXTtcbi8qKlxuICogVGhlc2UgcnVsZXMgY29udmVyZ2UgdG8gZmFjdG9yZWQgZm9ybS5cbiAqL1xuZXhwb3J0cy5mYWN0b3JpbmdTaW1wbGlmaWNhdGlvblJ1bGVzID0gW1xuICAgIG5ldyBDb21iaW5lQ29tbW9uVGVybXNBZGRpdGlvbl8xLkNvbWJpbmVDb21tb25UZXJtc0FkZGl0aW9uKCksXG5dO1xuLyoqXG4gKiBUaGVzZSBydWxlcyBjb252ZXJnZSB0byBwb2x5bm9taWFsIGZvcm0uXG4gKi9cbmV4cG9ydHMucG9seW5vbWlhbFNpbXBsaWZpY2F0aW9uUnVsZXMgPSBbXG4gICAgbmV3IERpc3RyaWJ1dGl2ZVByb3BlcnR5XzEuRGlzdHJpYnV0aXZlUHJvcGVydHkoKSxcbiAgICBuZXcgRk9JTF8xLkZPSUwoKSxcbl07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVyaXZlciA9IHZvaWQgMDtcbmNvbnN0IEV4cHJlc3Npb25fMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9FeHByZXNzaW9uXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9TdW1cIik7XG5jb25zdCBEZXJpdmF0aW9uUnVsZXNfMSA9IHJlcXVpcmUoXCIuL0Rlcml2YXRpb25SdWxlc1wiKTtcbmNvbnN0IHJlY3Vyc2lvbl8xID0gcmVxdWlyZShcIi4vcmVjdXJzaW9uXCIpO1xuLyoqXG4gKiBIb2xkcyBhIHNpbmdsZSBncmFwaCBhbmQgZXhwYW5kcyBpdCB1c2luZyBydWxlcy5cbiAqL1xuY2xhc3MgRGVyaXZlciB7XG4gICAgLyoqXG4gICAgICogR2l2ZSBpdCB0aGUgZ3JhcGggeW91J3JlIGdvaW5nIHRvIGV4cGFuZC5cbiAgICAgKiBAcGFyYW0gZ3JhcGhcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihncmFwaCkge1xuICAgICAgICB0aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4cGFuZHMgdGhlIGdyYXBoIGFyYml0cmFyaWx5LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgc3RpbGwgcG9vcmx5IGRlZmluZWQsXG4gICAgICogdmVyeSBleHBlcmVtZW50YWwuXG4gICAgICogQHBhcmFtIG1heERlcHRoIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVyYXRpb25zIHRoZVxuICAgICAqICAgICAgZGVyaXZlciB3aWxsIGRvIGJlZm9yZSByZXR1cm5pbmcuIE5vbi1uZWdhdGl2ZS5cbiAgICAgKiAgICAgIElmIG51bGwsIHRoZXJlIGlzIG5vIG1heCBkZXB0aC5cbiAgICAgKiBAcGFyYW0gc2tpcENvbnZlcmdlbnRTaW1wbGlmaWNhdGlvbnMgSWYgdHJ1ZSwgY29udmVyZ2VudCBzaW1wbGlmaWNhdGlvbiBvcGVyYXRpb25zXG4gICAgICogICAgICAgICAgYXJlbid0IGNvdW50ZWQgd2hlbiBjYWxjdWxhdGluZyBkZXB0aC5cbiAgICAgKi9cbiAgICBleHBhbmQobWF4RGVwdGgsIHNraXBDb252ZXJnZW50U2ltcGxpZmljYXRpb25zID0gZmFsc2UpIHtcbiAgICAgICAgLy8gU2ltcGxpZnkgYWxsIHRoZSBleHByZXNzaW9ucyB1c2luZyB0aGUgY29udGV4dGxlc3Mgc2ltcGxpZnlpbmcgcnVsZXNcbiAgICAgICAgLy8gRG8gdGhpcyB1bnRpbCB0aGVyZSdzIG5vdGhpbmcgbW9yZSB0byBzaW1wbGlmeVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heERlcHRoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChza2lwQ29udmVyZ2VudFNpbXBsaWZpY2F0aW9ucykge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLnNpbXBsaWZ5Tm9Db250ZXh0Q29udmVyZ2VudCgpKVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNpbXBsaWZ5Tm9Db250ZXh0RGl2ZXJnZW50KCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaW1wbGlmeU5vQ29udGV4dENvbnZlcmdlbnQoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2ltcGxpZnlOb0NvbnRleHREaXZlcmdlbnQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy90aGlzLmFsZ2VicmFpY0V4cGFuc2lvbigpXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBsaXN0IG9mIGV4cHJlc3Npb25zIHdoaWNoIGNvdWxkbid0IGJlIHNpbXBsaWZpZWQgZnVydGhlci5cbiAgICAgKi9cbiAgICBnZXQgc2ltcGxpZmllZEV4cHJlc3Npb25zKCkge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMucGFzc2VkRmFjdG9yaW5nU2ltcGxpZmljYXRpb24sIC4uLnRoaXMucGFzc2VkUG9seW5vbWlhbFNpbXBsaWZpY2F0aW9uXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBjb252ZXJnZW50IHNpbXBsaWZpY2F0aW9uIHJ1bGVzIHRvIGV4cGFuZCB0aGUgZ3JhcGguXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGVyZSBpcyBtb3JlIHRvIHNpbXBsaWZ5IGFuZCB0aGlzIHNob3VsZFxuICAgICAqICAgICAgICAgIGJlIGNhbGxlZCBhZ2Fpbi4gV2lsbCBiZSBjYWxsZWQgYSBmaW5pdGUgbnVtYmVyIG9mIHRpbWVzLlxuICAgICAqL1xuICAgIHNpbXBsaWZ5Tm9Db250ZXh0Q29udmVyZ2VudCgpIHtcbiAgICAgICAgY29uc3QgdW5zaW1wbGlmaWVkID0gWy4uLnRoaXMuZ3JhcGguZ2V0Tm9kZXMoKV0uZmlsdGVyKG4gPT4gbiBpbnN0YW5jZW9mIEV4cHJlc3Npb25fMS5FeHByZXNzaW9uKVxuICAgICAgICAgICAgLm1hcChuID0+IG4pXG4gICAgICAgICAgICAuZmlsdGVyKGUgPT4gIXRoaXMucHJvY2Vzc2VkQnlDb252ZXJnZW50U2ltcGxpZmljYXRpb24uaGFzKGUpKTtcbiAgICAgICAgbGV0IHNob3VsZERvQWdhaW4gPSBmYWxzZTtcbiAgICAgICAgdW5zaW1wbGlmaWVkLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NlZEJ5Q29udmVyZ2VudFNpbXBsaWZpY2F0aW9uLmFkZChlKTtcbiAgICAgICAgICAgIC8vIFRyeSB0byBmaW5kIGVxdWl2YWxlbnRzIHVzaW5nIGdlbmVyYWwgY29udmVyZ2VudCBydWxlcy5cbiAgICAgICAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBEZXJpdmF0aW9uUnVsZXNfMS5jb252ZXJnZW50U2ltcGxpZmljYXRpb25SdWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlcml2ZWRTaW1wbGlmaWNhdGlvbiA9ICgwLCByZWN1cnNpb25fMS5lcXVpdikoZSwgZXF1aXZhbGVudHNGblVzaW5nKFtydWxlXSkpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChkZXJpdmVkU2ltcGxpZmljYXRpb24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVG9HcmFwaChbZGVyaXZlZFNpbXBsaWZpY2F0aW9uXSk7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZERvQWdhaW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIFRvIG5leHQgZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFzc2VkQ29udmVyZ2VudFNpbXBsaWZpY2F0aW9uLmFkZChlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzaG91bGREb0FnYWluO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGRpdmVyZ2VudCBzaW1wbGlmaWNhdGlvbiBydWxlcyB0byBleHBhbmQgdGhlIGdyYXBoLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGZ1bmN0aW9uIGV4cGFuZGVkIHRoZSBncmFwaC5cbiAgICAgKi9cbiAgICBzaW1wbGlmeU5vQ29udGV4dERpdmVyZ2VudCgpIHtcbiAgICAgICAgLy8gT25seSBvcGVyYXRlIG9uIGV4cHJlc3Npb25zIHdoaWNoIGhhdmUgcGFzc2VkIGNvbnZlcmdlbnQgc2ltcGxpZmljYXRpb25cbiAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IFsuLi50aGlzLnBhc3NlZENvbnZlcmdlbnRTaW1wbGlmaWNhdGlvbl07XG4gICAgICAgIC8vIFRydWUgaWYgbW9yZSBleHByZXNzaW9ucyB3ZXJlIGFkZGVkIHRvIHRoZSBncmFwaFxuICAgICAgICBsZXQgc2hvdWxkRG9BZ2FpbiA9IGZhbHNlO1xuICAgICAgICBjYW5kaWRhdGVzLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICAvLyBUcnkgdG8gZmluZCBlcXVpdmFsZW50cyB1c2luZyBkaXZlcmdlbnQgcnVsZXMuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgRGVyaXZhdGlvblJ1bGVzXzEuZmFjdG9yaW5nU2ltcGxpZmljYXRpb25SdWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlcml2ZWRTaW1wbGlmaWNhdGlvbnMgPSAoMCwgcmVjdXJzaW9uXzEuZXF1aXYpKGUsIGVxdWl2YWxlbnRzRm5Vc2luZyhbcnVsZV0pKTtcbiAgICAgICAgICAgICAgICBzaG91bGREb0FnYWluIHx8PSB0aGlzLmFkZFRvR3JhcGgoZGVyaXZlZFNpbXBsaWZpY2F0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKGRlcml2ZWRTaW1wbGlmaWNhdGlvbnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFzc2VkRmFjdG9yaW5nU2ltcGxpZmljYXRpb24uYWRkKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBEZXJpdmF0aW9uUnVsZXNfMS5wb2x5bm9taWFsU2ltcGxpZmljYXRpb25SdWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlcml2ZWRTaW1wbGlmaWNhdGlvbnMgPSAoMCwgcmVjdXJzaW9uXzEuZXF1aXYpKGUsIGVxdWl2YWxlbnRzRm5Vc2luZyhbcnVsZV0pKTtcbiAgICAgICAgICAgICAgICBzaG91bGREb0FnYWluIHx8PSB0aGlzLmFkZFRvR3JhcGgoZGVyaXZlZFNpbXBsaWZpY2F0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKGRlcml2ZWRTaW1wbGlmaWNhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFN1bV8xLlN1bSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFzc2VkUG9seW5vbWlhbFNpbXBsaWZpY2F0aW9uLmFkZChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2hvdWxkRG9BZ2FpbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZ2l2ZW4gYXJndW1lbnQsIGFkZHMgdG8gdGhlIGdyYXBoIGlmIGF0IGxlYXN0XG4gICAgICogb25lIG9mIGl0cyBjbGFpbSdzIGVuZHBvaW50cyBpc24ndCBhbHJlYWR5IGluIHRoZSBncmFwaC5cbiAgICAgKiBJZiBib3RoIGVuZCBwb2ludHMgb2YgYWxsIGFyZ3VtZW50cyBhcmUgYWxyZWFkeSBpbiB0aGUgZ3JhcGgsXG4gICAgICogcmV0dXJucyBmYWxzZS5cbiAgICAgKiBAcGFyYW0gYXJnc1xuICAgICAqIEBlZmZlY3RzIHRoaXMuZ3JhcGhcbiAgICAgKi9cbiAgICBhZGRUb0dyYXBoKGFyZ3MpIHtcbiAgICAgICAgbGV0IGF0TGVhc3RPbmUgPSBmYWxzZTtcbiAgICAgICAgYXJncy5mb3JFYWNoKGEgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmdyYXBoLmNvbnRhaW5zKGEuY2xhaW0ubilcbiAgICAgICAgICAgICAgICB8fCAhdGhpcy5ncmFwaC5jb250YWlucyhhLmNsYWltLm4xKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGguYWRkQXJndW1lbnQoYSk7XG4gICAgICAgICAgICAgICAgYXRMZWFzdE9uZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXRMZWFzdE9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhwYW5kcyB0aGUgZ3JhcGggdXNpbmcgYWxnZWJyYSBydWxlcy5cbiAgICAgKiBPbmx5IHNpbXBsaWZpZWQgcnVsZXMgYXJlIHVzZWQuXG4gICAgICovXG4gICAgYWxnZWJyYWljRXhwYW5zaW9uKCkge1xuICAgICAgICAvLyBjb25zdCBydWxlcyA9IFsuLi5SZWxhdGlvbmFsRGVyaXZhdGlvblJ1bGUucnVsZXNdXG4gICAgICAgIC8vIGNvbnN0IGNvbXBvbmVudHMgPSBbLi4uR3JhcGhNaW5pcHVsYXRvci5nZXRDb21wb25lbnROb2Rlcyh0aGlzLmdyYXBoLCBlZGdlID0+IHtcbiAgICAgICAgLy8gICAgIHJldHVybiAoZWRnZSBpbnN0YW5jZW9mIEFyZ3VtZW50ICYmIGVkZ2UucmVsYXRpb25zaGlwID09IFJlbGF0aW9uc2hpcC5FcXVhbClcbiAgICAgICAgLy8gICAgICAgICB8fCAoZWRnZSBpbnN0YW5jZW9mIEdpdmVuRWRnZSAmJiBlZGdlLnIgPT0gUmVsYXRpb25zaGlwLkVxdWFsKVxuICAgICAgICAvLyB9KV1cbiAgICAgICAgLy8gY29tcG9uZW50cy5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgICAgIC8vICAgICBjb25zdCBlcXVhdGlvbjogRXhwcmVzc2lvbltdID0gW11cbiAgICAgICAgLy8gICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjb21wb25lbnQpIHtcbiAgICAgICAgLy8gICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gJiYgdGhpcy5zaW1wbGlmaWVkLmhhcyhub2RlKSlcbiAgICAgICAgLy8gICAgICAgICAgICAgZXF1YXRpb24ucHVzaChub2RlKVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgcnVsZXMuZm9yRWFjaChyID0+IHtcbiAgICAgICAgLy8gICAgICAgICByLmFwcGx5KHNldE9mKC4uLmVxdWF0aW9uKSkuZm9yRWFjaChhID0+IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5ncmFwaC5hZGRBcmd1bWVudChhKVxuICAgICAgICAvLyAgICAgICAgIH0pXG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyB9KVxuICAgIH1cbiAgICBncmFwaDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGV4cHJlc3Npb24gaXMgaW4gdGhlIGdyYXBoXG4gICAgICogYW5kIGhhcyBhbHJlYWR5IGhhZCB0aGUgY29udGV4dGxlc3Mgc2ltcGxpZmljYXRpb24gb3BlcmF0aW9uc1xuICAgICAqIGRvbmUgdG8gaXQgYW5kIGNhbm5vdCBiZSBmdXJ0aGVyIHNpbXBsaWZpZWQuXG4gICAgICovXG4gICAgaXNTaW1wbGlmaWVkKGV4cCkge1xuICAgICAgICBpZiAoIXRoaXMucGFzc2VkQ29udmVyZ2VudFNpbXBsaWZpY2F0aW9uLmhhcyhleHApKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZXhwIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3QpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXNzZWRGYWN0b3JpbmdTaW1wbGlmaWNhdGlvbi5oYXMoZXhwKTtcbiAgICAgICAgaWYgKGV4cCBpbnN0YW5jZW9mIFN1bV8xLlN1bSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhc3NlZFBvbHlub21pYWxTaW1wbGlmaWNhdGlvbi5oYXMoZXhwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIEFsbCB0aGUgZXhwcmVzc2lvbnMgd2hpY2ggY291bGQgbm90IGJlIHNpbXBsaWZpZWQgZnVydGhlciBieVxuICAgIC8vIGNvbnZlcmdlbnQgc2ltcGxpZmljYXRpb24gcnVsZXMuXG4gICAgcGFzc2VkQ29udmVyZ2VudFNpbXBsaWZpY2F0aW9uID0gbmV3IFNldCgpO1xuICAgIC8vIEFsbCBleHByZXNzaW9ucyB3aGljaCBoYXZlIGJlZW4gcHJvY2Vzc2VkIGJ5IHRoZSBzaW1wbGlmaWNhdGlvbiBydWxlc1xuICAgIC8vLyByZWdhcmRsZXNzIG9mIHRoZSByZXN1bHQuXG4gICAgcHJvY2Vzc2VkQnlDb252ZXJnZW50U2ltcGxpZmljYXRpb24gPSBuZXcgU2V0KCk7XG4gICAgLy8gQWxsIGV4cHJlc3Npb25zIHdoaWNoIGFyZSBwcm9kdWN0cyBhbmQgY291bGQgbm90IGJlIGZ1cnRoZXJcbiAgICAvLyBzaW1wbGlmaWVkIGJ5IGZhY3RvcmluZyBzaW1wbGlmaWNhdGlvbiBydWxlcy4gQSBzdWJzZXQgb2ZcbiAgICAvLyBwYXNzZWRDb252ZXJnZW50U2ltcGxpZmljYXRpb24uXG4gICAgcGFzc2VkRmFjdG9yaW5nU2ltcGxpZmljYXRpb24gPSBuZXcgU2V0KCk7XG4gICAgLy8gQWxsIGV4cHJlc3Npb25zIHdoaWNoIGFyZSBzdW1zIGFuZCBjb3VsZCBub3QgYmUgZnVydGhlclxuICAgIC8vIHNpbXBsaWZpZWQgYnkgcG9seW5vbWlhbCBzaW1wbGlmaWNhdGlvbiBydWxlcy4gQSBzdWJzZXQgb2ZcbiAgICAvLyBwYXNzZWRDb252ZXJnZW50U2ltcGxpZmljYXRpb24uXG4gICAgcGFzc2VkUG9seW5vbWlhbFNpbXBsaWZpY2F0aW9uID0gbmV3IFNldCgpO1xufVxuZXhwb3J0cy5EZXJpdmVyID0gRGVyaXZlcjtcbi8qKlxuICogRnVuY3Rpb24gdGhhdCBtYWtlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgZXF1aXZhbGVudFxuICogZXhwcmVzc2lvbnMgZm9yIGEgZ2l2ZW4gb25lLlxuICogQHBhcmFtIHJ1bGVzIFdoYXQgcnVsZXMgdGhlIHJlc3VsdGluZyBmdW5jdGlvbiBzaG91bGQgdXNlIHRvXG4gKiAgICAgIGZpbmQgZXF1aXZhbGVudHMuXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHdoaWNoIHdpbGwgdXNlIHRoZSBnaXZlbiBydWxlcyB0b1xuICogICAgICBmaW5kIGRpcmVjdCBlcXVpdmFsZW50cy5cbiAqL1xuZnVuY3Rpb24gZXF1aXZhbGVudHNGblVzaW5nKHJ1bGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChleHApIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFNldCgpO1xuICAgICAgICBydWxlcy5maWx0ZXIociA9PiByLmFwcGxpZXMoZXhwKSkuZm9yRWFjaChydWxlID0+IHtcbiAgICAgICAgICAgIHJ1bGUuYXBwbHkoZXhwKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgICAgIG91dC5hZGQoaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db252ZXJnZW5jZVRhcmdldCA9IGV4cG9ydHMuTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZSA9IHZvaWQgMDtcbmNvbnN0IGFzc2VydF8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXNzZXJ0XCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuLyoqXG4gKiBBIHJ1bGUgdGhhdCB0YWtlcyBhbiBleHByZXNzaW9uIGFuZCBwcm9kdWNlcyBvbmUgb3IgbW9yZSBlcXVpdmFsZW50IGV4cHJlc3Npb25zLlxuICogVGhlc2UgY2FuIHVzZSByZWZsZWN0aW9uIHRvIGRldGVybWluZSB3aGF0XG4gKiB0eXBlIG9mIGV4cHJlc3Npb24gdGhleSdyZSBnaXZlbi4gVGhlc2UgcnVsZXMgd2lsbCBiZSByZWN1cnNpdmVseSB1c2VkXG4gKiB0byBkZXJpdmUgc2ltcGxpZmllZCBleHByZXNzaW9ucy5cbiAqXG4gKiBUaGVzZSBydWxlcyBhcmUgYWxzbyBjb250ZXh0bGVzczogdGhleSdyZSBvbmx5IGdpdmVuIHRoZSBleHByZXNzaW9uLFxuICogbm8gb3RoZXIgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb2JsZW0uXG4gKlxuICogQWxsIG9mIHRoZXNlIHJ1bGVzIG5lZWQgdG8gY29udmVyZ2UgdG8gYSBzaW1wbGlmaWVkIGFuc3dlci4gVGhleSBjYW4ndFxuICogZm9ybSBsb29wcy4gVGhpbmtpbmcgYWJvdXQgdGhpcywgdGhlcmUgYXJlIHR3byBzaW1wbGlmaWVkIGZvcm1zIHRvXG4gKiBjb252ZXJnZSB0bzpcbiAqICAtIEZhY3RvcmVkIGZvcm0gYyhhK2IpXG4gKiAgLSBQb2x5bm9taWFsIGZvcm0gYWMgKyBiY1xuICovXG5jbGFzcyBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhpcyBydWxlIGNhbiBmaW5kIGVxdWl2YWxlbnRzIGZvciB0aGVcbiAgICAgKiBnaXZlbiBleHByZXNzaW9uLiBPbmx5IGNhbGwgYXBwbHkoKSBpZiB0cnVlLlxuICAgICAqL1xuICAgIGFwcGxpZXMoZXhwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGxpZXNJbXBsKGV4cCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgc2V0IG9mIGV4cHJlc3Npb25zIHRoYXQgYXJlIGVxdWl2YWxlbnQgdG9cbiAgICAgKiB0aGUgZ2l2ZW4gb25lLiBPbmx5IGNhbGwgaWYgdGhlIGdpdmVuIGV4cHJlc3Npb25cbiAgICAgKiBwYXNzZWQgdGhlIGFwcGxpZXMoKSB0ZXN0LlxuICAgICAqIEBwYXJhbSBleHAgVGhlIGV4cHJlc3Npb24gdG8gZmluZCBhbiBlcXVpdmFsZW50IGZvci5cbiAgICAgKiBAcmV0dXJucyBTZXQgb2YgZXF1aXZhbGVudCBleHByZXNzaW9ucywgbm90IGluY2x1ZGluZyB0aGUgZ2l2ZW4gb25lLlxuICAgICAqL1xuICAgIGFwcGx5KGV4cCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuY29uc3RydWN0b3IubmFtZSArIFwiIG9uIFwiICsgZXhwLnRvU3RyaW5nKCkpXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYXBwbHlJbXBsKGV4cCk7XG4gICAgICAgIHJlc3VsdC5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkoZSAhPSBudWxsICYmIGUgIT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKGUuY2xhaW0ubjEgIT09IGV4cCwgXCJSdWxlIFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgXCIgcHJvZHVjZWQgcmVzdWx0IGVxdWl2YWxlbnQgdG8gZ3JvdW5kXCIpO1xuICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBmdXp6eSB0ZXN0IGlzIGluY29ubHVzaXZlIGFuZCBjYW4gZmFpbCB3aGVuIHR3byBleHByZXNzaW9ucyBhcmUgZXF1YWwuXG4gICAgICAgICAgICAvLyBEb24ndCBsZWF2ZSBpdCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkoZnV6enlFcXVpdmFsZW5jZVRlc3QoZXhwLCBlLmNsYWltLm4xKSwgXCJGYWlsZWQgZnV6enkgZXF1aXZhbGVuY2UgdGVzdCBcIlxuICAgICAgICAgICAgICAgICsgZXhwLnRvVW5hbWJpZ2lvdXNTdHJpbmcoKSArIFwiLz1cIiArIGUuY2xhaW0ubjEudG9VbmFtYmlnaW91c1N0cmluZygpXG4gICAgICAgICAgICAgICAgKyBcIiBkdXJpbmcgYXJndW1lbnQgXCIgKyBlLmFyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHR5cGUgb2YgZXhwcmVzc2lvbiB0aGlzIHJ1bGUnc1xuICAgICAqIHJlc3VsdHMgYXBwcm9hY2guXG4gICAgICovXG4gICAgZ2V0IGNvbnZlcmdlbmNlVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIENvbnZlcmdlbmNlVGFyZ2V0Lk5vbmU7XG4gICAgfVxufVxuZXhwb3J0cy5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlID0gTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZTtcbi8qKlxuICogUGx1Z3MgaW4gc29tZSB2YWx1ZXMgdG8gc2VlIGlmIHRoZXkncmUgZXF1aXZhbGVudC5cbiAqIEBwYXJhbSBlMVxuICogQHBhcmFtIGUyXG4gKi9cbmZ1bmN0aW9uIGZ1enp5RXF1aXZhbGVuY2VUZXN0KGUxLCBlMikge1xuICAgIGNvbnN0IExJTUlUID0gMC4wMDE7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGUxLmV2YWx1YXRlKHZhbHVlKSAtIGUyLmV2YWx1YXRlKHZhbHVlKSkgPiBMSU1JVClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG52YXIgQ29udmVyZ2VuY2VUYXJnZXQ7XG4oZnVuY3Rpb24gKENvbnZlcmdlbmNlVGFyZ2V0KSB7XG4gICAgQ29udmVyZ2VuY2VUYXJnZXRbQ29udmVyZ2VuY2VUYXJnZXRbXCJGYWN0b3JlZFwiXSA9IDBdID0gXCJGYWN0b3JlZFwiO1xuICAgIENvbnZlcmdlbmNlVGFyZ2V0W0NvbnZlcmdlbmNlVGFyZ2V0W1wiUG9seW5vbWlhbFwiXSA9IDFdID0gXCJQb2x5bm9taWFsXCI7XG4gICAgQ29udmVyZ2VuY2VUYXJnZXRbQ29udmVyZ2VuY2VUYXJnZXRbXCJOb25lXCJdID0gMl0gPSBcIk5vbmVcIjtcbn0pKENvbnZlcmdlbmNlVGFyZ2V0IHx8IChleHBvcnRzLkNvbnZlcmdlbmNlVGFyZ2V0ID0gQ29udmVyZ2VuY2VUYXJnZXQgPSB7fSkpO1xuY29uc3QgdmFsdWVzID0gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGJ1aWxkVmFyaWFibGVWYWx1ZU1hcCgtMi4xKSwgYnVpbGRWYXJpYWJsZVZhbHVlTWFwKC0xLjEpLCBidWlsZFZhcmlhYmxlVmFsdWVNYXAoMC4xKSwgYnVpbGRWYXJpYWJsZVZhbHVlTWFwKDEuMSksIGJ1aWxkVmFyaWFibGVWYWx1ZU1hcCgyLjEpLCB7XG4gICAgdmFsdWVPZih2KSB7XG4gICAgICAgIHJldHVybiB2LnN5bWJvbC5jb2RlUG9pbnRBdCgwKSA/PyAwO1xuICAgIH1cbn0sIHtcbiAgICB2YWx1ZU9mKHYpIHtcbiAgICAgICAgcmV0dXJuIHYuc3ltYm9sLmNoYXJDb2RlQXQoMCk7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBidWlsZFZhcmlhYmxlVmFsdWVNYXAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWVPZih2KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWxhdGlvbmFsRGVyaXZhdGlvblJ1bGUgPSB2b2lkIDA7XG4vKipcbiAqIFByb2R1Y2VzIHRydXRocyBmcm9tIGEgc2V0IG9mIGVxdWl2YWxlbnQgZXhwcmVzc2lvbnMuXG4gKi9cbmNsYXNzIFJlbGF0aW9uYWxEZXJpdmF0aW9uUnVsZSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXF1YXRpb24gQSBzZXQgb2YgZXhwcmVzc2lvbnMgd2hpY2ggYXJlIGVxdWFsLlxuICAgICAqL1xuICAgIGFwcGx5KGVxdWF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5SW1wbChlcXVhdGlvbik7XG4gICAgfVxuICAgIHN0YXRpYyBydWxlcyA9IG5ldyBTZXQoKTtcbn1cbmV4cG9ydHMuUmVsYXRpb25hbERlcml2YXRpb25SdWxlID0gUmVsYXRpb25hbERlcml2YXRpb25SdWxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpdmlkZU9uQm90aFNpZGVzID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9Qcm9kdWN0XCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgUmVsYXRpb25hbERlcml2YXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vUmVsYXRpb25hbERlcml2YXRpb25SdWxlXCIpO1xuY2xhc3MgRGl2aWRlT25Cb3RoU2lkZXMgZXh0ZW5kcyBSZWxhdGlvbmFsRGVyaXZhdGlvblJ1bGVfMS5SZWxhdGlvbmFsRGVyaXZhdGlvblJ1bGUge1xuICAgIGFwcGx5SW1wbChlcXVhdGlvbikge1xuICAgICAgICBjb25zdCBvdXQgPSBbXTtcbiAgICAgICAgY29uc3QgY29tYmluYXRpb25zID0gY2FydGVzaWFuUHJvZHVjdChlcXVhdGlvbik7XG4gICAgICAgIGNvbWJpbmF0aW9ucy5maWx0ZXIocGFpciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcGFpclswXSBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0O1xuICAgICAgICB9KS5mb3JFYWNoKHBhaXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgcCA9IHBhaXJbMF07XG4gICAgICAgICAgICBjb25zdCBvdGhlciA9IHBhaXJbMV07XG4gICAgICAgICAgICAvLyBTb21lIHByb2R1Y3RzIGhhdmUgbXVsdGlwbGUgZmFjdG9yc1xuICAgICAgICAgICAgcC5mYWN0b3JzLmZvckVhY2goZmFjdG9yID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kO1xuICAgICAgICAgICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZCA9IFsuLi5vdGhlci5mYWN0b3JzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZCA9IFtvdGhlcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNsYWltID0geyBuOiBwLndpdGhvdXQoZmFjdG9yKSwgbjE6ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5mcmFjdGlvbikoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3RPck5vdCkoLi4uc2Vjb25kKSwgZmFjdG9yKSwgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsIH07XG4gICAgICAgICAgICAgICAgb3V0LnB1c2gobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQobmV3IFNldChbcCwgb3RoZXJdKSwgY2xhaW0sIFwiYT1iICYgYz1kID0+IGEvYyA9IGIvZFwiKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5EaXZpZGVPbkJvdGhTaWRlcyA9IERpdmlkZU9uQm90aFNpZGVzO1xuLyoqXG4gKiBHZXRzIHRoZSBhbnRpLXJlZmxleGl2ZSBjbG9zdXJlIG9mIHRoZSByZWxhdGlvbiBBIHggQS5cbiAqIEl0J3Mgc3ltbWV0cmljIGFuZCB0cmFuc2l0aXZlLlxuICpcbiAqIEBwYXJhbSBzZXRcbiAqL1xuZnVuY3Rpb24gY2FydGVzaWFuUHJvZHVjdChzZXQpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZpcnN0IG9mIHNldCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlY29uZCBvZiBzZXQpIHtcbiAgICAgICAgICAgIGlmIChmaXJzdCA9PT0gc2Vjb25kKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgb3V0LnB1c2goW2ZpcnN0LCBzZWNvbmRdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN1YnRyYWN0RnJvbUJvdGhTaWRlcyA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvUHJvZHVjdFwiKTtcbmNvbnN0IFN1bV8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1N1bVwiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcF8xID0gcmVxdWlyZShcIi4uLy4uL1JlbGF0aW9uc2hpcFwiKTtcbmNvbnN0IFJlbGF0aW9uYWxEZXJpdmF0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL1JlbGF0aW9uYWxEZXJpdmF0aW9uUnVsZVwiKTtcbmNsYXNzIFN1YnRyYWN0RnJvbUJvdGhTaWRlcyBleHRlbmRzIFJlbGF0aW9uYWxEZXJpdmF0aW9uUnVsZV8xLlJlbGF0aW9uYWxEZXJpdmF0aW9uUnVsZSB7XG4gICAgYXBwbHlJbXBsKGVxdWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICBjb25zdCBjb21iaW5hdGlvbnMgPSBjYXJ0ZXNpYW5Qcm9kdWN0KGVxdWF0aW9uKTtcbiAgICAgICAgLy8gSWYgb25lIGlzIGFkZGl0aW9uLCBzdWJ0cmFjdCBmcm9tIGJvdGggc2lkZXNcbiAgICAgICAgLy8gSGVyZSB3ZSBmaWx0ZXIgc28gdGhhdCBvbmx5IHBhaXJzIHdoZXJlIHRoZSBmaXJzdCBleHByZXNzaW9uIGlzXG4gICAgICAgIC8vIGEgc3VtIGFyZSBvcGVyYXRlZCBvbi4gVGhpcyB3b3JrcyBiZWNhdXNlIGNvbWJpbmF0aW9ucyBpcyBzeW1ldHJpYy5cbiAgICAgICAgLy8gTm93IGZvciBlYWNoIHBhaXIgd2Ugb25seSBoYXZlIHRvIGRlYWwgd2l0aCB0aGUgZmlyc3QgZXhwIGJlaW5nIHN1bS5cbiAgICAgICAgY29tYmluYXRpb25zLmZpbHRlcihwYWlyID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwYWlyWzBdIGluc3RhbmNlb2YgU3VtXzEuU3VtO1xuICAgICAgICB9KS5mb3JFYWNoKHBhaXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IHBhaXJbMF07XG4gICAgICAgICAgICBjb25zdCBvdGhlciA9IHBhaXJbMV07XG4gICAgICAgICAgICAvLyBTb21lIFN1bXMgaGF2ZSBtdWx0aXBsZSB0ZXJtc1xuICAgICAgICAgICAgcy50ZXJtcy5maWx0ZXIodGVybSA9PiAhKHRlcm0gaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCAmJiB0ZXJtLmlzTmVnYXRpb24pKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKHRlcm0gPT4ge1xuICAgICAgICAgICAgICAgIC8vIElmIG90aGVyIGlzIGl0c2VsZiBhIHN1bSwgd2Ugd2lsbCBicmVhayBpdCBhcGFydFxuICAgICAgICAgICAgICAgIC8vIGludG8gdGVybXMgc28gdGhhdCB3ZSBjYW4gY29tYmluZSBpbnRlZ2VyIHRlcm1zIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGZpbmFsIHJlc3VsdCBhbmQgYXZvaWRcbiAgICAgICAgICAgICAgICAvLyB4ICsgMiArIDIgPSB5ICsgMiA9PiB4ICsgMiA9IHkgKyAyIC0gMlxuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgZG8gdGhpcyB0byBpbnRlZ2VyIHRlcm1zLCBiZWNhdXNlIHRoYXQnc1xuICAgICAgICAgICAgICAgIC8vIHNvIG9idmlvdXMgYW5kIGNvdWxkbid0IHBvc3NpYmx5IG5lZWQgdG8gYmUgZXhwbGFpbmVkIGZ1cnRoZXIuXG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgZG8gaXQgdG8gdmFyaWFibGUgdGVybXMuIFRoZSBmb2xsb3dpbmcgaXMgY29ycmVjdCBiZWhhdmlvcjpcbiAgICAgICAgICAgICAgICAvLyB4ICsgYSArIGEgPSB5ICsgYSA9PiB4ICsgYSA9IHkgKyBhIC0gYVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgZGlzdGluY3Rpb24gaXMgZGViYXRhYmxlLiBXaHkgc2hvdWxkbid0IHRoZSBsZWZ0IGhhbmRcbiAgICAgICAgICAgICAgICAvLyBvZiB0aGUgbGFzdCBkZWR1Y3Rpb24gYmUgeCArIGEgKyBhIC0gYT8gQnkgZG9pbmcgdGhpcywgXG4gICAgICAgICAgICAgICAgLy8gd2UgcHJvZHVjZSBhIG11Y2ggbW9yZSBjb21wbGljYXRlZCBhbmQgZXhwZW5zaXZlIGdyYXBoLiBcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kO1xuICAgICAgICAgICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIFN1bV8xLlN1bSkge1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmQgPSBbLi4ub3RoZXIudGVybXNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kID0gW290aGVyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY2xhaW0gPSB7IG46IHMud2l0aG91dCh0ZXJtKSwgbjE6ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW1JbnR1aXRpdmUpKC4uLnNlY29uZCwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKSh0ZXJtKSksIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCB9O1xuICAgICAgICAgICAgICAgIG91dC5wdXNoKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KG5ldyBTZXQoW3MsIG90aGVyXSksIGNsYWltLCBcImE9YiAmIGM9ZCA9PiBhLWMgPSBiLWRcIikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbn1cbmV4cG9ydHMuU3VidHJhY3RGcm9tQm90aFNpZGVzID0gU3VidHJhY3RGcm9tQm90aFNpZGVzO1xuLyoqXG4gKiBHZXRzIHRoZSBhbnRpLXJlZmxleGl2ZSBjbG9zdXJlIG9mIHRoZSByZWxhdGlvbiBBIHggQS5cbiAqIEl0J3Mgc3ltbWV0cmljIGFuZCB0cmFuc2l0aXZlLlxuICpcbiAqIEBwYXJhbSBzZXRcbiAqL1xuZnVuY3Rpb24gY2FydGVzaWFuUHJvZHVjdChzZXQpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZpcnN0IG9mIHNldCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlY29uZCBvZiBzZXQpIHtcbiAgICAgICAgICAgIGlmIChmaXJzdCA9PT0gc2Vjb25kKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgb3V0LnB1c2goW2ZpcnN0LCBzZWNvbmRdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJyZWFrRGVyaXZhdGl2ZXNPdmVyQWRkaXRpb24gPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uLy4uL0FyZ3VtZW50XCIpO1xuY29uc3QgRGVyaXZhdGl2ZV8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0Rlcml2YXRpdmVcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9TdW1cIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbmNsYXNzIEJyZWFrRGVyaXZhdGl2ZXNPdmVyQWRkaXRpb24gZXh0ZW5kcyBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZSB7XG4gICAgYXBwbGllc0ltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiBleHAgaW5zdGFuY2VvZiBEZXJpdmF0aXZlXzEuRGVyaXZhdGl2ZVxuICAgICAgICAgICAgJiYgZXhwLmV4cCBpbnN0YW5jZW9mIFN1bV8xLlN1bTtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBkID0gZXhwO1xuICAgICAgICBjb25zdCBzdW0gPSBkLmV4cDtcbiAgICAgICAgY29uc3QgdGVybXMgPSBbLi4uc3VtLnRlcm1zXTtcbiAgICAgICAgY29uc3Qgd3JhcHBlZCA9IHRlcm1zLm1hcCh0ID0+IERlcml2YXRpdmVfMS5EZXJpdmF0aXZlLm9mKHQsIGQucmVsYXRpdmVUbykpO1xuICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShkKSwge1xuICAgICAgICAgICAgbjogZCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiBTdW1fMS5TdW0ub2Yod3JhcHBlZCksXG4gICAgICAgIH0sIFwiU3BsaXQgZGVyaXZhdGl2ZSBvdmVyIGFkZGl0aW9uXCIpKTtcbiAgICB9XG59XG5leHBvcnRzLkJyZWFrRGVyaXZhdGl2ZXNPdmVyQWRkaXRpb24gPSBCcmVha0Rlcml2YXRpdmVzT3ZlckFkZGl0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvd2VyUnVsZSA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBEZXJpdmF0aXZlXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRGVyaXZhdGl2ZVwiKTtcbmNvbnN0IEV4cG9uZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRXhwb25lbnRcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbi8qKlxuICogRGVyaXZlcyB1c2luZyB0aGUgcG93ZXIgcnVsZVxuICovXG5jbGFzcyBQb3dlclJ1bGUgZXh0ZW5kcyBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZSB7XG4gICAgYXBwbGllc0ltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiBleHAgaW5zdGFuY2VvZiBEZXJpdmF0aXZlXzEuRGVyaXZhdGl2ZVxuICAgICAgICAgICAgJiYgKChleHAuZXhwIGluc3RhbmNlb2YgRXhwb25lbnRfMS5FeHBvbmVudFxuICAgICAgICAgICAgICAgICYmIGV4cC5leHAuYmFzZSA9PT0gZXhwLnJlbGF0aXZlVG9cbiAgICAgICAgICAgICAgICAmJiBleHAuZXhwLnBvd2VyLmlzQ29uc3RhbnQpXG4gICAgICAgICAgICAgICAgfHwgKGV4cC5leHAgPT09IGV4cC5yZWxhdGl2ZVRvKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdlIGtub3c6XG4gICAgICogZXhwIGlzIGEgRGVyaXZhdGl2ZSBvZiBhbiBFeHBvbmVudCB3aXRoIGEgY29uc3RhbnQgcG93ZXJcbiAgICAgKiB0aGUgZXhwb25lbnQncyBiYXNlIGlzIHRoZSBzYW1lIGFzIHdoYXQgdGhlIGRlcml2YXRpdmUgaXMgcmVsYXRpdmUgdG9cbiAgICAgKi9cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IGQgPSBleHA7XG4gICAgICAgIGxldCBleHBvbmVudDtcbiAgICAgICAgaWYgKGQuZXhwIGluc3RhbmNlb2YgRXhwb25lbnRfMS5FeHBvbmVudCkge1xuICAgICAgICAgICAgZXhwb25lbnQgPSBkLmV4cDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9uZW50ID0gRXhwb25lbnRfMS5FeHBvbmVudC5vZihkLmV4cCwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KShleHBvbmVudC5wb3dlciwgRXhwb25lbnRfMS5FeHBvbmVudC5vZihleHBvbmVudC5iYXNlLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtSW50dWl0aXZlKShleHBvbmVudC5wb3dlciwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKSkpKSk7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiByZXN1bHRcbiAgICAgICAgfSwgXCJQb3dlciBydWxlXCIpKTtcbiAgICB9XG59XG5leHBvcnRzLlBvd2VyUnVsZSA9IFBvd2VyUnVsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm9kdWN0UnVsZSA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBEZXJpdmF0aXZlXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRGVyaXZhdGl2ZVwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9Qcm9kdWN0XCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG4vKipcbiAqIERlcml2YXRpdmVzIG9mIHByb2R1Y3RzXG4gKlxuICogT25seSBvcGVyYXRlcyBvbiBkZXJpdmF0aXZlcyBvZiBwcm9kdWN0cyB3aGVyZSBhbGwgZmFjdG9ycyBhcmUgbm90IGNvbnN0YW50LlxuICovXG5jbGFzcyBQcm9kdWN0UnVsZSBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIERlcml2YXRpdmVfMS5EZXJpdmF0aXZlXG4gICAgICAgICAgICAmJiBleHAuZXhwIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3RcbiAgICAgICAgICAgIC8vIENvbnRhaW5zIG5vIGNvbnN0YW50IGZhY3RvcnNcbiAgICAgICAgICAgICYmICFleHAuZXhwLmZhY3RvcnMubWFwKGYgPT4gZi5pc0NvbnN0YW50KS5yZWR1Y2UoKGEsIGIpID0+IGEgfHwgYik7XG4gICAgICAgIC8vIENvbnRhaW5zIG5vIGRlcml2YXRpdmVzIFRPRE86IEZpbmQgYSBiZXR0ZXIgc29sdXRpb24gdG8gbG9vcCBndWFyZGluZ1xuICAgICAgICAvLyYmICFleHAuZXhwLmZhY3RvcnMubWFwPGJvb2xlYW4+KGYgPT4gZiBpbnN0YW5jZW9mIERlcml2YXRpdmUpLnJlZHVjZSgoYSwgYikgPT4gYSB8fCBiKVxuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IGQgPSBleHA7XG4gICAgICAgIGNvbnN0IHAgPSBkLmV4cDtcbiAgICAgICAgY29uc3QgZmFjdG9ycyA9IHAuZmFjdG9ycztcbiAgICAgICAgLy8gRm9yIGVhY2ggZmFjdG9yLCBjcmVhdGUgYSBwcm9kdWN0IGNvbnRhaW5pbmcgaXRzIGRlcml2YXRpdmUgYW5kIHRoZSBvdGhlciBmYWN0b3JzXG4gICAgICAgIGNvbnN0IHRlcm1zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjdG9ycy5sZW5ndGg7IGkrKykgeyAvLyBpIGlzIHRoZSBmYWN0b3IgdG8gZGVyaXZhdGl6ZSAod2hhdCB0ZXJtIHdlJ3JlIG9uKVxuICAgICAgICAgICAgY29uc3QgZmFjdG9yVG9EZXJpdmF0aXplID0gZmFjdG9yc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBGYWN0b3JzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZhY3RvciBvZiBmYWN0b3JzKSB7IC8vIGEgaXMgdGhlIHRoZSBmYWN0b3Igd2UncmUgb25cbiAgICAgICAgICAgICAgICBpZiAoZmFjdG9yID09PSBmYWN0b3JUb0Rlcml2YXRpemUpXG4gICAgICAgICAgICAgICAgICAgIHBGYWN0b3JzLnB1c2goRGVyaXZhdGl2ZV8xLkRlcml2YXRpdmUub2YoZmFjdG9yLCBkLnJlbGF0aXZlVG8pKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHBGYWN0b3JzLnB1c2goZmFjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlcm1zLnB1c2goKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKC4uLnBGYWN0b3JzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZCksIHtcbiAgICAgICAgICAgIG46IGQsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoLi4udGVybXMpXG4gICAgICAgIH0sIFwiUHJvZHVjdCBSdWxlXCIpKTtcbiAgICB9XG59XG5leHBvcnRzLlByb2R1Y3RSdWxlID0gUHJvZHVjdFJ1bGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHVsbENvbnN0YW50c0Zyb21EZXJpdmF0aXZlcyA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBEZXJpdmF0aXZlXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRGVyaXZhdGl2ZVwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9Qcm9kdWN0XCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG5jbGFzcyBQdWxsQ29uc3RhbnRzRnJvbURlcml2YXRpdmVzIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgRGVyaXZhdGl2ZV8xLkRlcml2YXRpdmVcbiAgICAgICAgICAgICYmIGV4cC5leHAgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdDtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBkID0gZXhwO1xuICAgICAgICBjb25zdCBwID0gZC5leHA7XG4gICAgICAgIGNvbnN0IGNvbnN0RmFjdG9ycyA9IHAuZmFjdG9ycy5maWx0ZXIoZiA9PiBmLmlzQ29uc3RhbnQpO1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgU2V0O1xuICAgICAgICBmb3IgKGNvbnN0IGZhY3RvciBvZiBjb25zdEZhY3RvcnMpIHtcbiAgICAgICAgICAgIG91dC5hZGQobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGQpLCB7XG4gICAgICAgICAgICAgICAgbjogZCxcbiAgICAgICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICAgICAgbjE6ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0QW5kTm90VGltZXNPbmUpKGZhY3RvciwgRGVyaXZhdGl2ZV8xLkRlcml2YXRpdmUub2YoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3RPck5vdCkoLi4uKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnJlbW92ZU5ldykocC5mYWN0b3JzLCBmYWN0b3IpKSwgZC5yZWxhdGl2ZVRvKSlcbiAgICAgICAgICAgIH0sIFwiUHVsbCBjb25zdGFudCBmYWN0b3IgZnJvbSBkZXJpdmF0aXZlXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbn1cbmV4cG9ydHMuUHVsbENvbnN0YW50c0Zyb21EZXJpdmF0aXZlcyA9IFB1bGxDb25zdGFudHNGcm9tRGVyaXZhdGl2ZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUXVvdGllbnRSdWxlID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IERlcml2YXRpdmVfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9EZXJpdmF0aXZlXCIpO1xuY29uc3QgRXhwb25lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9FeHBvbmVudFwiKTtcbmNvbnN0IEZyYWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRnJhY3Rpb25cIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbmNsYXNzIFF1b3RpZW50UnVsZSBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIERlcml2YXRpdmVfMS5EZXJpdmF0aXZlXG4gICAgICAgICAgICAmJiBleHAuZXhwIGluc3RhbmNlb2YgRnJhY3Rpb25fMS5GcmFjdGlvbjtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBkID0gZXhwO1xuICAgICAgICBjb25zdCBhID0gZC5leHAubnVtZXJhdG9yO1xuICAgICAgICBjb25zdCBiID0gZC5leHAuZGVub21pbmF0b3I7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiBGcmFjdGlvbl8xLkZyYWN0aW9uLm9mKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KShEZXJpdmF0aXZlXzEuRGVyaXZhdGl2ZS5vZihhLCBkLnJlbGF0aXZlVG8pLCBiKSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoYSwgRGVyaXZhdGl2ZV8xLkRlcml2YXRpdmUub2YoYiwgZC5yZWxhdGl2ZVRvKSkpKSwgRXhwb25lbnRfMS5FeHBvbmVudC5vZihiLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgyKSkpXG4gICAgICAgIH0sIFwiUXVvdGllbnQgUnVsZVwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5RdW90aWVudFJ1bGUgPSBRdW90aWVudFJ1bGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVVN1YnN0aXR1dGlvbiA9IHZvaWQgMDtcbmNvbnN0IE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMSA9IHJlcXVpcmUoXCIuLi9Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXCIpO1xuY2xhc3MgVVN1YnN0aXR1dGlvbiBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvL2V4cCBpbnN0YW5jZW9mIEludGVncmFsXG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cbn1cbmV4cG9ydHMuVVN1YnN0aXR1dGlvbiA9IFVTdWJzdGl0dXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXF1aXYgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uL0FyZ3VtZW50XCIpO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi4vQ29udmVuaWVudEV4cHJlc3Npb25zXCIpO1xuY29uc3QgRGVyaXZhdGl2ZV8xID0gcmVxdWlyZShcIi4uL2V4cHJlc3Npb25zL0Rlcml2YXRpdmVcIik7XG5jb25zdCBFeHBvbmVudF8xID0gcmVxdWlyZShcIi4uL2V4cHJlc3Npb25zL0V4cG9uZW50XCIpO1xuY29uc3QgRnJhY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9GcmFjdGlvblwiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgSW50ZWdyYWxfMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9JbnRlZ3JhbFwiKTtcbmNvbnN0IExvZ2FyaXRobV8xID0gcmVxdWlyZShcIi4uL2V4cHJlc3Npb25zL0xvZ2FyaXRobVwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9Qcm9kdWN0XCIpO1xuY29uc3QgU3VtXzEgPSByZXF1aXJlKFwiLi4vZXhwcmVzc2lvbnMvU3VtXCIpO1xuY29uc3QgVmFyaWFibGVfMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9WYXJpYWJsZVwiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcF8xID0gcmVxdWlyZShcIi4uL1JlbGF0aW9uc2hpcFwiKTtcbmNvbnN0IFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9UaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYlwiKTtcbi8qKlxuICogU2VhcmNoZXMgZm9yIGVxdWl2YWxlbnRzIG9mIHRoZSBnaXZlblxuICogZXhwcmVzc2lvbiB3aXRoIGEgc2VhcmNoIGRlcHRoIG9mIDEuXG4gKiBJdCBkb2VzIHRoaXMgYnkgcmVmbGVjdGluZyB0aGUgZXhwcmVzc2lvbidzXG4gKiB0eXBlLCB0aGVuIGRpc2JhdGNoaW5nIHRvIGEgdHlwZSBzcGVjaWZpYyBlcXVpdmFsZW50c1xuICogZnVuY3Rpb24uXG4gKlxuICogVGhlIHNwZWNpZmljIGZ1bmN0aW9ucyB1c2UgdGhlIGdpdmVuIGRpcmVjdEVxdWl2YWxlbnRzXG4gKiBmdW5jdGlvbiB0byBzd2FwIG91dCB0aGUgY29tcG9uZW50IHZhbHVlcyBvZiB0aGVpclxuICogZXhwcmVzc2lvbiB3aXRoIGVxdWl2YWxlbnRzLlxuICpcbiAqIEV4KVxuICogIEdpdmVuIHRoZSBleHByZXNzaW9uXG4gKiAgICAgICAgIChhICsgYSkgKyAoYiAqIGIpXG4gKiAgd2UgZGlzYmF0Y2ggdG8gdGhlIHN1bSBzcGVjaWZpYyBmdW5jdGlvbiAoYmVjYXVzZVxuICogIHRoZSBvdXRlciBtb3N0IG9wZXJhdGlvbiBpcyBhZGRpdGlvbikuIFRoaXMgZGlzYmF0Y2hcbiAqICBmdW5jdGlvbiB1c2VzIHRoZSBkaXJlY3RFcXVpdmFsZW50cyBmdW5jdGlvbiB0byBzd2FwIG91dFxuICogIGVhY2ggb2YgdGhlIHN1bSdzIHRlcm1zIGluZGl2aWR1YWxseSwgeWllbGRpbmcgcmVzdWx0c1xuICogIGxpa2U6XG4gKiAgICAgIC0+ICgyYSkgKyAoYiAqIGIpIHdpdGggaW5mZXJlbmNlIGEgKyBhID0gMmFcbiAqICAgICAgLT4gKGEgKyBhKSArIGJeMlxuICpcbiAqIEBwYXJhbSBleHAgVGhlIGV4cHJlc3Npb24gdG8gc2VhcmNoIGZvciBlcXVpdmFsZW50cy5cbiAqIEBwYXJhbSBkaXJlY3RFcXVpdmFsZW50cyBGdW5jdGlvbiB0aGF0IHRha2VzIGV4cHJlc3Npb25zIGFuZCBmaW5kcyBlcXVpdmFsZW50cy5cbiAqICAgICAgICAgICAgICBUaGlzIGZ1bmN0aW9uIG9ubHkgbmVlZHMgdG8gbG9vayBmb3IgdG9wIGxldmVsIGVxdWl2YWxlbnRzLSByZWN1cnNpb25cbiAqICAgICAgICAgICAgICBpcyBoYW5kbGVkIGJ5IHRoZSBlcXVpdiBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIEFycmF5IG9mIGFyZ3VtZW50cyBjb25uZWN0aW5nIHRoZSBnaXZlbiBleHByZXNzaW9uIHRvIGVxdWl2YWxlbnRzLlxuICovXG5mdW5jdGlvbiBlcXVpdihleHAsIGRpcmVjdEVxdWl2YWxlbnRzKSB7XG4gICAgaWYgKGV4cCBpbnN0YW5jZW9mIFZhcmlhYmxlXzEuVmFyaWFibGUgfHwgZXhwIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBlbHNlXG4gICAgICAgIHN3aXRjaCAoZXhwLmNsYXNzKSB7XG4gICAgICAgICAgICBjYXNlIFN1bV8xLlN1bVR5cGU6IHJldHVybiBzdW1FcXVpdihleHAsIGRpcmVjdEVxdWl2YWxlbnRzKTtcbiAgICAgICAgICAgIGNhc2UgUHJvZHVjdF8xLlByb2R1Y3RUeXBlOiByZXR1cm4gcHJvZHVjdEVxdWl2KGV4cCwgZGlyZWN0RXF1aXZhbGVudHMpO1xuICAgICAgICAgICAgY2FzZSBFeHBvbmVudF8xLkV4cG9uZW50VHlwZTogcmV0dXJuIGV4cG9uZW50RXF1aXYoZXhwLCBkaXJlY3RFcXVpdmFsZW50cyk7XG4gICAgICAgICAgICBjYXNlIEZyYWN0aW9uXzEuRnJhY3Rpb25UeXBlOiByZXR1cm4gZnJhY3Rpb25FcXVpdihleHAsIGRpcmVjdEVxdWl2YWxlbnRzKTtcbiAgICAgICAgICAgIGNhc2UgRGVyaXZhdGl2ZV8xLkRlcml2YXRpdmVUeXBlOiByZXR1cm4gZGVyaXZhdGl2ZUVxdWl2KGV4cCwgZGlyZWN0RXF1aXZhbGVudHMpO1xuICAgICAgICAgICAgY2FzZSBMb2dhcml0aG1fMS5Mb2dUeXBlOiByZXR1cm4gbG9nYXJpdGhtRXF1aXYoZXhwLCBkaXJlY3RFcXVpdmFsZW50cyk7XG4gICAgICAgICAgICBjYXNlIEludGVncmFsXzEuSW50ZWdyYWxUeXBlOiByZXR1cm4gaW50ZWdyYWxFcXVpdihleHAsIGRpcmVjdEVxdWl2YWxlbnRzKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCBmb3IgXCIgKyBleHAuY2xhc3MpO1xuICAgICAgICB9XG59XG5leHBvcnRzLmVxdWl2ID0gZXF1aXY7XG4vKipcbiAqIEdldHMgYWxsIGVxdWl2YWxlbnRzIG9mIHRoZSBnaXZlbiBleHByZXNzaW9uXG4gKiBieSBzd2FwcGluZyBvdXQgaXQncyBjaGlsZHJlbiBpbmRpdmlkdWFsbHkuXG4gKlxuICogKGEgKyBhKSArIChiICsgYilcbiAqIC0+ICgyYSkgKyAoYiArIGIpIHdpdGggaW5mZXJlbmNlIGEgKyBhID0gMmFcbiAqIEBwYXJhbSBleHBcbiAqIEByZXR1cm5zIEFycmF5IG9mIGluZmVyZW5jZXMgdG8gZXF1aXZhbGVudCBleHByZXNzaW9ucy5cbiAqL1xuZnVuY3Rpb24gc3VtRXF1aXYoZXhwLCBkaXJlY3RFcXVpdmFsZW50cykge1xuICAgIGNvbnN0IGVxdWl2YWxlbnRTdW1zID0gbmV3IFNldCgpO1xuICAgIC8vIEFkZCB0b3AgbGV2ZWwgZXF1aXZhbGVudHNcbiAgICBkaXJlY3RFcXVpdmFsZW50cyhleHApLmZvckVhY2goaW5mID0+IHtcbiAgICAgICAgZXF1aXZhbGVudFN1bXMuYWRkKGluZik7XG4gICAgfSk7XG4gICAgLy8gRmluZCBlcXVpdmFsZW50cyBmb3IgZWFjaCB0ZXJtXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHAudGVybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdGVybSA9IGV4cC50ZXJtc1tpXTtcbiAgICAgICAgLy8gU3Vic3RpdHV0ZSB0ZXJtIGZvciBlYWNoIGVxdWl2YWxlbnRcbiAgICAgICAgZXF1aXYodGVybSwgZGlyZWN0RXF1aXZhbGVudHMpLmZvckVhY2goYSA9PiB7XG4gICAgICAgICAgICBlcXVpdmFsZW50U3Vtcy5hZGQobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgICAgIG4xOiBzd2FwKGV4cCwgaSwgYS5jbGFpbS5uMSlcbiAgICAgICAgICAgIH0sIGEuYXJndW1lbnQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN3YXAocywgaSwgZSkge1xuICAgICAgICBjb25zdCB0ZXJtcyA9IFsuLi5zLnRlcm1zXTtcbiAgICAgICAgdGVybXNbaV0gPSBlO1xuICAgICAgICByZXR1cm4gKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoLi4udGVybXMpO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLmVxdWl2YWxlbnRTdW1zXTtcbn1cbmZ1bmN0aW9uIHByb2R1Y3RFcXVpdihleHAsIGRpcmVjdEVxdWl2YWxlbnRzKSB7XG4gICAgY29uc3QgZXF1aXZhbGVudFByb2R1Y3RzID0gbmV3IFNldCgpO1xuICAgIC8vIEFkZCB0b3AgbGV2ZWwgZXF1aXZhbGVudHNcbiAgICBkaXJlY3RFcXVpdmFsZW50cyhleHApLmZvckVhY2goaW5mID0+IHtcbiAgICAgICAgZXF1aXZhbGVudFByb2R1Y3RzLmFkZChpbmYpO1xuICAgIH0pO1xuICAgIC8vIEZpbmQgZXF1aXZhbGVudHMgZm9yIGVhY2ggdGVybVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhwLmZhY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gZXhwLmZhY3RvcnNbaV07XG4gICAgICAgIC8vIFN1YnN0aXR1dGUgdGVybSBmb3IgZWFjaCBlcXVpdmFsZW50XG4gICAgICAgIGVxdWl2KGZhY3RvciwgZGlyZWN0RXF1aXZhbGVudHMpLmZvckVhY2goYWx0ID0+IHtcbiAgICAgICAgICAgIGVxdWl2YWxlbnRQcm9kdWN0cy5hZGQobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgICAgIG4xOiBzd2FwKGV4cCwgaSwgYWx0LmNsYWltLm4xKSxcbiAgICAgICAgICAgIH0sIGFsdC5hcmd1bWVudCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3dhcChzLCBpLCBlKSB7XG4gICAgICAgIGNvbnN0IHRlcm1zID0gWy4uLnMuZmFjdG9yc107XG4gICAgICAgIHRlcm1zW2ldID0gZTtcbiAgICAgICAgcmV0dXJuICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KSguLi50ZXJtcyk7XG4gICAgfVxuICAgIHJldHVybiBbLi4uZXF1aXZhbGVudFByb2R1Y3RzXTtcbn1cbmZ1bmN0aW9uIGV4cG9uZW50RXF1aXYoZXhwLCBkaXJlY3RFcXVpdmFsZW50cykge1xuICAgIGNvbnN0IGVxdWl2YWxlbnRzID0gbmV3IFNldCgpO1xuICAgIC8vIEFkZCB0b3AgbGV2ZWwgZXF1aXZhbGVudHNcbiAgICBkaXJlY3RFcXVpdmFsZW50cyhleHApLmZvckVhY2goaW5mID0+IHtcbiAgICAgICAgZXF1aXZhbGVudHMuYWRkKGluZik7XG4gICAgfSk7XG4gICAgZXF1aXYoZXhwLmJhc2UsIGRpcmVjdEVxdWl2YWxlbnRzKS5mb3JFYWNoKGFsdCA9PiB7XG4gICAgICAgIGVxdWl2YWxlbnRzLmFkZChuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IEV4cG9uZW50XzEuRXhwb25lbnQub2YoYWx0LmNsYWltLm4xLCBleHAucG93ZXIpXG4gICAgICAgIH0sIGFsdC5hcmd1bWVudCkpO1xuICAgIH0pO1xuICAgIGVxdWl2KGV4cC5wb3dlciwgZGlyZWN0RXF1aXZhbGVudHMpLmZvckVhY2goYWx0ID0+IHtcbiAgICAgICAgZXF1aXZhbGVudHMuYWRkKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogRXhwb25lbnRfMS5FeHBvbmVudC5vZihleHAuYmFzZSwgYWx0LmNsYWltLm4xKSxcbiAgICAgICAgfSwgYWx0LmFyZ3VtZW50KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFsuLi5lcXVpdmFsZW50c107XG59XG5mdW5jdGlvbiBmcmFjdGlvbkVxdWl2KGV4cCwgZGlyZWN0RXF1aXZhbGVudHMpIHtcbiAgICBjb25zdCBlcXVpdmFsZW50cyA9IG5ldyBTZXQoKTtcbiAgICAvLyBBZGQgdG9wIGxldmVsIGVxdWl2YWxlbnRzXG4gICAgZGlyZWN0RXF1aXZhbGVudHMoZXhwKS5mb3JFYWNoKGluZiA9PiB7XG4gICAgICAgIGVxdWl2YWxlbnRzLmFkZChpbmYpO1xuICAgIH0pO1xuICAgIGVxdWl2KGV4cC5udW1lcmF0b3IsIGRpcmVjdEVxdWl2YWxlbnRzKS5mb3JFYWNoKGFsdCA9PiB7XG4gICAgICAgIGVxdWl2YWxlbnRzLmFkZChuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoYWx0LmNsYWltLm4xLCBleHAuZGVub21pbmF0b3IpXG4gICAgICAgIH0sIGFsdC5hcmd1bWVudCkpO1xuICAgIH0pO1xuICAgIGVxdWl2KGV4cC5kZW5vbWluYXRvciwgZGlyZWN0RXF1aXZhbGVudHMpLmZvckVhY2goYWx0ID0+IHtcbiAgICAgICAgZXF1aXZhbGVudHMuYWRkKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogRnJhY3Rpb25fMS5GcmFjdGlvbi5vZihleHAubnVtZXJhdG9yLCBhbHQuY2xhaW0ubjEpLFxuICAgICAgICB9LCBhbHQuYXJndW1lbnQpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gWy4uLmVxdWl2YWxlbnRzXTtcbn1cbmZ1bmN0aW9uIGRlcml2YXRpdmVFcXVpdihleHAsIGRpcmVjdEVxdWl2YWxlbnRzKSB7XG4gICAgY29uc3QgZXF1aXZhbGVudHMgPSBuZXcgU2V0KCk7XG4gICAgLy8gQWRkIHRvcCBsZXZlbCBlcXVpdmFsZW50c1xuICAgIGRpcmVjdEVxdWl2YWxlbnRzKGV4cCkuZm9yRWFjaChpbmYgPT4ge1xuICAgICAgICBlcXVpdmFsZW50cy5hZGQoaW5mKTtcbiAgICB9KTtcbiAgICBlcXVpdihleHAuZXhwLCBkaXJlY3RFcXVpdmFsZW50cykuZm9yRWFjaChhbHQgPT4ge1xuICAgICAgICBlcXVpdmFsZW50cy5hZGQobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiBEZXJpdmF0aXZlXzEuRGVyaXZhdGl2ZS5vZihhbHQuY2xhaW0ubjEsIGV4cC5yZWxhdGl2ZVRvKVxuICAgICAgICB9LCBhbHQuYXJndW1lbnQpKTtcbiAgICB9KTtcbiAgICBlcXVpdihleHAucmVsYXRpdmVUbywgZGlyZWN0RXF1aXZhbGVudHMpLmZvckVhY2goYWx0ID0+IHtcbiAgICAgICAgZXF1aXZhbGVudHMuYWRkKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogRGVyaXZhdGl2ZV8xLkRlcml2YXRpdmUub2YoZXhwLmV4cCwgYWx0LmNsYWltLm4xKSxcbiAgICAgICAgfSwgYWx0LmFyZ3VtZW50KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFsuLi5lcXVpdmFsZW50c107XG59XG5mdW5jdGlvbiBsb2dhcml0aG1FcXVpdihleHAsIGRpcmVjdEVxdWl2YWxlbnRzKSB7XG4gICAgY29uc3QgZXF1aXZhbGVudHMgPSBuZXcgU2V0KCk7XG4gICAgLy8gQWRkIHRvcCBsZXZlbCBlcXVpdmFsZW50c1xuICAgIGRpcmVjdEVxdWl2YWxlbnRzKGV4cCkuZm9yRWFjaChhcmcgPT4ge1xuICAgICAgICBlcXVpdmFsZW50cy5hZGQoYXJnKTtcbiAgICB9KTtcbiAgICBlcXVpdihleHAuZXhwLCBkaXJlY3RFcXVpdmFsZW50cykuZm9yRWFjaChhbHQgPT4ge1xuICAgICAgICBlcXVpdmFsZW50cy5hZGQobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiBMb2dhcml0aG1fMS5Mb2dhcml0aG0ub2YoYWx0LmNsYWltLm4xLCBleHAuYmFzZSlcbiAgICAgICAgfSwgYWx0LmFyZ3VtZW50KSk7XG4gICAgfSk7XG4gICAgZXF1aXYoZXhwLmJhc2UsIGRpcmVjdEVxdWl2YWxlbnRzKS5mb3JFYWNoKGFsdCA9PiB7XG4gICAgICAgIGVxdWl2YWxlbnRzLmFkZChuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IExvZ2FyaXRobV8xLkxvZ2FyaXRobS5vZihleHAuZXhwLCBhbHQuY2xhaW0ubjEpLFxuICAgICAgICB9LCBhbHQuYXJndW1lbnQpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gWy4uLmVxdWl2YWxlbnRzXTtcbn1cbmZ1bmN0aW9uIGludGVncmFsRXF1aXYoZXhwLCBkaXJlY3RFcXVpdmFsZW50cykge1xuICAgIGNvbnN0IGVxdWl2YWxlbnRzID0gbmV3IFNldCgpO1xuICAgIC8vIEFkZCB0b3AgbGV2ZWwgZXF1aXZhbGVudHNcbiAgICBkaXJlY3RFcXVpdmFsZW50cyhleHApLmZvckVhY2goYXJnID0+IHtcbiAgICAgICAgZXF1aXZhbGVudHMuYWRkKGFyZyk7XG4gICAgfSk7XG4gICAgZXF1aXYoZXhwLmludGVncmFuZCwgZGlyZWN0RXF1aXZhbGVudHMpLmZvckVhY2goYWx0ID0+IHtcbiAgICAgICAgZXF1aXZhbGVudHMuYWRkKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogSW50ZWdyYWxfMS5JbnRlZ3JhbC5vZihhbHQuY2xhaW0ubjEsIGV4cC5yZWxhdGl2ZVRvKVxuICAgICAgICB9LCBhbHQuYXJndW1lbnQpKTtcbiAgICB9KTtcbiAgICBlcXVpdihleHAucmVsYXRpdmVUbywgZGlyZWN0RXF1aXZhbGVudHMpLmZvckVhY2goYWx0ID0+IHtcbiAgICAgICAgZXF1aXZhbGVudHMuYWRkKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogSW50ZWdyYWxfMS5JbnRlZ3JhbC5vZihleHAuaW50ZWdyYW5kLCBhbHQuY2xhaW0ubjEpLFxuICAgICAgICB9LCBhbHQuYXJndW1lbnQpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gWy4uLmVxdWl2YWxlbnRzXTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BZGRpdGl2ZUlkZW50aXR5ID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgU3VtXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvU3VtXCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG4vKipcbiAqIEFueXRoaW5nIHBsdXMgMCBpcyBhbnl0aGluZ1xuICovXG5jbGFzcyBBZGRpdGl2ZUlkZW50aXR5IGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgU3VtXzEuU3VtO1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IHRlcm1zV2l0aG91dFplcm8gPSBleHAudGVybXMuZmlsdGVyKHQgPT4gISh0IGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIgJiYgdC52YWx1ZSA9PSAwKSk7XG4gICAgICAgIGlmICh0ZXJtc1dpdGhvdXRaZXJvLmxlbmd0aCA9PSBleHAudGVybXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKSgpO1xuICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bU9yTm90KSguLi50ZXJtc1dpdGhvdXRaZXJvKVxuICAgICAgICB9LCBcIkFkZGl0aXZlIGlkZW50aXR5XCIpKTtcbiAgICB9XG59XG5leHBvcnRzLkFkZGl0aXZlSWRlbnRpdHkgPSBBZGRpdGl2ZUlkZW50aXR5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFueXRoaW5nVGltZXNaZXJvID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbmNsYXNzIEFueXRoaW5nVGltZXNaZXJvIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3Q7XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IGV4cDtcbiAgICAgICAgbGV0IGlzWmVybyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGZhY3RvciBvZiBwcm9kdWN0LmZhY3RvcnMpXG4gICAgICAgICAgICBpZiAoZmFjdG9yIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIgJiYgZmFjdG9yLnZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaXNaZXJvID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1plcm8pXG4gICAgICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKCk7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiBJbnRlZ2VyXzEuSW50ZWdlci5vZigwKVxuICAgICAgICB9LCBcIkFueXRoaW5nIHRpbWVzIHplcm8gaXMgemVyb1wiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Bbnl0aGluZ1RpbWVzWmVybyA9IEFueXRoaW5nVGltZXNaZXJvO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzc29jaWF0aXZlUHJvcGVydHlPZlByb2R1Y3RzQW5kU3VtcyA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvUHJvZHVjdFwiKTtcbmNvbnN0IFN1bV8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1N1bVwiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcF8xID0gcmVxdWlyZShcIi4uLy4uL1JlbGF0aW9uc2hpcFwiKTtcbmNvbnN0IFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9UaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYlwiKTtcbmNvbnN0IE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMSA9IHJlcXVpcmUoXCIuLi9Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXCIpO1xuLyoqXG4gKiBGbGF0dGVucyBwcm9kdWN0cyBpbiBwcm9kdWN0cyBhbmQgc3VtcyBpbiBzdW1zLlxuICpcbiAqIE9ubHkgcmV0dXJucyBvbmUgc2ltcGxpZmljYXRpb24gb2YgYW4gaW5wdXQuXG4gKi9cbmNsYXNzIEFzc29jaWF0aXZlUHJvcGVydHlPZlByb2R1Y3RzQW5kU3VtcyBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIFN1bV8xLlN1bSB8fCBleHAgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdDtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBpZiAoZXhwIGluc3RhbmNlb2YgU3VtXzEuU3VtKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdUZXJtcyA9IGV4cC50ZXJtcy5tYXAodCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBTdW1fMS5TdW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsuLi50LnRlcm1zXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0XTtcbiAgICAgICAgICAgIH0pLmZsYXQoKTtcbiAgICAgICAgICAgIGlmIChuZXdUZXJtcy5sZW5ndGggPT0gZXhwLnRlcm1zLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNldCgpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICAgICAgbjE6ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKC4uLm5ld1Rlcm1zKVxuICAgICAgICAgICAgfSwgXCJBc3NvY2lhdGl2ZSBwcm9wZXJ0eSBvZiBhZGRpdGlvblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBuZXdGYWN0b3JzID0gZXhwLmZhY3RvcnMubWFwKHQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsuLi50LmZhY3RvcnNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW3RdO1xuICAgICAgICAgICAgfSkuZmxhdCgpO1xuICAgICAgICAgICAgaWYgKG5ld0ZhY3RvcnMubGVuZ3RoID09IGV4cC5mYWN0b3JzLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNldCgpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICAgICAgbjE6ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KSguLi5uZXdGYWN0b3JzKVxuICAgICAgICAgICAgfSwgXCJBc3NvY2lhdGl2ZSBwcm9wZXJ0eSBvZiBtdWx0aXBsaWNhdGlvblwiKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFzc29jaWF0aXZlUHJvcGVydHlPZlByb2R1Y3RzQW5kU3VtcyA9IEFzc29jaWF0aXZlUHJvcGVydHlPZlByb2R1Y3RzQW5kU3VtcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYW5jZWxOZWdhdGl2ZXMgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uLy4uL0FyZ3VtZW50XCIpO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vQ29udmVuaWVudEV4cHJlc3Npb25zXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18yID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbi8qKlxuICogTWFrZXMgc3VyZSBhIHByb2R1Y3QgZG9lc24ndCBjb250YWluIGFueSBuZWdhdGlvbnMuXG4gKiBUaGUgcHJvZHVjdCBpcyBlaXRoZXIgYSBuZWdhdGlvbiBvciBub3QuXG4gKi9cbmNsYXNzIENhbmNlbE5lZ2F0aXZlcyBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0O1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IHByb2R1Y3QgPSBleHA7XG4gICAgICAgIGNvbnN0IG5lZ2F0ZWRGYWN0b3JzID0gW107XG4gICAgICAgIGNvbnN0IG90aGVycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGYgb2YgcHJvZHVjdC5mYWN0b3JzKSB7XG4gICAgICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ICYmIGYuaXNOZWdhdGlvbikge1xuICAgICAgICAgICAgICAgIG5lZ2F0ZWRGYWN0b3JzLnB1c2goZi5uZWdhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdGhlcnMucHVzaChmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc05lZ2F0aW9uID0gcHJvZHVjdC5pc05lZ2F0aW9uO1xuICAgICAgICBjb25zdCBuZWdhdGlvbnMgPSBuZWdhdGVkRmFjdG9ycy5sZW5ndGggKyAoaXNOZWdhdGlvbiA/IDEgOiAwKTtcbiAgICAgICAgaWYgKG5lZ2F0aW9ucyA8IDIpXG4gICAgICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdElzTmVnYXRpdmUgPSBuZWdhdGlvbnMgJSAyID09IDE7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMi5wcm9kdWN0KSguLi5uZWdhdGVkRmFjdG9ycywgLi4ub3RoZXJzKTtcbiAgICAgICAgY29uc3QgbmVnYXRlZFJlc3VsdCA9IHJlc3VsdElzTmVnYXRpdmUgPyAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKHJlc3VsdCkgOiByZXN1bHQ7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiBuZWdhdGVkUmVzdWx0XG4gICAgICAgIH0sIFwiQ2FuY2VsIG5lZ2F0aXZlc1wiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5DYW5jZWxOZWdhdGl2ZXMgPSBDYW5jZWxOZWdhdGl2ZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tYmluZUNvbW1vbkZhY3RvcnNNdWx0aXBsaWNhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBFeHBvbmVudF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0V4cG9uZW50XCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9TdW1cIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbi8qKlxuICogQ29tYmluZXMgbGlrZSBmYWN0b3JzIGFuZCBleHBvbmVudHMgd2l0aCBsaWtlIGJhc2VzLlxuICovXG5jbGFzcyBDb21iaW5lQ29tbW9uRmFjdG9yc011bHRpcGxpY2F0aW9uIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3RcbiAgICAgICAgICAgICYmICFleHAuaXNSZWR1Y2libGU7XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IGV4cDtcbiAgICAgICAgLy8gRmluZCBhbGwgdGhlIGJhc2VzL2ZhY3RvcnMgaW4gdGhlIHByb2R1Y3RcbiAgICAgICAgY29uc3QgYmFzZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgZmFjdG9yIG9mIHByb2R1Y3QuZmFjdG9ycykge1xuICAgICAgICAgICAgaWYgKGZhY3RvciBpbnN0YW5jZW9mIEV4cG9uZW50XzEuRXhwb25lbnQpXG4gICAgICAgICAgICAgICAgYmFzZXMuYWRkKGZhY3Rvci5iYXNlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBiYXNlcy5hZGQoZmFjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcXVpdmFsZW50RXhwcmVzc2lvbnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIEZvciBldmVyeSB1bmlxdWUgZmFjdG9yXG4gICAgICAgIGZvciAoY29uc3QgYmFzZSBvZiBiYXNlcykge1xuICAgICAgICAgICAgbGV0IHBvd2VyVGVybXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0ZhY3RvcnMgPSBbXTtcbiAgICAgICAgICAgIC8vIENvdW50IHRoZSBudW1iZXIgb2YgdGltZXMgaXQgb2NjdXJzIGluIHRoZSBwcm9kdWN0XG4gICAgICAgICAgICAvLyBDb2xsZWN0IHRoZSBvdGhlciBmYWN0b3JzIGluIGEgbGlzdFxuICAgICAgICAgICAgZm9yIChjb25zdCBmIG9mIHByb2R1Y3QuZmFjdG9ycykge1xuICAgICAgICAgICAgICAgIGlmIChmIGluc3RhbmNlb2YgRXhwb25lbnRfMS5FeHBvbmVudCAmJiBmLmJhc2UgPT09IGJhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcG93ZXJUZXJtcy5wdXNoKGYucG93ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmID09PSBiYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvd2VyVGVybXMucHVzaCgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdGYWN0b3JzLnB1c2goZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT3JkZXIgdGhlIHBvd2VyIHRlcm1zIGNvcnJlY3RseVxuICAgICAgICAgICAgcG93ZXJUZXJtcyA9ICgwLCBTdW1fMS5vcmRlclRlcm1zKSguLi5wb3dlclRlcm1zKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBiYXNlIG9ubHkgb2NjdXJlZCBvbmNlLCBub3RoaW5nIHRvIHNpbXBsaWZ5XG4gICAgICAgICAgICBpZiAocG93ZXJUZXJtcy5sZW5ndGggPT0gMSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBleHBvbmVudCB0aGF0IGNvbWJpbmVzIHRoZSB0ZXJtc1xuICAgICAgICAgICAgY29uc3QgZXhwb25lbnQgPSBFeHBvbmVudF8xLkV4cG9uZW50Lm9mKGJhc2UsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKC4uLnBvd2VyVGVybXMpKTtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBvdGhlciBmYWN0b3JzLCB3ZSdyZSBkb25lXG4gICAgICAgICAgICBpZiAocmVtYWluaW5nRmFjdG9ycy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGVxdWl2YWxlbnRFeHByZXNzaW9ucy5hZGQoZXhwb25lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBuZXcgZXhwb25lbnQgYXQgdGhlIGNvcnJlY3QgcGxhY2UgaW4gdGhlIG5ldyBwcm9kdWN0XG4gICAgICAgICAgICBmdW5jdGlvbiBpbnNlcnRDb3JyZWN0bHkoYXJyLCBlbCkge1xuICAgICAgICAgICAgICAgIC8vIFBpY2sgaW5kZXhcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoMCwgUHJvZHVjdF8xLmZhY3Rvck9yZGVyKShlbCwgYXJyW2ldKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGluZGV4LCAwLCBlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnNlcnRDb3JyZWN0bHkocmVtYWluaW5nRmFjdG9ycywgZXhwb25lbnQpO1xuICAgICAgICAgICAgZXF1aXZhbGVudEV4cHJlc3Npb25zLmFkZChQcm9kdWN0XzEuUHJvZHVjdC5vZihyZW1haW5pbmdGYWN0b3JzKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBhcmd1bWVudHMgZm9yIGVhY2ggZXF1aXZhbGVudCBleHByZXNzaW9uXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBuZXcgU2V0KCk7XG4gICAgICAgIGVxdWl2YWxlbnRFeHByZXNzaW9ucy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgYXJncy5hZGQobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKHByb2R1Y3QpLCB7XG4gICAgICAgICAgICAgICAgbjogcHJvZHVjdCxcbiAgICAgICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICAgICAgbjE6IGUsXG4gICAgICAgICAgICB9LCBcIkNvbWJpbmUgY29tbW9uIGZhY3RvcnMgbXVsdGlwbGljYXRpb25cIikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxufVxuZXhwb3J0cy5Db21iaW5lQ29tbW9uRmFjdG9yc011bHRpcGxpY2F0aW9uID0gQ29tYmluZUNvbW1vbkZhY3RvcnNNdWx0aXBsaWNhdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21iaW5lQ29tbW9uVGVybXNBZGRpdGlvbiA9IHZvaWQgMDtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvUHJvZHVjdFwiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcF8xID0gcmVxdWlyZShcIi4uLy4uL1JlbGF0aW9uc2hpcFwiKTtcbmNvbnN0IE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMSA9IHJlcXVpcmUoXCIuLi9Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXCIpO1xuY29uc3QgU3VtXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvU3VtXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuLyoqXG4gKiBhICsgYSA9IDJhXG4gKiAyYSAtIGEgPSBhICAodGhpcyBtZWFucyB3ZSBoYXZlIHRvIGNoZWNrIGZvciBuZWdhdGlvbnMpXG4gKlxuICogKGJjKWEgKyA3YSA9ICg3ICsgYmMpYVxuICpcbiAqIEJ1dCBub3RcbiAqIDEgKyAxID0gMigxKVxuICovXG5jbGFzcyBDb21iaW5lQ29tbW9uVGVybXNBZGRpdGlvbiBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIFN1bV8xLlN1bVxuICAgICAgICAgICAgJiYgIWV4cC5pc1JlZHVjaWJsZTtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBzdW0gPSBleHA7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBuZXcgU2V0KCk7XG4gICAgICAgIGNvbnN0IHVuaXF1ZUZhY3RvcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIEZpbmQgYWxsIHVuaXF1ZSBmYWN0b3JzIGluIGFsbCB0ZXJtc1xuICAgICAgICAvLyBBc3N1bWUgcHJvZHVjdHMgaGF2ZSBiZWVuIGZsYXR0ZW5lZCBhbHJlYWR5IChhc3NvY2lhdGl2ZSBwcm9wZXJ0eSlcbiAgICAgICAgZm9yIChjb25zdCB0ZXJtIG9mIHN1bS50ZXJtcykge1xuICAgICAgICAgICAgaWYgKHRlcm0gaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCkge1xuICAgICAgICAgICAgICAgICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLmFkZEFsbCkodW5pcXVlRmFjdG9ycywgLi4udGVybS5mYWN0b3JzKTtcbiAgICAgICAgICAgICAgICAvL1RPRE86IENhcHR1cmUgYWxsIGNvbWJpbmF0aW9ucyBvZiBmYWN0b3JzXG4gICAgICAgICAgICAgICAgLy9UT0RPOiBDYXB0dXJlIGludGVnZXIgZmFjdG9yc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHVuaXF1ZUZhY3RvcnMuYWRkKHRlcm0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZSBhbiBhcmd1bWVudCBmb3IgcHVsbGluZyBvdXQgZWFjaCBmYWN0b3JcbiAgICAgICAgZm9yIChjb25zdCBmYWN0b3Igb2YgdW5pcXVlRmFjdG9ycykge1xuICAgICAgICAgICAgaWYgKGZhY3Rvci5pc1JlZHVjaWJsZU9ySW50KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gRmlndXJlIG91dCB3aGljaCB0ZXJtcyBjb250YWluIGl0XG4gICAgICAgICAgICBjb25zdCByZWxhdmVudFRlcm1zID0gW107XG4gICAgICAgICAgICBjb25zdCBvdGhlclRlcm1zID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRlcm0gb2Ygc3VtLnRlcm1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlcm0gaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuaGFzKSh0ZXJtLmZhY3RvcnMsIGZhY3RvcikpXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdmVudFRlcm1zLnB1c2godGVybSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyVGVybXMucHVzaCh0ZXJtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtID09PSBmYWN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdmVudFRlcm1zLnB1c2goUHJvZHVjdF8xLlByb2R1Y3Qub2YoWygwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKDEpLCB0ZXJtXSkpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlclRlcm1zLnB1c2godGVybSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlbGF2ZW50VGVybXMubGVuZ3RoIDwgMilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIFB1bGwgaXQgb3V0IG9mIHRob3NlIHRlcm1zXG4gICAgICAgICAgICBjb25zdCBjb2VmZmljaWVudHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGVybSBvZiByZWxhdmVudFRlcm1zKSB7XG4gICAgICAgICAgICAgICAgY29lZmZpY2llbnRzLnB1c2godGVybS53aXRob3V0KGZhY3RvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHVsbGVkID0gKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bU9yTm90KSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEub3JkZXJlZFByb2R1Y3QpKFN1bV8xLlN1bS5vZihjb2VmZmljaWVudHMpLCBmYWN0b3IpLCAuLi5vdGhlclRlcm1zKTtcbiAgICAgICAgICAgIGFyZ3MuYWRkKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgICAgICBuMTogcHVsbGVkXG4gICAgICAgICAgICB9LCBcIkNvbWJpbmUgbGlrZSB0ZXJtc1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxuICAgIGdldCBjb252ZXJnZW5jZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuQ29udmVyZ2VuY2VUYXJnZXQuRmFjdG9yZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Db21iaW5lQ29tbW9uVGVybXNBZGRpdGlvbiA9IENvbWJpbmVDb21tb25UZXJtc0FkZGl0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbWJpbmVJbnRlZ2VyRmFjdG9ycyA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBJbnRlZ2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvSW50ZWdlclwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9Qcm9kdWN0XCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG4vKipcbiAqIFByb2R1Y3RzIHdpdGggc2V2ZXJhbCBpbnRlZ2VyIHRlcm1zIGFyZSBzaW1wbGlmaWVkIHRvIG9ubHkgaW5jbHVkZSAxXG4gKi9cbmNsYXNzIENvbWJpbmVJbnRlZ2VyRmFjdG9ycyBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0XG4gICAgICAgICAgICAmJiAhZXhwLmlzTmVnYXRpb247XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3QgcCA9IGV4cDtcbiAgICAgICAgY29uc3QgcmVtYWluaW5nRmFjdG9ycyA9IFtdO1xuICAgICAgICBsZXQgY29lZmZpY2llbnQgPSAxO1xuICAgICAgICBmb3IgKGNvbnN0IGYgb2YgcC5mYWN0b3JzKSB7XG4gICAgICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyKSB7XG4gICAgICAgICAgICAgICAgY29lZmZpY2llbnQgKj0gZi52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZW1haW5pbmdGYWN0b3JzLnB1c2goZik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHAuZmFjdG9ycy5sZW5ndGggLSByZW1haW5pbmdGYWN0b3JzLmxlbmd0aCA8IDIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNldCgpO1xuICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3RPck5vdCkoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoY29lZmZpY2llbnQpLCAuLi5yZW1haW5pbmdGYWN0b3JzKVxuICAgICAgICB9LCBcIk11bHRpcGx5IGludGVnZXIgdGVybXNcIikpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tYmluZUludGVnZXJGYWN0b3JzID0gQ29tYmluZUludGVnZXJGYWN0b3JzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbWJpbmVQcm9kdWN0c0FuZEZyYWN0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBGcmFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0ZyYWN0aW9uXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBhc3NlcnRfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Fzc2VydFwiKTtcbmNvbnN0IFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9UaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYlwiKTtcbmNvbnN0IE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMSA9IHJlcXVpcmUoXCIuLi9Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXCIpO1xuLyoqXG4gKiBTaW1wbGlmaWVzIHByb2R1Y3RzIGNvbnRhaW5pbmcgZnJhY3Rpb25zIGJ5IG1vdmluZyB0aGVcbiAqIHBhcnRzIG9mIHRoZSBwcm9kdWN0IGludG8gdGhlIG51bWVyYXRvciBvZiB0aGUgZmlyc3QgZnJhY3Rpb24uXG4gKi9cbmNsYXNzIENvbWJpbmVQcm9kdWN0c0FuZEZyYWN0aW9ucyBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0O1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IHByb2R1Y3QgPSBleHA7XG4gICAgICAgIC8vIEFsbCBwcm9kdWN0cyBoYXZlIGF0IGxlYXN0IDIgZmFjdG9yc1xuICAgICAgICBjb25zdCBmaXJzdEZyYWN0aW9uID0gcHJvZHVjdC5mYWN0b3JzLmZpbHRlcihmID0+IGYgaW5zdGFuY2VvZiBGcmFjdGlvbl8xLkZyYWN0aW9uKVswXTtcbiAgICAgICAgaWYgKGZpcnN0RnJhY3Rpb24gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoKTtcbiAgICAgICAgLy8gQXQgbGVhc3Qgb25lIG9mIHRob3NlIGlzIGEgZnJhY3Rpb25cbiAgICAgICAgY29uc3Qgbm9uRnJhY3Rpb25GYWN0b3JzID0gcHJvZHVjdC5mYWN0b3JzLmZpbHRlcihmID0+ICEoZiBpbnN0YW5jZW9mIEZyYWN0aW9uXzEuRnJhY3Rpb24pKTtcbiAgICAgICAgaWYgKG5vbkZyYWN0aW9uRmFjdG9ycy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoKTtcbiAgICAgICAgLy8gQXQgbGVhc3Qgb25lIG9mIHRob3NlIGlzIG5vdCBhIGZyYWN0aW9uXG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIC8vIEZyYWN0aW9uIGFuZCBub24tZnJhY3Rpb24gZmFjdG9ycyBwYXJ0aXRpb24gdGhlIHNldCBvZiBmYWN0b3JzXG4gICAgICAgIGlmIChwcm9kdWN0LmZhY3RvcnMubGVuZ3RoIC0gbm9uRnJhY3Rpb25GYWN0b3JzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAvLyBUaGVyZSBpcyBleGFjdGx5IG9uZSBmcmFjdGlvbiBmYWN0b3JcbiAgICAgICAgICAgIC8vIEFsbCB0aGUgZmFjdG9ycyB3aWxsIGJlIGNvbWJpbmVkIGludG8gb25lIGZhY3RvclxuICAgICAgICAgICAgcmVzdWx0ID0gRnJhY3Rpb25fMS5GcmFjdGlvbi5vZigoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoZmlyc3RGcmFjdGlvbi5udW1lcmF0b3IsIC4uLm5vbkZyYWN0aW9uRmFjdG9ycyksIGZpcnN0RnJhY3Rpb24uZGVub21pbmF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlcmUgYXJlIG11bHRpcGxlIGZyYWN0aW9uc1xuICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nRnJhY3Rpb25GYWN0b3JzID0gcHJvZHVjdC5mYWN0b3JzLmZpbHRlcihmID0+IGYgaW5zdGFuY2VvZiBGcmFjdGlvbl8xLkZyYWN0aW9uKTtcbiAgICAgICAgICAgICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5yZW1vdmUpKHJlbWFpbmluZ0ZyYWN0aW9uRmFjdG9ycywgZmlyc3RGcmFjdGlvbik7XG4gICAgICAgICAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KShyZW1haW5pbmdGcmFjdGlvbkZhY3RvcnMubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICByZXN1bHQgPSAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoRnJhY3Rpb25fMS5GcmFjdGlvbi5vZigoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdEFuZE5vdFRpbWVzT25lKShmaXJzdEZyYWN0aW9uLm51bWVyYXRvciwgLi4ubm9uRnJhY3Rpb25GYWN0b3JzKSwgZmlyc3RGcmFjdGlvbi5kZW5vbWluYXRvciksIC4uLnJlbWFpbmluZ0ZyYWN0aW9uRmFjdG9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IHJlc3VsdFxuICAgICAgICB9LCBcIkNvbWJpbmUgcHJvZHVjdHMgaW50byBmcmFjdGlvblwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21iaW5lUHJvZHVjdHNBbmRGcmFjdGlvbnMgPSBDb21iaW5lUHJvZHVjdHNBbmRGcmFjdGlvbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGlzdHJpYnV0aXZlUHJvcGVydHkgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uLy4uL0FyZ3VtZW50XCIpO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vQ29udmVuaWVudEV4cHJlc3Npb25zXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9TdW1cIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbi8qKlxuICogRGlzdHJpYnV0ZXMgbXVsdGlwbGljYXRpb24gb3ZlciBhZGRpdGlvbi5cbiAqXG4gKiBhKGIrYykgPSBhYiArIGFjXG4gKi9cbmNsYXNzIERpc3RyaWJ1dGl2ZVByb3BlcnR5IGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3Q7XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IGV4cDtcbiAgICAgICAgY29uc3Qgbm9uU3VtcyA9IHByb2R1Y3QuZmFjdG9ycy5maWx0ZXIoZiA9PiAhKGYgaW5zdGFuY2VvZiBTdW1fMS5TdW0pKTtcbiAgICAgICAgaWYgKG5vblN1bXMubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKCk7XG4gICAgICAgIC8vIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBub24tc3VtIGZhY3RvclxuICAgICAgICBjb25zdCBmaXJzdFN1bSA9IHByb2R1Y3QuZmFjdG9ycy5maWx0ZXIoZiA9PiBmIGluc3RhbmNlb2YgU3VtXzEuU3VtKVswXTtcbiAgICAgICAgaWYgKGZpcnN0U3VtID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoKTtcbiAgICAgICAgLy8gVGhlcmUgaXMgYXQgbGVhc3Qgb25lIHN1bVxuICAgICAgICBjb25zdCByZW1haW5pbmdTdW1zID0gcHJvZHVjdC5mYWN0b3JzLmZpbHRlcihmID0+IGYgaW5zdGFuY2VvZiBTdW1fMS5TdW0pO1xuICAgICAgICAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucmVtb3ZlKShyZW1haW5pbmdTdW1zLCBmaXJzdFN1bSk7XG4gICAgICAgIGNvbnN0IHRvRGlzdHJpYnV0ZSA9ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0T3JOb3QpKC4uLm5vblN1bXMpO1xuICAgICAgICBjb25zdCBkaXN0cmlidXRlZCA9ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW0pKC4uLmZpcnN0U3VtLnRlcm1zLm1hcCh0ID0+ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0KSh0b0Rpc3RyaWJ1dGUsIHQpKSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0T3JOb3QpKGRpc3RyaWJ1dGVkLCAuLi5yZW1haW5pbmdTdW1zKTtcbiAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IHJlc3VsdFxuICAgICAgICB9LCBgRGlzdHJpYnV0ZSAkeygwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0T3JOb3QpKC4uLm5vblN1bXMpLnRvVW5hbWJpZ2lvdXNTdHJpbmcoKX1gKSk7XG4gICAgfVxuICAgIGdldCBjb252ZXJnZW5jZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuQ29udmVyZ2VuY2VUYXJnZXQuUG9seW5vbWlhbDtcbiAgICB9XG59XG5leHBvcnRzLkRpc3RyaWJ1dGl2ZVByb3BlcnR5ID0gRGlzdHJpYnV0aXZlUHJvcGVydHk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGl2aWRlRnJhY3Rpb25zID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEV4cG9uZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRXhwb25lbnRcIik7XG5jb25zdCBGcmFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0ZyYWN0aW9uXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbmNsYXNzIERpdmlkZUZyYWN0aW9ucyBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIEZyYWN0aW9uXzEuRnJhY3Rpb25cbiAgICAgICAgICAgICYmIGV4cC5udW1lcmF0b3IgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdFxuICAgICAgICAgICAgJiYgZXhwLmRlbm9taW5hdG9yIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3Q7XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3QgZnJhYyA9IGV4cDtcbiAgICAgICAgY29uc3QgbnVtID0gZnJhYy5udW1lcmF0b3I7XG4gICAgICAgIGNvbnN0IGRlbiA9IGZyYWMuZGVub21pbmF0b3I7XG4gICAgICAgIC8vIFRha2UgdGhlIGZhY3RvcnMgb2YgdGhlIG5lZ2F0aW9uIG9mIGFueSBuZWdhdGlvbnNcbiAgICAgICAgY29uc3QgbnVtRmFjdG9ycyA9IG51bS5pc05lZ2F0aW9uID9cbiAgICAgICAgICAgIG51bS5uZWdhdGlvbiBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ID9cbiAgICAgICAgICAgICAgICBudW0ubmVnYXRpb24uZmFjdG9ycyAvLyBHZXQgZmFjdG9ycyBpZiB0aGUgbmVnYXRpb24gaXMgYSBwcm9kdWN0XG4gICAgICAgICAgICAgICAgOiBbbnVtLm5lZ2F0aW9uXSAvLyBJZiBuZWdhdGlvbiBpc24ndCBhIHByb2R1Y3QsIHJldHVybiB0aGUgbmVnYXRpb24gYXMgYSBsaXN0IG9mIDFcbiAgICAgICAgICAgIDogbnVtLmZhY3RvcnM7IC8vIElmIG5vdCBhIG5lZ2F0aW9uLCByZXR1cm4gdGhlIGZhY3RvcnNcbiAgICAgICAgY29uc3QgZGVuRmFjdG9ycyA9ICFkZW4uaXNOZWdhdGlvbiA/IGRlbi5mYWN0b3JzXG4gICAgICAgICAgICA6IGRlbi5uZWdhdGlvbiBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ID9cbiAgICAgICAgICAgICAgICBkZW4ubmVnYXRpb24uZmFjdG9yc1xuICAgICAgICAgICAgICAgIDogW2Rlbi5uZWdhdGlvbl07XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgcmVwZWF0cywgZ2l2ZSB1cFxuICAgICAgICBpZiAobmV3IFNldChudW1GYWN0b3JzKS5zaXplIDwgbnVtRmFjdG9ycy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKCk7XG4gICAgICAgIGlmIChuZXcgU2V0KGRlbkZhY3RvcnMpLnNpemUgPCBkZW5GYWN0b3JzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoKTtcbiAgICAgICAgLy8gVHJlYXQgZXZlcnkgZmFjdG9yIGFzIGFuIGV4cG9uZW50XG4gICAgICAgIGNvbnN0IG51bUV4cG9uZW50cyA9IG51bUZhY3RvcnMubWFwKGYgPT4ge1xuICAgICAgICAgICAgaWYgKGYgaW5zdGFuY2VvZiBFeHBvbmVudF8xLkV4cG9uZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvbmVudF8xLkV4cG9uZW50Lm9mKGYsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKDEpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGRlbkV4cG9uZW50cyA9IGRlbkZhY3RvcnMubWFwKGYgPT4ge1xuICAgICAgICAgICAgaWYgKGYgaW5zdGFuY2VvZiBFeHBvbmVudF8xLkV4cG9uZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvbmVudF8xLkV4cG9uZW50Lm9mKGYsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKDEpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZvciBlYWNoIGRlbiBleHBvbmVudCBiYXNlLCBjcmVhdGUgYW4gb3ZlcmFsbCBzdW0gb2YgdGhlIHBvd2Vyc1xuICAgICAgICBjb25zdCBudW1FeHBvbmVudFBvd2VycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbnVtRXhwb25lbnRzLmZvckVhY2goZXhwb25lbnQgPT4ge1xuICAgICAgICAgICAgaWYgKCFudW1FeHBvbmVudFBvd2Vycy5oYXMoZXhwb25lbnQuYmFzZSkpXG4gICAgICAgICAgICAgICAgbnVtRXhwb25lbnRQb3dlcnMuc2V0KGV4cG9uZW50LmJhc2UsIFtdKTtcbiAgICAgICAgICAgIG51bUV4cG9uZW50UG93ZXJzLmdldChleHBvbmVudC5iYXNlKS5wdXNoKGV4cG9uZW50LnBvd2VyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGRlbkV4cG9uZW50UG93ZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICBkZW5FeHBvbmVudHMuZm9yRWFjaChleHBvbmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoIWRlbkV4cG9uZW50UG93ZXJzLmhhcyhleHBvbmVudC5iYXNlKSlcbiAgICAgICAgICAgICAgICBkZW5FeHBvbmVudFBvd2Vycy5zZXQoZXhwb25lbnQuYmFzZSwgW10pO1xuICAgICAgICAgICAgZGVuRXhwb25lbnRQb3dlcnMuZ2V0KGV4cG9uZW50LmJhc2UpLnB1c2goZXhwb25lbnQucG93ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQW55IGJhc2Ugd2hpY2ggaXMgaW4gdGhlIG51bWVyYXRvciBhbmQgZGVub21pbmF0b3JcbiAgICAgICAgLy8gd2lsbCBvbmx5IGJlIGluIHRoZSBudW1lcmF0b3JcbiAgICAgICAgY29uc3QgbmV3TnVtRXhwb25lbnRQb3dlcnMgPSBuZXcgTWFwKG51bUV4cG9uZW50UG93ZXJzKTtcbiAgICAgICAgY29uc3QgbmV3RGVuRXhwb25lbnRQb3dlcnMgPSBuZXcgTWFwKGRlbkV4cG9uZW50UG93ZXJzKTtcbiAgICAgICAgZGVuRXhwb25lbnRQb3dlcnMuZm9yRWFjaCgocG93ZXJzLCBiYXNlKSA9PiB7XG4gICAgICAgICAgICBpZiAobnVtRXhwb25lbnRQb3dlcnMuaGFzKGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgbmV3TnVtRXhwb25lbnRQb3dlcnMuZ2V0KGJhc2UpLnB1c2goKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm5lZ2F0aXZlKSgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtT3JOb3QpKC4uLnBvd2VycykpKTtcbiAgICAgICAgICAgICAgICBuZXdEZW5FeHBvbmVudFBvd2Vycy5kZWxldGUoYmFzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBHZXQgdGhlIG5ldyBmYWN0b3JzIGZvciB0aGUgbnVtZXJhdG9yIGFuZCBkZW5vbWluYXRvclxuICAgICAgICBjb25zdCBuZXdOdW1FeHBvbmVudHMgPSBbXTtcbiAgICAgICAgbmV3TnVtRXhwb25lbnRQb3dlcnMuZm9yRWFjaCgocG93ZXJzLCBiYXNlKSA9PiB7XG4gICAgICAgICAgICBuZXdOdW1FeHBvbmVudHMucHVzaChFeHBvbmVudF8xLkV4cG9uZW50Lm9mKGJhc2UsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5zdW1Pck5vdCkoLi4ucG93ZXJzKSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbmV3RGVuRXhwb25lbnRzID0gW107XG4gICAgICAgIG5ld0RlbkV4cG9uZW50UG93ZXJzLmZvckVhY2goKHBvd2VycywgYmFzZSkgPT4ge1xuICAgICAgICAgICAgbmV3RGVuRXhwb25lbnRzLnB1c2goRXhwb25lbnRfMS5FeHBvbmVudC5vZihiYXNlLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtT3JOb3QpKC4uLnBvd2VycykpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRvcCA9ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0T3JOb3QpKC4uLm5ld051bUV4cG9uZW50cyk7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IG5ld0RlbkV4cG9uZW50cy5sZW5ndGggIT0gMCA/ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0T3JOb3QpKC4uLm5ld0RlbkV4cG9uZW50cykgOiAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKTtcbiAgICAgICAgLy8gUHJlc2VydmUgdGhlIG5lZ2F0aW9ucyByZW1vdmVkIGVhcmxpZXJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gRnJhY3Rpb25fMS5GcmFjdGlvbi5vZihudW0uaXNOZWdhdGlvbiA/ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkodG9wKSA6IHRvcCwgZGVuLmlzTmVnYXRpb24gPyAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKGJvdHRvbSkgOiBib3R0b20pO1xuICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogcmVzdWx0XG4gICAgICAgIH0sIFwiQ2FuY2VsIG91dCBmcmFjdGlvbnNcIikpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGl2aWRlRnJhY3Rpb25zID0gRGl2aWRlRnJhY3Rpb25zO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpdmlzaW9uSWRlbnRpdHkgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uLy4uL0FyZ3VtZW50XCIpO1xuY29uc3QgRnJhY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9GcmFjdGlvblwiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG4vKipcbiAqIEFueXRoaW5nIGRpdmlkZWQgYnkgMSBpcyB0aGUgbnVtZXJhdG9yXG4gKi9cbmNsYXNzIERpdmlzaW9uSWRlbnRpdHkgZXh0ZW5kcyBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZSB7XG4gICAgYXBwbGllc0ltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiBleHAgaW5zdGFuY2VvZiBGcmFjdGlvbl8xLkZyYWN0aW9uXG4gICAgICAgICAgICAmJiBleHAuZGVub21pbmF0b3IgaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlclxuICAgICAgICAgICAgJiYgZXhwLmRlbm9taW5hdG9yLnZhbHVlID09IDE7XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3QgZnJhYyA9IGV4cDtcbiAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZnJhYyksIHtcbiAgICAgICAgICAgIG46IGZyYWMsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogZnJhYy5udW1lcmF0b3IsXG4gICAgICAgIH0sIFwiRGl2aXNpb24gaWRlbnRpdHkgaXMgMVwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5EaXZpc2lvbklkZW50aXR5ID0gRGl2aXNpb25JZGVudGl0eTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FdmFsdWF0ZVN1bXMgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uLy4uL0FyZ3VtZW50XCIpO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vQ29udmVuaWVudEV4cHJlc3Npb25zXCIpO1xuY29uc3QgSW50ZWdlcl8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0ludGVnZXJcIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvUHJvZHVjdFwiKTtcbmNvbnN0IFN1bV8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1N1bVwiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcF8xID0gcmVxdWlyZShcIi4uLy4uL1JlbGF0aW9uc2hpcFwiKTtcbmNvbnN0IFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9UaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYlwiKTtcbmNvbnN0IE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMSA9IHJlcXVpcmUoXCIuLi9Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXCIpO1xuLyoqXG4gKiBDb21iaW5lIGFueSBpbnRlZ2VyIHRlcm1zIGluIFN1bXMuXG4gKiBhICsgMiArIDIgKyAyPSBhICsgNFxuICogMiAtIDIgPSAwXG4gKlxuICogQ29tYmluZXMgYWxsIG9mIHRoZW0gYXQgb25jZSBubyBtYXR0ZXIgaG93IG1hbnkgdGVybXMgdGhlcmUgYXJlLlxuICpcbiAqL1xuY2xhc3MgRXZhbHVhdGVTdW1zIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgU3VtXzEuU3VtO1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IHN1bSA9IGV4cDtcbiAgICAgICAgY29uc3QgaW50ZWdlclRlcm1zID0gWy4uLnN1bS50ZXJtc10uZmlsdGVyKHQgPT4gdCBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyIHx8ICh0IGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3QgJiYgdC5pc05lZ2F0aW9uICYmIHQubmVnYXRpb24gaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcikpO1xuICAgICAgICBpZiAoaW50ZWdlclRlcm1zLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdJbnQgPSBJbnRlZ2VyXzEuSW50ZWdlci5vZihpbnRlZ2VyVGVybXMubWFwKGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC1lLm5lZ2F0aW9uLnZhbHVlO1xuICAgICAgICB9KS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKSk7XG4gICAgICAgIGNvbnN0IG90aGVyVGVybXMgPSBbLi4uc3VtLnRlcm1zXS5maWx0ZXIodCA9PiAhKHQgaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcikgJiYgISh0IGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3QgJiYgdC5pc05lZ2F0aW9uICYmIHQubmVnYXRpb24gaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcikpO1xuICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShzdW0pLCB7XG4gICAgICAgICAgICBuOiBzdW0sXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bU9yTm90KSguLi5vdGhlclRlcm1zLCBuZXdJbnQpXG4gICAgICAgIH0sIFwiRXZhbHVhdGVkIEFkZGl0aW9uXCIpKTtcbiAgICB9XG59XG5leHBvcnRzLkV2YWx1YXRlU3VtcyA9IEV2YWx1YXRlU3VtcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHBvbmVudFRvWmVybyA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vQXJndW1lbnRcIik7XG5jb25zdCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9Db252ZW5pZW50RXhwcmVzc2lvbnNcIik7XG5jb25zdCBFeHBvbmVudF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0V4cG9uZW50XCIpO1xuY29uc3QgSW50ZWdlcl8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0ludGVnZXJcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbmNsYXNzIEV4cG9uZW50VG9aZXJvIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgRXhwb25lbnRfMS5FeHBvbmVudFxuICAgICAgICAgICAgJiYgZXhwLnBvd2VyIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXJcbiAgICAgICAgICAgICYmIGV4cC5wb3dlci52YWx1ZSA9PSAwO1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKVxuICAgICAgICB9LCBcIkFueXRoaW5nIHRvIHplcm8gaXMgemVyb1wiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5FeHBvbmVudFRvWmVybyA9IEV4cG9uZW50VG9aZXJvO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cG9uZW50aWFsSWRlbnRpdHkgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uLy4uL0FyZ3VtZW50XCIpO1xuY29uc3QgRXhwb25lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9FeHBvbmVudFwiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG4vKipcbiAqIEFueXRoaW5nIHRvIHRoZSBmaXJzdCBpcyBqdXN0IHRoYXQgdGhpbmcuXG4gKiBUdXJucyBhbnkgZXhwb25lbnQgd2l0aCBhIHBvd2VyIG9mIDEgdG8gdGhhdCB0aGluZy5cbiAqL1xuY2xhc3MgRXhwb25lbnRpYWxJZGVudGl0eSBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIEV4cG9uZW50XzEuRXhwb25lbnRcbiAgICAgICAgICAgICYmIGV4cC5wb3dlciBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyXG4gICAgICAgICAgICAmJiBleHAucG93ZXIudmFsdWUgPT0gMTtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBlID0gZXhwO1xuICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShlKSwge1xuICAgICAgICAgICAgbjogZSxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiBlLmJhc2UsXG4gICAgICAgIH0sIFwiRXhwb25lbnRpYWwgSWRlbnRpdHkgaXMgMVwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5FeHBvbmVudGlhbElkZW50aXR5ID0gRXhwb25lbnRpYWxJZGVudGl0eTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GT0lMID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9Qcm9kdWN0XCIpO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vQ29udmVuaWVudEV4cHJlc3Npb25zXCIpO1xuY29uc3QgU3VtXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvU3VtXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG4vKipcbiAqIChhICsgYikoYyArIGQpID0gYWMgKyBhZCArIGJjICsgYmRcbiAqL1xuY2xhc3MgRk9JTCBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0O1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IHByb2R1Y3QgPSBleHA7XG4gICAgICAgIGNvbnN0IHN1bXMgPSBwcm9kdWN0LmZhY3RvcnMuZmlsdGVyKGYgPT4gZiBpbnN0YW5jZW9mIFN1bV8xLlN1bSk7XG4gICAgICAgIGlmIChzdW1zLmxlbmd0aCA8IDIpXG4gICAgICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKCk7XG4gICAgICAgIGNvbnN0IG5vblN1bXMgPSBwcm9kdWN0LmZhY3RvcnMuZmlsdGVyKGYgPT4gIShmIGluc3RhbmNlb2YgU3VtXzEuU3VtKSk7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gc3Vtc1swXTtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gc3Vtc1sxXTtcbiAgICAgICAgY29uc3QgZm9pbGVkID0gZmlyc3QudGVybXMubWFwKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGVybXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdDEgb2Ygc2Vjb25kLnRlcm1zKSB7XG4gICAgICAgICAgICAgICAgdGVybXMucHVzaCgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkodCwgdDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZXJtcztcbiAgICAgICAgfSkuZmxhdCgpO1xuICAgICAgICBzdW1zLnNwbGljZSgwLCAyKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3RPck5vdCkoLi4ubm9uU3VtcywgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnN1bSkoLi4uZm9pbGVkKSwgLi4uc3Vtcyk7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiByZXN1bHRcbiAgICAgICAgfSwgXCJGb2lsIHRoYXQgc2hpdFwiKSk7XG4gICAgfVxuICAgIGdldCBjb252ZXJnZW5jZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuQ29udmVyZ2VuY2VUYXJnZXQuUG9seW5vbWlhbDtcbiAgICB9XG59XG5leHBvcnRzLkZPSUwgPSBGT0lMO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxvZ09mT25lID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgTG9nYXJpdGhtXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvTG9nYXJpdGhtXCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG5jbGFzcyBMb2dPZk9uZSBleHRlbmRzIE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMS5Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlIHtcbiAgICBhcHBsaWVzSW1wbChleHApIHtcbiAgICAgICAgcmV0dXJuIGV4cCBpbnN0YW5jZW9mIExvZ2FyaXRobV8xLkxvZ2FyaXRobVxuICAgICAgICAgICAgJiYgZXhwLmV4cCBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyXG4gICAgICAgICAgICAmJiBleHAuZXhwLnZhbHVlID09PSAxO1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgIG46IGV4cCxcbiAgICAgICAgICAgIHI6IFJlbGF0aW9uc2hpcF8xLlJlbGF0aW9uc2hpcC5FcXVhbCxcbiAgICAgICAgICAgIG4xOiAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgwKVxuICAgICAgICB9LCBcIkxvZyBpbiBhbnkgYmFzZSBvZiAxIGlzIDBcIikpO1xuICAgIH1cbn1cbmV4cG9ydHMuTG9nT2ZPbmUgPSBMb2dPZk9uZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NdWx0aXBsaWNhdGl2ZUlkZW50aXR5ID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbi8qKlxuICogMXggPSB4XG4gKiAxKjF4ID0gMVxuICovXG5jbGFzcyBNdWx0aXBsaWNhdGl2ZUlkZW50aXR5IGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3RcbiAgICAgICAgICAgICYmIG5ldyBTZXQoZXhwLmZhY3RvcnMpLmhhcygoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKSlcbiAgICAgICAgICAgICYmICFleHAuaXNOZWdhdGlvbjtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBwID0gZXhwO1xuICAgICAgICBjb25zdCBuZXdGYWN0b3JzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZmFjdG9yIG9mIHAuZmFjdG9ycykge1xuICAgICAgICAgICAgaWYgKGZhY3RvciBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyICYmIGZhY3Rvci52YWx1ZSA9PSAxKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbmV3RmFjdG9ycy5wdXNoKGZhY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0ZhY3RvcnMubGVuZ3RoID09IDApXG4gICAgICAgICAgICBuZXdGYWN0b3JzLnB1c2goKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm51bSkoMSkpO1xuICAgICAgICByZXR1cm4gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKG5ldyBBcmd1bWVudF8xLkFyZ3VtZW50KCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShleHApLCB7XG4gICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICByOiBSZWxhdGlvbnNoaXBfMS5SZWxhdGlvbnNoaXAuRXF1YWwsXG4gICAgICAgICAgICBuMTogKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3RPck5vdCkoLi4ubmV3RmFjdG9ycylcbiAgICAgICAgfSwgXCJNdWx0aXBsaWNhdGl2ZSBJZGVudGl0eVwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5NdWx0aXBsaWNhdGl2ZUlkZW50aXR5ID0gTXVsdGlwbGljYXRpdmVJZGVudGl0eTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NdWx0aXBseUV4cG9uZW50UG93ZXJzID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEV4cG9uZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRXhwb25lbnRcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbmNsYXNzIE11bHRpcGx5RXhwb25lbnRQb3dlcnMgZXh0ZW5kcyBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZSB7XG4gICAgYXBwbGllc0ltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiBleHAgaW5zdGFuY2VvZiBFeHBvbmVudF8xLkV4cG9uZW50XG4gICAgICAgICAgICAmJiBleHAuYmFzZSBpbnN0YW5jZW9mIEV4cG9uZW50XzEuRXhwb25lbnQ7XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3Qgb3V0ZXIgPSBleHA7XG4gICAgICAgIGNvbnN0IGlubmVyID0gb3V0ZXIuYmFzZTtcbiAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IEV4cG9uZW50XzEuRXhwb25lbnQub2YoaW5uZXIuYmFzZSwgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3QpKGlubmVyLnBvd2VyLCBvdXRlci5wb3dlcikpXG4gICAgICAgIH0sIFwiRXhwb25lbnRzIHRvIGV4cG9uZW50cyBtdWx0aXBseVwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5NdWx0aXBseUV4cG9uZW50UG93ZXJzID0gTXVsdGlwbHlFeHBvbmVudFBvd2VycztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcmRlclByb2R1Y3RzID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9Qcm9kdWN0XCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG4vKipcbiAqIFJlb3JkZXJzIGZhY3RvcnMgdG8gZm9sbG93IGNvbnZlbnRpb24uXG4gKi9cbmNsYXNzIE9yZGVyUHJvZHVjdHMgZXh0ZW5kcyBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZSB7XG4gICAgYXBwbGllc0ltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiBleHAgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdDtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBwID0gZXhwO1xuICAgICAgICBjb25zdCByZXN1bHQgPSAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdCkoLi4uWy4uLnAuZmFjdG9yc10uc29ydChQcm9kdWN0XzEuZmFjdG9yT3JkZXIpKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gcClcbiAgICAgICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoKTtcbiAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKShuZXcgQXJndW1lbnRfMS5Bcmd1bWVudCgoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoZXhwKSwge1xuICAgICAgICAgICAgbjogZXhwLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IHJlc3VsdFxuICAgICAgICB9LCBcIlJlb3JkZXIgcHJvZHVjdCBmYWN0b3JzIHRvIG1hdGNoIG1hdGggY29udmVudGlvblwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5PcmRlclByb2R1Y3RzID0gT3JkZXJQcm9kdWN0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcmRlclN1bXMgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uLy4uL0FyZ3VtZW50XCIpO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vQ29udmVuaWVudEV4cHJlc3Npb25zXCIpO1xuY29uc3QgU3VtXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvU3VtXCIpO1xuY29uc3QgUmVsYXRpb25zaGlwXzEgPSByZXF1aXJlKFwiLi4vLi4vUmVsYXRpb25zaGlwXCIpO1xuY29uc3QgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1RoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXCIpO1xuY29uc3QgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xID0gcmVxdWlyZShcIi4uL05vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVcIik7XG4vKipcbiAqIFR1cm5zIHN1bXMgdGhhdCBhcmUgdW5oZWFsdGh5IGJlY2F1c2UgdGhlaXIgdGVybSBvcmRlclxuICogaXMgd3JvbmcgaW50byBjb3JyZWN0bHkgb3JkZXJlZCBzdW1zLlxuICovXG5jbGFzcyBPcmRlclN1bXMgZXh0ZW5kcyBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEuTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZSB7XG4gICAgYXBwbGllc0ltcGwoZXhwKSB7XG4gICAgICAgIHJldHVybiBleHAgaW5zdGFuY2VvZiBTdW1fMS5TdW0gJiYgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLm9yZGVyZWRTdW0pKGV4cCkgIT09IGV4cDtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gbmV3IFNldChbbmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgICAgIG4xOiAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEub3JkZXJlZFN1bSkoZXhwKSxcbiAgICAgICAgICAgIH0sIFwiUmVvcmRlcmVkXCIpXSk7XG4gICAgfVxufVxuZXhwb3J0cy5PcmRlclN1bXMgPSBPcmRlclN1bXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVtb3ZlQ29tbW9uRmFjdG9yc0Zyb21Ub3BBbmRCb3R0b21PZkZyYWN0aW9uID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEZyYWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRnJhY3Rpb25cIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvUHJvZHVjdFwiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcF8xID0gcmVxdWlyZShcIi4uLy4uL1JlbGF0aW9uc2hpcFwiKTtcbmNvbnN0IFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9UaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYlwiKTtcbmNvbnN0IE5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGVfMSA9IHJlcXVpcmUoXCIuLi9Ob0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXCIpO1xuY2xhc3MgUmVtb3ZlQ29tbW9uRmFjdG9yc0Zyb21Ub3BBbmRCb3R0b21PZkZyYWN0aW9uIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgRnJhY3Rpb25fMS5GcmFjdGlvblxuICAgICAgICAgICAgJiYgIShleHAubnVtZXJhdG9yIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3QgJiYgZXhwLm51bWVyYXRvci5pc05lZ2F0aW9uKVxuICAgICAgICAgICAgJiYgIShleHAuZGVub21pbmF0b3IgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCAmJiBleHAuZGVub21pbmF0b3IuaXNOZWdhdGlvbik7XG4gICAgfVxuICAgIGFwcGx5SW1wbChleHApIHtcbiAgICAgICAgY29uc3QgZnJhYyA9IGV4cDtcbiAgICAgICAgY29uc3QgdG9wID0gZnJhYy5udW1lcmF0b3I7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IGZyYWMuZGVub21pbmF0b3I7XG4gICAgICAgIGNvbnN0IGFsbEZhY3RvcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGlmICh0b3AgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCkge1xuICAgICAgICAgICAgdG9wLmZhY3RvcnMuZm9yRWFjaChmID0+IGFsbEZhY3RvcnMuYWRkKGYpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhbGxGYWN0b3JzLmFkZCh0b3ApO1xuICAgICAgICBpZiAoYm90dG9tIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3QpIHtcbiAgICAgICAgICAgIGJvdHRvbS5mYWN0b3JzLmZvckVhY2goZiA9PiBhbGxGYWN0b3JzLmFkZChmKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYWxsRmFjdG9ycy5hZGQoYm90dG9tKTtcbiAgICAgICAgLy8gRmluZCBmYWN0b3JzIHRoYXQgYXJlIGluIGJvdGggdG9wIGFuZCBib3R0b21cbiAgICAgICAgY29uc3QgaW5Cb3RoID0gbmV3IFNldCgpO1xuICAgICAgICBhbGxGYWN0b3JzLmZvckVhY2goZiA9PiB7XG4gICAgICAgICAgICBpZiAoKHRvcCBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ID8gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuaGFzKSh0b3AuZmFjdG9ycywgZikgOiB0b3AgPT09IGYpXG4gICAgICAgICAgICAgICAgJiYgKGJvdHRvbSBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ID8gKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuaGFzKShib3R0b20uZmFjdG9ycywgZikgOiBib3R0b20gPT09IGYpKVxuICAgICAgICAgICAgICAgIGluQm90aC5hZGQoZik7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5Cb3RoLnNpemUgPT0gMClcbiAgICAgICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikoKTtcbiAgICAgICAgLy8gUmV0dXJuIG5ldyBmcmFjdGlvbiB3aXRob3V0IHRob3NlXG4gICAgICAgIGxldCBuZXdUb3AgPSB0b3A7XG4gICAgICAgIGluQm90aC5mb3JFYWNoKGYgPT4ge1xuICAgICAgICAgICAgaWYgKG5ld1RvcCBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0KSB7XG4gICAgICAgICAgICAgICAgbmV3VG9wID0gbmV3VG9wLndpdGhvdXQoZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdUb3AgPSAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBuZXdCb3R0b20gPSBib3R0b207XG4gICAgICAgIGluQm90aC5mb3JFYWNoKGYgPT4ge1xuICAgICAgICAgICAgaWYgKG5ld0JvdHRvbSBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0KSB7XG4gICAgICAgICAgICAgICAgbmV3Qm90dG9tID0gbmV3Qm90dG9tLndpdGhvdXQoZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdCb3R0b20gPSAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGZyYWMpLCB7XG4gICAgICAgICAgICBuOiBmcmFjLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YobmV3VG9wLCBuZXdCb3R0b20pLFxuICAgICAgICB9LCBcIkRpdmlkZSB0b3AgYW5kIGJvdHRvbSBieSBzYW1lIHRoaW5nXCIpKTtcbiAgICB9XG59XG5leHBvcnRzLlJlbW92ZUNvbW1vbkZhY3RvcnNGcm9tVG9wQW5kQm90dG9tT2ZGcmFjdGlvbiA9IFJlbW92ZUNvbW1vbkZhY3RvcnNGcm9tVG9wQW5kQm90dG9tT2ZGcmFjdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdWJ0cmFjdEV4cG9uZW50c09uRnJhY3Rpb25zID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEV4cG9uZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vZXhwcmVzc2lvbnMvRXhwb25lbnRcIik7XG5jb25zdCBGcmFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL0ZyYWN0aW9uXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbi8qKlxuICogSW4gYWxsIGNhc2VzLCBhbnkgY29tYmluZWQgZXhwb25lbnQgZmFjdG9ycyB3aWxsXG4gKiBiZSBwdXQgaW4gdGhlIG51bWVyYXRvci4gSXQncyBoYXJkIHRvIGtub3cgaWYgdGhleVxuICogd2lsbCBldmFsdWF0ZSB0byBiZSBuZWdhdGl2ZSBvciBub3QsIHNvIHdlJ2xsIHB1dFxuICogdGhlbSBhbGwgaW4gdGhlIG51bWVyYXRvciBhbmQgZGVhbCB3aXRoIHRoYXQgbGF0ZXIuXG4gKiBUT0RPOiBNYXliZSB3ZSBjb3VsZCBpdGVyYXRlIG92ZXIgdGhlIGdyYXBoIGFmdGVyIGl0J3NcbiAqICAgICAgZG9uZSB0byBnbyBiYWNrIGFuZCBmaXggdGhpcz8gTWF5YmUgaXQncyB3b3J0aCB0aGUgMl5uXG4gKiAgICAgIGFkZGVkIGNvbXBsZXhpdHkgdG8gY3JlYXRlIG5vZGVzIGZvciBldmVyeSBwb3NzaWJsZSBwbGFjZW1lbnRcbiAqICAgICAgdGhlbiBqdXN0IHBhdGhmaW5kIHRoZSBlYXNpZXN0P1xuICovXG5jbGFzcyBTdWJ0cmFjdEV4cG9uZW50c09uRnJhY3Rpb25zIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgRnJhY3Rpb25fMS5GcmFjdGlvbjtcbiAgICB9XG4gICAgYXBwbHlJbXBsKGV4cCkge1xuICAgICAgICBjb25zdCBmcmFjID0gZXhwO1xuICAgICAgICBjb25zdCB0b3AgPSBmcmFjLm51bWVyYXRvciBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ID8gZnJhYy5udW1lcmF0b3IuZmFjdG9ycyA6IFtmcmFjLm51bWVyYXRvcl07XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IGZyYWMuZGVub21pbmF0b3IgaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCA/IGZyYWMuZGVub21pbmF0b3IuZmFjdG9ycyA6IFtmcmFjLmRlbm9taW5hdG9yXTtcbiAgICAgICAgLy8gVHJlYXQgZXZlcnkgZmFjdG9yIG9mIHRvcCBhbmQgYm90dG9tIGFzIGFuIGV4cG9uZW50XG4gICAgICAgIGZ1bmN0aW9uIGFzRXhwb25lbnQoZikge1xuICAgICAgICAgICAgaWYgKGYgaW5zdGFuY2VvZiBFeHBvbmVudF8xLkV4cG9uZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvbmVudF8xLkV4cG9uZW50Lm9mKGYsICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKDEpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b3BFeHBvbmVudHMgPSB0b3AubWFwKGFzRXhwb25lbnQpO1xuICAgICAgICBjb25zdCBib3R0b21FeHBvbmVudHMgPSBib3R0b20ubWFwKGFzRXhwb25lbnQpO1xuICAgICAgICAvLyBGaW5kIHdoYXQgYmFzZXMgYXJlIGNvbW1vblxuICAgICAgICBjb25zdCBjb21tb25CYXNlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdG9wRXhwb25lbnRzLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICBpZiAoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuaGFzKShib3R0b21FeHBvbmVudHMubWFwKGUgPT4gZS5iYXNlKSwgZS5iYXNlKSlcbiAgICAgICAgICAgICAgICBjb21tb25CYXNlcy5hZGQoZS5iYXNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJvdHRvbUV4cG9uZW50cy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKCgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLmhhcykodG9wRXhwb25lbnRzLm1hcChlID0+IGUuYmFzZSksIGUuYmFzZSkpXG4gICAgICAgICAgICAgICAgY29tbW9uQmFzZXMuYWRkKGUuYmFzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY29tbW9uQmFzZXMuc2l6ZSA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuICgwLCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xLnNldE9mKSgpO1xuICAgICAgICAvLyBTZXBhcmF0ZSBmYWN0b3JzIHdoaWNoIHdvbid0IGJlIGVmZmVjdGVkXG4gICAgICAgIGNvbnN0IHVuZWZmZWN0ZWRUb3BGYWN0b3JzID0gdG9wLmZpbHRlcihmID0+IHtcbiAgICAgICAgICAgIGlmIChmIGluc3RhbmNlb2YgRXhwb25lbnRfMS5FeHBvbmVudClcbiAgICAgICAgICAgICAgICByZXR1cm4gIWNvbW1vbkJhc2VzLmhhcyhmLmJhc2UpO1xuICAgICAgICAgICAgcmV0dXJuICFjb21tb25CYXNlcy5oYXMoZik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB1bmVmZmVjdGVkQm90dG9tRmFjdG9ycyA9IGJvdHRvbS5maWx0ZXIoZiA9PiB7XG4gICAgICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIEV4cG9uZW50XzEuRXhwb25lbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuICFjb21tb25CYXNlcy5oYXMoZi5iYXNlKTtcbiAgICAgICAgICAgIHJldHVybiAhY29tbW9uQmFzZXMuaGFzKGYpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gRmluZCBhbGwgdGhlIHRlcm1zIGZvciBlYWNoIGJhc2VcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhhdCB0aGUgZmluYWwgZXhwb25lbnQgd2lsbCBiZSBpbiB0aGUgbnVtZXJhdG9yXG4gICAgICAgIGNvbnN0IGV4cG9uZW50VGVybXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRvcEV4cG9uZW50cy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFjb21tb25CYXNlcy5oYXMoZS5iYXNlKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoIWV4cG9uZW50VGVybXMuaGFzKGUuYmFzZSkpIHtcbiAgICAgICAgICAgICAgICBleHBvbmVudFRlcm1zLnNldChlLmJhc2UsIFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cG9uZW50VGVybXMuZ2V0KGUuYmFzZSkucHVzaChlLnBvd2VyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJvdHRvbUV4cG9uZW50cy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFjb21tb25CYXNlcy5oYXMoZS5iYXNlKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoIWV4cG9uZW50VGVybXMuaGFzKGUuYmFzZSkpIHtcbiAgICAgICAgICAgICAgICBleHBvbmVudFRlcm1zLnNldChlLmJhc2UsIFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIGJjIHdlJ3JlIHB1dHRpbmcgdGhlc2UgaW4gdGhlIG51bWVyYXRvclxuICAgICAgICAgICAgZXhwb25lbnRUZXJtcy5nZXQoZS5iYXNlKS5wdXNoKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5uZWdhdGl2ZSkoZS5wb3dlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0aW5nVG9wRXhwb25lbnRzID0gW107XG4gICAgICAgIGV4cG9uZW50VGVybXMuZm9yRWFjaCgocG93ZXJUZXJtcywgYmFzZSkgPT4ge1xuICAgICAgICAgICAgcmVzdWx0aW5nVG9wRXhwb25lbnRzLnB1c2goRXhwb25lbnRfMS5FeHBvbmVudC5vZihiYXNlLCAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtKSguLi5wb3dlclRlcm1zKSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHVuZWZmZWN0ZWRCb3R0b21GYWN0b3JzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgdW5lZmZlY3RlZEJvdHRvbUZhY3RvcnMucHVzaCgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubnVtKSgxKSk7XG4gICAgICAgIHJldHVybiAoMCwgVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJfMS5zZXRPZikobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGZyYWMpLCB7XG4gICAgICAgICAgICBuOiBmcmFjLFxuICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgbjE6IEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YoKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnByb2R1Y3RPck5vdCkoLi4ucmVzdWx0aW5nVG9wRXhwb25lbnRzLCAuLi51bmVmZmVjdGVkVG9wRmFjdG9ycyksICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0T3JOb3QpKC4uLnVuZWZmZWN0ZWRCb3R0b21GYWN0b3JzKSksXG4gICAgICAgIH0sIFwiU3VtIGV4cG9uZW50cyBpbiBib3RoIG51bWVyYXRvciBhbmQgZGVub21pbmF0b3JcIikpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3VidHJhY3RFeHBvbmVudHNPbkZyYWN0aW9ucyA9IFN1YnRyYWN0RXhwb25lbnRzT25GcmFjdGlvbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3VtQ29lZmZpY2llbnRzT2ZBZGRlZFRlcm1zID0gdm9pZCAwO1xuY29uc3QgQXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9Bcmd1bWVudFwiKTtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uLy4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9JbnRlZ2VyXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4uLy4uL2V4cHJlc3Npb25zL1Byb2R1Y3RcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuLi8uLi9leHByZXNzaW9ucy9TdW1cIik7XG5jb25zdCBSZWxhdGlvbnNoaXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9SZWxhdGlvbnNoaXBcIik7XG5jb25zdCBUaGluZ3NUaGF0U2hvdWxkQmVJblRoZVN0ZExpYl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvVGhpbmdzVGhhdFNob3VsZEJlSW5UaGVTdGRMaWJcIik7XG5jb25zdCBOb0NvbnRleHRFeHByZXNzaW9uU2ltcGxpZmljYXRpb25SdWxlXzEgPSByZXF1aXJlKFwiLi4vTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZVwiKTtcbi8qKlxuICogVGFrZXMgc3VtcyBvZiBzZXZlcmFsIGFkZGVkIHByb2R1Y3RzIGFuZCBjb21iaW5lcyBvbmVzIHRoYXQgb25seVxuICogaGF2ZSBkaWZmZXJlbnQgY29lZmZpY2llbnRzLlxuICpcbiAqIGEgKyAyYSA9IDNhXG4gKiBhIC0gMmEgPSAtMWFcbiAqL1xuY2xhc3MgU3VtQ29lZmZpY2llbnRzT2ZBZGRlZFRlcm1zIGV4dGVuZHMgTm9Db250ZXh0RXhwcmVzc2lvblNpbXBsaWZpY2F0aW9uUnVsZV8xLk5vQ29udGV4dEV4cHJlc3Npb25TaW1wbGlmaWNhdGlvblJ1bGUge1xuICAgIGFwcGxpZXNJbXBsKGV4cCkge1xuICAgICAgICByZXR1cm4gZXhwIGluc3RhbmNlb2YgU3VtXzEuU3VtO1xuICAgIH1cbiAgICBhcHBseUltcGwoZXhwKSB7XG4gICAgICAgIGNvbnN0IHRlcm1zID0gZXhwLnRlcm1zO1xuICAgICAgICAvLyBTcGxpdCB0aGUgdGVybXMgaW50byBwcm9kdWN0IGFuZCBub3QgcHJvZHVjdHNcbiAgICAgICAgY29uc3QgcHJvZHVjdFRlcm1zID0gW107XG4gICAgICAgIGNvbnN0IG5vblByb2R1Y3RUZXJtcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHRlcm0gb2YgdGVybXMpIHtcbiAgICAgICAgICAgIGlmICh0ZXJtIGluc3RhbmNlb2YgUHJvZHVjdF8xLlByb2R1Y3QgJiYgdGVybS5mYWN0b3JzWzBdIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIpIHtcbiAgICAgICAgICAgICAgICBwcm9kdWN0VGVybXMucHVzaCh0ZXJtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vblByb2R1Y3RUZXJtcy5wdXNoKHRlcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnQgdGhlIHByb2R1Y3QgdGVybXMgaW50byBncm91cHMgb2YgY29tbW9uIGZhY3RvcnNcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHRlcm0gb2YgcHJvZHVjdFRlcm1zKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdCA9IHRlcm0uZmFjdG9yc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBbLi4udGVybS5mYWN0b3JzXTtcbiAgICAgICAgICAgIHRlbXAuc3BsaWNlKDAsIDEpO1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucHJvZHVjdE9yTm90KSguLi50ZW1wKTtcbiAgICAgICAgICAgIGlmICghZ3JvdXBzLmhhcyhncm91cCkpXG4gICAgICAgICAgICAgICAgZ3JvdXBzLnNldChncm91cCwgeyBjb2VmZmljaWVudDogZmlyc3QudmFsdWUsIG1vcmVUaGFuT25lOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdyb3Vwcy5nZXQoZ3JvdXApLmNvZWZmaWNpZW50ICs9IGZpcnN0LnZhbHVlO1xuICAgICAgICAgICAgICAgIGdyb3Vwcy5nZXQoZ3JvdXApLm1vcmVUaGFuT25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBGb3IgZXZlcnkgZ3JvdXAgd2l0aCBtb3JlIHRoYW4gb25lIHByb2R1Y3QsIHByb2R1Y2UgYSBuZXcgYXJndW1lbnRcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFNldCgpO1xuICAgICAgICBncm91cHMuZm9yRWFjaCgob2JqLCBncm91cCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFvYmoubW9yZVRoYW5PbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgcHJvZHVjdFRlcm1zTm90Q29tYmluZWQgPSBwcm9kdWN0VGVybXMuZmlsdGVyKHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBbLi4udC5mYWN0b3JzXTtcbiAgICAgICAgICAgICAgICB0ZW1wLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXJtV2l0aG91dExlYWRpbmdDb2VmZmljaWVudCA9ICgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0T3JOb3QpKC4uLnRlbXApO1xuICAgICAgICAgICAgICAgIHJldHVybiBncm91cCAhPT0gdGVybVdpdGhvdXRMZWFkaW5nQ29lZmZpY2llbnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG91dC5hZGQobmV3IEFyZ3VtZW50XzEuQXJndW1lbnQoKDAsIFRoaW5nc1RoYXRTaG91bGRCZUluVGhlU3RkTGliXzEuc2V0T2YpKGV4cCksIHtcbiAgICAgICAgICAgICAgICBuOiBleHAsXG4gICAgICAgICAgICAgICAgcjogUmVsYXRpb25zaGlwXzEuUmVsYXRpb25zaGlwLkVxdWFsLFxuICAgICAgICAgICAgICAgIG4xOiAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEuc3VtT3JOb3QpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5wcm9kdWN0QW5kTm90VGltZXNPbmUpKCgwLCBDb252ZW5pZW50RXhwcmVzc2lvbnNfMS5udW0pKG9iai5jb2VmZmljaWVudCksIGdyb3VwKSwgLi4ubm9uUHJvZHVjdFRlcm1zLCAuLi5wcm9kdWN0VGVybXNOb3RDb21iaW5lZClcbiAgICAgICAgICAgIH0sIFwiQ29tYmluaW5nIGxpa2UgdGVybXNcIikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5leHBvcnRzLlN1bUNvZWZmaWNpZW50c09mQWRkZWRUZXJtcyA9IFN1bUNvZWZmaWNpZW50c09mQWRkZWRUZXJtcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZXJpdmF0aXZlVHlwZSA9IGV4cG9ydHMuRGVyaXZhdGl2ZSA9IHZvaWQgMDtcbmNvbnN0IEV4cHJlc3Npb25fMSA9IHJlcXVpcmUoXCIuL0V4cHJlc3Npb25cIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi9Qcm9kdWN0XCIpO1xuY29uc3QgU3VtXzEgPSByZXF1aXJlKFwiLi9TdW1cIik7XG4vKipcbiAqXG4gKi9cbmNsYXNzIERlcml2YXRpdmUgZXh0ZW5kcyBFeHByZXNzaW9uXzEuRXhwcmVzc2lvbiB7XG4gICAgc3RhdGljIG9mKGV4cCwgcmVsYXRpdmVUbykge1xuICAgICAgICBjb25zdCBoYXNoID0gZXhwLmhhc2ggKyByZWxhdGl2ZVRvLmhhc2g7XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZXMuaGFzKGhhc2gpKVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMuc2V0KGhhc2gsIG5ldyBEZXJpdmF0aXZlKGV4cCwgcmVsYXRpdmVUbykpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXMuZ2V0KGhhc2gpO1xuICAgIH1cbiAgICBzdGF0aWMgaW5zdGFuY2VzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0cnVjdG9yKGV4cCwgcmVsYXRpdmVUbykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmV4cCA9IGV4cDtcbiAgICAgICAgdGhpcy5yZWxhdGl2ZVRvID0gcmVsYXRpdmVUbztcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLmV4cCk7XG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcy5yZWxhdGl2ZVRvKTtcbiAgICAgICAgdGhpcy5pc1JlZHVjaWJsZSA9IGZhbHNlOyAvL1RPRE86IERldGVybWluZSBpZiBhIGRlcml2YXRpdmUgaXMgcmVkdWNpYmxlXG4gICAgICAgIHRoaXMuaXNDb25zdGFudCA9IGZhbHNlOyAvLyBUT0RPOiBEZXRlcm1pbmUgaWYgYSBkZXJpdmF0aXZlIGlzIGNvbnN0YW50XG4gICAgICAgIHRoaXMuY2hpbGRDb3VudCA9IDIgKyBleHAuY2hpbGRDb3VudCArIHJlbGF0aXZlVG8uY2hpbGRDb3VudDtcbiAgICB9XG4gICAgZXhwO1xuICAgIHJlbGF0aXZlVG87XG4gICAgaXNSZWR1Y2libGU7XG4gICAgY2xhc3MgPSBleHBvcnRzLkRlcml2YXRpdmVUeXBlO1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJkL2RcIiArIHRoaXMucmVsYXRpdmVUby50b1N0cmluZygpICsgXCIoXCIgKyB0aGlzLmV4cC50b1N0cmluZygpICsgXCIpXCI7XG4gICAgfVxuICAgIHRvVW5hbWJpZ2lvdXNTdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIihkL2RcIiArIHRoaXMucmVsYXRpdmVUby50b1VuYW1iaWdpb3VzU3RyaW5nKCkgKyBcIilcIiArIHRoaXMuZXhwLnRvVW5hbWJpZ2lvdXNTdHJpbmcoKTtcbiAgICB9XG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsYXNzICsgdGhpcy5leHAuaGFzaCArIHRoaXMucmVsYXRpdmVUby5oYXNoO1xuICAgIH1cbiAgICB0b01hdGhYTUwoKSB7XG4gICAgICAgIGZ1bmN0aW9uIHdyYXBJZk5lZWRlZChleHApIHtcbiAgICAgICAgICAgIGlmIChleHAuY2xhc3MgPT0gU3VtXzEuU3VtVHlwZSB8fCBleHAuY2xhc3MgPT0gUHJvZHVjdF8xLlByb2R1Y3RUeXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIjxtbz4oPC9tbz5cIiArIGV4cC50b01hdGhYTUwoKSArIFwiPG1vPik8L21vPlwiO1xuICAgICAgICAgICAgcmV0dXJuIGV4cC50b01hdGhYTUwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCI8bWZyYWM+PG1uPmQ8L21uPjxtcm93Pjxtbj5kPC9tbj5cIiArIHdyYXBJZk5lZWRlZCh0aGlzLnJlbGF0aXZlVG8pICsgXCI8L21yb3c+PC9tZnJhYz5cIiArIHdyYXBJZk5lZWRlZCh0aGlzLmV4cCk7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcykge1xuICAgICAgICAvLyBNYXliZSBsYXRlclxuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBpc0NvbnN0YW50O1xuICAgIGNoaWxkQ291bnQ7XG59XG5leHBvcnRzLkRlcml2YXRpdmUgPSBEZXJpdmF0aXZlO1xuZXhwb3J0cy5EZXJpdmF0aXZlVHlwZSA9IFwiRGVyaXZhdGl2ZVwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cG9uZW50VHlwZSA9IGV4cG9ydHMuRXhwb25lbnQgPSB2b2lkIDA7XG5jb25zdCBNYXRoTUxIZWxwZXJzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9NYXRoTUxIZWxwZXJzXCIpO1xuY29uc3QgRXhwcmVzc2lvbl8xID0gcmVxdWlyZShcIi4vRXhwcmVzc2lvblwiKTtcbmNvbnN0IEZyYWN0aW9uXzEgPSByZXF1aXJlKFwiLi9GcmFjdGlvblwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuL1Byb2R1Y3RcIik7XG5jb25zdCBTdW1fMSA9IHJlcXVpcmUoXCIuL1N1bVwiKTtcbmNsYXNzIEV4cG9uZW50IGV4dGVuZHMgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24ge1xuICAgIHN0YXRpYyBvZihiYXNlLCBwb3dlcikge1xuICAgICAgICBjb25zdCBoYXNoID0gYmFzZS5oYXNoICsgcG93ZXIuaGFzaDtcbiAgICAgICAgaWYgKCFFeHBvbmVudC5pbnN0YW5jZXMuaGFzKGhhc2gpKSB7XG4gICAgICAgICAgICBFeHBvbmVudC5pbnN0YW5jZXMuc2V0KGhhc2gsIG5ldyBFeHBvbmVudChiYXNlLCBwb3dlcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFeHBvbmVudC5pbnN0YW5jZXMuZ2V0KGhhc2gpO1xuICAgIH1cbiAgICBzdGF0aWMgaW5zdGFuY2VzID0gbmV3IE1hcCgpO1xuICAgIGNsYXNzID0gZXhwb3J0cy5FeHBvbmVudFR5cGU7XG4gICAgdG9NYXRoWE1MKCkge1xuICAgICAgICBmdW5jdGlvbiB3cmFwSWZOZWVkZWQoZXhwKSB7XG4gICAgICAgICAgICBpZiAoZXhwLmNsYXNzID09IFN1bV8xLlN1bVR5cGUgfHwgZXhwLmNsYXNzID09IFByb2R1Y3RfMS5Qcm9kdWN0VHlwZSB8fCBleHAuY2xhc3MgPT0gRnJhY3Rpb25fMS5GcmFjdGlvblR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBNYXRoTUxIZWxwZXJzXzEuaW5Sb3cpKCgwLCBNYXRoTUxIZWxwZXJzXzEuaW5QYXJlbikoZXhwLnRvTWF0aFhNTCgpKSk7XG4gICAgICAgICAgICByZXR1cm4gZXhwLnRvTWF0aFhNTCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIjxtc3VwPlwiICsgd3JhcElmTmVlZGVkKHRoaXMuYmFzZSkgKyAoMCwgTWF0aE1MSGVscGVyc18xLmluUm93KSh0aGlzLnBvd2VyLnRvTWF0aFhNTCgpKSArIFwiPC9tc3VwPlwiO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiKFwiICsgdGhpcy5iYXNlICsgXCIpXihcIiArIHRoaXMucG93ZXIgKyBcIilcIjtcbiAgICB9XG4gICAgdG9VbmFtYmlnaW91c1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiKFwiICsgdGhpcy5iYXNlICsgXCIpXihcIiArIHRoaXMucG93ZXIgKyBcIilcIjtcbiAgICB9XG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHJldHVybiBcIlBvd1wiICsgdGhpcy5iYXNlLmhhc2ggKyB0aGlzLnBvd2VyLmhhc2g7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3codGhpcy5iYXNlLmV2YWx1YXRlKHZhbHVlcyksIHRoaXMucG93ZXIuZXZhbHVhdGUodmFsdWVzKSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGJhc2UsIHBvd2VyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmFzZSA9IGJhc2U7XG4gICAgICAgIHRoaXMucG93ZXIgPSBwb3dlcjtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLmJhc2UpO1xuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMucG93ZXIpO1xuICAgICAgICAvLyBUaGUgaW50ZWdlcnMgYXJlIGNsb3NlZCBvdmVyIGV4cG9uZW50aWF0aW9uXG4gICAgICAgIHRoaXMuaXNSZWR1Y2libGUgPSAoYmFzZS5pc1JlZHVjaWJsZU9ySW50KSAmJiAocG93ZXIuaXNSZWR1Y2libGVPckludCk7IC8vICYmIE1hdGgucG93KGJhc2UucmVkdWNlZC52YWx1ZSwgcG93ZXIucmVkdWNlZC52YWx1ZSkgJSAxID09IDBcbiAgICAgICAgdGhpcy5pc0NvbnN0YW50ID0gYmFzZS5pc0NvbnN0YW50ICYmIHBvd2VyLmlzQ29uc3RhbnQ7XG4gICAgICAgIHRoaXMuY2hpbGRDb3VudCA9IDIgKyBiYXNlLmNoaWxkQ291bnQgKyBwb3dlci5jaGlsZENvdW50O1xuICAgIH1cbiAgICBiYXNlO1xuICAgIHBvd2VyO1xuICAgIGlzUmVkdWNpYmxlO1xuICAgIGlzQ29uc3RhbnQ7XG4gICAgY2hpbGRDb3VudDtcbn1cbmV4cG9ydHMuRXhwb25lbnQgPSBFeHBvbmVudDtcbmV4cG9ydHMuRXhwb25lbnRUeXBlID0gXCJFeHBvbmVudFwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cHJlc3Npb24gPSB2b2lkIDA7XG5jb25zdCBNYXRoR3JhcGhOb2RlXzEgPSByZXF1aXJlKFwiLi4vTWF0aEdyYXBoTm9kZVwiKTtcbmNvbnN0IEludGVnZXJfMSA9IHJlcXVpcmUoXCIuL0ludGVnZXJcIik7XG4vKipcbiAqIEJhc2Ugb2YgYWxsIG1hdGhlbWF0aWNhbCBleHByZXNzaW9ucy5cbiAqIEFsbCBjaGlsZHJlbiBzaG91bGQgaW1wbGVtZW50IGZseS13aGVlbCBwYXR0ZXJuLlxuICogQWxsIGNoaWxkcmVuIHNob3VsZCBiZSBpbW11dGFibGUuXG4gKi9cbmNsYXNzIEV4cHJlc3Npb24gZXh0ZW5kcyBNYXRoR3JhcGhOb2RlXzEuTWF0aEdyYXBoTm9kZSB7XG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0aGUgZXhwcmVzc2lvbiBpcyByZWR1Y2libGUgb3IgaXMgYW4gaW50ZWdlci5cbiAgICAgKi9cbiAgICBnZXQgaXNSZWR1Y2libGVPckludCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNSZWR1Y2libGUgfHwgdGhpcy5jbGFzcyA9PSBJbnRlZ2VyXzEuSW50ZWdlclR5cGU7XG4gICAgfVxufVxuZXhwb3J0cy5FeHByZXNzaW9uID0gRXhwcmVzc2lvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GcmFjdGlvblR5cGUgPSBleHBvcnRzLkZyYWN0aW9uID0gdm9pZCAwO1xuY29uc3QgRXhwcmVzc2lvbl8xID0gcmVxdWlyZShcIi4vRXhwcmVzc2lvblwiKTtcbmNsYXNzIEZyYWN0aW9uIGV4dGVuZHMgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24ge1xuICAgIHN0YXRpYyBvZihudW1lcmF0b3IsIGRlbm9taW5hdG9yKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBudW1lcmF0b3IuaGFzaCArIGRlbm9taW5hdG9yLmhhc2g7XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZS5oYXMoaGFzaCkpXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldChoYXNoLCBuZXcgRnJhY3Rpb24obnVtZXJhdG9yLCBkZW5vbWluYXRvcikpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5nZXQoaGFzaCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbnN0YW5jZSA9IG5ldyBNYXAoKTtcbiAgICBjb25zdHJ1Y3RvcihudW0sIGRlbm9tKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubnVtZXJhdG9yID0gbnVtO1xuICAgICAgICB0aGlzLmRlbm9taW5hdG9yID0gZGVub207XG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcy5udW1lcmF0b3IpO1xuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMuZGVub21pbmF0b3IpO1xuICAgICAgICAvKlxuICAgICAgICBBIGZyYWN0aW9uIGlzIHJlZHVjaWJsZSBpZiB0aGUgZGVub20gfCBudW0uXG4gICAgICAgICAgICA8PT4gbnVtID0gayAqIGRlbm9tIHdoZXJlIGsgaXMgYW4gaW50ZWdlci5cblxuICAgICAgICBUaGlzIG1ha2VzIHByb3ZpbmcgcmVkdWNpYmlsaXR5IGhhcmQuXG4gICAgICAgIFRPRE86IERlY2lkZSBpZiBpdCdzIHdvcnRoIGltcGxlbWVudGluZyByZWR1Y2liaWxpdHkgZm9yIEZyYWN0aW9uc1xuICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzUmVkdWNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNDb25zdGFudCA9IG51bS5pc0NvbnN0YW50ICYmIGRlbm9tLmlzQ29uc3RhbnQ7XG4gICAgICAgIHRoaXMuY2hpbGRDb3VudCA9IDIgKyBudW0uY2hpbGRDb3VudCArIGRlbm9tLmNoaWxkQ291bnQ7XG4gICAgfVxuICAgIG51bWVyYXRvcjtcbiAgICBkZW5vbWluYXRvcjtcbiAgICBpc1JlZHVjaWJsZTtcbiAgICBjbGFzcyA9IGV4cG9ydHMuRnJhY3Rpb25UeXBlO1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5udW1lcmF0b3IudG9TdHJpbmcoKSArIFwiIC8gXCIgKyB0aGlzLmRlbm9taW5hdG9yLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHRvVW5hbWJpZ2lvdXNTdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgKCR7dGhpcy5udW1lcmF0b3IudG9VbmFtYmlnaW91c1N0cmluZygpfSkvKCR7dGhpcy5kZW5vbWluYXRvci50b1VuYW1iaWdpb3VzU3RyaW5nKCl9KWA7XG4gICAgfVxuICAgIGdldCBoYXNoKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5GcmFjdGlvblR5cGUgKyB0aGlzLm51bWVyYXRvci5oYXNoICsgdGhpcy5kZW5vbWluYXRvci5oYXNoO1xuICAgIH1cbiAgICBpc0NvbnN0YW50O1xuICAgIHRvTWF0aFhNTCgpIHtcbiAgICAgICAgcmV0dXJuIFwiPG1mcmFjPjxtcm93PlwiICsgdGhpcy5udW1lcmF0b3IudG9NYXRoWE1MKCkgKyBcIjwvbXJvdz48bXJvdz5cIiArIHRoaXMuZGVub21pbmF0b3IudG9NYXRoWE1MKCkgKyBcIjwvbXJvdz48L21mcmFjPlwiO1xuICAgIH1cbiAgICBldmFsdWF0ZSh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtZXJhdG9yLmV2YWx1YXRlKHZhbHVlcykgLyB0aGlzLmRlbm9taW5hdG9yLmV2YWx1YXRlKHZhbHVlcyk7XG4gICAgfVxuICAgIGNoaWxkQ291bnQ7XG59XG5leHBvcnRzLkZyYWN0aW9uID0gRnJhY3Rpb247XG5leHBvcnRzLkZyYWN0aW9uVHlwZSA9IFwiRnJhY3Rpb25cIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnRlZ2VyVHlwZSA9IGV4cG9ydHMuSW50ZWdlciA9IHZvaWQgMDtcbmNvbnN0IGFzc2VydF8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXNzZXJ0XCIpO1xuY29uc3QgRXhwcmVzc2lvbl8xID0gcmVxdWlyZShcIi4vRXhwcmVzc2lvblwiKTtcbi8qKlxuICogSW50ZWdlclxuICogUG9zaXRpdmUgb3IgbmVnYXRpdmVcbiAqL1xuY2xhc3MgSW50ZWdlciBleHRlbmRzIEV4cHJlc3Npb25fMS5FeHByZXNzaW9uIHtcbiAgICBzdGF0aWMgb2YodmFsdWUpIHtcbiAgICAgICAgaWYgKCFJbnRlZ2VyLmluc3RhbmNlcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICBJbnRlZ2VyLmluc3RhbmNlcy5zZXQodmFsdWUsIG5ldyBJbnRlZ2VyKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEludGVnZXIuaW5zdGFuY2VzLmdldCh2YWx1ZSk7XG4gICAgfVxuICAgIHN0YXRpYyBpbnN0YW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KSh0aGlzLnZhbHVlICUgMSA9PSAwLCBcIkNyZWF0aW5nIG5vbi1pbnRlZ2VyIGludGVnZXIgXCIgKyB0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgQSBwb3NpdGl2ZSB2ZXJzaW9uIG9mIHRoaXMgaW50ZWdlci5cbiAgICAgKi9cbiAgICBidXRQb3NpdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIEludGVnZXIub2YoTWF0aC5hYnModGhpcy52YWx1ZSkpO1xuICAgIH1cbiAgICBjbGFzcyA9IGV4cG9ydHMuSW50ZWdlclR5cGU7XG4gICAgdG9NYXRoWE1MKCkge1xuICAgICAgICByZXR1cm4gXCI8bW4+XCIgKyB0aGlzLnZhbHVlICsgXCI8L21uPlwiO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIgKyB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICB0b1VuYW1iaWdpb3VzU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJcIiArIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIGdldCBoYXNoKCkge1xuICAgICAgICByZXR1cm4gXCJJbnRcIiArIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgdmFsdWU7XG4gICAgaXNSZWR1Y2libGUgPSBmYWxzZTtcbiAgICBpc0NvbnN0YW50ID0gdHJ1ZTtcbiAgICBjaGlsZENvdW50ID0gMDtcbn1cbmV4cG9ydHMuSW50ZWdlciA9IEludGVnZXI7XG5leHBvcnRzLkludGVnZXJUeXBlID0gXCJJbnRlZ2VyXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW50ZWdyYWxUeXBlID0gZXhwb3J0cy5JbnRlZ3JhbCA9IHZvaWQgMDtcbmNvbnN0IE1hdGhNTEhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL01hdGhNTEhlbHBlcnNcIik7XG5jb25zdCBFeHByZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9FeHByZXNzaW9uXCIpO1xuY29uc3QgUHJvZHVjdF8xID0gcmVxdWlyZShcIi4vUHJvZHVjdFwiKTtcbmNvbnN0IFN1bV8xID0gcmVxdWlyZShcIi4vU3VtXCIpO1xuLyoqXG4gKiBBbiBpbmRlZmluYXRlIGludGVncmFsIChmb3Igbm93KS5cbiAqIFRPRE86IFNob3VsZCB3ZSBzZXBhcmF0ZSBkZWZpbmF0ZS9pbmRlZmluYXRlIGludGVncmFscz9cbiAqL1xuY2xhc3MgSW50ZWdyYWwgZXh0ZW5kcyBFeHByZXNzaW9uXzEuRXhwcmVzc2lvbiB7XG4gICAgc3RhdGljIG9mKGludGVncmFuZCwgcmVsYXRpdmVUbykge1xuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VzLmhhcyhpbnRlZ3JhbmQuaGFzaCArIHJlbGF0aXZlVG8uaGFzaCkpXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5zZXQoaW50ZWdyYW5kLmhhc2ggKyByZWxhdGl2ZVRvLmhhc2gsIG5ldyBJbnRlZ3JhbChpbnRlZ3JhbmQsIHJlbGF0aXZlVG8pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzLmdldChpbnRlZ3JhbmQuaGFzaCArIHJlbGF0aXZlVG8uaGFzaCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbnN0YW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3RydWN0b3IoaW50ZWdyYW5kLCByZWxhdGl2ZVRvKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW50ZWdyYW5kID0gaW50ZWdyYW5kO1xuICAgICAgICB0aGlzLnJlbGF0aXZlVG8gPSByZWxhdGl2ZVRvO1xuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMuaW50ZWdyYW5kKTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLnJlbGF0aXZlVG8pO1xuICAgICAgICB0aGlzLmlzUmVkdWNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNDb25zdGFudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoaWxkQ291bnQgPSAyICsgaW50ZWdyYW5kLmNoaWxkQ291bnQgKyByZWxhdGl2ZVRvLmNoaWxkQ291bnQ7XG4gICAgfVxuICAgIGludGVncmFuZDtcbiAgICByZWxhdGl2ZVRvO1xuICAgIGlzUmVkdWNpYmxlO1xuICAgIGNsYXNzID0gZXhwb3J0cy5JbnRlZ3JhbFR5cGU7XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIuKIq1wiICsgdGhpcy5pbnRlZ3JhbmQudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdG9VbmFtYmlnaW91c1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwi4oirKFwiICsgdGhpcy5pbnRlZ3JhbmQudG9VbmFtYmlnaW91c1N0cmluZygpICsgXCIpXCIgKyB0aGlzLnJlbGF0aXZlVG8udG9VbmFtYmlnaW91c1N0cmluZygpO1xuICAgIH1cbiAgICBnZXQgaGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIFwi4oirXCIgKyB0aGlzLmludGVncmFuZC50b1N0cmluZygpICsgdGhpcy5yZWxhdGl2ZVRvLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlzQ29uc3RhbnQ7XG4gICAgdG9NYXRoWE1MKCkge1xuICAgICAgICBmdW5jdGlvbiB3cmFwSWZOZWVkZWQoZXhwKSB7XG4gICAgICAgICAgICBpZiAoZXhwLmNsYXNzID09IFN1bV8xLlN1bVR5cGUgfHwgZXhwLmNsYXNzID09IFByb2R1Y3RfMS5Qcm9kdWN0VHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIE1hdGhNTEhlbHBlcnNfMS5pblBhcmVuKShleHAudG9NYXRoWE1MKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGV4cC50b01hdGhYTUwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCI8bXJvdz48bW8+4oirPC9tbz5cIiArIHdyYXBJZk5lZWRlZCh0aGlzLmludGVncmFuZCkgKyBcIjxtbj5kPC9tbj5cIiArIHdyYXBJZk5lZWRlZCh0aGlzLnJlbGF0aXZlVG8pICsgXCI8L21yb3c+XCI7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcykge1xuICAgICAgICAvLyBOYWggZnVjayB0aGlzIGJyb1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBjaGlsZENvdW50O1xufVxuZXhwb3J0cy5JbnRlZ3JhbCA9IEludGVncmFsO1xuZXhwb3J0cy5JbnRlZ3JhbFR5cGUgPSBcIkludGVncmFsXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9nVHlwZSA9IGV4cG9ydHMuTG9nYXJpdGhtID0gdm9pZCAwO1xuY29uc3QgRXhwcmVzc2lvbl8xID0gcmVxdWlyZShcIi4vRXhwcmVzc2lvblwiKTtcbmNsYXNzIExvZ2FyaXRobSBleHRlbmRzIEV4cHJlc3Npb25fMS5FeHByZXNzaW9uIHtcbiAgICBzdGF0aWMgb2YoZXhwLCBiYXNlKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBleHAuaGFzaCArIGJhc2UuaGFzaDtcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlcy5oYXMoaGFzaCkpXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5zZXQoaGFzaCwgbmV3IExvZ2FyaXRobShleHAsIGJhc2UpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzLmdldChoYXNoKTtcbiAgICB9XG4gICAgc3RhdGljIGluc3RhbmNlcyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdHJ1Y3RvcihleHAsIGJhc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5leHAgPSBleHA7XG4gICAgICAgIHRoaXMuYmFzZSA9IGJhc2U7XG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcy5leHApO1xuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMuYmFzZSk7XG4gICAgICAgIHRoaXMuaXNSZWR1Y2libGUgPSBmYWxzZTsgLy9UT0RPOiBEZXRlcm1pbmUgaWYgYSBsb2dhcml0aG0gaXMgcmVkdWNpYmxlXG4gICAgICAgIHRoaXMuaXNDb25zdGFudCA9IGV4cC5pc0NvbnN0YW50ICYmIGJhc2UuaXNDb25zdGFudDtcbiAgICAgICAgdGhpcy5jaGlsZENvdW50ID0gMiArIGV4cC5jaGlsZENvdW50ICsgYmFzZS5jaGlsZENvdW50O1xuICAgIH1cbiAgICB0b01hdGhYTUwoKSB7XG4gICAgICAgIHJldHVybiBgPG1yb3c+XG4gICAgICAgICAgICA8bXN1Yj48bXRleHQ+bG9nPC9tdGV4dD4ke3RoaXMuYmFzZS50b01hdGhYTUwoKX08L21zdWI+XG4gICAgICAgICAgICA8bXJvdz4ke3RoaXMuZXhwLnRvTWF0aFhNTCgpfTwvbXJvdz5cbiAgICAgICAgPC9yb3c+YDtcbiAgICB9XG4gICAgaXNSZWR1Y2libGU7XG4gICAgY2xhc3MgPSBleHBvcnRzLkxvZ1R5cGU7XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgbG9nJHt0aGlzLmJhc2UudG9TdHJpbmcoKX0oJHt0aGlzLmV4cC50b1N0cmluZygpfSlgO1xuICAgIH1cbiAgICB0b1VuYW1iaWdpb3VzU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYGxvZygke3RoaXMuYmFzZS50b1VuYW1iaWdpb3VzU3RyaW5nKCl9KSgke3RoaXMuZXhwLnRvVW5hbWJpZ2lvdXNTdHJpbmcoKX0pYDtcbiAgICB9XG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICBldmFsdWF0ZSh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKHRoaXMuZXhwLmV2YWx1YXRlKHZhbHVlcykpIC8gTWF0aC5sb2codGhpcy5iYXNlLmV2YWx1YXRlKHZhbHVlcykpO1xuICAgIH1cbiAgICBpc0NvbnN0YW50O1xuICAgIGNoaWxkQ291bnQ7XG4gICAgZXhwO1xuICAgIGJhc2U7XG59XG5leHBvcnRzLkxvZ2FyaXRobSA9IExvZ2FyaXRobTtcbmV4cG9ydHMuTG9nVHlwZSA9IFwiTG9nYXJpdGhtXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmFjdG9yT3JkZXIgPSBleHBvcnRzLlByb2R1Y3RUeXBlID0gZXhwb3J0cy5Qcm9kdWN0ID0gdm9pZCAwO1xuY29uc3QgYXNzZXJ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hc3NlcnRcIik7XG5jb25zdCBFeHBvbmVudF8xID0gcmVxdWlyZShcIi4vRXhwb25lbnRcIik7XG5jb25zdCBFeHByZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9FeHByZXNzaW9uXCIpO1xuY29uc3QgSW50ZWdlcl8xID0gcmVxdWlyZShcIi4vSW50ZWdlclwiKTtcbmNvbnN0IFN1bV8xID0gcmVxdWlyZShcIi4vU3VtXCIpO1xuY29uc3QgVmFyaWFibGVfMSA9IHJlcXVpcmUoXCIuL1ZhcmlhYmxlXCIpO1xuLyoqXG4gKiBBIG1hdGhlbWF0aWNhbCBwcm9kdWN0IHdpdGggMiBvciBtb3JlIGZhY3RvcnMuXG4gKi9cbmNsYXNzIFByb2R1Y3QgZXh0ZW5kcyBFeHByZXNzaW9uXzEuRXhwcmVzc2lvbiB7XG4gICAgLyoqXG4gICAgICogRm9yIGVmZmljaWVuY3ksIHByb2R1Y3RzIGFyZSBjb21wYXJlZCBieSByZWZlcmVuY2UuXG4gICAgICogSGVyZSB3ZSBlbnN1cmUgPT09IDw9PiA9PVxuICAgICAqIEBwYXJhbSBmYWN0b3JzXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBzdGF0aWMgb2YoZmFjdG9ycykge1xuICAgICAgICBjb25zdCBoYXNoID0gZmFjdG9ycy5tYXAoZSA9PiBlLmhhc2gpLmpvaW4oXCJcIik7XG4gICAgICAgIGlmICghUHJvZHVjdC5pbnN0YW5jZXMuaGFzKGhhc2gpKVxuICAgICAgICAgICAgUHJvZHVjdC5pbnN0YW5jZXMuc2V0KGhhc2gsIG5ldyBQcm9kdWN0KGZhY3RvcnMpKTtcbiAgICAgICAgcmV0dXJuIFByb2R1Y3QuaW5zdGFuY2VzLmdldChoYXNoKTtcbiAgICB9XG4gICAgc3RhdGljIGluc3RhbmNlcyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdHJ1Y3RvcihmYWN0b3JzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKGZhY3RvcnMubGVuZ3RoID49IDIsIFwiQ3JlYXRpbmcgcHJvZHVjdCB3aXRoIGxlc3MgdGhhbiAyIGZhY3RvcnMuXCIpO1xuICAgICAgICB0aGlzLmZhY3RvcnMgPSBmYWN0b3JzO1xuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMuZmFjdG9ycyk7XG4gICAgICAgIGxldCByZWR1Y2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmZhY3RvcnMuZm9yRWFjaChmID0+IHtcbiAgICAgICAgICAgIHJlZHVjaWJsZSAmJj0gZi5pc1JlZHVjaWJsZSB8fCBmLmNsYXNzID09IEludGVnZXJfMS5JbnRlZ2VyVHlwZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRoZSBpbnRlZ2VycyBhcmUgY2xvc2VkIG92ZXIgbXVsdGlwbGljYXRpb25cbiAgICAgICAgdGhpcy5pc1JlZHVjaWJsZSA9IHJlZHVjaWJsZTtcbiAgICAgICAgbGV0IGhlYWx0aHkgPSB0cnVlO1xuICAgICAgICBoZWFsdGh5ICYmPSB0aGlzLm51bU5lZ2F0aXZlcygpIDwgMjtcbiAgICAgICAgbGV0IGlzTmVnYXRpb24gPSBmYWN0b3JzLmxlbmd0aCA9PSAyO1xuICAgICAgICBpc05lZ2F0aW9uICYmPSBmYWN0b3JzLmZpbHRlcihlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIgJiYgZS52YWx1ZSA9PSAtMTtcbiAgICAgICAgfSkubGVuZ3RoID09IDE7XG4gICAgICAgIHRoaXMuaXNOZWdhdGlvbiA9IGlzTmVnYXRpb247XG4gICAgICAgIHRoaXMuaXNDb25zdGFudCA9IHRoaXMuZmFjdG9ycy5tYXAoZiA9PiBmLmlzQ29uc3RhbnQpLnJlZHVjZSgoYSwgYikgPT4gYSAmJiBiKTtcbiAgICAgICAgdGhpcy5jaGlsZENvdW50ID0gZmFjdG9ycy5sZW5ndGggKyBmYWN0b3JzLm1hcChmID0+IGYuY2hpbGRDb3VudCkucmVkdWNlKChhLCBiKSA9PiBhICsgYikgLSAodGhpcy5pc05lZ2F0aW9uID8gMSA6IDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoaXMgcHJvZHVjdCBpcyBqdXN0XG4gICAgICogLTEgKiBhbm90aGVyIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgaXNOZWdhdGlvbjtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIHRoYXQgdGhpcyBwcm9kdWN0IGlzIG5lZ2F0aW5nXG4gICAgICogLTEgKiBleHAgcmV0dXJucyBleHAuXG4gICAgICogQHRocm93cyBpZiBwcm9kdWN0IGlzbid0IGEgbmVnYXRpb24uXG4gICAgICovXG4gICAgZ2V0IG5lZ2F0aW9uKCkge1xuICAgICAgICAoMCwgYXNzZXJ0XzEuYXNzZXJ0KSh0aGlzLmlzTmVnYXRpb24sIFwiVHJ5aW5nIHRvIGdldCBuZWdhdGlvbiBmcm9tIG5vbi1uZWdhdGluZyBzdW1cIik7XG4gICAgICAgIGlmICh0aGlzLmZhY3RvcnNbMF0uY2xhc3MgPT0gSW50ZWdlcl8xLkludGVnZXJUeXBlICYmIHRoaXMuZmFjdG9yc1swXS52YWx1ZSA9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnNbMV07XG4gICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnNbMF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgRXhwcmVzc2lvbiB3aXRob3V0IHRoZSBnaXZlbiBmYWN0b3IuXG4gICAgICogSWYgdGhlIHByb2R1Y3QgY29udGFpbnMgdGhlIGZhY3RvciBtdWx0aXBsZSB0aW1lcyxcbiAgICAgKiBvbmx5IHJlbW92ZXMgb25lLiBJZiBpdCBkb2Vzbid0IGNvbnRhaW4gdGhlIGZhY3RvcixcbiAgICAgKiByZXR1cm5zIGl0c2VsZi5cbiAgICAgKiBAcGFyYW0gZXhwIEEgZmFjdG9yIGluIHRoaXMgcHJvZHVjdC5cbiAgICAgKi9cbiAgICB3aXRob3V0KGV4cCkge1xuICAgICAgICBjb25zdCBuZXdGYWN0b3JzID0gWy4uLnRoaXMuZmFjdG9yc107XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbmV3RmFjdG9ycy5maW5kSW5kZXgoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IGV4cDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpbmRleCA9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBuZXdGYWN0b3JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGlmIChuZXdGYWN0b3JzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXdGYWN0b3JzWzBdOyAvLyBHYXVyYW50ZWVkIHRoZXJlJ3Mgb25lIHRlcm0gaGVyZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9kdWN0Lm9mKG5ld0ZhY3RvcnMpO1xuICAgIH1cbiAgICB0b01hdGhYTUwoKSB7XG4gICAgICAgIGxldCBvdXQgPSBcIlwiO1xuICAgICAgICBmdW5jdGlvbiB3cmFwSWZOZWVkZWQoZXhwKSB7XG4gICAgICAgICAgICBpZiAoZXhwLmNsYXNzID09IGV4cG9ydHMuUHJvZHVjdFR5cGUgfHwgZXhwLmNsYXNzID09IFN1bV8xLlN1bVR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiPG1vPig8L21vPlwiICsgZXhwLnRvTWF0aFhNTCgpICsgXCI8bW8+KTwvbW8+XCI7XG4gICAgICAgICAgICByZXR1cm4gZXhwLnRvTWF0aFhNTCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIGEgbmVnYXRpb24sIG9yIGEgbGlzdCBvZiBwcm9kdWN0c1xuICAgICAgICAvLyBGaXJzdCB0aGUgbmVnYXRpb24gY2FzZS4uLlxuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aW9uKSB7XG4gICAgICAgICAgICBvdXQgKz0gXCI8bW8+LTwvbW8+XCI7XG4gICAgICAgICAgICBvdXQgKz0gd3JhcElmTmVlZGVkKHRoaXMubmVnYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBpdCdzIGEgbGlzdCBvZiBwcm9kdWN0cy4uLlxuICAgICAgICBjb25zdCBmaXJzdEZhY3RvciA9IHRoaXMuZmFjdG9yc1swXTtcbiAgICAgICAgb3V0ICs9IHdyYXBJZk5lZWRlZChmaXJzdEZhY3Rvcik7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5mYWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZmFjdG9yID0gdGhpcy5mYWN0b3JzW2ldO1xuICAgICAgICAgICAgbGV0IG5lZWRzRG90ID0gKGZhY3Rvci5jbGFzcyA9PSBJbnRlZ2VyXzEuSW50ZWdlclR5cGUgJiYgdGhpcy5mYWN0b3JzW2kgLSAxXS5jbGFzcyA9PSBJbnRlZ2VyXzEuSW50ZWdlclR5cGUpXG4gICAgICAgICAgICAgICAgfHwgKGZhY3RvciBpbnN0YW5jZW9mIFByb2R1Y3QgJiYgZmFjdG9yLmlzTmVnYXRpb24pIC8vIElmIHRoZXJlJ3MgYSBuZWdhdGl2ZSBzaWduLCBnZXQgYSBkb3RcbiAgICAgICAgICAgICAgICB8fCAoZmFjdG9yIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIgJiYgZmFjdG9yLnZhbHVlIDwgMSk7XG4gICAgICAgICAgICBpZiAobmVlZHNEb3QpXG4gICAgICAgICAgICAgICAgb3V0ICs9IFwiPG1vPsK3PC9tbz5cIjtcbiAgICAgICAgICAgIG91dCArPSB3cmFwSWZOZWVkZWQoZmFjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBOdW1iZXIgb2YgbmVnYXRpdmUgaW50ZWdlciBwcm9kdWN0cy5cbiAgICAgKi9cbiAgICBudW1OZWdhdGl2ZXMoKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZmFjdG9ycy5mb3JFYWNoKGYgPT4ge1xuICAgICAgICAgICAgaWYgKGYgaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcilcbiAgICAgICAgICAgICAgICBpZiAoZi52YWx1ZSA8IDApXG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCBleHAgb2YgdGhpcy5mYWN0b3JzKSB7XG4gICAgICAgICAgICBpZiAoZXhwIGluc3RhbmNlb2YgUHJvZHVjdCkge1xuICAgICAgICAgICAgICAgIG91dCArPSBcIihcIiArIGV4cC50b1N0cmluZygpICsgXCIpXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gZXhwLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gXCLCt1wiO1xuICAgICAgICB9XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcoMCwgb3V0Lmxlbmd0aCAtIDEpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICB0b1VuYW1iaWdpb3VzU3RyaW5nKCkge1xuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIGAtKCR7dGhpcy5uZWdhdGlvbi50b1VuYW1iaWdpb3VzU3RyaW5nKCl9KWA7XG4gICAgICAgIGxldCBvdXQgPSBcIlwiO1xuICAgICAgICBmb3IgKGNvbnN0IGV4cCBvZiB0aGlzLmZhY3RvcnMpIHtcbiAgICAgICAgICAgIGlmIChleHAgaW5zdGFuY2VvZiBQcm9kdWN0KSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9IFwiKFwiICsgZXhwLnRvU3RyaW5nKCkgKyBcIilcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSBleHAudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSBcIsK3XCI7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ID0gb3V0LnN1YnN0cmluZygwLCBvdXQubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGdldCBoYXNoKCkge1xuICAgICAgICByZXR1cm4gXCJQcm9kdWN0XCIgKyB0aGlzLmZhY3RvcnMubWFwKGUgPT4gZS5oYXNoKS5qb2luKCk7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5mYWN0b3JzLm1hcChmID0+IGYuZXZhbHVhdGUodmFsdWVzKSkucmVkdWNlKChhLCBiKSA9PiBhICogYik7XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IDIgZWxlbWVudHMsIG9yZGVyIG1hdHRlcnNcbiAgICBmYWN0b3JzO1xuICAgIGNsYXNzID0gZXhwb3J0cy5Qcm9kdWN0VHlwZTtcbiAgICBpc1JlZHVjaWJsZTtcbiAgICBpc0NvbnN0YW50O1xuICAgIGNoaWxkQ291bnQ7XG59XG5leHBvcnRzLlByb2R1Y3QgPSBQcm9kdWN0O1xuZXhwb3J0cy5Qcm9kdWN0VHlwZSA9IFwiUHJvZHVjdFwiO1xuLyoqXG4gKiBDYW4gYmUgdXNlZCBpbiBhcnJheS5zb3J0KCkgdG8gZ2V0IHByb3Blcmx5IG9yZGVyZWQgcHJvZHVjdHMuXG4gKlxuICogQHBhcmFtIGFcbiAqIEBwYXJhbSBiXG4gKiBAcmV0dXJucyBQb3NpdGl2ZSBpZiBhIHNob3VsZCBiZSBhZnRlciBiXG4gKi9cbmZ1bmN0aW9uIGZhY3Rvck9yZGVyKGEsIGIpIHtcbiAgICBpZiAoYSBpbnN0YW5jZW9mIEludGVnZXJfMS5JbnRlZ2VyICYmIGIgaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcilcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgaWYgKGEgaW5zdGFuY2VvZiBJbnRlZ2VyXzEuSW50ZWdlcikge1xuICAgICAgICByZXR1cm4gYUZpcnN0O1xuICAgIH1cbiAgICAvLyBBbHBoYWJldGljYWxcbiAgICBjb25zdCBzeW1iQSA9IGEgaW5zdGFuY2VvZiBWYXJpYWJsZV8xLlZhcmlhYmxlID8gYS5zeW1ib2xcbiAgICAgICAgOiBhIGluc3RhbmNlb2YgRXhwb25lbnRfMS5FeHBvbmVudCA/XG4gICAgICAgICAgICBhLmJhc2UgaW5zdGFuY2VvZiBWYXJpYWJsZV8xLlZhcmlhYmxlID8gYS5iYXNlLnN5bWJvbCA6IG51bGwgOiBudWxsO1xuICAgIGNvbnN0IHN5bWJCID0gYiBpbnN0YW5jZW9mIFZhcmlhYmxlXzEuVmFyaWFibGUgPyBiLnN5bWJvbFxuICAgICAgICA6IGIgaW5zdGFuY2VvZiBFeHBvbmVudF8xLkV4cG9uZW50ID9cbiAgICAgICAgICAgIGIuYmFzZSBpbnN0YW5jZW9mIFZhcmlhYmxlXzEuVmFyaWFibGUgPyBiLmJhc2Uuc3ltYm9sIDogbnVsbCA6IG51bGw7XG4gICAgaWYgKHN5bWJBICE9IG51bGwgJiYgc3ltYkIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3ltYkEgPiBzeW1iQiA/IGFGaXJzdCA6IGFBZnRlcjtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5leHBvcnRzLmZhY3Rvck9yZGVyID0gZmFjdG9yT3JkZXI7XG5jb25zdCBhRmlyc3QgPSAxO1xuY29uc3QgYUFmdGVyID0gLTE7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3JkZXJUZXJtcyA9IGV4cG9ydHMuU3VtVHlwZSA9IGV4cG9ydHMuU3VtID0gdm9pZCAwO1xuY29uc3QgYXNzZXJ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hc3NlcnRcIik7XG5jb25zdCBFeHByZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9FeHByZXNzaW9uXCIpO1xuY29uc3QgSW50ZWdlcl8xID0gcmVxdWlyZShcIi4vSW50ZWdlclwiKTtcbmNvbnN0IFByb2R1Y3RfMSA9IHJlcXVpcmUoXCIuL1Byb2R1Y3RcIik7XG5jb25zdCBWYXJpYWJsZV8xID0gcmVxdWlyZShcIi4vVmFyaWFibGVcIik7XG4vKipcbiAqIEV4cHJlc3Npb24gcmVwcmVzZW50aW5nIHRoZSBzdW0gb2YgMiBvciBtb3JlIHRlcm1zLlxuICovXG5jbGFzcyBTdW0gZXh0ZW5kcyBFeHByZXNzaW9uXzEuRXhwcmVzc2lvbiB7XG4gICAgLyoqXG4gICAgICogRmFjdG9yeSBtZXRob2QgY29uc250cnVjdG9yLlxuICAgICAqIEBwYXJhbSB0ZXJtcyBDb250YWlucyBhdCBsZWFzdCAyIGVsZW1lbnRzXG4gICAgICovXG4gICAgc3RhdGljIG9mKHRlcm1zKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSB0ZXJtcy5tYXAodCA9PiB0Lmhhc2gpLmpvaW4oXCJcIik7XG4gICAgICAgIGlmICghU3VtLmluc3RhbmNlcy5oYXMoaGFzaCkpIHtcbiAgICAgICAgICAgIFN1bS5pbnN0YW5jZXMuc2V0KGhhc2gsIG5ldyBTdW0odGVybXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3VtLmluc3RhbmNlcy5nZXQoaGFzaCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbnN0YW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3RydWN0b3IodGVybXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkodGVybXMubGVuZ3RoID49IDIsIFwiQ3JlYXRpbmcgc3VtIHdpdGggbGVzcyB0aGFuIDIgdGVybXMuXCIpO1xuICAgICAgICB0aGlzLnRlcm1zID0gdGVybXM7XG4gICAgICAgIHRoaXMuaXNSZWR1Y2libGUgPSB0aGlzLnRlcm1zLm1hcCh0ID0+IHQuaXNSZWR1Y2libGUgfHwgdC5jbGFzcyA9PSBJbnRlZ2VyXzEuSW50ZWdlclR5cGUpLnJlZHVjZSgoYSwgYikgPT4gYSAmJiBiKTtcbiAgICAgICAgdGhpcy5pc0NvbnN0YW50ID0gdGhpcy50ZXJtcy5tYXAodCA9PiB0LmlzQ29uc3RhbnQpLnJlZHVjZSgoYSwgYikgPT4gYSAmJiBiKTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLnRlcm1zKTtcbiAgICAgICAgdGhpcy5jaGlsZENvdW50ID0gdGVybXMubGVuZ3RoICsgdGVybXMubWFwKHQgPT4gdC5jaGlsZENvdW50KS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBFeHByZXNzaW9uIHdpdGhvdXQgdGhlIGdpdmVuIHRlcm0uXG4gICAgICogSWYgdGhlIHN1bSBjb250YWlucyB0aGUgdGVybSBtdWx0aXBsZSB0aW1lcyxcbiAgICAgKiBvbmx5IHJlbW92ZXMgb25lLiBJZiBpdCBkb2Vzbid0IGNvbnRhaW4gdGhlIHRlcm0sXG4gICAgICogcmV0dXJucyBpdHNlbGYuXG4gICAgICogQHBhcmFtIHRlcm0gQSB0ZXJtIGluIHRoaXMgc3VtLlxuICAgICAqL1xuICAgIHdpdGhvdXQodGVybSkge1xuICAgICAgICBjb25zdCBuZXdUZXJtcyA9IFsuLi50aGlzLnRlcm1zXTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuZXdUZXJtcy5maW5kSW5kZXgoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRlcm07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5kZXggPT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgbmV3VGVybXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaWYgKG5ld1Rlcm1zLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXdUZXJtc1swXTsgLy8gR2F1cmFudGVlZCB0aGVyZSdzIG9uZSB0ZXJtIGhlcmVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3VtLm9mKG5ld1Rlcm1zKTtcbiAgICB9XG4gICAgdG9NYXRoWE1MKCkge1xuICAgICAgICBmdW5jdGlvbiB3cmFwSWZOZWVkZWQoZXhwKSB7XG4gICAgICAgICAgICBpZiAoZXhwLmNsYXNzID09IGV4cG9ydHMuU3VtVHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI8bW8+KDwvbW8+XCIgKyBleHAudG9NYXRoWE1MKCkgKyBcIjxtbz4pPC9tbz5cIjtcbiAgICAgICAgICAgIHJldHVybiBleHAudG9NYXRoWE1MKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG91dCA9IHdyYXBJZk5lZWRlZCh0aGlzLnRlcm1zWzBdKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnRlcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXJtID0gdGhpcy50ZXJtc1tpXTtcbiAgICAgICAgICAgIC8vIFN1YnRyYWN0IG5lZ2F0aXZlIHRlcm1zIGluc3RlYWQgb2YgYWRkaW5nIG5lZ2F0aXZlc1xuICAgICAgICAgICAgaWYgKHRlcm0gaW5zdGFuY2VvZiBQcm9kdWN0XzEuUHJvZHVjdCAmJiB0ZXJtLmlzTmVnYXRpb24pIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gXCI8bW8+LTwvbW8+XCIgKyB3cmFwSWZOZWVkZWQodGVybS5uZWdhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0ZXJtIGluc3RhbmNlb2YgSW50ZWdlcl8xLkludGVnZXIgJiYgdGVybS52YWx1ZSA8IDApIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gXCI8bW8+LTwvbW8+XCIgKyB3cmFwSWZOZWVkZWQodGVybS5idXRQb3NpdGl2ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSBcIjxtbz4rPC9tbz5cIiArIHdyYXBJZk5lZWRlZCh0aGlzLnRlcm1zW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgbGV0IG91dCA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgZXhwIG9mIHRoaXMudGVybXMpIHtcbiAgICAgICAgICAgIG91dCArPSBleHAudG9TdHJpbmcoKSArIFwiK1wiO1xuICAgICAgICB9XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcoMCwgb3V0Lmxlbmd0aCAtIDEpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICB0b1VuYW1iaWdpb3VzU3RyaW5nKCkge1xuICAgICAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCBleHAgb2YgdGhpcy50ZXJtcykge1xuICAgICAgICAgICAgb3V0ICs9IFwiKFwiICsgZXhwLnRvVW5hbWJpZ2lvdXNTdHJpbmcoKSArIFwiKStcIjtcbiAgICAgICAgfVxuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKDAsIG91dC5sZW5ndGggLSAxKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHJldHVybiBcIlN1bVwiICsgdGhpcy50ZXJtcy5tYXAoZSA9PiBlLmhhc2gpLmpvaW4oKTtcbiAgICB9XG4gICAgZXZhbHVhdGUodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlcm1zLm1hcCh0ID0+IHQuZXZhbHVhdGUodmFsdWVzKSkucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG4gICAgfVxuICAgIGNsYXNzID0gZXhwb3J0cy5TdW1UeXBlO1xuICAgIC8qKlxuICAgICAqIE9yZGVyZWQsIGltbXV0YWJsZVxuICAgICAqL1xuICAgIHRlcm1zO1xuICAgIGlzUmVkdWNpYmxlO1xuICAgIGlzQ29uc3RhbnQ7XG4gICAgY2hpbGRDb3VudDtcbn1cbmV4cG9ydHMuU3VtID0gU3VtO1xuZXhwb3J0cy5TdW1UeXBlID0gXCJTdW1cIjtcbi8qKlxuICogUmV0dXJucyB0aGUgZ2l2ZW4gdGVybXMgb3JkZXJlZCBjb3JyZWN0bHkgdG9cbiAqIGJlIHBsYWNlZCBpbiBhIFN1bS4gQWx0ZXJzIHRoZSBnaXZlbiBhcnJheS5cbiAqIEBwYXJhbSB0ZXJtc1xuICovXG5mdW5jdGlvbiBvcmRlclRlcm1zKC4uLnRlcm1zKSB7XG4gICAgLy8gQSBub3RlIGFib3V0IHRoZSBzb3J0IGZ1bmN0aW9uIGJjIHRoZSBkb2N1bWVudGF0aW9uIGlzIGNyeXB0aWNcbiAgICAvLyBJZiBhIHNob3VsZCBiZSBwdXQgYmVmb3JlIGIgaW4gdGhlIHN1bSwgcmV0dXJuIGEgbmVnYXRpdmUgdmFsdWVcbiAgICByZXR1cm4gdGVybXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyBWYXJpYWJsZXMgYmVmb3JlIEludGVnZXJzXG4gICAgICAgIGlmIChhLmNsYXNzID09IEludGVnZXJfMS5JbnRlZ2VyVHlwZSAmJiAoYi5jbGFzcyA9PSBWYXJpYWJsZV8xLlZhcmlhYmxlVHlwZSB8fCAoYiBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ICYmIGIuaXNOZWdhdGlvbiAmJiBiLm5lZ2F0aW9uLmNsYXNzID09IFZhcmlhYmxlXzEuVmFyaWFibGVUeXBlKSkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoYS5jbGFzcyA9PSBWYXJpYWJsZV8xLlZhcmlhYmxlVHlwZSB8fCAoYSBpbnN0YW5jZW9mIFByb2R1Y3RfMS5Qcm9kdWN0ICYmIGEuaXNOZWdhdGlvbiAmJiBhLm5lZ2F0aW9uLmNsYXNzID09IFZhcmlhYmxlXzEuVmFyaWFibGVUeXBlKSkgJiYgYi5jbGFzcyA9PSBJbnRlZ2VyXzEuSW50ZWdlclR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cbmV4cG9ydHMub3JkZXJUZXJtcyA9IG9yZGVyVGVybXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmFyaWFibGVUeXBlID0gZXhwb3J0cy5WYXJpYWJsZSA9IHZvaWQgMDtcbmNvbnN0IEV4cHJlc3Npb25fMSA9IHJlcXVpcmUoXCIuL0V4cHJlc3Npb25cIik7XG5jbGFzcyBWYXJpYWJsZSBleHRlbmRzIEV4cHJlc3Npb25fMS5FeHByZXNzaW9uIHtcbiAgICBzdGF0aWMgb2Yoc3ltYm9sKSB7XG4gICAgICAgIGlmIChWYXJpYWJsZS5pbnN0YW5jZXMuZ2V0KHN5bWJvbCkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBWYXJpYWJsZS5pbnN0YW5jZXMuc2V0KHN5bWJvbCwgbmV3IFZhcmlhYmxlKHN5bWJvbCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBWYXJpYWJsZS5pbnN0YW5jZXMuZ2V0KHN5bWJvbCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbnN0YW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICAgIH1cbiAgICBjbGFzcyA9IGV4cG9ydHMuVmFyaWFibGVUeXBlO1xuICAgIHRvTWF0aFhNTCgpIHtcbiAgICAgICAgcmV0dXJuIFwiPG1pPlwiICsgdGhpcy5zeW1ib2wgKyBcIjwvbWk+XCI7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW1ib2w7XG4gICAgfVxuICAgIHRvVW5hbWJpZ2lvdXNTdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN5bWJvbDtcbiAgICB9XG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHJldHVybiBcIlZhclwiICsgdGhpcy5zeW1ib2w7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gdmFsdWVzLnZhbHVlT2YodGhpcyk7XG4gICAgfVxuICAgIHN5bWJvbDtcbiAgICBpc1JlZHVjaWJsZSA9IGZhbHNlO1xuICAgIGlzQ29uc3RhbnQgPSBmYWxzZTtcbiAgICBjaGlsZENvdW50ID0gMDtcbn1cbmV4cG9ydHMuVmFyaWFibGUgPSBWYXJpYWJsZTtcbmV4cG9ydHMuVmFyaWFibGVUeXBlID0gXCJWYXJpYWJsZVwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFyZ3VtZW50Tm9kZVZpZXcgPSB2b2lkIDA7XG5jb25zdCBHcmFwaE5vZGVWaWV3XzEgPSByZXF1aXJlKFwiLi9HcmFwaE5vZGVWaWV3XCIpO1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGFyZ3VtZW50IG5vZGUuXG4gKi9cbmNsYXNzIEFyZ3VtZW50Tm9kZVZpZXcgZXh0ZW5kcyBHcmFwaE5vZGVWaWV3XzEuR3JhcGhOb2RlVmlldyB7XG4gICAgY29uc3RydWN0b3IoYXJnLCBzZXRTdHlsZSkge1xuICAgICAgICBzdXBlcihzZXRTdHlsZSk7XG4gICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmc7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdGhpcy5hcmd1bWVudC5hcmd1bWVudDtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwiYXJndW1lbnRcIik7XG4gICAgfVxuICAgIGFyZ3VtZW50O1xufVxuZXhwb3J0cy5Bcmd1bWVudE5vZGVWaWV3ID0gQXJndW1lbnROb2RlVmlldztcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImFyZ3VtZW50LW5vZGV2aWV3XCIsIEFyZ3VtZW50Tm9kZVZpZXcsIHsgZXh0ZW5kczogXCJkaXZcIiB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FZGdlVmlldyA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50XzEgPSByZXF1aXJlKFwiLi4vQXJndW1lbnRcIik7XG5jb25zdCBVSVByZWZlcmVuY2VzXzEgPSByZXF1aXJlKFwiLi9VSVByZWZlcmVuY2VzXCIpO1xuY29uc3QgR3JhcGhfMSA9IHJlcXVpcmUoXCIuLi9HcmFwaFwiKTtcbmNvbnN0IGFzc2VydF8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXNzZXJ0XCIpO1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVkZ2UgaW4gYSBncmFwaC5cbiAqL1xuY2xhc3MgRWRnZVZpZXcgZXh0ZW5kcyBIVE1MUGFyYWdyYXBoRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob3duZXIsIGVkZ2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vd25lciA9IG93bmVyO1xuICAgICAgICB0aGlzLmVkZ2UgPSBlZGdlLmU7XG4gICAgICAgIHRoaXMuZmlyc3QgPSBlZGdlLm47XG4gICAgICAgIHRoaXMuc2Vjb25kID0gZWRnZS5uMTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLmVkZ2UpO1xuICAgICAgICB0aGlzLnN0eWxlLndpZHRoID0gXCJmaXQtY29udGVudFwiO1xuICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IFwiZml0LWNvbnRlbnRcIjtcbiAgICAgICAgdGhpcy5zdHlsZS5wYWRkaW5nID0gXCIwXCI7XG4gICAgICAgIHRoaXMuc3R5bGUuekluZGV4ID0gXCItMlwiO1xuICAgICAgICB0aGlzLnN0eWxlLm1hcmdpbiA9IFwiMFwiO1xuICAgICAgICB0aGlzLnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xuICAgICAgICB0aGlzLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XG4gICAgICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gVUlQcmVmZXJlbmNlc18xLnVpUHJlZmVyZW5jZXMuZWRnZUVxdWFsc0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgdGhpcy5zdHlsZS51c2VyU2VsZWN0ID0gXCJub25lXCI7XG4gICAgICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgICBVSVByZWZlcmVuY2VzXzEudWlQcmVmZXJlbmNlcy5vblVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFVJUHJlZmVyZW5jZXNfMS51aVByZWZlcmVuY2VzLmVkZ2VFcXVhbHNCYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLm93bmVyLmVkZ2VDbGlja2VkKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGV2ZW50ID0+IHtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVwT2soKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyByb3RhdGlvbiBhbmdsZSBvZiB2aWV3IHdoaWxlIGFsc29cbiAgICAgKiBsZXR0aW5nIGl0IGtub3cgdGhlIGFuZ2xlIGhhcyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSByYWRcbiAgICAgKi9cbiAgICBzZXRBbmdsZShyYWQpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5yb3RhdGUgPSBcIlwiICsgcmFkICsgXCJyYWRcIjtcbiAgICAgICAgLy90aGlzLnRleHRDb250ZW50ID0gXCJcIiArIChyYWQgKiAyICogTWF0aC5QSSAvIDM2MCkudG9GaXhlZCgyKSArIFwiZGVnXCJcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBlbGVtZW50IHNjcmVlbiB3aWR0aCBhbmQgZW5zdXJlcyB0ZXh0IGZpdHNcbiAgICAgKiBpbnNpZGUgdGhlIGVkZ2UuXG4gICAgICovXG4gICAgc2V0IHdpZHRoKHZhbCkge1xuICAgICAgICBzdXBlci5zdHlsZS53aWR0aCA9IHZhbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gZWxlbWVudCBpcyBjb25uY3RlZCB0byB0aGUgRE9NLlxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBpZiAodGhpcy5lZGdlIGluc3RhbmNlb2YgQXJndW1lbnRfMS5Bcmd1bWVudCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCIgKyB0aGlzLmVkZ2UuY2xhaW0ucjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmVkZ2UgaW5zdGFuY2VvZiBHcmFwaF8xLkdpdmVuRWRnZSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCIgKyB0aGlzLmVkZ2UucjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQgZm9yIFwiICsgdGhpcy5lZGdlKTtcbiAgICB9XG4gICAgcmVwT2soKSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKHRoaXMuZmlyc3QgIT0gdW5kZWZpbmVkKTtcbiAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkodGhpcy5zZWNvbmQgIT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgb3duZXI7XG4gICAgZWRnZTtcbiAgICBmaXJzdDtcbiAgICBzZWNvbmQ7XG59XG5leHBvcnRzLkVkZ2VWaWV3ID0gRWRnZVZpZXc7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJlZGdlLXZpZXdcIiwgRWRnZVZpZXcsIHsgZXh0ZW5kczogXCJwXCIgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRWRpdGFibGVNYXRoVmlldyA9IHZvaWQgMDtcbi8qKlxuICogRGlzcGxheXMgbWF0aCBhbmQgaXMgZWRpdGFibGUuXG4gKi9cbmNsYXNzIEVkaXRhYmxlTWF0aFZpZXcgZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIH1cbiAgICBzZXQgdmFsdWUoZSkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IGU7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gXCI8bWF0aCBkaXNwbGF5PSdibG9jayc+XCIgKyAoZT8udG9NYXRoWE1MKCkgPz8gXCJcIikgKyBcIjwvbWF0aD5cIjtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChsID0+IGwodGhpcy5fdmFsdWUpKTtcbiAgICAgICAgTWF0aEpheC50eXBlc2V0KFt0aGlzXSk7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0ZW5lciB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgbWF0aFxuICAgICAqIGluIHRoZSB2aWV3IGlzIGVkaXRlZC5cbiAgICAgKiBAcGFyYW0gbFxuICAgICAqL1xuICAgIGFkZEVkaXRMaXN0ZW5lcihsKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobCk7XG4gICAgfVxuICAgIGxpc3RlbmVycyA9IFtdO1xuICAgIF92YWx1ZSA9IG51bGw7XG59XG5leHBvcnRzLkVkaXRhYmxlTWF0aFZpZXcgPSBFZGl0YWJsZU1hdGhWaWV3O1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZWRpdGFibGUtbWF0aHZpZXdcIiwgRWRpdGFibGVNYXRoVmlldywgeyBleHRlbmRzOiBcImRpdlwiIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cGxhbmF0aW9uUG9wdXAgPSB2b2lkIDA7XG5jb25zdCBFeHByZXNzaW9uXzEgPSByZXF1aXJlKFwiLi4vZXhwcmVzc2lvbnMvRXhwcmVzc2lvblwiKTtcbmNvbnN0IE1hdGhNTEhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL01hdGhNTEhlbHBlcnNcIik7XG5jbGFzcyBFeHBsYW5hdGlvblBvcHVwIGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ1xuICAgICAqIEBwYXJhbSBvbkNsb3NlIENhbGxlZCBhZnRlciB1c2VyIGNsaWNrcyBjbG9zZSBidXR0b24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXJnLCBvbkNsb3NlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYXJnID0gYXJnO1xuICAgICAgICB0aGlzLm9uQ2xvc2UgPSBvbkNsb3NlO1xuICAgICAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2InKTtcbiAgICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNsb3NlQnV0dG9uLnRleHRDb250ZW50ID0gXCJDbG9zZVwiO1xuICAgICAgICBjbG9zZUJ1dHRvbi5zdHlsZS51c2VyU2VsZWN0ID0gXCJub25lXCI7XG4gICAgICAgIGNsb3NlQnV0dG9uLnN0eWxlLmZsb2F0ID0gXCJyaWdodFwiO1xuICAgICAgICB0aGlzLmFwcGVuZChjbG9zZUJ1dHRvbik7XG4gICAgICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGV4dC5pbm5lckhUTUwgPSBhcmcuYXJndW1lbnQgKyBcIjxicj5cIjtcbiAgICAgICAgaWYgKGFyZy5jbGFpbS5uIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24gJiYgYXJnLmNsYWltLm4xIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24pXG4gICAgICAgICAgICB0ZXh0LmlubmVySFRNTCArPSAoMCwgTWF0aE1MSGVscGVyc18xLmluTWF0aEJsb2NrKSgoMCwgTWF0aE1MSGVscGVyc18xLmluUm93KShhcmcuY2xhaW0ubi50b01hdGhYTUwoKSArIFwiIDxtbz5cIiArIGFyZy5jbGFpbS5yICsgXCI8L21vPiBcIiArIGFyZy5jbGFpbS5uMS50b01hdGhYTUwoKSkpICsgXCI8YnI+IERlcml2ZWQgZnJvbTogPGJyPlwiO1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VuZCBvZiBhcmcuZ3JvdW5kcykge1xuICAgICAgICAgICAgaWYgKGdyb3VuZCBpbnN0YW5jZW9mIEV4cHJlc3Npb25fMS5FeHByZXNzaW9uKVxuICAgICAgICAgICAgICAgIHRleHQuaW5uZXJIVE1MICs9ICgwLCBNYXRoTUxIZWxwZXJzXzEuaW5NYXRoKShncm91bmQudG9NYXRoWE1MKCkpICsgXCI8YnI+XCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcHBlbmQodGV4dCk7XG4gICAgICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgICB0aGlzLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGJsYWNrXCI7XG4gICAgICAgIHRoaXMuc3R5bGUuYm94U2hhZG93ID0gXCIwLjNjaCAwLjNjaCAwLjZjaCByZ2JhKDAsIDAsIDAsIDAuNSlcIjtcbiAgICAgICAgdGhpcy5zdHlsZS5wYWRkaW5nID0gXCIxY2hcIjtcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9IFwiZml0LWNvbnRlbnRcIjtcbiAgICAgICAgdGhpcy5zdHlsZS56SW5kZXggPSBcIjE1XCI7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBNYXRoSmF4LnR5cGVzZXQoW3RoaXNdKTtcbiAgICB9XG4gICAgYXJnO1xuICAgIG9uQ2xvc2U7XG59XG5leHBvcnRzLkV4cGxhbmF0aW9uUG9wdXAgPSBFeHBsYW5hdGlvblBvcHVwO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZXhwbGFuYXRpb24tcG9wdXBcIiwgRXhwbGFuYXRpb25Qb3B1cCwgeyBleHRlbmRzOiBcImRpdlwiIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cHJlc3Npb25Ob2RlVmlldyA9IHZvaWQgMDtcbmNvbnN0IEVkaXRhYmxlTWF0aFZpZXdfMSA9IHJlcXVpcmUoXCIuL0VkaXRhYmxlTWF0aFZpZXdcIik7XG5jb25zdCBHcmFwaE5vZGVWaWV3XzEgPSByZXF1aXJlKFwiLi9HcmFwaE5vZGVWaWV3XCIpO1xuLyoqXG4gKiBBIGdyYXBoIG5vZGUgdmlldyBmb3IgZXhwcmVzc2lvbiBub2Rlcy5cbiAqL1xuY2xhc3MgRXhwcmVzc2lvbk5vZGVWaWV3IGV4dGVuZHMgR3JhcGhOb2RlVmlld18xLkdyYXBoTm9kZVZpZXcge1xuICAgIGNvbnN0cnVjdG9yKG5vZGUsIHNldFN0eWxlKSB7XG4gICAgICAgIHN1cGVyKHNldFN0eWxlKTtcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICAgICAgdGhpcy5lZGl0YWJsZU1hdGhWaWV3ID0gbmV3IEVkaXRhYmxlTWF0aFZpZXdfMS5FZGl0YWJsZU1hdGhWaWV3KCk7XG4gICAgICAgIHRoaXMuZWRpdGFibGVNYXRoVmlldy52YWx1ZSA9IHRoaXMubm9kZTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLmVkaXRhYmxlTWF0aFZpZXcpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm5vZGUudG9VbmFtYmlnaW91c1N0cmluZygpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoXCJleHByZXNzaW9uXCIpO1xuICAgIH1cbiAgICBub2RlO1xuICAgIGVkaXRhYmxlTWF0aFZpZXc7XG59XG5leHBvcnRzLkV4cHJlc3Npb25Ob2RlVmlldyA9IEV4cHJlc3Npb25Ob2RlVmlldztcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImV4cHJlc3Npb24tbm9kZXZpZXdcIiwgRXhwcmVzc2lvbk5vZGVWaWV3LCB7IGV4dGVuZHM6IFwiZGl2XCIgfSk7XG5jb25zdCBjb2xvclVuaGVhbHRoeU5vZGVzID0gdHJ1ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HcmFwaE5vZGVWaWV3ID0gdm9pZCAwO1xuLyoqXG4gKiBBbiBodG1sIGVsZW1lbnQgdGhhdCByZXByZXNlbnRzIGEgbWF0aCBncmFwaCBub2RlLlxuICovXG5jbGFzcyBHcmFwaE5vZGVWaWV3IGV4dGVuZHMgSFRNTERpdkVsZW1lbnQge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHNldFN0eWxlIEZ1bmN0aW9uIHRoYXQgd2hlbiBjYWxsZWRcbiAgICAgKiAgc2hvdWxkIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgdmlldy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzZXRTdHlsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0eWxlLnBhZGRpbmcgPSBcIjFjaFwiO1xuICAgICAgICB0aGlzLnN0eWxlLndpZHRoID0gXCJmaXQtY29udGVudFwiO1xuICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IFwiZml0LWNvbnRlbnRcIjtcbiAgICAgICAgdGhpcy5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcbiAgICAgICAgc2V0U3R5bGUodGhpcyk7XG4gICAgfVxuICAgIHNldCBiYWNrZ3JvdW5kQ29sb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLkdyYXBoTm9kZVZpZXcgPSBHcmFwaE5vZGVWaWV3O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRvdWNoR2VzdHVyZVJlY29nbml6ZXIgPSB2b2lkIDA7XG4vKipcbiAqIEludGVycHJldCBjb21wbGljYXRlZCB0b3VjaCBnZXN0dXJlIGRhdGEuXG4gKi9cbmNsYXNzIFRvdWNoR2VzdHVyZVJlY29nbml6ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1vdmVMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5waW5jaExpc3RlbmVycyA9IFtdO1xuICAgIH1cbiAgICBhZGRNb3ZlTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5tb3ZlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIGEgcGluY2ggZ2VzdHVyZSBoYXMgYmVlbiBkZXRlY3RlZC5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGFrZXMgYSBjZW50ZXIgY29vcmRpbmF0ZSB0aGF0J3MgdGhlIGF2ZXJhZ2Ugb2YgdGhlIGZpbmdlciBwb3NpdGlvbnMsXG4gICAgICogICAgICAgICAgICAgIHRoZSBjaGFuZ2UgaW4gc2NhbGUgc2luY2UgdGhlIGxhc3QgY2FsbCBvbiAoMCwgaW5maW5pdHkpIHdoZXJlIDEgaXMgbm8gY2hhbmdlLFxuICAgICAqICAgICAgICAgICAgICBhbmQgdGhlIG51bWJlciBvZiBmaW5nZXJzIGluIHRoZSBnZXN0dXJlIChhbiBpbnRlZ2VyKS5cbiAgICAgKi9cbiAgICBhZGRQaW5jaExpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMucGluY2hMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNob3VsZCB0YWtlIGFsbCB0b3VjaCBldmVudHMgZnJvbSB0aGUgdmlldyB1c2luZyBpdC5cbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBwcm9jZXNzVG91Y2hEb3duKGV2ZW50KSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNob3VsZCB0YWtlIGFsbCB0b3VjaCBldmVudHMgZnJvbSB0aGUgdmlldyB1c2luZyBpdC5cbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBwcm9jZXNzVG91Y2hNb3ZlKGV2ZW50KSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hhbmdlZCBvZiBldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICAgICAgY2hhbmdlZC5jbGllbnRYO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNob3VsZCB0YWtlIGFsbCB0b3VjaCBldmVudHMgZnJvbSB0aGUgdmlldyB1c2luZyBpdC5cbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBwcm9jZXNzVG91Y2hFbmQoZXZlbnQpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvdWxkIHRha2UgYWxsIHRvdWNoIGV2ZW50cyBmcm9tIHRoZSB2aWV3IHVzaW5nIGl0LlxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIHByb2Nlc3NUb3VjaENhbmNlbChldmVudCkge1xuICAgIH1cbiAgICAvL3ByaXZhdGUgbGFzdFg6IE1hcDxUb3VjaFxuICAgIG1vdmVMaXN0ZW5lcnM7XG4gICAgcGluY2hMaXN0ZW5lcnM7XG59XG5leHBvcnRzLlRvdWNoR2VzdHVyZVJlY29nbml6ZXIgPSBUb3VjaEdlc3R1cmVSZWNvZ25pemVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVpUHJlZmVyZW5jZXMgPSB2b2lkIDA7XG5jbGFzcyBVSVByZWZlcmVuY2VzIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gY2FsbGVkIHdoZW5ldmVyIGEgdWkgcHJlZmVyZW5jZVxuICAgICAqIGlzIGNoYW5nZWQuXG4gICAgICovXG4gICAgb25VcGRhdGUoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICAgIC8vIEdldHRlcnMgYW5kIFNldHRlcnNcbiAgICAvKipcbiAgICAgKiBCYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZ3JhcGggZWRnZSBkZW5vdGluZ1xuICAgICAqIGVxdWFsaXR5IGJldHdlZW4gdHdvIGV4cHJlc3Npb25zLlxuICAgICAqIENzcyB2YWx1ZS5cbiAgICAgKi9cbiAgICBnZXQgZWRnZUVxdWFsc0JhY2tncm91bmRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VkZ2VFcXVhbHNCYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuICAgIHNldCBlZGdlRXF1YWxzQmFja2dyb3VuZENvbG9yKHZhbCkge1xuICAgICAgICB0aGlzLl9lZGdlRXF1YWxzQmFja2dyb3VuZENvbG9yID0gdmFsO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcy5mb3JFYWNoKGMgPT4gYygpKTtcbiAgICB9XG4gICAgLy8gUHJlZmVyZW5jZSBWYWx1ZXNcbiAgICBfZWRnZUVxdWFsc0JhY2tncm91bmRDb2xvciA9IFwibm9uZVwiO1xuICAgIGNhbGxiYWNrcyA9IFtdO1xufVxuZXhwb3J0cy51aVByZWZlcmVuY2VzID0gbmV3IFVJUHJlZmVyZW5jZXMoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XZWJHcmFwaFZpZXcgPSB2b2lkIDA7XG5jb25zdCBBcmd1bWVudF8xID0gcmVxdWlyZShcIi4uL0FyZ3VtZW50XCIpO1xuY29uc3QgRXhwcmVzc2lvbl8xID0gcmVxdWlyZShcIi4uL2V4cHJlc3Npb25zL0V4cHJlc3Npb25cIik7XG5jb25zdCBHcmFwaE1pbmlwdWxhdG9yXzEgPSByZXF1aXJlKFwiLi4vR3JhcGhNaW5pcHVsYXRvclwiKTtcbmNvbnN0IGFzc2VydF8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXNzZXJ0XCIpO1xuY29uc3QgVG91Y2hHZXN0dXJlUmVjb2duaXplcl8xID0gcmVxdWlyZShcIi4vVG91Y2hHZXN0dXJlUmVjb2duaXplclwiKTtcbmNvbnN0IEVkZ2VWaWV3XzEgPSByZXF1aXJlKFwiLi9FZGdlVmlld1wiKTtcbmNvbnN0IEV4cHJlc3Npb25Ob2RlVmlld18xID0gcmVxdWlyZShcIi4vRXhwcmVzc2lvbk5vZGVWaWV3XCIpO1xuY29uc3QgQXJndW1lbnROb2RlVmlld18xID0gcmVxdWlyZShcIi4vQXJndW1lbnROb2RlVmlld1wiKTtcbmNvbnN0IEdyYXBoTm9kZVZpZXdfMSA9IHJlcXVpcmUoXCIuL0dyYXBoTm9kZVZpZXdcIik7XG5jb25zdCBFeHBsYW5hdGlvblBvcHVwXzEgPSByZXF1aXJlKFwiLi9FeHBsYW5hdGlvblBvcHVwXCIpO1xuLyoqXG4gKiBBIHVpIGVsZW1lbnQgdGhhdCB3aWxsIGRpc3BsYXkgYSBtYXRoIGdyYXBoIGluIGEgd2ViLlxuICovXG5jbGFzcyBXZWJHcmFwaFZpZXcgZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGdyYXBoIE11c3QgYmUgZnVsbHkgY29ubmVjdGVkLlxuICAgICAqIEBwYXJhbSByb290cyBOb24tZW1wdHkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ3JhcGgsIHJvb3RzLCBjb25maWcgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ncmFwaCA9IGdyYXBoO1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLm9mZnNldFggPSAwO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSAwO1xuICAgICAgICB0aGlzLm5vZGVQb3NpdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuZWRnZVBvc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5lZGdlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5yb290Tm9kZXMgPSBuZXcgU2V0KHJvb3RzKTtcbiAgICAgICAgdGhpcy5yaW5nRWxlbWVudHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMucmluZ1Bvc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5leHBsYW5hdGlvblBvcHVwcyA9IFtdO1xuICAgICAgICBpZiAoY29uZmlnICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zaG93QXJndW1lbnRzID0gY29uZmlnLnNob3dBcmd1bWVudHM7XG4gICAgICAgICAgICB0aGlzLmRyYXdFZGdlTGluZXMgPSBjb25maWcuZHJhd0VkZ2VMaW5lcztcbiAgICAgICAgICAgIHRoaXMuZGVidWdDb3JuZXJFbmFibGVkID0gY29uZmlnLmRlYnVnQ29ybmVyRW5hYmxlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0eWxlLmNsaXBQYXRoID0gXCJwb2x5Z29uKDAlIDAlLCAxMDAlIDAlLCAxMDAlIDEwMCUsIDAlIDEwMCUpXCI7XG4gICAgICAgIHRoaXMuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgIHRoaXMuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50b3VjaERvd24gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5tb3VzZURvd24pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRYICs9IGV2ZW50Lm1vdmVtZW50WCAvIHRoaXMuc2NhbGU7XG4gICAgICAgICAgICB0aGlzLm9mZnNldFkgKz0gZXZlbnQubW92ZW1lbnRZIC8gdGhpcy5zY2FsZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlT2Zmc2V0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcyk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW91c2VQb3MgPSBQb2ludChldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZKTtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlRGVsdGEgPSBNYXRoLnBvdygwLjgsIGV2ZW50LmRlbHRhWSAvIDM2MCk7XG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gc2NhbGVEZWx0YSAqIHRoaXMuc2NhbGU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU9mZnNldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdlc3R1cmVSZWNvZ25pemVyID0gbmV3IFRvdWNoR2VzdHVyZVJlY29nbml6ZXJfMS5Ub3VjaEdlc3R1cmVSZWNvZ25pemVyKCk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZG93blwiLCB0aGlzLmdlc3R1cmVSZWNvZ25pemVyLnByb2Nlc3NUb3VjaERvd24pO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLmdlc3R1cmVSZWNvZ25pemVyLnByb2Nlc3NUb3VjaEVuZCk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIHRoaXMuZ2VzdHVyZVJlY29nbml6ZXIucHJvY2Vzc1RvdWNoQ2FuY2VsKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuZ2VzdHVyZVJlY29nbml6ZXIucHJvY2Vzc1RvdWNoTW92ZSk7XG4gICAgICAgIHRoaXMuZ2VzdHVyZVJlY29nbml6ZXIuYWRkUGluY2hMaXN0ZW5lcigoY2VudGVyLCBzY2FsZURlbHRhLCBmaW5nZXJzKSA9PiB7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlcE9rKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBhIGZ1bmN0aW9uIHRoYXQgZGV0ZXJtaW5lcyB0aGUgY29sb3Igb2YgYSBub2RlLlxuICAgICAqIEBwYXJhbSBjb2xvckZuXG4gICAgICovXG4gICAgc2V0Tm9kZUNvbG9yaW5nU2NoZW1lKGNvbG9yRm4pIHtcbiAgICAgICAgdGhpcy5ub2RlQ29sb3JGbiA9IGNvbG9yRm47XG4gICAgICAgIHRoaXMucHJvcG9nYXRlU2V0dGluZ3NUb05vZGVzKCk7XG4gICAgfVxuICAgIG5vZGVDb2xvckZuID0gKG4pID0+IFwibGlnaHRibHVlXCI7XG4gICAgcHJvcG9nYXRlU2V0dGluZ3NUb05vZGVzKCkge1xuICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goKHZpZXcsIG5vZGUpID0+IHtcbiAgICAgICAgICAgIHZpZXcuYmFja2dyb3VuZENvbG9yID0gdGhpcy5ub2RlQ29sb3JGbihub2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgaWYgdGhlIHZpZXcgc2hvdWxkIHNob3cgYXJndW1lbnQgbm9kZXMgYXMgbm9kZXMuXG4gICAgICogRmFsc2UgYnkgZGVmYXVsdC5cbiAgICAgKiBAcGFyYW0gdmFsXG4gICAgICovXG4gICAgc2V0U2hvd0FyZ3VtZW50cyh2YWwpIHtcbiAgICAgICAgdGhpcy5zaG93QXJndW1lbnRzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWFkR3JhcGgoKTtcbiAgICAgICAgdGhpcy5hcnJhbmdlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlT2Zmc2V0KCk7XG4gICAgfVxuICAgIGdldCBjZW50ZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0aGlzLm9mZnNldFdpZHRoIC8gMixcbiAgICAgICAgICAgIHk6IHRoaXMub2Zmc2V0SGVpZ2h0IC8gMixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9sbG93cyB0aGUgc2hvd0FyZ3VtZW50IHNldHRpbmcuXG4gICAgICogUG9wdWxhdGVzIHRoaXMubm9kZXMsIHRoaXMuZWRnZXMsXG4gICAgICogYWRkcyB0aGUgY3JlYXRlZCB2aWV3cyB0byB0aGUgc2hhZG93IGRvbVxuICAgICAqIHRvIG1hdGNoIHRoZSBncmFwaC5cbiAgICAgKiBSZW1vdmVzIGFueSBwcmUtZXhpc3RpbmcgZWxlbWVudHMgZnJvbSB0aGUgc2hhZG93IGRvbS5cbiAgICAgKi9cbiAgICByZWFkR3JhcGgoKSB7XG4gICAgICAgIC8vIENsZWFyIGV4aXN0aW5nXG4gICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaCgodmlldywgbm9kZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZCh2aWV3KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm9kZXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5lZGdlcy5mb3JFYWNoKCh2aWV3LCBlZGdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKHZpZXcpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lZGdlcy5jbGVhcigpO1xuICAgICAgICAvLyBGZXRjaCBub2Rlc1xuICAgICAgICB0aGlzLmdyYXBoLmdldE5vZGVzKCkuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gbmV3IEV4cHJlc3Npb25Ob2RlVmlld18xLkV4cHJlc3Npb25Ob2RlVmlldyhub2RlLCB0aGlzLmJhc2VOb2RlU3R5bGUpO1xuICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5zZXQobm9kZSwgdmlldyk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQodmlldyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgQXJndW1lbnRfMS5Bcmd1bWVudCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaG93QXJndW1lbnRzKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBBcmd1bWVudE5vZGVWaWV3XzEuQXJndW1lbnROb2RlVmlldyhub2RlLCB0aGlzLmJhc2VOb2RlU3R5bGUpO1xuICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5zZXQobm9kZSwgdmlldyk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQodmlldyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR3JhcGggY29udGFpbnMgbm9kZSBXZWJHcmFwaFZpZXcgY2FuJ3QgcHJvY2Vzcy5cIik7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBGZXRjaCBlZGdlc1xuICAgICAgICBHcmFwaE1pbmlwdWxhdG9yXzEuR3JhcGhNaW5pcHVsYXRvci5kcm9wU3ltbWV0cmljKHRoaXMuZ3JhcGguZ2V0RWRnZXMoKSkuZmlsdGVyKGVkZ2UgPT4ge1xuICAgICAgICAgICAgLy8gT25seSBjb25zaWRlciBlZGdlcyBmb3Igd2hpY2ggd2UgaGF2ZSBib3RoIGVuZHBvaW50cyBvbiB0aGUgdmlld1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMuaGFzKGVkZ2UubikgJiYgdGhpcy5ub2Rlcy5oYXMoZWRnZS5uMSk7XG4gICAgICAgIH0pLmZvckVhY2goZWRnZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gbmV3IEVkZ2VWaWV3XzEuRWRnZVZpZXcodGhpcywgZWRnZSk7XG4gICAgICAgICAgICB2aWV3LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgdGhpcy5lZGdlcy5zZXQoZWRnZSwgdmlldyk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZCh2aWV3KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvcG9nYXRlU2V0dGluZ3NUb05vZGVzKCk7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnQ29ybmVyRW5hYmxlZCkge1xuICAgICAgICAgICAgY29uc3QgY29ybmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgY29ybmVyLmlubmVySFRNTCA9IFwiR3JhcGggTm9kZXM6IFwiICsgdGhpcy5ncmFwaC5nZXROb2RlcygpLnNpemUgKyBcIjxicj5cIlxuICAgICAgICAgICAgICAgICsgXCJWaXNpYmxlIE5vZGVzOiBcIiArIHRoaXMubm9kZXMuc2l6ZSArIFwiPGJyPlwiXG4gICAgICAgICAgICAgICAgKyBcIkdyYXBoIEVkZ2VzOiBcIiArIHRoaXMuZ3JhcGguZ2V0RWRnZXMoKS5zaXplICsgXCI8YnI+XCJcbiAgICAgICAgICAgICAgICArIFwiVmlzaWJsZSBFZGdlczogXCIgKyB0aGlzLmVkZ2VzLnNpemUgKyBcIjxicj5cIjtcbiAgICAgICAgICAgIGNvcm5lci5zdHlsZS56SW5kZXggPSBcIjEwMFwiO1xuICAgICAgICAgICAgY29ybmVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcbiAgICAgICAgICAgIGNvcm5lci5zdHlsZS53aWR0aCA9IFwiZml0LWNvbnRlbnRcIjtcbiAgICAgICAgICAgIGNvcm5lci5zdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgICAgICAgICAgIGNvcm5lci5zdHlsZS5wYWRkaW5nID0gXCIxY2hcIjtcbiAgICAgICAgICAgIGNvcm5lci5zdHlsZS5ib3JkZXIgPSBcImJsYWNrIDFweCBzb2xpZFwiO1xuICAgICAgICAgICAgY29ybmVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQoY29ybmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcE9rKCk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnJlYWRHcmFwaCgpO1xuICAgICAgICB0aGlzLmFycmFuZ2UoKTtcbiAgICAgICAgdGhpcy51cGRhdGVPZmZzZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGljayBwbGFjZXMgZm9yIGFsbCB0aGUgbm9kZXMvZWRnZXMgb24gdGhlIHNjcmVlbi5cbiAgICAgKiBQb3B1bGF0ZXMgdGhlIHBvc2l0aW9uKiByZXAgdmFycy5cbiAgICAgKi9cbiAgICBhcnJhbmdlKCkge1xuICAgICAgICB0aGlzLm5vZGVQb3NpdGlvbnMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5lZGdlUG9zaXRpb25zLmNsZWFyKCk7XG4gICAgICAgIHRoaXMucmluZ1Bvc2l0aW9ucy5jbGVhcigpO1xuICAgICAgICB0aGlzLnJpbmdFbGVtZW50cy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZChlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmluZ0VsZW1lbnRzLmNsZWFyKCk7XG4gICAgICAgIC8vIFBsYWNlIG5vZGVzIG9uIGEgc2VyaWVzIG9mIHJpbmdzIGZyb20gdGhlIGNlbnRlciB1c2luZyB0aGVpciBkZXB0aCBpbiB0aGUgZ3JhcGhcbiAgICAgICAgY29uc3QgbGV2ZWxzID0gR3JhcGhNaW5pcHVsYXRvcl8xLkdyYXBoTWluaXB1bGF0b3IuZ2V0TGV2ZWxzKHRoaXMuZ3JhcGgsIHRoaXMucm9vdE5vZGVzLCBub2RlID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRXhwcmVzc2lvbl8xLkV4cHJlc3Npb24pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgQXJndW1lbnRfMS5Bcmd1bWVudClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93QXJndW1lbnRzO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5ldyB0eXBlIG9mIG5vZGVcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbWF4RGVwdGggPSAwO1xuICAgICAgICBsZXZlbHMuZm9yRWFjaCgoXywgZGVwdGgpID0+IHtcbiAgICAgICAgICAgIG1heERlcHRoID0gTWF0aC5tYXgobWF4RGVwdGgsIGRlcHRoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHsgeDogKHRoaXMuY2xpZW50V2lkdGggLyAyKSwgeTogdGhpcy5jbGllbnRIZWlnaHQgLyAyIH07XG4gICAgICAgIGxldCBsYXN0UmFkaXVzID0gMDsgLy9weFxuICAgICAgICAvLyBSZWNvcmQgdGhlIHBvc2l0aW9ucyBvZiB0aGUgbGFzdCByaW5nIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vIG1ha2UgdGhlIGdyYXBoIGFwcGVhciBwbGFuYXItaXNoLiBNYXBzIG5vZGVzIHRvIGFuZ2xlXG4gICAgICAgIC8vIG9mZnNldCBpbiByYWRpYW5zLiBBbmdsZSBtdXN0IGJlIDwgMipQaVxuICAgICAgICBsZXQgbGFzdFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGRlcHRoID0gMDsgZGVwdGggPCBtYXhEZXB0aCArIDE7IGRlcHRoKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gbGV2ZWxzLmdldChkZXB0aCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGN1bGF0aW5nIHRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZVxuICAgICAgICAgICAgICogU3VwcG9zZSBldmVyeSByb290IG5vZGUgb24gdGhlIHN0YXJ0aW5nIGNpcmNsZSByZXF1aXJlc1xuICAgICAgICAgICAgICogYSBjaXJjdWxhciBzcGFjZSB0byBiZSBkcmF3biB3aXRoIHJhZGl1cyBub2RlUmFkaXVzXG4gICAgICAgICAgICAgKiBBIHN0YXJ0aW5nIGNpcmNsZSB3aXRoIG4gb2YgdGhlc2Ugbm9kZXMgd291bGQgcmVxdWlyZSBhXG4gICAgICAgICAgICAgKiBjaXJjdW1mZXJlbmNlIG9mIG4gKiAybm9kZVJhZGl1cy5cbiAgICAgICAgICAgICAqIFRoZSBjaXJjdW1mZXJlbmNlIG9mIGEgY2lyY2xlIGNhbiBiZSBleHByZXNzZWRcbiAgICAgICAgICAgICAqIGFzIDIqcGkqclxuICAgICAgICAgICAgICogPT4gciA9IG4gKiAyICogc21hbGxSIC8gKDIgKiBwaSlcbiAgICAgICAgICAgICAqICAgICAgPSBuICogc21hbGxSIC8gcGlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3Qgbm9kZVJhZGl1cyA9IDcwOyAvLyBwaXhlbHNcbiAgICAgICAgICAgIGxldCByYWRpdXMgPSBNYXRoLm1heChub2Rlcy5zaXplICogbm9kZVJhZGl1cyAvIE1hdGguUEksIGxhc3RSYWRpdXMgKyAoMyAqIG5vZGVSYWRpdXMpKTtcbiAgICAgICAgICAgIGlmIChkZXB0aCA9PSAwICYmIG5vZGVzLnNpemUgPT0gMSlcbiAgICAgICAgICAgICAgICByYWRpdXMgPSAwO1xuICAgICAgICAgICAgbGFzdFJhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgICAgIC8vIE1pbmltdW0gcmFkaWFucyBuZWNlc3NhcnkgdG8ga2VlcCBub2RlcyBuZWNlc3NhcmlseSBzcGFjZWQgYXQgdGhlIGdpdmVuIGRlcHRoXG4gICAgICAgICAgICBjb25zdCBzdGVwU2l6ZSA9ICgyICogTWF0aC5QSSkgLyBNYXRoLm1heChub2Rlcy5zaXplLCByYWRpdXMgKiAyICogTWF0aC5QSSAvICgyICogMS4yICogbm9kZVJhZGl1cykpO1xuICAgICAgICAgICAgLy8gTWFwcyBub2RlcyB0byBhbmdsZXMgKHJhZClcbiAgICAgICAgICAgIGNvbnN0IG5zID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgaWYgKGxhc3RQb3NpdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkZWFsQW5nbGVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBub2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBkbyBub3QgYXNzdW1lIHRoZSBncmFwaCBpcyBhIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgLy8gQXNzdW1lIHRoZSBub2RlIGhhcyBhIHBhcmVudFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdyYXBoLmdldE5laWdoYm9ycyhuLCBcImluXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKG4gPT4gbGV2ZWxzLmdldChkZXB0aCAtIDEpLmhhcyhuKSAmJiBsYXN0UG9zaXRpb25zLmhhcyhuKSlbMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkZWFsQW5nbGUgPSBsYXN0UG9zaXRpb25zLmdldChwYXJlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZGVhbEFuZ2xlcy5zZXQobiwgaWRlYWxBbmdsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKGlkZWFsQW5nbGVzLnNpemUgPT0gbm9kZXMuc2l6ZSk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5zaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIGlkZWFsQW5nbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKDAsIGFzc2VydF8xLmZvcl9zb21lKShucywgcCA9PiBNYXRoLmFicyhwWzFdIC0gcGFpclsxXSkgPCBzdGVwU2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWlyWzFdICs9IHN0ZXBTaXplICogYSAqICgoLTEpICoqIChhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc2V0KHBhaXJbMF0sIHBhaXJbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IFsuLi5ub2Rlc107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5zaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbnMuc2V0KHRlbXBbaV0sIGkgKiBzdGVwU2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkobnMuc2l6ZSA9PSBub2Rlcy5zaXplLCBcIk9ubHkgcHJvZHVjZWQgXCIgKyBucy5zaXplICsgXCIgbm9kZXMgaW5zdGVhZCBvZiBcIiArIG5vZGVzLnNpemUpO1xuICAgICAgICAgICAgbGFzdFBvc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIG5zLmZvckVhY2goKGFuZ2xlLCBub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IHRoaXMubm9kZXMuZ2V0KG5vZGUpO1xuICAgICAgICAgICAgICAgIC8vdmlldy5zdHlsZS53aWR0aCA9IFwiXCIgKyBzbWFsbFIgKyBcInB4XCJcbiAgICAgICAgICAgICAgICAvL3ZpZXcuc3R5bGUuaGVpZ2h0ID0gXCJcIiArIHNtYWxsUiArIFwicHhcIlxuICAgICAgICAgICAgICAgIGxhc3RQb3NpdGlvbnMuc2V0KG5vZGUsIGFuZ2xlKTtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGNhcnRlc2lhbiBwb2ludCBmcm9tIHRoZSByYWRpdXMgYW5kIGFuZ2xlXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSArIGNlbnRlci54O1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkgKyBjZW50ZXIueTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVQb3NpdGlvbnMuc2V0KHZpZXcsIFBvaW50KHgsIHkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkoKDAsIGFzc2VydF8xLmZvcl9hbGwpKGxhc3RQb3NpdGlvbnMudmFsdWVzKCksIHBvcyA9PiBwb3MgIT0gdW5kZWZpbmVkICYmIHBvcyAhPSBudWxsKSk7XG4gICAgICAgICAgICAvL2Fzc2VydChsYXN0UG9zaXRpb25zLnNpemUgPiAwKVxuICAgICAgICAgICAgLy9hc3NlcnQoZm9yX2FsbChub2RlcywgbGFzdFBvc2l0aW9ucy5oYXMpKVxuICAgICAgICAgICAgY29uc3QgcmluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICByaW5nLnN0eWxlLmJvcmRlciA9IFwibGlnaHRncmF5IHNvbGlkIDAuM2NoXCI7XG4gICAgICAgICAgICByaW5nLnN0eWxlLmJvcmRlclJhZGl1cyA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgcmluZy5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgIHJpbmcuc3R5bGUuekluZGV4ID0gUklOR19aO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChyaW5nKTtcbiAgICAgICAgICAgIHRoaXMucmluZ0VsZW1lbnRzLmFkZChyaW5nKTtcbiAgICAgICAgICAgIHRoaXMucmluZ1Bvc2l0aW9ucy5zZXQocmluZywgeyByYWRpdXM6IHJhZGl1cyB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3cgYXJhbmdlIHRoZSBlZGdlc1xuICAgICAgICB0aGlzLmVkZ2VzLmZvckVhY2goKHZpZXcsIGVkZ2UpID0+IHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIG1pZGRsZSBvZiB0aGUgdHdvIGVuZHB0c1xuICAgICAgICAgICAgY29uc3QgZmlyc3RYID0gdGhpcy5ub2RlUG9zaXRpb25zLmdldCh0aGlzLm5vZGVzLmdldChlZGdlLm4pKS54O1xuICAgICAgICAgICAgY29uc3QgZmlyc3RZID0gdGhpcy5ub2RlUG9zaXRpb25zLmdldCh0aGlzLm5vZGVzLmdldChlZGdlLm4pKS55O1xuICAgICAgICAgICAgY29uc3Qgc2Vjb25kWCA9IHRoaXMubm9kZVBvc2l0aW9ucy5nZXQodGhpcy5ub2Rlcy5nZXQoZWRnZS5uMSkpLng7XG4gICAgICAgICAgICBjb25zdCBzZWNvbmRZID0gdGhpcy5ub2RlUG9zaXRpb25zLmdldCh0aGlzLm5vZGVzLmdldChlZGdlLm4xKSkueTtcbiAgICAgICAgICAgIGNvbnN0IHggPSAoZmlyc3RYICsgc2Vjb25kWCkgLyAyO1xuICAgICAgICAgICAgY29uc3QgeSA9IChmaXJzdFkgKyBzZWNvbmRZKSAvIDI7XG4gICAgICAgICAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoc2Vjb25kWSAtIGZpcnN0WSwgc2Vjb25kWCAtIGZpcnN0WCk7XG4gICAgICAgICAgICB0aGlzLmVkZ2VQb3NpdGlvbnMuc2V0KHZpZXcsIHsgeDogeCwgeTogeSwgYW5nbGU6IGFuZ2xlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGRyYXcgcG9zaXRpb24gb2YgdGhlIG5vZGVzIG9uIHRoZSBzY3JlZW5cbiAgICAgKiB0byBtYXRjaCB0aGUgb2Zmc2V0IGluIHJlcC4gQXNzdW1lcyBhbGwgdmlld3MgaGF2ZSBhIHBvc2l0aW9uXG4gICAgICogc3RvcmVkIGluIHRoZSByZXAuIENhbGwgYXJyYW5nZSgpIGZpcnN0LlxuICAgICAqIEFsc28gYXBwbGllcyB0aGUgc2NhbGUgZmFjdG9yIHRvIHRoZSBmaW5hbCBkcmF3IHBvc2l0aW9ucyxcbiAgICAgKiBpbnZpc2libGUgdG8gZXZlcnlvbmUgZWxzZS5cbiAgICAgKi9cbiAgICB1cGRhdGVPZmZzZXQoKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuc2NhbGU7XG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5U2NhbGUoaSkge1xuICAgICAgICAgICAgcmV0dXJuIFBvaW50KCgoaS54KSAtIGNlbnRlci54KSAqIHNjYWxlICsgY2VudGVyLngsICgoaS55KSAtIGNlbnRlci55KSAqIHNjYWxlICsgY2VudGVyLnkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm9kZVBvc2l0aW9ucy5mb3JFYWNoKChwb3MsIHZpZXcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkanVzdGVkID0gYXBwbHlTY2FsZSh7XG4gICAgICAgICAgICAgICAgeDogcG9zLnggKyB0aGlzLm9mZnNldFgsXG4gICAgICAgICAgICAgICAgeTogcG9zLnkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpZXcuc3R5bGUubGVmdCA9IFwiXCIgKyAoYWRqdXN0ZWQueCAtICgwLjUgKiB2aWV3Lm9mZnNldFdpZHRoKSkgKyBcInB4XCI7XG4gICAgICAgICAgICB2aWV3LnN0eWxlLnRvcCA9IFwiXCIgKyAoYWRqdXN0ZWQueSAtICgwLjUgKiB2aWV3Lm9mZnNldEhlaWdodCkpICsgXCJweFwiO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lZGdlUG9zaXRpb25zLmZvckVhY2goKHBvcywgdmlldykgPT4ge1xuICAgICAgICAgICAgdmlldy5zZXRBbmdsZShwb3MuYW5nbGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHJhd0VkZ2VMaW5lcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0UG9zID0gdGhpcy5ub2RlUG9zaXRpb25zLmdldCh0aGlzLm5vZGVzLmdldCh2aWV3LmZpcnN0KSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vjb25kUG9zID0gdGhpcy5ub2RlUG9zaXRpb25zLmdldCh0aGlzLm5vZGVzLmdldCh2aWV3LnNlY29uZCkpO1xuICAgICAgICAgICAgICAgIHZpZXcud2lkdGggPSBcIlwiICsgKHNjYWxlICogTWF0aC5oeXBvdChzZWNvbmRQb3MueCAtIGZpcnN0UG9zLngsIHNlY29uZFBvcy55IC0gZmlyc3RQb3MueSkpICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUuYm9yZGVyQm90dG9tID0gXCJibGFjayAwLjFjaCBzb2xpZFwiO1xuICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUuYm9yZGVyVG9wID0gXCJibGFjayAwLjFjaCBzb2xpZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmlldy53aWR0aCA9IFwiZml0LWNvbnRlbnRcIjtcbiAgICAgICAgICAgICAgICB2aWV3LnN0eWxlLmJvcmRlckJvdHRvbSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIHZpZXcuc3R5bGUuYm9yZGVyVG9wID0gXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhZGp1c3RlZCA9IGFwcGx5U2NhbGUoe1xuICAgICAgICAgICAgICAgIHg6IHBvcy54ICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHk6IHBvcy55ICsgdGhpcy5vZmZzZXRZLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2aWV3LnN0eWxlLmxlZnQgPSBcIlwiICsgKGFkanVzdGVkLnggLSAoMC41ICogdmlldy5vZmZzZXRXaWR0aCkpICsgXCJweFwiO1xuICAgICAgICAgICAgdmlldy5zdHlsZS50b3AgPSBcIlwiICsgKGFkanVzdGVkLnkgLSAoMC41ICogdmlldy5vZmZzZXRIZWlnaHQpKSArIFwicHhcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE92ZXJsYXkgZWxlbWVudHMgY2hhbmdlIHNpemUgd2l0aCBzY2FsZVxuICAgICAgICB0aGlzLnJpbmdQb3NpdGlvbnMuZm9yRWFjaCgocG9zLCB2aWV3KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGp1c3RlZENlbnRlclBvcyA9IGFwcGx5U2NhbGUoe1xuICAgICAgICAgICAgICAgIHg6IGNlbnRlci54ICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRlci55ICsgdGhpcy5vZmZzZXRZLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2aWV3LnN0eWxlLmxlZnQgPSBcIlwiICsgKGFkanVzdGVkQ2VudGVyUG9zLnggLSAocG9zLnJhZGl1cyAqIHNjYWxlKSkgKyBcInB4XCI7XG4gICAgICAgICAgICB2aWV3LnN0eWxlLnRvcCA9IFwiXCIgKyAoYWRqdXN0ZWRDZW50ZXJQb3MueSAtIChwb3MucmFkaXVzICogc2NhbGUpKSArIFwicHhcIjtcbiAgICAgICAgICAgIHZpZXcuc3R5bGUud2lkdGggPSBcIlwiICsgcG9zLnJhZGl1cyAqIDIgKiBzY2FsZSArIFwicHhcIjtcbiAgICAgICAgICAgIHZpZXcuc3R5bGUuYXNwZWN0UmF0aW8gPSBcIjFcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwbGFuYXRpb25Qb3B1cHMuZm9yRWFjaCh2YWwgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IHZhbC5lO1xuICAgICAgICAgICAgY29uc3QgcG9zID0gdmFsLnBvcztcbiAgICAgICAgICAgIGNvbnN0IGFkanVzdGVkID0gYXBwbHlTY2FsZSh7XG4gICAgICAgICAgICAgICAgeDogcG9zLnggKyB0aGlzLm9mZnNldFgsXG4gICAgICAgICAgICAgICAgeTogcG9zLnkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpZXcuc3R5bGUubGVmdCA9IFwiXCIgKyAoYWRqdXN0ZWQueCAtICgwLjUgKiB2aWV3Lm9mZnNldFdpZHRoKSkgKyBcInB4XCI7XG4gICAgICAgICAgICB2aWV3LnN0eWxlLnRvcCA9IFwiXCIgKyAoYWRqdXN0ZWQueSAtICgwLjUgKiB2aWV3Lm9mZnNldEhlaWdodCkpICsgXCJweFwiO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXAgZnJvbSByZWxhdGl2ZSBzY3JlZW4gY29vcmRpbmF0ZXMgKHdoZXJlIHRsIG9mIHRoaXMgdmlldyBpcyAoMCwwKSlcbiAgICAgKiB0byB0aGUgaW50ZXJuYWwgY29vcmRpbmF0ZSBzeXN0ZW0gd2UncmUgdXNpbmcuXG4gICAgICovXG4gICAgZ2V0SW50ZXJuYWxQb3MocGl4ZWxQb3MpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5zY2FsZTtcbiAgICAgICAgcmV0dXJuIFBvaW50KChwaXhlbFBvcy54IC0gY2VudGVyLngpIC8gc2NhbGUgKyBjZW50ZXIueCAtIHRoaXMub2Zmc2V0WCwgKHBpeGVsUG9zLnkgLSBjZW50ZXIueSkgLyBzY2FsZSArIGNlbnRlci55IC0gdGhpcy5vZmZzZXRZKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhY3QgdG8gYW4gZWRnZSBiZWluZyBjbGlja2VkLlxuICAgICAqIEBwYXJhbSB2aWV3IEluIHRoaXMgdmlld1xuICAgICAqIEBwYXJhbSBldmVudCBUaGUgY2xpY2sgZXZlbnRcbiAgICAgKi9cbiAgICBlZGdlQ2xpY2tlZCh2aWV3LCBldmVudCkge1xuICAgICAgICAvLyBUT0RPOiBEb24ndCBhbGxvdyBkdXBsaWF0ZSBleHBsYW5hdGlvbiBwb3B1cHNcbiAgICAgICAgaWYgKHZpZXcuZWRnZSBpbnN0YW5jZW9mIEFyZ3VtZW50XzEuQXJndW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvcHVwID0gbmV3IEV4cGxhbmF0aW9uUG9wdXBfMS5FeHBsYW5hdGlvblBvcHVwKHZpZXcuZWRnZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQocG9wdXApO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5leHBsYW5hdGlvblBvcHVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5leHBsYW5hdGlvblBvcHVwc1tpXS5lID09PSBwb3B1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBsYW5hdGlvblBvcHVwcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjb25zdCByZWFsdGl2ZVggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVZID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgICAgICAgLy9UT0RPOiBUaGUgcG9zaXRpb24gaXNuJ3QgY29ycmVjdFxuICAgICAgICAgICAgLy9UT0RPOiBBbGdvcml0aG0gZm9yIHBpY2tpbmcgd2hlcmUgd2Ugc2hvdWxkIHB1dCB0aGUgcG9wdXAgc28gaXQgc3RheXMgb3V0XG4gICAgICAgICAgICAvLyBvZiB0aGUgd2F5IG9mIHRoZSBncmFwaFxuICAgICAgICAgICAgdGhpcy5leHBsYW5hdGlvblBvcHVwcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlOiBwb3B1cCxcbiAgICAgICAgICAgICAgICBwb3M6IHRoaXMuZ2V0SW50ZXJuYWxQb3MoUG9pbnQocmVhbHRpdmVYLCByZWxhdGl2ZVkpKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9wdXAuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZChwb3B1cCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU9mZnNldCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVvcmRlclZpZXdTdGFjayh2aWV3KTtcbiAgICAgICAgdGhpcy5yZXBPaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHotaW5kZXggb2YgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgZ3JhcGhcbiAgICAgKiBwdXR0aW5nIHRoZSBnaXZlbiByb290IG9uIHRvcCBhbmQgaXQncyBuZWlnaGJvcnNcbiAgICAgKiByaWdodCBiZW5lYXRoIGl0IGV0Yy5cbiAgICAgKiBAcGFyYW0gcm9vdFxuICAgICAqL1xuICAgIHJlb3JkZXJWaWV3U3RhY2socm9vdCkge1xuICAgICAgICBpZiAocm9vdCBpbnN0YW5jZW9mIEdyYXBoTm9kZVZpZXdfMS5HcmFwaE5vZGVWaWV3KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgICAgICBpZiAocm9vdCBpbnN0YW5jZW9mIEVkZ2VWaWV3XzEuRWRnZVZpZXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3RzID0gW3Jvb3QuZmlyc3QsIHJvb3Quc2Vjb25kXTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNraW5nT3JkZXIgPSBHcmFwaE1pbmlwdWxhdG9yXzEuR3JhcGhNaW5pcHVsYXRvci5nZXRMZXZlbHModGhpcy5ncmFwaCwgcm9vdHMpO1xuICAgICAgICAgICAgc3RhY2tpbmdPcmRlci5mb3JFYWNoKChub2RlU2V0LCBkZXB0aCkgPT4ge1xuICAgICAgICAgICAgICAgIG5vZGVTZXQuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNob3dBcmd1bWVudHMgJiYgbm9kZSBpbnN0YW5jZW9mIEFyZ3VtZW50XzEuQXJndW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWRqdXN0aW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlVmlldyA9IHRoaXMubm9kZXMuZ2V0KG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBub2RlVmlldy5zdHlsZS56SW5kZXggPSAoTk9ERV9NQVhfWiAtIDAuMDAwMSAqIGRlcHRoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAvLyBFZGdlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkZ2VzLmZvckVhY2goKGVkZ2UsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UuZmlyc3QgPT09IG5vZGUgfHwgZWRnZS5zZWNvbmQgPT09IG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlLnN0eWxlLnpJbmRleCA9IChFREdFX01BWF9aIC0gMC4wMDAxICogZGVwdGgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVwT2soKSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKHRoaXMucm9vdE5vZGVzLnNpemUgPiAwKTtcbiAgICAgICAgKDAsIGFzc2VydF8xLmFzc2VydCkoR3JhcGhNaW5pcHVsYXRvcl8xLkdyYXBoTWluaXB1bGF0b3IuaXNDb25uZWN0ZWQodGhpcy5ncmFwaCksIFwiR3JhcGggbm90IGNvbm5lY3RlZFwiKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvd0FyZ3VtZW50cylcbiAgICAgICAgICAgICgwLCBhc3NlcnRfMS5hc3NlcnQpKHRoaXMuZ3JhcGguZ2V0Tm9kZXMoKS5zaXplID09IHRoaXMubm9kZXMuc2l6ZSk7XG4gICAgfVxuICAgIGdyYXBoO1xuICAgIG5vZGVzO1xuICAgIC8vIFRoZSBQb3NpdGlvbiBvZiB0aGUgY2VudGVyIG9mIHRoZSBub2RlLlxuICAgIG5vZGVQb3NpdGlvbnM7XG4gICAgZWRnZXM7XG4gICAgZWRnZVBvc2l0aW9ucztcbiAgICAvLyBBbXQgdG8gYWRkIHRvIGxlZnQgY29vcmRpbmF0ZVxuICAgIG9mZnNldFg7XG4gICAgLy8gQWRkZWQgdG8gdG9wIGNvb3JkaW5hdGUgb2Ygbm9kZXNcbiAgICBvZmZzZXRZO1xuICAgIC8vIGlmIHRoZSBtb3VzZSBpcyBkb3duXG4gICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgdG91Y2hEb3duID0gZmFsc2U7XG4gICAgc2NhbGUgPSAxO1xuICAgIC8vIFRoZXNlIG5vZGVzIGFyZSB0aGUgcm9vdCBvZiB0aGUgZ3JhcGhcbiAgICByb290Tm9kZXM7XG4gICAgcmluZ0VsZW1lbnRzO1xuICAgIHJpbmdQb3NpdGlvbnM7XG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gb2YgdG9wIGxlZnQgb2YgcG9wdXBcbiAgICAgKi9cbiAgICBleHBsYW5hdGlvblBvcHVwcztcbiAgICBnZXN0dXJlUmVjb2duaXplcjtcbiAgICAvLyBJZiB0aGUgZ3JhcGggc2hvdWxkIGRyYXcgYXJndW1lbnQgbm9kZXMuXG4gICAgc2hvd0FyZ3VtZW50cyA9IGZhbHNlO1xuICAgIGRyYXdFZGdlTGluZXMgPSBmYWxzZTtcbiAgICBkZWJ1Z0Nvcm5lckVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihfID0+IHtcbiAgICAgICAgdGhpcy5hcnJhbmdlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlT2Zmc2V0KCk7XG4gICAgfSk7XG4gICAgYmFzZU5vZGVTdHlsZSA9ICh2aWV3KSA9PiB7XG4gICAgICAgIHZpZXcuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCIxY2hcIjtcbiAgICAgICAgdmlldy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0Ymx1ZVwiO1xuICAgICAgICB2aWV3LnN0eWxlLnpJbmRleCA9IFwiXCIgKyBOT0RFX01BWF9aO1xuICAgIH07XG59XG5leHBvcnRzLldlYkdyYXBoVmlldyA9IFdlYkdyYXBoVmlldztcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIndlYi1ncmFwaHZpZXdcIiwgV2ViR3JhcGhWaWV3LCB7IGV4dGVuZHM6IFwiZGl2XCIgfSk7XG5mdW5jdGlvbiBQb2ludCh4LCB5LCBhbmdsZSA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChhbmdsZSA9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeSxcbiAgICAgICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5LFxuICAgICAgICBhbmdsZTogYW5nbGUsXG4gICAgfTtcbn1cbi8vIFogSW5kZXggY29uc3RhbnRzXG5jb25zdCBERUJVR19XSU5ET1dfWiA9IFwiMTAwXCI7XG5jb25zdCBOT0RFX01BWF9aID0gNTtcbmNvbnN0IE5PREVfTUlOX1ogPSBcIjQuMDAwMDAxXCI7XG5jb25zdCBFREdFX01BWF9aID0gNDtcbmNvbnN0IEVER0VfTUlOX1ogPSBcIjMuMDAwMDAxXCI7XG5jb25zdCBSSU5HX1ogPSBcIi0xMFwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlRXhwcmVzc2lvbiA9IHZvaWQgMDtcbmNvbnN0IGFudGxyNF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJhbnRscjRcIikpO1xuY29uc3QgeyBDb21tb25Ub2tlblN0cmVhbSwgQ2hhclN0cmVhbSB9ID0gYW50bHI0XzEuZGVmYXVsdDtcbmNvbnN0IGFyaXRobWV0aWNMZXhlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FyaXRobWV0aWNMZXhlclwiKSk7XG5jb25zdCBhcml0aG1ldGljUGFyc2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYXJpdGhtZXRpY1BhcnNlclwiKSk7XG5jb25zdCBNYXRoVmlzaXRvckltcGxfMSA9IHJlcXVpcmUoXCIuL01hdGhWaXNpdG9ySW1wbFwiKTtcbmNvbnN0IEZsYXR0ZW5lcl8xID0gcmVxdWlyZShcIi4vRmxhdHRlbmVyXCIpO1xuLyoqXG4gKiBQYXJzZXMgdGhlIGdpdmVuIGlucHV0IHN0cmluZyB0byBhbiBleHByZXNzaW9uLlxuICogQHBhcmFtIGlucHV0IFNlZSB0aGUgZ3JhbWFyIGZpbGUgKC5nNClcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbihpbnB1dCkge1xuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBDaGFyU3RyZWFtKGlucHV0LCB0cnVlKTtcbiAgICBjb25zdCBsZXhlciA9IG5ldyBhcml0aG1ldGljTGV4ZXJfMS5kZWZhdWx0KHN0cmVhbSk7XG4gICAgY29uc3QgdG9rZW5zID0gbmV3IENvbW1vblRva2VuU3RyZWFtKGxleGVyKTtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgYXJpdGhtZXRpY1BhcnNlcl8xLmRlZmF1bHQodG9rZW5zKTtcbiAgICAvL3BhcnNlci5idWlsZFBhcnNlVHJlZXMgPSB0cnVlXG4gICAgY29uc3QgdHJlZSA9IHBhcnNlci5leHByZXNzaW9uKCk7XG4gICAgdHJlZS5hY2NlcHQobmV3IEZsYXR0ZW5lcl8xLkZsYXR0ZW5lcigpKTtcbiAgICAvLyBQcmludCBkZWJ1ZyBpbmZvXG4gICAgLy90cmVlLmFjY2VwdChuZXcgUHJpbnRWaXNpdG9yKCkpXG4gICAgcmV0dXJuIHRyZWUuYWNjZXB0KG5ldyBNYXRoVmlzaXRvckltcGxfMS5FeHByZXNzaW9uVmlzaXRvcigpKTtcbn1cbmV4cG9ydHMucGFyc2VFeHByZXNzaW9uID0gcGFyc2VFeHByZXNzaW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZsYXR0ZW5lciA9IHZvaWQgMDtcbmNvbnN0IENvbnZlbmllbnRFeHByZXNzaW9uc18xID0gcmVxdWlyZShcIi4uL0NvbnZlbmllbnRFeHByZXNzaW9uc1wiKTtcbmNvbnN0IGFyaXRobWV0aWNQYXJzZXJfMSA9IHJlcXVpcmUoXCIuL2FyaXRobWV0aWNQYXJzZXJcIik7XG5jb25zdCBhcml0aG1ldGljVmlzaXRvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FyaXRobWV0aWNWaXNpdG9yXCIpKTtcbi8qKlxuICogVmlzaXRvciB0aGF0IGZsYXR0ZW5zIHN1bXMgYW5kIHByb2R1Y3RzIGluIEFTVHMuXG4gKiBhICsgKGIgKyBjKSAtPiBhICsgYiArIGNcbiAqXG4gKiBUaGlzIG9ubHkgaGFwcGVucyBpZiBiICsgYyBpc24ndCBhY3R1YWxseSBzdXJyb3VuZGVkXG4gKiBieSBwYXJlbnMuXG4gKlxuICogICAgICAgICtcbiAqICAgICAgIC8gXFxcbiAqICAgICAgYSAgICtcbiAqICAgICAgICAgLyBcXFxuICogICAgICAgIGIgICBjXG4gKlxuICogYmVjb21lc1xuICpcbiAqICAgICAgICtcbiAqICAgICAgL3xcXFxuICogICAgIGEgYiBjXG4gKlxuICpcbiAqL1xuY2xhc3MgRmxhdHRlbmVyIGV4dGVuZHMgYXJpdGhtZXRpY1Zpc2l0b3JfMS5kZWZhdWx0IHtcbiAgICB2aXNpdFN1bSA9IChjdHgpID0+IHtcbiAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gdGhpcy5mbGF0dGVuQWRkaXRpb24oY3R4KTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBmbGF0dGVuZWQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHRoaXMudmlzaXQoY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0dGVuZWQ7XG4gICAgfTtcbiAgICBwcmludENoaWxkcmVuKGN0eCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjdHguY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBjaGlsZC5nZXRUZXh0KCkgKyBcIiAgXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjdHgudG9TdHJpbmdUcmVlKG51bGwsIGN0eC5wYXJzZXIhKSlcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGdpdmVuIHN1bSdzIGNoaWxkcmVuIGFyZSBhbHNvIHN1bXMsXG4gICAgICogc2V0cyB0aG9zZSBzdW1zIHBhcmVudHMgdG8gdGhlIGN0eC5cbiAgICAgKiBUaGUgZ2l2ZW4gc3VtY29udGV4dCBhbmQgYWxsIGl0cyBzdW0gY2hpbGRyZW5cbiAgICAgKiBtdXN0IGhhdmUgZXhhY3RseSAyIGV4cHJlc3Npb24gcGFydCBjaGlsZHJlbi5cbiAgICAgKiBUaGlzIHByZXZlbnRzIHRoZSBtaW5kIGZ1Y2sgb2YgcmVhcnJhbmdpbmcgdGhlXG4gICAgICogQVNUIG9uIHRoZSB3YXkgYmFjayBvdXQuXG4gICAgICovXG4gICAgZmxhdHRlbkFkZGl0aW9uKGN0eCkge1xuICAgICAgICAvLyBDaGVjayBpZiBjaGlsZHJlbiBhcmUgc3Vtc1xuICAgICAgICAvLyBSZWFjaCBkb3duIGFuZCB0YWtlIHRoZWlyIGNoaWxkcmVuXG4gICAgICAgIGZ1bmN0aW9uIHRha2VDaGlsZHJlbihjaGlsZCkge1xuICAgICAgICAgICAgKDAsIENvbnZlbmllbnRFeHByZXNzaW9uc18xLnJlbW92ZSkoY3R4LmNoaWxkcmVuLCBjaGlsZCk7XG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBleHByZXNzaW9uIHVwXG4gICAgICAgICAgICBpZiAoY2hpbGQuX3JpZ2h0IGluc3RhbmNlb2YgYXJpdGhtZXRpY1BhcnNlcl8xLlN1bUNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB0YWtlQ2hpbGRyZW4oY2hpbGQuX3JpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoaWxkLl9yaWdodC5wYXJlbnRDdHggPSBjdHg7XG4gICAgICAgICAgICAgICAgY3R4LmNoaWxkcmVuLnVuc2hpZnQoY2hpbGQuX3JpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgaXNuJ3QgYWx3YXlzIGNvcnJlY3QgYmVjYXVzZSBuZWdhdGlvbiBvZiBzdW1zXG4gICAgICAgICAgICAvLyBPciBpcyBpcy4uLlxuICAgICAgICAgICAgLy8gQWxzbyBsb29rIGF0IHByb2R1Y3QgZmxhdHRlbmluZ1xuICAgICAgICAgICAgLy8gTW92ZSB0aGUgb3BlcmF0b3IgdXBcbiAgICAgICAgICAgIGlmIChjaGlsZC5NSU5VUygpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5NSU5VUygpLnBhcmVudEN0eCA9IGN0eDtcbiAgICAgICAgICAgICAgICBjdHguY2hpbGRyZW4udW5zaGlmdChjaGlsZC5NSU5VUygpKTtcbiAgICAgICAgICAgICAgICAvL3JlbW92ZShjaGlsZC5jaGlsZHJlbiEsIGNoaWxkLk1JTlVTKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5QTFVTKCkucGFyZW50Q3R4ID0gY3R4O1xuICAgICAgICAgICAgICAgIGN0eC5jaGlsZHJlbi51bnNoaWZ0KGNoaWxkLlBMVVMoKSk7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmUoY2hpbGQuY2hpbGRyZW4hLCBjaGlsZC5QTFVTKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGQuX2xlZnQgaW5zdGFuY2VvZiBhcml0aG1ldGljUGFyc2VyXzEuU3VtQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHRha2VDaGlsZHJlbihjaGlsZC5fbGVmdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5fbGVmdC5wYXJlbnRDdHggPSBjdHg7XG4gICAgICAgICAgICAgICAgY3R4LmNoaWxkcmVuLnVuc2hpZnQoY2hpbGQuX2xlZnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGQucGFyZW50Q3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguX2xlZnQgaW5zdGFuY2VvZiBhcml0aG1ldGljUGFyc2VyXzEuU3VtQ29udGV4dClcbiAgICAgICAgICAgIHRha2VDaGlsZHJlbihjdHguX2xlZnQpO1xuICAgICAgICBpZiAoY3R4Ll9yaWdodCBpbnN0YW5jZW9mIGFyaXRobWV0aWNQYXJzZXJfMS5TdW1Db250ZXh0KVxuICAgICAgICAgICAgdGFrZUNoaWxkcmVuKGN0eC5fcmlnaHQpO1xuICAgICAgICByZXR1cm4gY3R4O1xuICAgIH1cbiAgICB2aXNpdFByb2R1Y3QgPSAoY3R4KSA9PiB7XG4gICAgICAgIGNvbnN0IGZsYXR0ZW5lZCA9IHRoaXMuZmxhdHRlblByb2R1Y3QoY3R4KTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBmbGF0dGVuZWQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHRoaXMudmlzaXQoY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0dGVuZWQ7XG4gICAgfTtcbiAgICBmbGF0dGVuUHJvZHVjdChjdHgpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkZsYXR0ZW5pbmcgcHJvZHVjdCBcIiArIGN0eC5nZXRUZXh0KCkgKyBcIiB0b1wiKVxuICAgICAgICBmdW5jdGlvbiBpbnN0YW5jZU9mUHJvZHVjdChjaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkIGluc3RhbmNlb2YgYXJpdGhtZXRpY1BhcnNlcl8xLlByb2R1Y3RDb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIGNoaWxkcmVuIGFyZSBzdW1zXG4gICAgICAgIC8vIFJlYWNoIGRvd24gYW5kIHRha2UgdGhlaXIgY2hpbGRyZW5cbiAgICAgICAgZnVuY3Rpb24gdGFrZUNoaWxkcmVuKGNoaWxkKSB7XG4gICAgICAgICAgICAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEucmVtb3ZlKShjdHguY2hpbGRyZW4sIGNoaWxkKTtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZU9mUHJvZHVjdChjaGlsZC5fcmlnaHQpKSB7XG4gICAgICAgICAgICAgICAgdGFrZUNoaWxkcmVuKGNoaWxkLl9yaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5fcmlnaHQucGFyZW50Q3R4ID0gY3R4O1xuICAgICAgICAgICAgICAgIGN0eC5jaGlsZHJlbi51bnNoaWZ0KGNoaWxkLl9yaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBvcGVyYXRvciB1cFxuICAgICAgICAgICAgaWYgKGNoaWxkLlRJTUVTKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNoaWxkLlRJTUVTKCkucGFyZW50Q3R4ID0gY3R4O1xuICAgICAgICAgICAgICAgIGN0eC5jaGlsZHJlbi51bnNoaWZ0KGNoaWxkLlRJTUVTKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluc3RhbmNlT2ZQcm9kdWN0KGNoaWxkLl9sZWZ0KSkge1xuICAgICAgICAgICAgICAgIHRha2VDaGlsZHJlbihjaGlsZC5fbGVmdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5fbGVmdC5wYXJlbnRDdHggPSBjdHg7XG4gICAgICAgICAgICAgICAgY3R4LmNoaWxkcmVuLnVuc2hpZnQoY2hpbGQuX2xlZnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGQucGFyZW50Q3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnN0YW5jZU9mUHJvZHVjdChjdHguX2xlZnQpKVxuICAgICAgICAgICAgdGFrZUNoaWxkcmVuKGN0eC5fbGVmdCk7XG4gICAgICAgIGlmIChpbnN0YW5jZU9mUHJvZHVjdChjdHguX3JpZ2h0KSlcbiAgICAgICAgICAgIHRha2VDaGlsZHJlbihjdHguX3JpZ2h0KTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjdHguZ2V0VGV4dCgpKVxuICAgICAgICByZXR1cm4gY3R4O1xuICAgIH1cbn1cbmV4cG9ydHMuRmxhdHRlbmVyID0gRmxhdHRlbmVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cHJlc3Npb25WaXNpdG9yID0gdm9pZCAwO1xuY29uc3QgQ29udmVuaWVudEV4cHJlc3Npb25zXzEgPSByZXF1aXJlKFwiLi4vQ29udmVuaWVudEV4cHJlc3Npb25zXCIpO1xuY29uc3QgRXhwb25lbnRfMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9FeHBvbmVudFwiKTtcbmNvbnN0IEZyYWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vZXhwcmVzc2lvbnMvRnJhY3Rpb25cIik7XG5jb25zdCBJbnRlZ2VyXzEgPSByZXF1aXJlKFwiLi4vZXhwcmVzc2lvbnMvSW50ZWdlclwiKTtcbmNvbnN0IEludGVncmFsXzEgPSByZXF1aXJlKFwiLi4vZXhwcmVzc2lvbnMvSW50ZWdyYWxcIik7XG5jb25zdCBMb2dhcml0aG1fMSA9IHJlcXVpcmUoXCIuLi9leHByZXNzaW9ucy9Mb2dhcml0aG1cIik7XG5jb25zdCBQcm9kdWN0XzEgPSByZXF1aXJlKFwiLi4vZXhwcmVzc2lvbnMvUHJvZHVjdFwiKTtcbmNvbnN0IFN1bV8xID0gcmVxdWlyZShcIi4uL2V4cHJlc3Npb25zL1N1bVwiKTtcbmNvbnN0IFZhcmlhYmxlXzEgPSByZXF1aXJlKFwiLi4vZXhwcmVzc2lvbnMvVmFyaWFibGVcIik7XG5jb25zdCBhcml0aG1ldGljVmlzaXRvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FyaXRobWV0aWNWaXNpdG9yXCIpKTtcbi8qKlxuICogUmVhZHMgb3V0IGFuIGV4cHJlc3Npb24uXG4gKi9cbmNsYXNzIEV4cHJlc3Npb25WaXNpdG9yIGV4dGVuZHMgYXJpdGhtZXRpY1Zpc2l0b3JfMS5kZWZhdWx0IHtcbiAgICBwcmludENoaWxkcmVuKGN0eCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjdHguY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBjaGlsZC5nZXRUZXh0KCkgKyBcIiAgXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICB9XG4gICAgdmlzaXRFeHByZXNzaW9uID0gKGN0eCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52aXNpdChjdHgub3BlbigpKTtcbiAgICB9O1xuICAgIHZpc2l0RXF1YXRpb24gPSAoY3R4KSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHBhcnNlIGVxdWF0aW9ucyB3aXRoIHRoaXMgdmlzaXRvclwiKTtcbiAgICB9O1xuICAgIHZpc2l0UG93ZXIgPSAoY3R4KSA9PiB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJQb3dlclwiKVxuICAgICAgICAvL3RoaXMucHJpbnRDaGlsZHJlbihjdHgpXG4gICAgICAgIC8vY29uc29sZS5sb2coY3R4Ll9sZWZ0LmdldFRleHQoKSlcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjdHguX3JpZ2h0LmdldFRleHQoKSlcbiAgICAgICAgcmV0dXJuIEV4cG9uZW50XzEuRXhwb25lbnQub2YodGhpcy52aXNpdChjdHguX2xlZnQpLCB0aGlzLnZpc2l0KGN0eC5fcmlnaHQpKTtcbiAgICB9O1xuICAgIHZpc2l0UGFyZW4gPSAoY3R4KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpc2l0KGN0eC5vcGVuKCkpO1xuICAgIH07XG4gICAgdmlzaXREaXZpc2lvbiA9IChjdHgpID0+IHtcbiAgICAgICAgcmV0dXJuIEZyYWN0aW9uXzEuRnJhY3Rpb24ub2YodGhpcy52aXNpdChjdHguX2xlZnQpLCB0aGlzLnZpc2l0KGN0eC5fcmlnaHQpKTtcbiAgICB9O1xuICAgIHZpc2l0UHJvZHVjdCA9IChjdHgpID0+IHtcbiAgICAgICAgcmV0dXJuIFByb2R1Y3RfMS5Qcm9kdWN0Lm9mKFtcbiAgICAgICAgICAgIC4uLmN0eC5jbG9zZWRfbGlzdCgpLm1hcChleHAgPT4gdGhpcy52aXNpdChleHApKVxuICAgICAgICBdKTtcbiAgICB9O1xuICAgIHZpc2l0UmlnaHRfQ2xvc2VkSW1wbGljaXRQcm9kdWN0ID0gKGN0eCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiUmlnaHQgY2xvc2VkIGltcGxpY2l0IHByb2R1Y3Qgb2YgY29udGV4dFwiKVxuICAgICAgICAvL3RoaXMucHJpbnRDaGlsZHJlbihjdHgpXG4gICAgICAgIHJldHVybiBQcm9kdWN0XzEuUHJvZHVjdC5vZihbXG4gICAgICAgICAgICB0aGlzLnZpc2l0KGN0eC5fbGVmdCksXG4gICAgICAgICAgICB0aGlzLnZpc2l0KGN0eC5fcmlnaHQpXG4gICAgICAgIF0pO1xuICAgIH07XG4gICAgdmlzaXRJbnRlZ3JhbCA9IChjdHgpID0+IHtcbiAgICAgICAgcmV0dXJuIEludGVncmFsXzEuSW50ZWdyYWwub2YodGhpcy52aXNpdChjdHguX2ludGVncmFuZCksIFZhcmlhYmxlXzEuVmFyaWFibGUub2YoJ3gnKSk7XG4gICAgfTtcbiAgICB2aXNpdExvZyA9IChjdHgpID0+IHtcbiAgICAgICAgcmV0dXJuIExvZ2FyaXRobV8xLkxvZ2FyaXRobS5vZih0aGlzLnZpc2l0KGN0eC5fY29udGVudCksIGN0eC5fYmFzZSA9PSB1bmRlZmluZWQgPyBJbnRlZ2VyXzEuSW50ZWdlci5vZigxMCkgOiB0aGlzLnZpc2l0KGN0eC5fYmFzZSkpO1xuICAgIH07XG4gICAgLy8gdmlzaXRVbmFyeU9uQXRvbSA9IChjdHg6IFVuYXJ5T25BdG9tQ29udGV4dCk6IEV4cHJlc3Npb24gPT4ge1xuICAgIC8vICAgICBjb25zdCBpc1Bvc2l0aXZlID0gY3R4Lk1JTlVTX2xpc3QubGVuZ3RoICUgMiA9PSAwXG4gICAgLy8gICAgIGlmIChpc1Bvc2l0aXZlKVxuICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXQoY3R4LmF0b20oKSlcbiAgICAvLyAgICAgcmV0dXJuIG5lZ2F0aXZlKHRoaXMudmlzaXQoY3R4LmF0b20oKSkpXG4gICAgLy8gfVxuICAgIHZpc2l0VW5hcnlPbkV4cHJlc3Npb24gPSAoY3R4KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzUG9zaXRpdmUgPSBjdHguTUlOVVMoKSA9PSBudWxsO1xuICAgICAgICBpZiAoaXNQb3NpdGl2ZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0KGN0eC5jbG9zZWQoKSk7XG4gICAgICAgIHJldHVybiAoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKHRoaXMudmlzaXQoY3R4LmNsb3NlZCgpKSk7XG4gICAgfTtcbiAgICB2aXNpdFN1bSA9IChjdHgpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJWaXNpdGluZyBzdW0gd2l0aCBcIiArIGN0eC5jaGlsZHJlbiEubGVuZ3RoICsgXCIgY2hpbGRyZW46IFwiICsgY3R4LnRvU3RyaW5nVHJlZShudWxsLCBjdHgucGFyc2VyISkpXG4gICAgICAgIC8vIHRoaXMucHJpbnRDaGlsZHJlbihjdHgpXG4gICAgICAgIC8vIFN1bSBvZiBwbHVzIGFuZCBtaW51cyBjb21wb25lbnRzXG4gICAgICAgIGNvbnN0IHRlcm1zID0gW3RoaXMudmlzaXQoY3R4LmNoaWxkcmVuWzBdKV07XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY3R4LmNoaWxkcmVuLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmNoaWxkcmVuW2ldLmdldFRleHQoKSA9PSAnLScpXG4gICAgICAgICAgICAgICAgdGVybXMucHVzaCgoMCwgQ29udmVuaWVudEV4cHJlc3Npb25zXzEubmVnYXRpdmUpKHRoaXMudmlzaXQoY3R4LmNoaWxkcmVuW2kgKyAxXSkpKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRlcm1zLnB1c2godGhpcy52aXNpdChjdHguY2hpbGRyZW5baSArIDFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIlByaW50aW5nIG1hZGUgdGVybXNcIilcbiAgICAgICAgZm9yIChjb25zdCB0ZXJtIG9mIHRlcm1zKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiICBcIiArIHRlcm0udG9TdHJpbmcoKSlcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiZG9uZVwiKVxuICAgICAgICByZXR1cm4gU3VtXzEuU3VtLm9mKHRlcm1zKTtcbiAgICB9O1xuICAgIC8vIHZpc2l0RXhwcmVzc2lvbiA9IChjdHg6IEV4cHJlc3Npb25Db250ZXh0KTogRXhwcmVzc2lvbiA9PiB7XG4gICAgLy8gICAgIC8vIEd1ZXNzIHdoYXQgZXhwcmVzc2lvbiB0eXBlIGl0IGlzLCBmb2xsb3dpbmcgcGVtZGFzXG4gICAgLy8gICAgIGlmICgoY3R4LlBMVVMoMCkgIT0gbnVsbCB8fCBjdHguTUlOVVMoMCkgIT0gbnVsbCkgXG4gICAgLy8gICAgICAgICAgICAgJiYgKGN0eC5leHByZXNzaW9uX2xpc3QoKS5sZW5ndGggPz8gMCkgPiAxKSB7XG4gICAgLy8gICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIlVua25vd24gZXhwcmVzc2lvbiB0eXBlXCIpXG4gICAgLy8gICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjdHgpKSB7XG4gICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coYCR7a2V5fTogJHsoY3R4IGFzIGFueSlba2V5XX1gKVxuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3R4KSkge1xuICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2tleX06ICR7KGN0eCBhcyBhbnkpW2tleV19YClcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiRXhwcmVzc2lvbnM6IFwiICsgY3R4LmV4cHJlc3Npb25fbGlzdCgpLmxlbmd0aClcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiTnVtIGNoaWxkcmVuOiBcIiArIGN0eC5jaGlsZHJlbiEubGVuZ3RoKVxuICAgIC8vICAgICAgICAgaWYgKGN0eC5jaGlsZHJlbj8ubGVuZ3RoID8/IDAgPiAwKVxuICAgIC8vICAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY3R4LmNoaWxkcmVuISkge1xuICAgIC8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNoaWxkOiBcIiArIGNoaWxkLmdldFRleHQoKSlcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQgMVwiKVxuICAgIC8vICAgICB9XG4gICAgLy8gfTtcbiAgICB2aXNpdEF0b20gPSAoY3R4KSA9PiB7XG4gICAgICAgIGlmIChjdHguVkFSSUFCTEUoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gVmFyaWFibGVfMS5WYXJpYWJsZS5vZihjdHguVkFSSUFCTEUoKS5nZXRUZXh0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN0eC5TQ0lFTlRJRklDX05VTUJFUigpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBJbnRlZ2VyXzEuSW50ZWdlci5vZihOdW1iZXIucGFyc2VGbG9hdChjdHguU0NJRU5USUZJQ19OVU1CRVIoKS5nZXRUZXh0KCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmlzaXRDbG9zZWRBdG9tID0gKGN0eCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52aXNpdChjdHguYXRvbSgpKTtcbiAgICB9O1xuICAgIHZpc2l0Q2xvc2VkSXNSaWdodF9DbG9zZWQgPSAoY3R4KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpc2l0KGN0eC5jbG9zZWQoKSk7XG4gICAgfTtcbiAgICB2aXNpdFJpZ2h0X0Nsb3NlZElzT3BlbiA9IChjdHgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaXQoY3R4LnJpZ2h0X2Nsb3NlZCgpKTtcbiAgICB9O1xuICAgIHZpc2l0UmVsb3AgPSAoY3R4KSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNob3VsZG4ndCBoYXBwZW4gd2l0aCB0aGlzIHZpc2l0b3IgaW1wbFwiKTtcbiAgICB9O1xufVxuZXhwb3J0cy5FeHByZXNzaW9uVmlzaXRvciA9IEV4cHJlc3Npb25WaXNpdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBHZW5lcmF0ZWQgZnJvbSAuL3NyYy9tYXRobGliL3VzZXJpbnB1dC9hcml0aG1ldGljLmc0IGJ5IEFOVExSIDQuMTMuMFxuLy8gbm9pbnNwZWN0aW9uIEVTNlVudXNlZEltcG9ydHMsSlNVbnVzZWRHbG9iYWxTeW1ib2xzLEpTVW51c2VkTG9jYWxTeW1ib2xzXG5jb25zdCBhbnRscjRfMSA9IHJlcXVpcmUoXCJhbnRscjRcIik7XG5jbGFzcyBhcml0aG1ldGljTGV4ZXIgZXh0ZW5kcyBhbnRscjRfMS5MZXhlciB7XG4gICAgc3RhdGljIFNDSUVOVElGSUNfTlVNQkVSID0gMTtcbiAgICBzdGF0aWMgTFBBUkVOID0gMjtcbiAgICBzdGF0aWMgUlBBUkVOID0gMztcbiAgICBzdGF0aWMgUExVUyA9IDQ7XG4gICAgc3RhdGljIE1JTlVTID0gNTtcbiAgICBzdGF0aWMgVElNRVMgPSA2O1xuICAgIHN0YXRpYyBESVYgPSA3O1xuICAgIHN0YXRpYyBHVCA9IDg7XG4gICAgc3RhdGljIExUID0gOTtcbiAgICBzdGF0aWMgRVEgPSAxMDtcbiAgICBzdGF0aWMgUE9JTlQgPSAxMTtcbiAgICBzdGF0aWMgUE9XID0gMTI7XG4gICAgc3RhdGljIElOVCA9IDEzO1xuICAgIHN0YXRpYyBMT0cgPSAxNDtcbiAgICBzdGF0aWMgVkFSSUFCTEUgPSAxNTtcbiAgICBzdGF0aWMgV1MgPSAxNjtcbiAgICBzdGF0aWMgRU9GID0gYW50bHI0XzEuVG9rZW4uRU9GO1xuICAgIHN0YXRpYyBjaGFubmVsTmFtZXMgPSBbXCJERUZBVUxUX1RPS0VOX0NIQU5ORUxcIiwgXCJISURERU5cIl07XG4gICAgc3RhdGljIGxpdGVyYWxOYW1lcyA9IFtudWxsLCBudWxsLFxuICAgICAgICBcIicoJ1wiLCBcIicpJ1wiLFxuICAgICAgICBcIicrJ1wiLCBcIictJ1wiLFxuICAgICAgICBudWxsLCBcIicvJ1wiLFxuICAgICAgICBcIic+J1wiLCBcIic8J1wiLFxuICAgICAgICBcIic9J1wiLCBcIicuJ1wiLFxuICAgICAgICBcIideJ1wiXTtcbiAgICBzdGF0aWMgc3ltYm9saWNOYW1lcyA9IFtudWxsLCBcIlNDSUVOVElGSUNfTlVNQkVSXCIsXG4gICAgICAgIFwiTFBBUkVOXCIsIFwiUlBBUkVOXCIsXG4gICAgICAgIFwiUExVU1wiLCBcIk1JTlVTXCIsXG4gICAgICAgIFwiVElNRVNcIiwgXCJESVZcIixcbiAgICAgICAgXCJHVFwiLCBcIkxUXCIsXG4gICAgICAgIFwiRVFcIiwgXCJQT0lOVFwiLFxuICAgICAgICBcIlBPV1wiLCBcIklOVFwiLFxuICAgICAgICBcIkxPR1wiLCBcIlZBUklBQkxFXCIsXG4gICAgICAgIFwiV1NcIl07XG4gICAgc3RhdGljIG1vZGVOYW1lcyA9IFtcIkRFRkFVTFRfTU9ERVwiLF07XG4gICAgc3RhdGljIHJ1bGVOYW1lcyA9IFtcbiAgICAgICAgXCJTQ0lFTlRJRklDX05VTUJFUlwiLCBcIk5VTUJFUlwiLCBcIlVOU0lHTkVEX0lOVEVHRVJcIiwgXCJFXCIsIFwiTFwiLCBcIk9cIiwgXCJHXCIsXG4gICAgICAgIFwiU0lHTlwiLCBcIkxQQVJFTlwiLCBcIlJQQVJFTlwiLCBcIlBMVVNcIiwgXCJNSU5VU1wiLCBcIlRJTUVTXCIsIFwiRElWXCIsIFwiR1RcIiwgXCJMVFwiLFxuICAgICAgICBcIkVRXCIsIFwiUE9JTlRcIiwgXCJQT1dcIiwgXCJJTlRcIiwgXCJMT0dcIiwgXCJWQVJJQUJMRVwiLCBcIldTXCIsXG4gICAgXTtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgICAgICBzdXBlcihpbnB1dCk7XG4gICAgICAgIHRoaXMuX2ludGVycCA9IG5ldyBhbnRscjRfMS5MZXhlckFUTlNpbXVsYXRvcih0aGlzLCBhcml0aG1ldGljTGV4ZXIuX0FUTiwgYXJpdGhtZXRpY0xleGVyLkRlY2lzaW9uc1RvREZBLCBuZXcgYW50bHI0XzEuUHJlZGljdGlvbkNvbnRleHRDYWNoZSgpKTtcbiAgICB9XG4gICAgZ2V0IGdyYW1tYXJGaWxlTmFtZSgpIHsgcmV0dXJuIFwiYXJpdGhtZXRpYy5nNFwiOyB9XG4gICAgZ2V0IGxpdGVyYWxOYW1lcygpIHsgcmV0dXJuIGFyaXRobWV0aWNMZXhlci5saXRlcmFsTmFtZXM7IH1cbiAgICBnZXQgc3ltYm9saWNOYW1lcygpIHsgcmV0dXJuIGFyaXRobWV0aWNMZXhlci5zeW1ib2xpY05hbWVzOyB9XG4gICAgZ2V0IHJ1bGVOYW1lcygpIHsgcmV0dXJuIGFyaXRobWV0aWNMZXhlci5ydWxlTmFtZXM7IH1cbiAgICBnZXQgc2VyaWFsaXplZEFUTigpIHsgcmV0dXJuIGFyaXRobWV0aWNMZXhlci5fc2VyaWFsaXplZEFUTjsgfVxuICAgIGdldCBjaGFubmVsTmFtZXMoKSB7IHJldHVybiBhcml0aG1ldGljTGV4ZXIuY2hhbm5lbE5hbWVzOyB9XG4gICAgZ2V0IG1vZGVOYW1lcygpIHsgcmV0dXJuIGFyaXRobWV0aWNMZXhlci5tb2RlTmFtZXM7IH1cbiAgICBzdGF0aWMgX3NlcmlhbGl6ZWRBVE4gPSBbNCwgMCwgMTYsIDEyMywgNiwgLTEsIDIsIDAsXG4gICAgICAgIDcsIDAsIDIsIDEsIDcsIDEsIDIsIDIsIDcsIDIsIDIsIDMsIDcsIDMsIDIsIDQsIDcsIDQsIDIsIDUsIDcsIDUsIDIsIDYsIDcsIDYsIDIsIDcsIDcsIDcsIDIsIDgsIDcsIDgsIDIsIDksXG4gICAgICAgIDcsIDksIDIsIDEwLCA3LCAxMCwgMiwgMTEsIDcsIDExLCAyLCAxMiwgNywgMTIsIDIsIDEzLCA3LCAxMywgMiwgMTQsIDcsIDE0LCAyLCAxNSwgNywgMTUsIDIsIDE2LCA3LFxuICAgICAgICAxNiwgMiwgMTcsIDcsIDE3LCAyLCAxOCwgNywgMTgsIDIsIDE5LCA3LCAxOSwgMiwgMjAsIDcsIDIwLCAyLCAyMSwgNywgMjEsIDIsIDIyLCA3LCAyMiwgMSwgMCwgMSwgMCxcbiAgICAgICAgMSwgMCwgMywgMCwgNTEsIDgsIDAsIDEsIDAsIDEsIDAsIDMsIDAsIDU1LCA4LCAwLCAxLCAxLCA0LCAxLCA1OCwgOCwgMSwgMTEsIDEsIDEyLCAxLCA1OSwgMSwgMSwgMSwgMSwgNCxcbiAgICAgICAgMSwgNjQsIDgsIDEsIDExLCAxLCAxMiwgMSwgNjUsIDMsIDEsIDY4LCA4LCAxLCAxLCAyLCA0LCAyLCA3MSwgOCwgMiwgMTEsIDIsIDEyLCAyLCA3MiwgMSwgMywgMSwgMywgMSxcbiAgICAgICAgNCwgMSwgNCwgMSwgNSwgMSwgNSwgMSwgNiwgMSwgNiwgMSwgNywgMSwgNywgMSwgOCwgMSwgOCwgMSwgOSwgMSwgOSwgMSwgMTAsIDEsIDEwLCAxLCAxMSwgMSwgMTEsIDEsIDEyLFxuICAgICAgICAxLCAxMiwgMSwgMTMsIDEsIDEzLCAxLCAxNCwgMSwgMTQsIDEsIDE1LCAxLCAxNSwgMSwgMTYsIDEsIDE2LCAxLCAxNywgMSwgMTcsIDEsIDE4LCAxLCAxOCwgMSwgMTksIDEsXG4gICAgICAgIDE5LCAxLCAxOSwgMSwgMTksIDEsIDIwLCAxLCAyMCwgMSwgMjAsIDEsIDIwLCAxLCAyMSwgMSwgMjEsIDEsIDIyLCA0LCAyMiwgMTE4LCA4LCAyMiwgMTEsIDIyLCAxMixcbiAgICAgICAgMjIsIDExOSwgMSwgMjIsIDEsIDIyLCAwLCAwLCAyMywgMSwgMSwgMywgMCwgNSwgMCwgNywgMCwgOSwgMCwgMTEsIDAsIDEzLCAwLCAxNSwgMCwgMTcsIDIsIDE5LCAzLCAyMSxcbiAgICAgICAgNCwgMjMsIDUsIDI1LCA2LCAyNywgNywgMjksIDgsIDMxLCA5LCAzMywgMTAsIDM1LCAxMSwgMzcsIDEyLCAzOSwgMTMsIDQxLCAxNCwgNDMsIDE1LCA0NSwgMTYsIDEsXG4gICAgICAgIDAsIDExLCAyLCAwLCA2OSwgNjksIDEwMSwgMTAxLCAyLCAwLCA3NiwgNzYsIDEwOCwgMTA4LCAyLCAwLCA3OSwgNzksIDExMSwgMTExLCAyLCAwLCA3MSwgNzEsIDEwMyxcbiAgICAgICAgMTAzLCAyLCAwLCA0MywgNDMsIDQ1LCA0NSwgMiwgMCwgNDIsIDQyLCAxODMsIDE4MywgMiwgMCwgNzMsIDczLCAxMDUsIDEwNSwgMiwgMCwgNzgsIDc4LCAxMTAsIDExMCxcbiAgICAgICAgMiwgMCwgODQsIDg0LCAxMTYsIDExNiwgMiwgMCwgNjUsIDkwLCA5NywgMTIyLCAzLCAwLCA5LCAxMCwgMTMsIDEzLCAzMiwgMzIsIDEyMiwgMCwgMSwgMSwgMCwgMCwgMCxcbiAgICAgICAgMCwgMTcsIDEsIDAsIDAsIDAsIDAsIDE5LCAxLCAwLCAwLCAwLCAwLCAyMSwgMSwgMCwgMCwgMCwgMCwgMjMsIDEsIDAsIDAsIDAsIDAsIDI1LCAxLCAwLCAwLCAwLCAwLCAyNywgMSxcbiAgICAgICAgMCwgMCwgMCwgMCwgMjksIDEsIDAsIDAsIDAsIDAsIDMxLCAxLCAwLCAwLCAwLCAwLCAzMywgMSwgMCwgMCwgMCwgMCwgMzUsIDEsIDAsIDAsIDAsIDAsIDM3LCAxLCAwLCAwLCAwLFxuICAgICAgICAwLCAzOSwgMSwgMCwgMCwgMCwgMCwgNDEsIDEsIDAsIDAsIDAsIDAsIDQzLCAxLCAwLCAwLCAwLCAwLCA0NSwgMSwgMCwgMCwgMCwgMSwgNDcsIDEsIDAsIDAsIDAsIDMsIDU3LCAxLFxuICAgICAgICAwLCAwLCAwLCA1LCA3MCwgMSwgMCwgMCwgMCwgNywgNzQsIDEsIDAsIDAsIDAsIDksIDc2LCAxLCAwLCAwLCAwLCAxMSwgNzgsIDEsIDAsIDAsIDAsIDEzLCA4MCwgMSwgMCwgMCxcbiAgICAgICAgMCwgMTUsIDgyLCAxLCAwLCAwLCAwLCAxNywgODQsIDEsIDAsIDAsIDAsIDE5LCA4NiwgMSwgMCwgMCwgMCwgMjEsIDg4LCAxLCAwLCAwLCAwLCAyMywgOTAsIDEsIDAsIDAsIDAsXG4gICAgICAgIDI1LCA5MiwgMSwgMCwgMCwgMCwgMjcsIDk0LCAxLCAwLCAwLCAwLCAyOSwgOTYsIDEsIDAsIDAsIDAsIDMxLCA5OCwgMSwgMCwgMCwgMCwgMzMsIDEwMCwgMSwgMCwgMCwgMCxcbiAgICAgICAgMzUsIDEwMiwgMSwgMCwgMCwgMCwgMzcsIDEwNCwgMSwgMCwgMCwgMCwgMzksIDEwNiwgMSwgMCwgMCwgMCwgNDEsIDExMCwgMSwgMCwgMCwgMCwgNDMsIDExNCwgMSwgMCxcbiAgICAgICAgMCwgMCwgNDUsIDExNywgMSwgMCwgMCwgMCwgNDcsIDU0LCAzLCAzLCAxLCAwLCA0OCwgNTAsIDMsIDcsIDMsIDAsIDQ5LCA1MSwgMywgMTUsIDcsIDAsIDUwLCA0OSwgMSwgMCxcbiAgICAgICAgMCwgMCwgNTAsIDUxLCAxLCAwLCAwLCAwLCA1MSwgNTIsIDEsIDAsIDAsIDAsIDUyLCA1MywgMywgNSwgMiwgMCwgNTMsIDU1LCAxLCAwLCAwLCAwLCA1NCwgNDgsIDEsIDAsIDAsXG4gICAgICAgIDAsIDU0LCA1NSwgMSwgMCwgMCwgMCwgNTUsIDIsIDEsIDAsIDAsIDAsIDU2LCA1OCwgMiwgNDgsIDU3LCAwLCA1NywgNTYsIDEsIDAsIDAsIDAsIDU4LCA1OSwgMSwgMCwgMCxcbiAgICAgICAgMCwgNTksIDU3LCAxLCAwLCAwLCAwLCA1OSwgNjAsIDEsIDAsIDAsIDAsIDYwLCA2NywgMSwgMCwgMCwgMCwgNjEsIDYzLCA1LCA0NiwgMCwgMCwgNjIsIDY0LCAyLCA0OCwgNTcsXG4gICAgICAgIDAsIDYzLCA2MiwgMSwgMCwgMCwgMCwgNjQsIDY1LCAxLCAwLCAwLCAwLCA2NSwgNjMsIDEsIDAsIDAsIDAsIDY1LCA2NiwgMSwgMCwgMCwgMCwgNjYsIDY4LCAxLCAwLCAwLCAwLFxuICAgICAgICA2NywgNjEsIDEsIDAsIDAsIDAsIDY3LCA2OCwgMSwgMCwgMCwgMCwgNjgsIDQsIDEsIDAsIDAsIDAsIDY5LCA3MSwgMiwgNDgsIDU3LCAwLCA3MCwgNjksIDEsIDAsIDAsIDAsXG4gICAgICAgIDcxLCA3MiwgMSwgMCwgMCwgMCwgNzIsIDcwLCAxLCAwLCAwLCAwLCA3MiwgNzMsIDEsIDAsIDAsIDAsIDczLCA2LCAxLCAwLCAwLCAwLCA3NCwgNzUsIDcsIDAsIDAsIDAsIDc1LFxuICAgICAgICA4LCAxLCAwLCAwLCAwLCA3NiwgNzcsIDcsIDEsIDAsIDAsIDc3LCAxMCwgMSwgMCwgMCwgMCwgNzgsIDc5LCA3LCAyLCAwLCAwLCA3OSwgMTIsIDEsIDAsIDAsIDAsIDgwLCA4MSxcbiAgICAgICAgNywgMywgMCwgMCwgODEsIDE0LCAxLCAwLCAwLCAwLCA4MiwgODMsIDcsIDQsIDAsIDAsIDgzLCAxNiwgMSwgMCwgMCwgMCwgODQsIDg1LCA1LCA0MCwgMCwgMCwgODUsIDE4LFxuICAgICAgICAxLCAwLCAwLCAwLCA4NiwgODcsIDUsIDQxLCAwLCAwLCA4NywgMjAsIDEsIDAsIDAsIDAsIDg4LCA4OSwgNSwgNDMsIDAsIDAsIDg5LCAyMiwgMSwgMCwgMCwgMCwgOTAsIDkxLFxuICAgICAgICA1LCA0NSwgMCwgMCwgOTEsIDI0LCAxLCAwLCAwLCAwLCA5MiwgOTMsIDcsIDUsIDAsIDAsIDkzLCAyNiwgMSwgMCwgMCwgMCwgOTQsIDk1LCA1LCA0NywgMCwgMCwgOTUsIDI4LFxuICAgICAgICAxLCAwLCAwLCAwLCA5NiwgOTcsIDUsIDYyLCAwLCAwLCA5NywgMzAsIDEsIDAsIDAsIDAsIDk4LCA5OSwgNSwgNjAsIDAsIDAsIDk5LCAzMiwgMSwgMCwgMCwgMCwgMTAwLCAxMDEsXG4gICAgICAgIDUsIDYxLCAwLCAwLCAxMDEsIDM0LCAxLCAwLCAwLCAwLCAxMDIsIDEwMywgNSwgNDYsIDAsIDAsIDEwMywgMzYsIDEsIDAsIDAsIDAsIDEwNCwgMTA1LCA1LCA5NCwgMCxcbiAgICAgICAgMCwgMTA1LCAzOCwgMSwgMCwgMCwgMCwgMTA2LCAxMDcsIDcsIDYsIDAsIDAsIDEwNywgMTA4LCA3LCA3LCAwLCAwLCAxMDgsIDEwOSwgNywgOCwgMCwgMCwgMTA5LCA0MCxcbiAgICAgICAgMSwgMCwgMCwgMCwgMTEwLCAxMTEsIDMsIDksIDQsIDAsIDExMSwgMTEyLCAzLCAxMSwgNSwgMCwgMTEyLCAxMTMsIDMsIDEzLCA2LCAwLCAxMTMsIDQyLCAxLCAwLCAwLFxuICAgICAgICAwLCAxMTQsIDExNSwgNywgOSwgMCwgMCwgMTE1LCA0NCwgMSwgMCwgMCwgMCwgMTE2LCAxMTgsIDcsIDEwLCAwLCAwLCAxMTcsIDExNiwgMSwgMCwgMCwgMCwgMTE4LCAxMTksXG4gICAgICAgIDEsIDAsIDAsIDAsIDExOSwgMTE3LCAxLCAwLCAwLCAwLCAxMTksIDEyMCwgMSwgMCwgMCwgMCwgMTIwLCAxMjEsIDEsIDAsIDAsIDAsIDEyMSwgMTIyLCA2LCAyMiwgMCxcbiAgICAgICAgMCwgMTIyLCA0NiwgMSwgMCwgMCwgMCwgOCwgMCwgNTAsIDU0LCA1OSwgNjUsIDY3LCA3MiwgMTE5LCAxLCA2LCAwLCAwXTtcbiAgICBzdGF0aWMgX19BVE47XG4gICAgc3RhdGljIGdldCBfQVROKCkge1xuICAgICAgICBpZiAoIWFyaXRobWV0aWNMZXhlci5fX0FUTikge1xuICAgICAgICAgICAgYXJpdGhtZXRpY0xleGVyLl9fQVROID0gbmV3IGFudGxyNF8xLkFUTkRlc2VyaWFsaXplcigpLmRlc2VyaWFsaXplKGFyaXRobWV0aWNMZXhlci5fc2VyaWFsaXplZEFUTik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyaXRobWV0aWNMZXhlci5fX0FUTjtcbiAgICB9XG4gICAgc3RhdGljIERlY2lzaW9uc1RvREZBID0gYXJpdGhtZXRpY0xleGVyLl9BVE4uZGVjaXNpb25Ub1N0YXRlLm1hcCgoZHMsIGluZGV4KSA9PiBuZXcgYW50bHI0XzEuREZBKGRzLCBpbmRleCkpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gYXJpdGhtZXRpY0xleGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBHZW5lcmF0ZWQgZnJvbSAuL3NyYy9tYXRobGliL3VzZXJpbnB1dC9hcml0aG1ldGljLmc0IGJ5IEFOVExSIDQuMTMuMFxuLy8gbm9pbnNwZWN0aW9uIEVTNlVudXNlZEltcG9ydHMsSlNVbnVzZWRHbG9iYWxTeW1ib2xzLEpTVW51c2VkTG9jYWxTeW1ib2xzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbG9wQ29udGV4dCA9IGV4cG9ydHMuQXRvbUNvbnRleHQgPSBleHBvcnRzLlN1bUNvbnRleHQgPSBleHBvcnRzLlJpZ2h0X0Nsb3NlZElzT3BlbkNvbnRleHQgPSBleHBvcnRzLk9wZW5Db250ZXh0ID0gZXhwb3J0cy5SaWdodF9DbG9zZWRJbXBsaWNpdFByb2R1Y3RDb250ZXh0ID0gZXhwb3J0cy5DbG9zZWRJc1JpZ2h0X0Nsb3NlZENvbnRleHQgPSBleHBvcnRzLlVuYXJ5T25FeHByZXNzaW9uQ29udGV4dCA9IGV4cG9ydHMuUmlnaHRfY2xvc2VkQ29udGV4dCA9IGV4cG9ydHMuUGFyZW5Db250ZXh0ID0gZXhwb3J0cy5Qb3dlckNvbnRleHQgPSBleHBvcnRzLkNsb3NlZEF0b21Db250ZXh0ID0gZXhwb3J0cy5EaXZpc2lvbkNvbnRleHQgPSBleHBvcnRzLlByb2R1Y3RDb250ZXh0ID0gZXhwb3J0cy5JbnRlZ3JhbENvbnRleHQgPSBleHBvcnRzLkxvZ0NvbnRleHQgPSBleHBvcnRzLkNsb3NlZENvbnRleHQgPSBleHBvcnRzLkV4cHJlc3Npb25Db250ZXh0ID0gZXhwb3J0cy5FcXVhdGlvbkNvbnRleHQgPSB2b2lkIDA7XG5jb25zdCBhbnRscjRfMSA9IHJlcXVpcmUoXCJhbnRscjRcIik7XG5jbGFzcyBhcml0aG1ldGljUGFyc2VyIGV4dGVuZHMgYW50bHI0XzEuUGFyc2VyIHtcbiAgICBzdGF0aWMgU0NJRU5USUZJQ19OVU1CRVIgPSAxO1xuICAgIHN0YXRpYyBMUEFSRU4gPSAyO1xuICAgIHN0YXRpYyBSUEFSRU4gPSAzO1xuICAgIHN0YXRpYyBQTFVTID0gNDtcbiAgICBzdGF0aWMgTUlOVVMgPSA1O1xuICAgIHN0YXRpYyBUSU1FUyA9IDY7XG4gICAgc3RhdGljIERJViA9IDc7XG4gICAgc3RhdGljIEdUID0gODtcbiAgICBzdGF0aWMgTFQgPSA5O1xuICAgIHN0YXRpYyBFUSA9IDEwO1xuICAgIHN0YXRpYyBQT0lOVCA9IDExO1xuICAgIHN0YXRpYyBQT1cgPSAxMjtcbiAgICBzdGF0aWMgSU5UID0gMTM7XG4gICAgc3RhdGljIExPRyA9IDE0O1xuICAgIHN0YXRpYyBWQVJJQUJMRSA9IDE1O1xuICAgIHN0YXRpYyBXUyA9IDE2O1xuICAgIHN0YXRpYyBFT0YgPSBhbnRscjRfMS5Ub2tlbi5FT0Y7XG4gICAgc3RhdGljIFJVTEVfZXF1YXRpb24gPSAwO1xuICAgIHN0YXRpYyBSVUxFX2V4cHJlc3Npb24gPSAxO1xuICAgIHN0YXRpYyBSVUxFX2Nsb3NlZCA9IDI7XG4gICAgc3RhdGljIFJVTEVfcmlnaHRfY2xvc2VkID0gMztcbiAgICBzdGF0aWMgUlVMRV9vcGVuID0gNDtcbiAgICBzdGF0aWMgUlVMRV9hdG9tID0gNTtcbiAgICBzdGF0aWMgUlVMRV9yZWxvcCA9IDY7XG4gICAgc3RhdGljIGxpdGVyYWxOYW1lcyA9IFtudWxsLCBudWxsLFxuICAgICAgICBcIicoJ1wiLCBcIicpJ1wiLFxuICAgICAgICBcIicrJ1wiLCBcIictJ1wiLFxuICAgICAgICBudWxsLCBcIicvJ1wiLFxuICAgICAgICBcIic+J1wiLCBcIic8J1wiLFxuICAgICAgICBcIic9J1wiLCBcIicuJ1wiLFxuICAgICAgICBcIideJ1wiXTtcbiAgICBzdGF0aWMgc3ltYm9saWNOYW1lcyA9IFtudWxsLCBcIlNDSUVOVElGSUNfTlVNQkVSXCIsXG4gICAgICAgIFwiTFBBUkVOXCIsIFwiUlBBUkVOXCIsXG4gICAgICAgIFwiUExVU1wiLCBcIk1JTlVTXCIsXG4gICAgICAgIFwiVElNRVNcIiwgXCJESVZcIixcbiAgICAgICAgXCJHVFwiLCBcIkxUXCIsXG4gICAgICAgIFwiRVFcIiwgXCJQT0lOVFwiLFxuICAgICAgICBcIlBPV1wiLCBcIklOVFwiLFxuICAgICAgICBcIkxPR1wiLCBcIlZBUklBQkxFXCIsXG4gICAgICAgIFwiV1NcIl07XG4gICAgLy8gdHNsaW50OmRpc2FibGU6bm8tdHJhaWxpbmctd2hpdGVzcGFjZVxuICAgIHN0YXRpYyBydWxlTmFtZXMgPSBbXG4gICAgICAgIFwiZXF1YXRpb25cIiwgXCJleHByZXNzaW9uXCIsIFwiY2xvc2VkXCIsIFwicmlnaHRfY2xvc2VkXCIsIFwib3BlblwiLCBcImF0b21cIiwgXCJyZWxvcFwiLFxuICAgIF07XG4gICAgZ2V0IGdyYW1tYXJGaWxlTmFtZSgpIHsgcmV0dXJuIFwiYXJpdGhtZXRpYy5nNFwiOyB9XG4gICAgZ2V0IGxpdGVyYWxOYW1lcygpIHsgcmV0dXJuIGFyaXRobWV0aWNQYXJzZXIubGl0ZXJhbE5hbWVzOyB9XG4gICAgZ2V0IHN5bWJvbGljTmFtZXMoKSB7IHJldHVybiBhcml0aG1ldGljUGFyc2VyLnN5bWJvbGljTmFtZXM7IH1cbiAgICBnZXQgcnVsZU5hbWVzKCkgeyByZXR1cm4gYXJpdGhtZXRpY1BhcnNlci5ydWxlTmFtZXM7IH1cbiAgICBnZXQgc2VyaWFsaXplZEFUTigpIHsgcmV0dXJuIGFyaXRobWV0aWNQYXJzZXIuX3NlcmlhbGl6ZWRBVE47IH1cbiAgICBjcmVhdGVGYWlsZWRQcmVkaWNhdGVFeGNlcHRpb24ocHJlZGljYXRlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgYW50bHI0XzEuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uKHRoaXMsIHByZWRpY2F0ZSwgbWVzc2FnZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIHN1cGVyKGlucHV0KTtcbiAgICAgICAgdGhpcy5faW50ZXJwID0gbmV3IGFudGxyNF8xLlBhcnNlckFUTlNpbXVsYXRvcih0aGlzLCBhcml0aG1ldGljUGFyc2VyLl9BVE4sIGFyaXRobWV0aWNQYXJzZXIuRGVjaXNpb25zVG9ERkEsIG5ldyBhbnRscjRfMS5QcmVkaWN0aW9uQ29udGV4dENhY2hlKCkpO1xuICAgIH1cbiAgICAvLyBAUnVsZVZlcnNpb24oMClcbiAgICBlcXVhdGlvbigpIHtcbiAgICAgICAgbGV0IGxvY2FsY3R4ID0gbmV3IEVxdWF0aW9uQ29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIHRoaXMuc3RhdGUpO1xuICAgICAgICB0aGlzLmVudGVyUnVsZShsb2NhbGN0eCwgMCwgYXJpdGhtZXRpY1BhcnNlci5SVUxFX2VxdWF0aW9uKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDE0O1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAxNTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDE2O1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChyZSkge1xuICAgICAgICAgICAgaWYgKHJlIGluc3RhbmNlb2YgYW50bHI0XzEuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGN0eC5leGNlcHRpb24gPSByZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLmV4aXRSdWxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsY3R4O1xuICAgIH1cbiAgICAvLyBAUnVsZVZlcnNpb24oMClcbiAgICBleHByZXNzaW9uKCkge1xuICAgICAgICBsZXQgbG9jYWxjdHggPSBuZXcgRXhwcmVzc2lvbkNvbnRleHQodGhpcywgdGhpcy5fY3R4LCB0aGlzLnN0YXRlKTtcbiAgICAgICAgdGhpcy5lbnRlclJ1bGUobG9jYWxjdHgsIDIsIGFyaXRobWV0aWNQYXJzZXIuUlVMRV9leHByZXNzaW9uKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDE4O1xuICAgICAgICAgICAgICAgIHRoaXMub3BlbigwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAocmUpIHtcbiAgICAgICAgICAgIGlmIChyZSBpbnN0YW5jZW9mIGFudGxyNF8xLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxjdHguZXhjZXB0aW9uID0gcmU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZXBvcnRFcnJvcih0aGlzLCByZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IHJlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5leGl0UnVsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGN0eDtcbiAgICB9XG4gICAgLy8gQFJ1bGVWZXJzaW9uKDApXG4gICAgY2xvc2VkKF9wKSB7XG4gICAgICAgIGlmIChfcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfcCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IF9wYXJlbnRjdHggPSB0aGlzLl9jdHg7XG4gICAgICAgIGxldCBfcGFyZW50U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBsZXQgbG9jYWxjdHggPSBuZXcgQ2xvc2VkQ29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIF9wYXJlbnRTdGF0ZSk7XG4gICAgICAgIGxldCBfcHJldmN0eCA9IGxvY2FsY3R4O1xuICAgICAgICBsZXQgX3N0YXJ0U3RhdGUgPSA0O1xuICAgICAgICB0aGlzLmVudGVyUmVjdXJzaW9uUnVsZShsb2NhbGN0eCwgNCwgYXJpdGhtZXRpY1BhcnNlci5SVUxFX2Nsb3NlZCwgX3ApO1xuICAgICAgICBsZXQgX2xhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IF9hbHQ7XG4gICAgICAgICAgICB0aGlzLmVudGVyT3V0ZXJBbHQobG9jYWxjdHgsIDEpO1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAzMztcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9pbnB1dC5MQSgxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHggPSBuZXcgUGFyZW5Db250ZXh0KHRoaXMsIGxvY2FsY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdHggPSBsb2NhbGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcHJldmN0eCA9IGxvY2FsY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAyMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoKGFyaXRobWV0aWNQYXJzZXIuTFBBUkVOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gMjI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAyMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoKGFyaXRobWV0aWNQYXJzZXIuUlBBUkVOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHggPSBuZXcgQ2xvc2VkQXRvbUNvbnRleHQodGhpcywgbG9jYWxjdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N0eCA9IGxvY2FsY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wcmV2Y3R4ID0gbG9jYWxjdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXRvbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHggPSBuZXcgSW50ZWdyYWxDb250ZXh0KHRoaXMsIGxvY2FsY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdHggPSBsb2NhbGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcHJldmN0eCA9IGxvY2FsY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAyNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoKGFyaXRobWV0aWNQYXJzZXIuSU5UKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gMjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHguX2ludGVncmFuZCA9IHRoaXMuY2xvc2VkKDUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHggPSBuZXcgTG9nQ29udGV4dCh0aGlzLCBsb2NhbGN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3R4ID0gbG9jYWxjdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ByZXZjdHggPSBsb2NhbGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gMjg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaChhcml0aG1ldGljUGFyc2VyLkxPRyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX2ludGVycC5hZGFwdGl2ZVByZWRpY3QodGhpcy5faW5wdXQsIDAsIHRoaXMuX2N0eCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAyOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eC5fYmFzZSA9IHRoaXMuY2xvc2VkKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eC5fY29udGVudCA9IHRoaXMuY2xvc2VkKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYW50bHI0XzEuTm9WaWFibGVBbHRFeGNlcHRpb24odGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2N0eC5zdG9wID0gdGhpcy5faW5wdXQuTFQoLTEpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA0ODtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XG4gICAgICAgICAgICAgICAgX2FsdCA9IHRoaXMuX2ludGVycC5hZGFwdGl2ZVByZWRpY3QodGhpcy5faW5wdXQsIDQsIHRoaXMuX2N0eCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKF9hbHQgIT09IDIgJiYgX2FsdCAhPT0gYW50bHI0XzEuQVROLklOVkFMSURfQUxUX05VTUJFUikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2FsdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BhcnNlTGlzdGVuZXJzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJFeGl0UnVsZUV2ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfcHJldmN0eCA9IGxvY2FsY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA0NjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9pbnRlcnAuYWRhcHRpdmVQcmVkaWN0KHRoaXMuX2lucHV0LCAzLCB0aGlzLl9jdHgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eCA9IG5ldyBEaXZpc2lvbkNvbnRleHQodGhpcywgbmV3IENsb3NlZENvbnRleHQodGhpcywgX3BhcmVudGN0eCwgX3BhcmVudFN0YXRlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHguX2xlZnQgPSBfcHJldmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hOZXdSZWN1cnNpb25Db250ZXh0KGxvY2FsY3R4LCBfc3RhcnRTdGF0ZSwgYXJpdGhtZXRpY1BhcnNlci5SVUxFX2Nsb3NlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDM1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMucHJlY3ByZWQodGhpcy5fY3R4LCA0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5jcmVhdGVGYWlsZWRQcmVkaWNhdGVFeGNlcHRpb24oXCJ0aGlzLnByZWNwcmVkKHRoaXMuX2N0eCwgNClcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAzNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoKGFyaXRobWV0aWNQYXJzZXIuRElWKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gMzc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHguX3JpZ2h0ID0gdGhpcy5jbG9zZWQoNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsY3R4ID0gbmV3IFBvd2VyQ29udGV4dCh0aGlzLCBuZXcgQ2xvc2VkQ29udGV4dCh0aGlzLCBfcGFyZW50Y3R4LCBfcGFyZW50U3RhdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eC5fbGVmdCA9IF9wcmV2Y3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaE5ld1JlY3Vyc2lvbkNvbnRleHQobG9jYWxjdHgsIF9zdGFydFN0YXRlLCBhcml0aG1ldGljUGFyc2VyLlJVTEVfY2xvc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gMzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5wcmVjcHJlZCh0aGlzLl9jdHgsIDMpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLmNyZWF0ZUZhaWxlZFByZWRpY2F0ZUV4Y2VwdGlvbihcInRoaXMucHJlY3ByZWQodGhpcy5fY3R4LCAzKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2goYXJpdGhtZXRpY1BhcnNlci5QT1cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA0MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eC5fcmlnaHQgPSB0aGlzLmNsb3NlZCg0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHggPSBuZXcgUHJvZHVjdENvbnRleHQodGhpcywgbmV3IENsb3NlZENvbnRleHQodGhpcywgX3BhcmVudGN0eCwgX3BhcmVudFN0YXRlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHguX2xlZnQgPSBfcHJldmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hOZXdSZWN1cnNpb25Db250ZXh0KGxvY2FsY3R4LCBfc3RhcnRTdGF0ZSwgYXJpdGhtZXRpY1BhcnNlci5SVUxFX2Nsb3NlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDQxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMucHJlY3ByZWQodGhpcy5fY3R4LCAyKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5jcmVhdGVGYWlsZWRQcmVkaWNhdGVFeGNlcHRpb24oXCJ0aGlzLnByZWNwcmVkKHRoaXMuX2N0eCwgMilcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA0MztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xhID0gdGhpcy5faW5wdXQuTEEoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9sYSA9PT0gNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoKGFyaXRobWV0aWNQYXJzZXIuVElNRVMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA0NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eC5fcmlnaHQgPSB0aGlzLmNsb3NlZCgzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNTA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgX2FsdCA9IHRoaXMuX2ludGVycC5hZGFwdGl2ZVByZWRpY3QodGhpcy5faW5wdXQsIDQsIHRoaXMuX2N0eCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChyZSkge1xuICAgICAgICAgICAgaWYgKHJlIGluc3RhbmNlb2YgYW50bHI0XzEuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGN0eC5leGNlcHRpb24gPSByZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVucm9sbFJlY3Vyc2lvbkNvbnRleHRzKF9wYXJlbnRjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGN0eDtcbiAgICB9XG4gICAgLy8gQFJ1bGVWZXJzaW9uKDApXG4gICAgcmlnaHRfY2xvc2VkKF9wKSB7XG4gICAgICAgIGlmIChfcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfcCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IF9wYXJlbnRjdHggPSB0aGlzLl9jdHg7XG4gICAgICAgIGxldCBfcGFyZW50U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBsZXQgbG9jYWxjdHggPSBuZXcgUmlnaHRfY2xvc2VkQ29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIF9wYXJlbnRTdGF0ZSk7XG4gICAgICAgIGxldCBfcHJldmN0eCA9IGxvY2FsY3R4O1xuICAgICAgICBsZXQgX3N0YXJ0U3RhdGUgPSA2O1xuICAgICAgICB0aGlzLmVudGVyUmVjdXJzaW9uUnVsZShsb2NhbGN0eCwgNiwgYXJpdGhtZXRpY1BhcnNlci5SVUxFX3JpZ2h0X2Nsb3NlZCwgX3ApO1xuICAgICAgICBsZXQgX2xhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IF9hbHQ7XG4gICAgICAgICAgICB0aGlzLmVudGVyT3V0ZXJBbHQobG9jYWxjdHgsIDEpO1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA1NTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9pbnB1dC5MQSgxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eCA9IG5ldyBDbG9zZWRJc1JpZ2h0X0Nsb3NlZENvbnRleHQodGhpcywgbG9jYWxjdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N0eCA9IGxvY2FsY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wcmV2Y3R4ID0gbG9jYWxjdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDUyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VkKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsY3R4ID0gbmV3IFVuYXJ5T25FeHByZXNzaW9uQ29udGV4dCh0aGlzLCBsb2NhbGN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3R4ID0gbG9jYWxjdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ByZXZjdHggPSBsb2NhbGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNTM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xhID0gdGhpcy5faW5wdXQuTEEoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2xhID09PSA0IHx8IF9sYSA9PT0gNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVySW5saW5lKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZXBvcnRNYXRjaCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA1NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlZCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGFudGxyNF8xLk5vVmlhYmxlQWx0RXhjZXB0aW9uKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jdHguc3RvcCA9IHRoaXMuX2lucHV0LkxUKC0xKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNjE7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5zeW5jKHRoaXMpO1xuICAgICAgICAgICAgICAgIF9hbHQgPSB0aGlzLl9pbnRlcnAuYWRhcHRpdmVQcmVkaWN0KHRoaXMuX2lucHV0LCA2LCB0aGlzLl9jdHgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChfYWx0ICE9PSAyICYmIF9hbHQgIT09IGFudGxyNF8xLkFUTi5JTlZBTElEX0FMVF9OVU1CRVIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9hbHQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYXJzZUxpc3RlbmVycyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXhpdFJ1bGVFdmVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3ByZXZjdHggPSBsb2NhbGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsY3R4ID0gbmV3IFJpZ2h0X0Nsb3NlZEltcGxpY2l0UHJvZHVjdENvbnRleHQodGhpcywgbmV3IFJpZ2h0X2Nsb3NlZENvbnRleHQodGhpcywgX3BhcmVudGN0eCwgX3BhcmVudFN0YXRlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsY3R4Ll9sZWZ0ID0gX3ByZXZjdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaE5ld1JlY3Vyc2lvbkNvbnRleHQobG9jYWxjdHgsIF9zdGFydFN0YXRlLCBhcml0aG1ldGljUGFyc2VyLlJVTEVfcmlnaHRfY2xvc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDU3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnByZWNwcmVkKHRoaXMuX2N0eCwgMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLmNyZWF0ZUZhaWxlZFByZWRpY2F0ZUV4Y2VwdGlvbihcInRoaXMucHJlY3ByZWQodGhpcy5fY3R4LCAxKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNTg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsY3R4Ll9yaWdodCA9IHRoaXMuY2xvc2VkKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNjM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIuc3luYyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgX2FsdCA9IHRoaXMuX2ludGVycC5hZGFwdGl2ZVByZWRpY3QodGhpcy5faW5wdXQsIDYsIHRoaXMuX2N0eCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChyZSkge1xuICAgICAgICAgICAgaWYgKHJlIGluc3RhbmNlb2YgYW50bHI0XzEuUmVjb2duaXRpb25FeGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGN0eC5leGNlcHRpb24gPSByZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydEVycm9yKHRoaXMsIHJlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXIodGhpcywgcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVucm9sbFJlY3Vyc2lvbkNvbnRleHRzKF9wYXJlbnRjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGN0eDtcbiAgICB9XG4gICAgLy8gQFJ1bGVWZXJzaW9uKDApXG4gICAgb3BlbihfcCkge1xuICAgICAgICBpZiAoX3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX3AgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGxldCBfcGFyZW50Y3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICBsZXQgX3BhcmVudFN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgbGV0IGxvY2FsY3R4ID0gbmV3IE9wZW5Db250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgX3BhcmVudFN0YXRlKTtcbiAgICAgICAgbGV0IF9wcmV2Y3R4ID0gbG9jYWxjdHg7XG4gICAgICAgIGxldCBfc3RhcnRTdGF0ZSA9IDg7XG4gICAgICAgIHRoaXMuZW50ZXJSZWN1cnNpb25SdWxlKGxvY2FsY3R4LCA4LCBhcml0aG1ldGljUGFyc2VyLlJVTEVfb3BlbiwgX3ApO1xuICAgICAgICBsZXQgX2xhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IF9hbHQ7XG4gICAgICAgICAgICB0aGlzLmVudGVyT3V0ZXJBbHQobG9jYWxjdHgsIDEpO1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxjdHggPSBuZXcgUmlnaHRfQ2xvc2VkSXNPcGVuQ29udGV4dCh0aGlzLCBsb2NhbGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N0eCA9IGxvY2FsY3R4O1xuICAgICAgICAgICAgICAgICAgICBfcHJldmN0eCA9IGxvY2FsY3R4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNjU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHRfY2xvc2VkKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jdHguc3RvcCA9IHRoaXMuX2lucHV0LkxUKC0xKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNzI7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5zeW5jKHRoaXMpO1xuICAgICAgICAgICAgICAgIF9hbHQgPSB0aGlzLl9pbnRlcnAuYWRhcHRpdmVQcmVkaWN0KHRoaXMuX2lucHV0LCA3LCB0aGlzLl9jdHgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChfYWx0ICE9PSAyICYmIF9hbHQgIT09IGFudGxyNF8xLkFUTi5JTlZBTElEX0FMVF9OVU1CRVIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9hbHQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYXJzZUxpc3RlbmVycyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXhpdFJ1bGVFdmVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3ByZXZjdHggPSBsb2NhbGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsY3R4ID0gbmV3IFN1bUNvbnRleHQodGhpcywgbmV3IE9wZW5Db250ZXh0KHRoaXMsIF9wYXJlbnRjdHgsIF9wYXJlbnRTdGF0ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eC5fbGVmdCA9IF9wcmV2Y3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hOZXdSZWN1cnNpb25Db250ZXh0KGxvY2FsY3R4LCBfc3RhcnRTdGF0ZSwgYXJpdGhtZXRpY1BhcnNlci5SVUxFX29wZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gNjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMucHJlY3ByZWQodGhpcy5fY3R4LCAxKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHRoaXMuY3JlYXRlRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uKFwidGhpcy5wcmVjcHJlZCh0aGlzLl9jdHgsIDEpXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA2ODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xhID0gdGhpcy5faW5wdXQuTEEoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9sYSA9PT0gNCB8fCBfbGEgPT09IDUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXJJbmxpbmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydE1hdGNoKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDY5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGN0eC5fcmlnaHQgPSB0aGlzLnJpZ2h0X2Nsb3NlZCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDc0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnN5bmModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIF9hbHQgPSB0aGlzLl9pbnRlcnAuYWRhcHRpdmVQcmVkaWN0KHRoaXMuX2lucHV0LCA3LCB0aGlzLl9jdHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAocmUpIHtcbiAgICAgICAgICAgIGlmIChyZSBpbnN0YW5jZW9mIGFudGxyNF8xLlJlY29nbml0aW9uRXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxjdHguZXhjZXB0aW9uID0gcmU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZXBvcnRFcnJvcih0aGlzLCByZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJySGFuZGxlci5yZWNvdmVyKHRoaXMsIHJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IHJlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnJvbGxSZWN1cnNpb25Db250ZXh0cyhfcGFyZW50Y3R4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxjdHg7XG4gICAgfVxuICAgIC8vIEBSdWxlVmVyc2lvbigwKVxuICAgIGF0b20oKSB7XG4gICAgICAgIGxldCBsb2NhbGN0eCA9IG5ldyBBdG9tQ29udGV4dCh0aGlzLCB0aGlzLl9jdHgsIHRoaXMuc3RhdGUpO1xuICAgICAgICB0aGlzLmVudGVyUnVsZShsb2NhbGN0eCwgMTAsIGFyaXRobWV0aWNQYXJzZXIuUlVMRV9hdG9tKTtcbiAgICAgICAgbGV0IF9sYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDc1O1xuICAgICAgICAgICAgICAgIF9sYSA9IHRoaXMuX2lucHV0LkxBKDEpO1xuICAgICAgICAgICAgICAgIGlmICghKF9sYSA9PT0gMSB8fCBfbGEgPT09IDE1KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXJJbmxpbmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydE1hdGNoKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHJlKSB7XG4gICAgICAgICAgICBpZiAocmUgaW5zdGFuY2VvZiBhbnRscjRfMS5SZWNvZ25pdGlvbkV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVwb3J0RXJyb3IodGhpcywgcmUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVjb3Zlcih0aGlzLCByZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyByZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuZXhpdFJ1bGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxjdHg7XG4gICAgfVxuICAgIC8vIEBSdWxlVmVyc2lvbigwKVxuICAgIHJlbG9wKCkge1xuICAgICAgICBsZXQgbG9jYWxjdHggPSBuZXcgUmVsb3BDb250ZXh0KHRoaXMsIHRoaXMuX2N0eCwgdGhpcy5zdGF0ZSk7XG4gICAgICAgIHRoaXMuZW50ZXJSdWxlKGxvY2FsY3R4LCAxMiwgYXJpdGhtZXRpY1BhcnNlci5SVUxFX3JlbG9wKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgMSk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IDc3O1xuICAgICAgICAgICAgICAgIHRoaXMubWF0Y2goYXJpdGhtZXRpY1BhcnNlci5FUSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHJlKSB7XG4gICAgICAgICAgICBpZiAocmUgaW5zdGFuY2VvZiBhbnRscjRfMS5SZWNvZ25pdGlvbkV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIGxvY2FsY3R4LmV4Y2VwdGlvbiA9IHJlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVwb3J0RXJyb3IodGhpcywgcmUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VyckhhbmRsZXIucmVjb3Zlcih0aGlzLCByZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyByZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuZXhpdFJ1bGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxjdHg7XG4gICAgfVxuICAgIHNlbXByZWQobG9jYWxjdHgsIHJ1bGVJbmRleCwgcHJlZEluZGV4KSB7XG4gICAgICAgIHN3aXRjaCAocnVsZUluZGV4KSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VkX3NlbXByZWQobG9jYWxjdHgsIHByZWRJbmRleCk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmlnaHRfY2xvc2VkX3NlbXByZWQobG9jYWxjdHgsIHByZWRJbmRleCk7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3Blbl9zZW1wcmVkKGxvY2FsY3R4LCBwcmVkSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjbG9zZWRfc2VtcHJlZChsb2NhbGN0eCwgcHJlZEluZGV4KSB7XG4gICAgICAgIHN3aXRjaCAocHJlZEluZGV4KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJlY3ByZWQodGhpcy5fY3R4LCA0KTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcmVjcHJlZCh0aGlzLl9jdHgsIDMpO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByZWNwcmVkKHRoaXMuX2N0eCwgMik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJpZ2h0X2Nsb3NlZF9zZW1wcmVkKGxvY2FsY3R4LCBwcmVkSW5kZXgpIHtcbiAgICAgICAgc3dpdGNoIChwcmVkSW5kZXgpIHtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcmVjcHJlZCh0aGlzLl9jdHgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBvcGVuX3NlbXByZWQobG9jYWxjdHgsIHByZWRJbmRleCkge1xuICAgICAgICBzd2l0Y2ggKHByZWRJbmRleCkge1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByZWNwcmVkKHRoaXMuX2N0eCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHN0YXRpYyBfc2VyaWFsaXplZEFUTiA9IFs0LCAxLCAxNiwgODAsIDIsIDAsIDcsIDAsIDIsXG4gICAgICAgIDEsIDcsIDEsIDIsIDIsIDcsIDIsIDIsIDMsIDcsIDMsIDIsIDQsIDcsIDQsIDIsIDUsIDcsIDUsIDIsIDYsIDcsIDYsIDEsIDAsIDEsIDAsIDEsIDAsIDEsIDAsIDEsIDEsIDEsIDEsIDEsXG4gICAgICAgIDIsIDEsIDIsIDEsIDIsIDEsIDIsIDEsIDIsIDEsIDIsIDEsIDIsIDEsIDIsIDEsIDIsIDEsIDIsIDMsIDIsIDMxLCA4LCAyLCAxLCAyLCAzLCAyLCAzNCwgOCwgMiwgMSwgMiwgMSwgMixcbiAgICAgICAgMSwgMiwgMSwgMiwgMSwgMiwgMSwgMiwgMSwgMiwgMSwgMiwgMywgMiwgNDQsIDgsIDIsIDEsIDIsIDUsIDIsIDQ3LCA4LCAyLCAxMCwgMiwgMTIsIDIsIDUwLCA5LCAyLCAxLCAzLFxuICAgICAgICAxLCAzLCAxLCAzLCAxLCAzLCAzLCAzLCA1NiwgOCwgMywgMSwgMywgMSwgMywgNSwgMywgNjAsIDgsIDMsIDEwLCAzLCAxMiwgMywgNjMsIDksIDMsIDEsIDQsIDEsIDQsIDEsIDQsXG4gICAgICAgIDEsIDQsIDEsIDQsIDEsIDQsIDUsIDQsIDcxLCA4LCA0LCAxMCwgNCwgMTIsIDQsIDc0LCA5LCA0LCAxLCA1LCAxLCA1LCAxLCA2LCAxLCA2LCAxLCA2LCAwLCAzLCA0LCA2LCA4LCA3LFxuICAgICAgICAwLCAyLCA0LCA2LCA4LCAxMCwgMTIsIDAsIDIsIDEsIDAsIDQsIDUsIDIsIDAsIDEsIDEsIDE1LCAxNSwgODMsIDAsIDE0LCAxLCAwLCAwLCAwLCAyLCAxOCwgMSwgMCwgMCwgMCxcbiAgICAgICAgNCwgMzMsIDEsIDAsIDAsIDAsIDYsIDU1LCAxLCAwLCAwLCAwLCA4LCA2NCwgMSwgMCwgMCwgMCwgMTAsIDc1LCAxLCAwLCAwLCAwLCAxMiwgNzcsIDEsIDAsIDAsIDAsIDE0LCAxNSxcbiAgICAgICAgMywgMiwgMSwgMCwgMTUsIDE2LCAzLCAxMiwgNiwgMCwgMTYsIDE3LCAzLCAyLCAxLCAwLCAxNywgMSwgMSwgMCwgMCwgMCwgMTgsIDE5LCAzLCA4LCA0LCAwLCAxOSwgMywgMSxcbiAgICAgICAgMCwgMCwgMCwgMjAsIDIxLCA2LCAyLCAtMSwgMCwgMjEsIDIyLCA1LCAyLCAwLCAwLCAyMiwgMjMsIDMsIDgsIDQsIDAsIDIzLCAyNCwgNSwgMywgMCwgMCwgMjQsIDM0LCAxLFxuICAgICAgICAwLCAwLCAwLCAyNSwgMzQsIDMsIDEwLCA1LCAwLCAyNiwgMjcsIDUsIDEzLCAwLCAwLCAyNywgMzQsIDMsIDQsIDIsIDUsIDI4LCAzMCwgNSwgMTQsIDAsIDAsIDI5LCAzMSxcbiAgICAgICAgMywgNCwgMiwgMCwgMzAsIDI5LCAxLCAwLCAwLCAwLCAzMCwgMzEsIDEsIDAsIDAsIDAsIDMxLCAzMiwgMSwgMCwgMCwgMCwgMzIsIDM0LCAzLCA0LCAyLCAxLCAzMywgMjAsIDEsXG4gICAgICAgIDAsIDAsIDAsIDMzLCAyNSwgMSwgMCwgMCwgMCwgMzMsIDI2LCAxLCAwLCAwLCAwLCAzMywgMjgsIDEsIDAsIDAsIDAsIDM0LCA0OCwgMSwgMCwgMCwgMCwgMzUsIDM2LCAxMCxcbiAgICAgICAgNCwgMCwgMCwgMzYsIDM3LCA1LCA3LCAwLCAwLCAzNywgNDcsIDMsIDQsIDIsIDUsIDM4LCAzOSwgMTAsIDMsIDAsIDAsIDM5LCA0MCwgNSwgMTIsIDAsIDAsIDQwLCA0NywgMyxcbiAgICAgICAgNCwgMiwgNCwgNDEsIDQzLCAxMCwgMiwgMCwgMCwgNDIsIDQ0LCA1LCA2LCAwLCAwLCA0MywgNDIsIDEsIDAsIDAsIDAsIDQzLCA0NCwgMSwgMCwgMCwgMCwgNDQsIDQ1LCAxLFxuICAgICAgICAwLCAwLCAwLCA0NSwgNDcsIDMsIDQsIDIsIDMsIDQ2LCAzNSwgMSwgMCwgMCwgMCwgNDYsIDM4LCAxLCAwLCAwLCAwLCA0NiwgNDEsIDEsIDAsIDAsIDAsIDQ3LCA1MCwgMSwgMCxcbiAgICAgICAgMCwgMCwgNDgsIDQ2LCAxLCAwLCAwLCAwLCA0OCwgNDksIDEsIDAsIDAsIDAsIDQ5LCA1LCAxLCAwLCAwLCAwLCA1MCwgNDgsIDEsIDAsIDAsIDAsIDUxLCA1MiwgNiwgMywgLTEsXG4gICAgICAgIDAsIDUyLCA1NiwgMywgNCwgMiwgMCwgNTMsIDU0LCA3LCAwLCAwLCAwLCA1NCwgNTYsIDMsIDQsIDIsIDAsIDU1LCA1MSwgMSwgMCwgMCwgMCwgNTUsIDUzLCAxLCAwLCAwLCAwLFxuICAgICAgICA1NiwgNjEsIDEsIDAsIDAsIDAsIDU3LCA1OCwgMTAsIDEsIDAsIDAsIDU4LCA2MCwgMywgNCwgMiwgMCwgNTksIDU3LCAxLCAwLCAwLCAwLCA2MCwgNjMsIDEsIDAsIDAsIDAsXG4gICAgICAgIDYxLCA1OSwgMSwgMCwgMCwgMCwgNjEsIDYyLCAxLCAwLCAwLCAwLCA2MiwgNywgMSwgMCwgMCwgMCwgNjMsIDYxLCAxLCAwLCAwLCAwLCA2NCwgNjUsIDYsIDQsIC0xLCAwLCA2NSxcbiAgICAgICAgNjYsIDMsIDYsIDMsIDAsIDY2LCA3MiwgMSwgMCwgMCwgMCwgNjcsIDY4LCAxMCwgMSwgMCwgMCwgNjgsIDY5LCA3LCAwLCAwLCAwLCA2OSwgNzEsIDMsIDYsIDMsIDAsIDcwLFxuICAgICAgICA2NywgMSwgMCwgMCwgMCwgNzEsIDc0LCAxLCAwLCAwLCAwLCA3MiwgNzAsIDEsIDAsIDAsIDAsIDcyLCA3MywgMSwgMCwgMCwgMCwgNzMsIDksIDEsIDAsIDAsIDAsIDc0LCA3MixcbiAgICAgICAgMSwgMCwgMCwgMCwgNzUsIDc2LCA3LCAxLCAwLCAwLCA3NiwgMTEsIDEsIDAsIDAsIDAsIDc3LCA3OCwgNSwgMTAsIDAsIDAsIDc4LCAxMywgMSwgMCwgMCwgMCwgOCwgMzAsIDMzLFxuICAgICAgICA0MywgNDYsIDQ4LCA1NSwgNjEsIDcyXTtcbiAgICBzdGF0aWMgX19BVE47XG4gICAgc3RhdGljIGdldCBfQVROKCkge1xuICAgICAgICBpZiAoIWFyaXRobWV0aWNQYXJzZXIuX19BVE4pIHtcbiAgICAgICAgICAgIGFyaXRobWV0aWNQYXJzZXIuX19BVE4gPSBuZXcgYW50bHI0XzEuQVRORGVzZXJpYWxpemVyKCkuZGVzZXJpYWxpemUoYXJpdGhtZXRpY1BhcnNlci5fc2VyaWFsaXplZEFUTik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyaXRobWV0aWNQYXJzZXIuX19BVE47XG4gICAgfVxuICAgIHN0YXRpYyBEZWNpc2lvbnNUb0RGQSA9IGFyaXRobWV0aWNQYXJzZXIuX0FUTi5kZWNpc2lvblRvU3RhdGUubWFwKChkcywgaW5kZXgpID0+IG5ldyBhbnRscjRfMS5ERkEoZHMsIGluZGV4KSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBhcml0aG1ldGljUGFyc2VyO1xuY2xhc3MgRXF1YXRpb25Db250ZXh0IGV4dGVuZHMgYW50bHI0XzEuUGFyc2VyUnVsZUNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIH1cbiAgICBleHByZXNzaW9uX2xpc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHRzKEV4cHJlc3Npb25Db250ZXh0KTtcbiAgICB9XG4gICAgZXhwcmVzc2lvbihpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoRXhwcmVzc2lvbkNvbnRleHQsIGkpO1xuICAgIH1cbiAgICByZWxvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChSZWxvcENvbnRleHQsIDApO1xuICAgIH1cbiAgICBnZXQgcnVsZUluZGV4KCkge1xuICAgICAgICByZXR1cm4gYXJpdGhtZXRpY1BhcnNlci5SVUxFX2VxdWF0aW9uO1xuICAgIH1cbiAgICBlbnRlclJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmVudGVyRXF1YXRpb24pIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmVudGVyRXF1YXRpb24odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhpdFJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmV4aXRFcXVhdGlvbikge1xuICAgICAgICAgICAgbGlzdGVuZXIuZXhpdEVxdWF0aW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEBPdmVycmlkZVxuICAgIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICAgIGlmICh2aXNpdG9yLnZpc2l0RXF1YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0RXF1YXRpb24odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdENoaWxkcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5FcXVhdGlvbkNvbnRleHQgPSBFcXVhdGlvbkNvbnRleHQ7XG5jbGFzcyBFeHByZXNzaW9uQ29udGV4dCBleHRlbmRzIGFudGxyNF8xLlBhcnNlclJ1bGVDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIHBhcmVudCwgaW52b2tpbmdTdGF0ZSkge1xuICAgICAgICBzdXBlcihwYXJlbnQsIGludm9raW5nU3RhdGUpO1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChPcGVuQ29udGV4dCwgMCk7XG4gICAgfVxuICAgIGdldCBydWxlSW5kZXgoKSB7XG4gICAgICAgIHJldHVybiBhcml0aG1ldGljUGFyc2VyLlJVTEVfZXhwcmVzc2lvbjtcbiAgICB9XG4gICAgZW50ZXJSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5lbnRlckV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmVudGVyRXhwcmVzc2lvbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0UnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZXhpdEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmV4aXRFeHByZXNzaW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEBPdmVycmlkZVxuICAgIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICAgIGlmICh2aXNpdG9yLnZpc2l0RXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRFeHByZXNzaW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRXhwcmVzc2lvbkNvbnRleHQgPSBFeHByZXNzaW9uQ29udGV4dDtcbmNsYXNzIENsb3NlZENvbnRleHQgZXh0ZW5kcyBhbnRscjRfMS5QYXJzZXJSdWxlQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgfVxuICAgIGdldCBydWxlSW5kZXgoKSB7XG4gICAgICAgIHJldHVybiBhcml0aG1ldGljUGFyc2VyLlJVTEVfY2xvc2VkO1xuICAgIH1cbiAgICBjb3B5RnJvbShjdHgpIHtcbiAgICAgICAgc3VwZXIuY29weUZyb20oY3R4KTtcbiAgICB9XG59XG5leHBvcnRzLkNsb3NlZENvbnRleHQgPSBDbG9zZWRDb250ZXh0O1xuY2xhc3MgTG9nQ29udGV4dCBleHRlbmRzIENsb3NlZENvbnRleHQge1xuICAgIF9iYXNlO1xuICAgIF9jb250ZW50O1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgY3R4KSB7XG4gICAgICAgIHN1cGVyKHBhcnNlciwgY3R4LnBhcmVudEN0eCwgY3R4Lmludm9raW5nU3RhdGUpO1xuICAgICAgICBzdXBlci5jb3B5RnJvbShjdHgpO1xuICAgIH1cbiAgICBMT0coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRva2VuKGFyaXRobWV0aWNQYXJzZXIuTE9HLCAwKTtcbiAgICB9XG4gICAgY2xvc2VkX2xpc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHRzKENsb3NlZENvbnRleHQpO1xuICAgIH1cbiAgICBjbG9zZWQoaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KENsb3NlZENvbnRleHQsIGkpO1xuICAgIH1cbiAgICBlbnRlclJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmVudGVyTG9nKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlckxvZyh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0UnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZXhpdExvZykge1xuICAgICAgICAgICAgbGlzdGVuZXIuZXhpdExvZyh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdExvZykge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRMb2codGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdENoaWxkcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Mb2dDb250ZXh0ID0gTG9nQ29udGV4dDtcbmNsYXNzIEludGVncmFsQ29udGV4dCBleHRlbmRzIENsb3NlZENvbnRleHQge1xuICAgIF9pbnRlZ3JhbmQ7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBjdHgpIHtcbiAgICAgICAgc3VwZXIocGFyc2VyLCBjdHgucGFyZW50Q3R4LCBjdHguaW52b2tpbmdTdGF0ZSk7XG4gICAgICAgIHN1cGVyLmNvcHlGcm9tKGN0eCk7XG4gICAgfVxuICAgIElOVCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW4oYXJpdGhtZXRpY1BhcnNlci5JTlQsIDApO1xuICAgIH1cbiAgICBjbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoQ2xvc2VkQ29udGV4dCwgMCk7XG4gICAgfVxuICAgIGVudGVyUnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZW50ZXJJbnRlZ3JhbCkge1xuICAgICAgICAgICAgbGlzdGVuZXIuZW50ZXJJbnRlZ3JhbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0UnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZXhpdEludGVncmFsKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5leGl0SW50ZWdyYWwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQE92ZXJyaWRlXG4gICAgYWNjZXB0KHZpc2l0b3IpIHtcbiAgICAgICAgaWYgKHZpc2l0b3IudmlzaXRJbnRlZ3JhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRJbnRlZ3JhbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkludGVncmFsQ29udGV4dCA9IEludGVncmFsQ29udGV4dDtcbmNsYXNzIFByb2R1Y3RDb250ZXh0IGV4dGVuZHMgQ2xvc2VkQ29udGV4dCB7XG4gICAgX2xlZnQ7XG4gICAgX3JpZ2h0O1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgY3R4KSB7XG4gICAgICAgIHN1cGVyKHBhcnNlciwgY3R4LnBhcmVudEN0eCwgY3R4Lmludm9raW5nU3RhdGUpO1xuICAgICAgICBzdXBlci5jb3B5RnJvbShjdHgpO1xuICAgIH1cbiAgICBjbG9zZWRfbGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dHMoQ2xvc2VkQ29udGV4dCk7XG4gICAgfVxuICAgIGNsb3NlZChpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoQ2xvc2VkQ29udGV4dCwgaSk7XG4gICAgfVxuICAgIFRJTUVTKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihhcml0aG1ldGljUGFyc2VyLlRJTUVTLCAwKTtcbiAgICB9XG4gICAgZW50ZXJSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5lbnRlclByb2R1Y3QpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmVudGVyUHJvZHVjdCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0UnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZXhpdFByb2R1Y3QpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmV4aXRQcm9kdWN0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEBPdmVycmlkZVxuICAgIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICAgIGlmICh2aXNpdG9yLnZpc2l0UHJvZHVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRQcm9kdWN0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUHJvZHVjdENvbnRleHQgPSBQcm9kdWN0Q29udGV4dDtcbmNsYXNzIERpdmlzaW9uQ29udGV4dCBleHRlbmRzIENsb3NlZENvbnRleHQge1xuICAgIF9sZWZ0O1xuICAgIF9yaWdodDtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIGN0eCkge1xuICAgICAgICBzdXBlcihwYXJzZXIsIGN0eC5wYXJlbnRDdHgsIGN0eC5pbnZva2luZ1N0YXRlKTtcbiAgICAgICAgc3VwZXIuY29weUZyb20oY3R4KTtcbiAgICB9XG4gICAgRElWKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihhcml0aG1ldGljUGFyc2VyLkRJViwgMCk7XG4gICAgfVxuICAgIGNsb3NlZF9saXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0cyhDbG9zZWRDb250ZXh0KTtcbiAgICB9XG4gICAgY2xvc2VkKGkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChDbG9zZWRDb250ZXh0LCBpKTtcbiAgICB9XG4gICAgZW50ZXJSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5lbnRlckRpdmlzaW9uKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlckRpdmlzaW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4aXRSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5leGl0RGl2aXNpb24pIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmV4aXREaXZpc2lvbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdERpdmlzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdERpdmlzaW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRGl2aXNpb25Db250ZXh0ID0gRGl2aXNpb25Db250ZXh0O1xuY2xhc3MgQ2xvc2VkQXRvbUNvbnRleHQgZXh0ZW5kcyBDbG9zZWRDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIGN0eCkge1xuICAgICAgICBzdXBlcihwYXJzZXIsIGN0eC5wYXJlbnRDdHgsIGN0eC5pbnZva2luZ1N0YXRlKTtcbiAgICAgICAgc3VwZXIuY29weUZyb20oY3R4KTtcbiAgICB9XG4gICAgYXRvbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChBdG9tQ29udGV4dCwgMCk7XG4gICAgfVxuICAgIGVudGVyUnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZW50ZXJDbG9zZWRBdG9tKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlckNsb3NlZEF0b20odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhpdFJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmV4aXRDbG9zZWRBdG9tKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5leGl0Q2xvc2VkQXRvbSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdENsb3NlZEF0b20pIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2xvc2VkQXRvbSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNsb3NlZEF0b21Db250ZXh0ID0gQ2xvc2VkQXRvbUNvbnRleHQ7XG5jbGFzcyBQb3dlckNvbnRleHQgZXh0ZW5kcyBDbG9zZWRDb250ZXh0IHtcbiAgICBfbGVmdDtcbiAgICBfcmlnaHQ7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBjdHgpIHtcbiAgICAgICAgc3VwZXIocGFyc2VyLCBjdHgucGFyZW50Q3R4LCBjdHguaW52b2tpbmdTdGF0ZSk7XG4gICAgICAgIHN1cGVyLmNvcHlGcm9tKGN0eCk7XG4gICAgfVxuICAgIFBPVygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW4oYXJpdGhtZXRpY1BhcnNlci5QT1csIDApO1xuICAgIH1cbiAgICBjbG9zZWRfbGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dHMoQ2xvc2VkQ29udGV4dCk7XG4gICAgfVxuICAgIGNsb3NlZChpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoQ2xvc2VkQ29udGV4dCwgaSk7XG4gICAgfVxuICAgIGVudGVyUnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZW50ZXJQb3dlcikge1xuICAgICAgICAgICAgbGlzdGVuZXIuZW50ZXJQb3dlcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0UnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZXhpdFBvd2VyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5leGl0UG93ZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQE92ZXJyaWRlXG4gICAgYWNjZXB0KHZpc2l0b3IpIHtcbiAgICAgICAgaWYgKHZpc2l0b3IudmlzaXRQb3dlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRQb3dlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBvd2VyQ29udGV4dCA9IFBvd2VyQ29udGV4dDtcbmNsYXNzIFBhcmVuQ29udGV4dCBleHRlbmRzIENsb3NlZENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgY3R4KSB7XG4gICAgICAgIHN1cGVyKHBhcnNlciwgY3R4LnBhcmVudEN0eCwgY3R4Lmludm9raW5nU3RhdGUpO1xuICAgICAgICBzdXBlci5jb3B5RnJvbShjdHgpO1xuICAgIH1cbiAgICBMUEFSRU4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRva2VuKGFyaXRobWV0aWNQYXJzZXIuTFBBUkVOLCAwKTtcbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChPcGVuQ29udGV4dCwgMCk7XG4gICAgfVxuICAgIFJQQVJFTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW4oYXJpdGhtZXRpY1BhcnNlci5SUEFSRU4sIDApO1xuICAgIH1cbiAgICBlbnRlclJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmVudGVyUGFyZW4pIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmVudGVyUGFyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhpdFJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmV4aXRQYXJlbikge1xuICAgICAgICAgICAgbGlzdGVuZXIuZXhpdFBhcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEBPdmVycmlkZVxuICAgIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICAgIGlmICh2aXNpdG9yLnZpc2l0UGFyZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0UGFyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdENoaWxkcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5QYXJlbkNvbnRleHQgPSBQYXJlbkNvbnRleHQ7XG5jbGFzcyBSaWdodF9jbG9zZWRDb250ZXh0IGV4dGVuZHMgYW50bHI0XzEuUGFyc2VyUnVsZUNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyZW50LCBpbnZva2luZ1N0YXRlKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCwgaW52b2tpbmdTdGF0ZSk7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIH1cbiAgICBnZXQgcnVsZUluZGV4KCkge1xuICAgICAgICByZXR1cm4gYXJpdGhtZXRpY1BhcnNlci5SVUxFX3JpZ2h0X2Nsb3NlZDtcbiAgICB9XG4gICAgY29weUZyb20oY3R4KSB7XG4gICAgICAgIHN1cGVyLmNvcHlGcm9tKGN0eCk7XG4gICAgfVxufVxuZXhwb3J0cy5SaWdodF9jbG9zZWRDb250ZXh0ID0gUmlnaHRfY2xvc2VkQ29udGV4dDtcbmNsYXNzIFVuYXJ5T25FeHByZXNzaW9uQ29udGV4dCBleHRlbmRzIFJpZ2h0X2Nsb3NlZENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgY3R4KSB7XG4gICAgICAgIHN1cGVyKHBhcnNlciwgY3R4LnBhcmVudEN0eCwgY3R4Lmludm9raW5nU3RhdGUpO1xuICAgICAgICBzdXBlci5jb3B5RnJvbShjdHgpO1xuICAgIH1cbiAgICBjbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoQ2xvc2VkQ29udGV4dCwgMCk7XG4gICAgfVxuICAgIFBMVVMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRva2VuKGFyaXRobWV0aWNQYXJzZXIuUExVUywgMCk7XG4gICAgfVxuICAgIE1JTlVTKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihhcml0aG1ldGljUGFyc2VyLk1JTlVTLCAwKTtcbiAgICB9XG4gICAgZW50ZXJSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5lbnRlclVuYXJ5T25FeHByZXNzaW9uKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlclVuYXJ5T25FeHByZXNzaW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4aXRSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5leGl0VW5hcnlPbkV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmV4aXRVbmFyeU9uRXhwcmVzc2lvbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdFVuYXJ5T25FeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFVuYXJ5T25FeHByZXNzaW9uKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVW5hcnlPbkV4cHJlc3Npb25Db250ZXh0ID0gVW5hcnlPbkV4cHJlc3Npb25Db250ZXh0O1xuY2xhc3MgQ2xvc2VkSXNSaWdodF9DbG9zZWRDb250ZXh0IGV4dGVuZHMgUmlnaHRfY2xvc2VkQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBjdHgpIHtcbiAgICAgICAgc3VwZXIocGFyc2VyLCBjdHgucGFyZW50Q3R4LCBjdHguaW52b2tpbmdTdGF0ZSk7XG4gICAgICAgIHN1cGVyLmNvcHlGcm9tKGN0eCk7XG4gICAgfVxuICAgIGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZWRSdWxlQ29udGV4dChDbG9zZWRDb250ZXh0LCAwKTtcbiAgICB9XG4gICAgZW50ZXJSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5lbnRlckNsb3NlZElzUmlnaHRfQ2xvc2VkKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlckNsb3NlZElzUmlnaHRfQ2xvc2VkKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4aXRSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5leGl0Q2xvc2VkSXNSaWdodF9DbG9zZWQpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmV4aXRDbG9zZWRJc1JpZ2h0X0Nsb3NlZCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdENsb3NlZElzUmlnaHRfQ2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdENsb3NlZElzUmlnaHRfQ2xvc2VkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ2xvc2VkSXNSaWdodF9DbG9zZWRDb250ZXh0ID0gQ2xvc2VkSXNSaWdodF9DbG9zZWRDb250ZXh0O1xuY2xhc3MgUmlnaHRfQ2xvc2VkSW1wbGljaXRQcm9kdWN0Q29udGV4dCBleHRlbmRzIFJpZ2h0X2Nsb3NlZENvbnRleHQge1xuICAgIF9sZWZ0O1xuICAgIF9yaWdodDtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIGN0eCkge1xuICAgICAgICBzdXBlcihwYXJzZXIsIGN0eC5wYXJlbnRDdHgsIGN0eC5pbnZva2luZ1N0YXRlKTtcbiAgICAgICAgc3VwZXIuY29weUZyb20oY3R4KTtcbiAgICB9XG4gICAgcmlnaHRfY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KFJpZ2h0X2Nsb3NlZENvbnRleHQsIDApO1xuICAgIH1cbiAgICBjbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoQ2xvc2VkQ29udGV4dCwgMCk7XG4gICAgfVxuICAgIGVudGVyUnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZW50ZXJSaWdodF9DbG9zZWRJbXBsaWNpdFByb2R1Y3QpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmVudGVyUmlnaHRfQ2xvc2VkSW1wbGljaXRQcm9kdWN0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4aXRSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5leGl0UmlnaHRfQ2xvc2VkSW1wbGljaXRQcm9kdWN0KSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5leGl0UmlnaHRfQ2xvc2VkSW1wbGljaXRQcm9kdWN0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEBPdmVycmlkZVxuICAgIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICAgIGlmICh2aXNpdG9yLnZpc2l0UmlnaHRfQ2xvc2VkSW1wbGljaXRQcm9kdWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFJpZ2h0X0Nsb3NlZEltcGxpY2l0UHJvZHVjdCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJpZ2h0X0Nsb3NlZEltcGxpY2l0UHJvZHVjdENvbnRleHQgPSBSaWdodF9DbG9zZWRJbXBsaWNpdFByb2R1Y3RDb250ZXh0O1xuY2xhc3MgT3BlbkNvbnRleHQgZXh0ZW5kcyBhbnRscjRfMS5QYXJzZXJSdWxlQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgfVxuICAgIGdldCBydWxlSW5kZXgoKSB7XG4gICAgICAgIHJldHVybiBhcml0aG1ldGljUGFyc2VyLlJVTEVfb3BlbjtcbiAgICB9XG4gICAgY29weUZyb20oY3R4KSB7XG4gICAgICAgIHN1cGVyLmNvcHlGcm9tKGN0eCk7XG4gICAgfVxufVxuZXhwb3J0cy5PcGVuQ29udGV4dCA9IE9wZW5Db250ZXh0O1xuY2xhc3MgUmlnaHRfQ2xvc2VkSXNPcGVuQ29udGV4dCBleHRlbmRzIE9wZW5Db250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIGN0eCkge1xuICAgICAgICBzdXBlcihwYXJzZXIsIGN0eC5wYXJlbnRDdHgsIGN0eC5pbnZva2luZ1N0YXRlKTtcbiAgICAgICAgc3VwZXIuY29weUZyb20oY3R4KTtcbiAgICB9XG4gICAgcmlnaHRfY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KFJpZ2h0X2Nsb3NlZENvbnRleHQsIDApO1xuICAgIH1cbiAgICBlbnRlclJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmVudGVyUmlnaHRfQ2xvc2VkSXNPcGVuKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlclJpZ2h0X0Nsb3NlZElzT3Blbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0UnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZXhpdFJpZ2h0X0Nsb3NlZElzT3Blbikge1xuICAgICAgICAgICAgbGlzdGVuZXIuZXhpdFJpZ2h0X0Nsb3NlZElzT3Blbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdFJpZ2h0X0Nsb3NlZElzT3Blbikge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRSaWdodF9DbG9zZWRJc09wZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdENoaWxkcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5SaWdodF9DbG9zZWRJc09wZW5Db250ZXh0ID0gUmlnaHRfQ2xvc2VkSXNPcGVuQ29udGV4dDtcbmNsYXNzIFN1bUNvbnRleHQgZXh0ZW5kcyBPcGVuQ29udGV4dCB7XG4gICAgX2xlZnQ7XG4gICAgX3JpZ2h0O1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgY3R4KSB7XG4gICAgICAgIHN1cGVyKHBhcnNlciwgY3R4LnBhcmVudEN0eCwgY3R4Lmludm9raW5nU3RhdGUpO1xuICAgICAgICBzdXBlci5jb3B5RnJvbShjdHgpO1xuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUeXBlZFJ1bGVDb250ZXh0KE9wZW5Db250ZXh0LCAwKTtcbiAgICB9XG4gICAgUExVUygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW4oYXJpdGhtZXRpY1BhcnNlci5QTFVTLCAwKTtcbiAgICB9XG4gICAgTUlOVVMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRva2VuKGFyaXRobWV0aWNQYXJzZXIuTUlOVVMsIDApO1xuICAgIH1cbiAgICByaWdodF9jbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGVkUnVsZUNvbnRleHQoUmlnaHRfY2xvc2VkQ29udGV4dCwgMCk7XG4gICAgfVxuICAgIGVudGVyUnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZW50ZXJTdW0pIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmVudGVyU3VtKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4aXRSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5leGl0U3VtKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5leGl0U3VtKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEBPdmVycmlkZVxuICAgIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgICAgIGlmICh2aXNpdG9yLnZpc2l0U3VtKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFN1bSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlN1bUNvbnRleHQgPSBTdW1Db250ZXh0O1xuY2xhc3MgQXRvbUNvbnRleHQgZXh0ZW5kcyBhbnRscjRfMS5QYXJzZXJSdWxlQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgfVxuICAgIFNDSUVOVElGSUNfTlVNQkVSKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihhcml0aG1ldGljUGFyc2VyLlNDSUVOVElGSUNfTlVNQkVSLCAwKTtcbiAgICB9XG4gICAgVkFSSUFCTEUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRva2VuKGFyaXRobWV0aWNQYXJzZXIuVkFSSUFCTEUsIDApO1xuICAgIH1cbiAgICBnZXQgcnVsZUluZGV4KCkge1xuICAgICAgICByZXR1cm4gYXJpdGhtZXRpY1BhcnNlci5SVUxFX2F0b207XG4gICAgfVxuICAgIGVudGVyUnVsZShsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIuZW50ZXJBdG9tKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlckF0b20odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhpdFJ1bGUobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmV4aXRBdG9tKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5leGl0QXRvbSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdEF0b20pIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QXRvbSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkF0b21Db250ZXh0ID0gQXRvbUNvbnRleHQ7XG5jbGFzcyBSZWxvcENvbnRleHQgZXh0ZW5kcyBhbnRscjRfMS5QYXJzZXJSdWxlQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBpbnZva2luZ1N0YXRlKTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgfVxuICAgIEVRKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUb2tlbihhcml0aG1ldGljUGFyc2VyLkVRLCAwKTtcbiAgICB9XG4gICAgZ2V0IHJ1bGVJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIGFyaXRobWV0aWNQYXJzZXIuUlVMRV9yZWxvcDtcbiAgICB9XG4gICAgZW50ZXJSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5lbnRlclJlbG9wKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lbnRlclJlbG9wKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4aXRSdWxlKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lci5leGl0UmVsb3ApIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmV4aXRSZWxvcCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAT3ZlcnJpZGVcbiAgICBhY2NlcHQodmlzaXRvcikge1xuICAgICAgICBpZiAodmlzaXRvci52aXNpdFJlbG9wKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFJlbG9wKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUmVsb3BDb250ZXh0ID0gUmVsb3BDb250ZXh0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBHZW5lcmF0ZWQgZnJvbSAuL3NyYy9tYXRobGliL3VzZXJpbnB1dC9hcml0aG1ldGljLmc0IGJ5IEFOVExSIDQuMTMuMFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYW50bHI0XzEgPSByZXF1aXJlKFwiYW50bHI0XCIpO1xuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBkZWZpbmVzIGEgY29tcGxldGUgZ2VuZXJpYyB2aXNpdG9yIGZvciBhIHBhcnNlIHRyZWUgcHJvZHVjZWRcbiAqIGJ5IGBhcml0aG1ldGljUGFyc2VyYC5cbiAqXG4gKiBAcGFyYW0gPFJlc3VsdD4gVGhlIHJldHVybiB0eXBlIG9mIHRoZSB2aXNpdCBvcGVyYXRpb24uIFVzZSBgdm9pZGAgZm9yXG4gKiBvcGVyYXRpb25zIHdpdGggbm8gcmV0dXJuIHR5cGUuXG4gKi9cbmNsYXNzIGFyaXRobWV0aWNWaXNpdG9yIGV4dGVuZHMgYW50bHI0XzEuUGFyc2VUcmVlVmlzaXRvciB7XG4gICAgLyoqXG4gICAgICogVmlzaXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IGBhcml0aG1ldGljUGFyc2VyLmVxdWF0aW9uYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdEVxdWF0aW9uO1xuICAgIC8qKlxuICAgICAqIFZpc2l0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSBgYXJpdGhtZXRpY1BhcnNlci5leHByZXNzaW9uYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdEV4cHJlc3Npb247XG4gICAgLyoqXG4gICAgICogVmlzaXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IHRoZSBgTG9nYFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIuY2xvc2VkYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdExvZztcbiAgICAvKipcbiAgICAgKiBWaXNpdCBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgdGhlIGBJbnRlZ3JhbGBcbiAgICAgKiBsYWJlbGVkIGFsdGVybmF0aXZlIGluIGBhcml0aG1ldGljUGFyc2VyLmNsb3NlZGAuXG4gICAgICogQHBhcmFtIGN0eCB0aGUgcGFyc2UgdHJlZVxuICAgICAqIEByZXR1cm4gdGhlIHZpc2l0b3IgcmVzdWx0XG4gICAgICovXG4gICAgdmlzaXRJbnRlZ3JhbDtcbiAgICAvKipcbiAgICAgKiBWaXNpdCBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgdGhlIGBQcm9kdWN0YFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIuY2xvc2VkYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdFByb2R1Y3Q7XG4gICAgLyoqXG4gICAgICogVmlzaXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IHRoZSBgRGl2aXNpb25gXG4gICAgICogbGFiZWxlZCBhbHRlcm5hdGl2ZSBpbiBgYXJpdGhtZXRpY1BhcnNlci5jbG9zZWRgLlxuICAgICAqIEBwYXJhbSBjdHggdGhlIHBhcnNlIHRyZWVcbiAgICAgKiBAcmV0dXJuIHRoZSB2aXNpdG9yIHJlc3VsdFxuICAgICAqL1xuICAgIHZpc2l0RGl2aXNpb247XG4gICAgLyoqXG4gICAgICogVmlzaXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IHRoZSBgQ2xvc2VkQXRvbWBcbiAgICAgKiBsYWJlbGVkIGFsdGVybmF0aXZlIGluIGBhcml0aG1ldGljUGFyc2VyLmNsb3NlZGAuXG4gICAgICogQHBhcmFtIGN0eCB0aGUgcGFyc2UgdHJlZVxuICAgICAqIEByZXR1cm4gdGhlIHZpc2l0b3IgcmVzdWx0XG4gICAgICovXG4gICAgdmlzaXRDbG9zZWRBdG9tO1xuICAgIC8qKlxuICAgICAqIFZpc2l0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSB0aGUgYFBvd2VyYFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIuY2xvc2VkYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdFBvd2VyO1xuICAgIC8qKlxuICAgICAqIFZpc2l0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSB0aGUgYFBhcmVuYFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIuY2xvc2VkYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdFBhcmVuO1xuICAgIC8qKlxuICAgICAqIFZpc2l0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSB0aGUgYFVuYXJ5T25FeHByZXNzaW9uYFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIucmlnaHRfY2xvc2VkYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdFVuYXJ5T25FeHByZXNzaW9uO1xuICAgIC8qKlxuICAgICAqIFZpc2l0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSB0aGUgYENsb3NlZElzUmlnaHRfQ2xvc2VkYFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIucmlnaHRfY2xvc2VkYC5cbiAgICAgKiBAcGFyYW0gY3R4IHRoZSBwYXJzZSB0cmVlXG4gICAgICogQHJldHVybiB0aGUgdmlzaXRvciByZXN1bHRcbiAgICAgKi9cbiAgICB2aXNpdENsb3NlZElzUmlnaHRfQ2xvc2VkO1xuICAgIC8qKlxuICAgICAqIFZpc2l0IGEgcGFyc2UgdHJlZSBwcm9kdWNlZCBieSB0aGUgYFJpZ2h0X0Nsb3NlZEltcGxpY2l0UHJvZHVjdGBcbiAgICAgKiBsYWJlbGVkIGFsdGVybmF0aXZlIGluIGBhcml0aG1ldGljUGFyc2VyLnJpZ2h0X2Nsb3NlZGAuXG4gICAgICogQHBhcmFtIGN0eCB0aGUgcGFyc2UgdHJlZVxuICAgICAqIEByZXR1cm4gdGhlIHZpc2l0b3IgcmVzdWx0XG4gICAgICovXG4gICAgdmlzaXRSaWdodF9DbG9zZWRJbXBsaWNpdFByb2R1Y3Q7XG4gICAgLyoqXG4gICAgICogVmlzaXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IHRoZSBgUmlnaHRfQ2xvc2VkSXNPcGVuYFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIub3BlbmAuXG4gICAgICogQHBhcmFtIGN0eCB0aGUgcGFyc2UgdHJlZVxuICAgICAqIEByZXR1cm4gdGhlIHZpc2l0b3IgcmVzdWx0XG4gICAgICovXG4gICAgdmlzaXRSaWdodF9DbG9zZWRJc09wZW47XG4gICAgLyoqXG4gICAgICogVmlzaXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IHRoZSBgU3VtYFxuICAgICAqIGxhYmVsZWQgYWx0ZXJuYXRpdmUgaW4gYGFyaXRobWV0aWNQYXJzZXIub3BlbmAuXG4gICAgICogQHBhcmFtIGN0eCB0aGUgcGFyc2UgdHJlZVxuICAgICAqIEByZXR1cm4gdGhlIHZpc2l0b3IgcmVzdWx0XG4gICAgICovXG4gICAgdmlzaXRTdW07XG4gICAgLyoqXG4gICAgICogVmlzaXQgYSBwYXJzZSB0cmVlIHByb2R1Y2VkIGJ5IGBhcml0aG1ldGljUGFyc2VyLmF0b21gLlxuICAgICAqIEBwYXJhbSBjdHggdGhlIHBhcnNlIHRyZWVcbiAgICAgKiBAcmV0dXJuIHRoZSB2aXNpdG9yIHJlc3VsdFxuICAgICAqL1xuICAgIHZpc2l0QXRvbTtcbiAgICAvKipcbiAgICAgKiBWaXNpdCBhIHBhcnNlIHRyZWUgcHJvZHVjZWQgYnkgYGFyaXRobWV0aWNQYXJzZXIucmVsb3BgLlxuICAgICAqIEBwYXJhbSBjdHggdGhlIHBhcnNlIHRyZWVcbiAgICAgKiBAcmV0dXJuIHRoZSB2aXNpdG9yIHJlc3VsdFxuICAgICAqL1xuICAgIHZpc2l0UmVsb3A7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBhcml0aG1ldGljVmlzaXRvcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbk1hdGhCbG9jayA9IGV4cG9ydHMuaW5NYXRoID0gZXhwb3J0cy5pblJvdyA9IGV4cG9ydHMuaW5QYXJlbiA9IHZvaWQgMDtcbi8qKlxuICogV3JhcHMgdGhlIGdpdmVuIG1hdGhtbCBzdHJpbmcgaW4gbWF0aG1sIHBhcmVudGhhc2VzLlxuICogQHBhcmFtIHN0clxuICovXG5mdW5jdGlvbiBpblBhcmVuKHN0cikge1xuICAgIHJldHVybiBcIjxtbz4oPC9tbz5cIiArIHN0ciArIFwiPG1vPik8L21vPlwiO1xufVxuZXhwb3J0cy5pblBhcmVuID0gaW5QYXJlbjtcbi8qKlxuICogUHV0cyB0aGUgZ2l2ZW4gbWF0aG1sIGV4cHJlc3Npb24gaW4gYSByb3cgc28gdGhhdFxuICogaXQgZG9lc24ndCBnZXQgZGl2aWRlZCBieSBtYXRoamF4LlxuICogQHBhcmFtIHN0clxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gaW5Sb3coc3RyKSB7XG4gICAgcmV0dXJuIFwiPG1yb3c+XCIgKyBzdHIgKyBcIjwvbXJvdz5cIjtcbn1cbmV4cG9ydHMuaW5Sb3cgPSBpblJvdztcbi8qKlxuICogV3JhcHMgdGhlIGdpdmVuIHN0cmluZyBpbiA8bWF0aD48L21hdGg+XG4gKiBAcGFyYW0gc3RyXG4gKi9cbmZ1bmN0aW9uIGluTWF0aChzdHIpIHtcbiAgICByZXR1cm4gXCI8bWF0aD5cIiArIHN0ciArIFwiPC9tYXRoPlwiO1xufVxuZXhwb3J0cy5pbk1hdGggPSBpbk1hdGg7XG4vKipcbiAqIFdyYXBzIHRoZSBnaXZlbiBzdHJpbmcgaW4gPG1hdGggZGlzcGxheT0nYmxvY2snPjwvbWF0aD5cbiAqIEBwYXJhbSBzdHJcbiAqL1xuZnVuY3Rpb24gaW5NYXRoQmxvY2soc3RyKSB7XG4gICAgcmV0dXJuIFwiPG1hdGggZGlzcGxheT0nYmxvY2snPlwiICsgc3RyICsgXCI8L21hdGg+XCI7XG59XG5leHBvcnRzLmluTWF0aEJsb2NrID0gaW5NYXRoQmxvY2s7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzID0gZXhwb3J0cy5hZGRBbGwgPSBleHBvcnRzLnNldE9mID0gdm9pZCAwO1xuZnVuY3Rpb24gc2V0T2YoLi4uYXJyKSB7XG4gICAgY29uc3Qgb3V0ID0gbmV3IFNldCgpO1xuICAgIGFyci5mb3JFYWNoKGUgPT4gb3V0LmFkZChlKSk7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMuc2V0T2YgPSBzZXRPZjtcbi8qKlxuICogQWRkcyB0aGUgZ2l2ZW4gZWxlbWVudHMgdG8gdGhlIGdpdmVuIGNvbGxlY3Rpb25cbiAqIEBwYXJhbSBjb2xsZWN0aW9uXG4gKiBAcGFyYW0gZWxlbWVudHNcbiAqL1xuZnVuY3Rpb24gYWRkQWxsKGNvbGxlY3Rpb24sIC4uLmVsZW1lbnRzKSB7XG4gICAgZm9yIChjb25zdCBlIG9mIGVsZW1lbnRzKSB7XG4gICAgICAgIGNvbGxlY3Rpb24uYWRkKGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuYWRkQWxsID0gYWRkQWxsO1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgaW4gdGhlIGdpdmVuIGNvbGxlY3Rpb25cbiAqIHVzaW5nIHJlZmVyZW5jaWFsIGVxdWFsaXR5LlxuICogQHBhcmFtIGNvbGxlY3Rpb25cbiAqIEBwYXJhbSBlbGVtZW50XG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBjb2xsZWN0aW9uIGhhcyB0aGUgZWxlbWVudCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBoYXMoY29sbGVjdGlvbiwgZWxlbWVudCkge1xuICAgIGZvciAoY29uc3QgZSBvZiBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChlID09PSBlbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaGFzID0gaGFzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcl9zb21lID0gZXhwb3J0cy5mb3JfYWxsID0gZXhwb3J0cy5hc3NlcnQgPSB2b2lkIDA7XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiBldmFsdWF0ZWQgdG8gdHJ1ZS4gSWYgbm90LCB0aHJvd3MgZXJyb3JcbiAqIHdpdGggdGhlIG1lc3NhZ2UgZ2l2ZW4uXG4gKiBAcGFyYW0gbXNnIERpc3BsYXllZCBpZiB0aGUgZXhwcmVzc2lvbiBpcyBmYWxzZS4gRGVmYXVsdHMgdG8gXCJGYWlsZWQgQXNzZXJ0XCJcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KGV4cCwgbXNnID0gXCJGYWlsZWQgYXNzZXJ0XCIpIHtcbiAgICBpZiAoIWV4cClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG59XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbmZ1bmN0aW9uIGZvcl9hbGwoaXRlcmFibGUsIGV4cCkge1xuICAgIGZvciAoY29uc3QgaSBvZiBpdGVyYWJsZSkge1xuICAgICAgICBpZiAoIWV4cChpKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmZvcl9hbGwgPSBmb3JfYWxsO1xuZnVuY3Rpb24gZm9yX3NvbWUoaXRlcmFibGUsIGV4cCkge1xuICAgIGZvciAoY29uc3QgaSBvZiBpdGVyYWJsZSkge1xuICAgICAgICBpZiAoZXhwKGkpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuZm9yX3NvbWUgPSBmb3Jfc29tZTtcbiIsIigoKT0+e3ZhciB0PXs5MjooKT0+e319LGU9e307ZnVuY3Rpb24gbihyKXt2YXIgbz1lW3JdO2lmKHZvaWQgMCE9PW8pcmV0dXJuIG8uZXhwb3J0czt2YXIgaT1lW3JdPXtleHBvcnRzOnt9fTtyZXR1cm4gdFtyXShpLGkuZXhwb3J0cyxuKSxpLmV4cG9ydHN9bi5kPSh0LGUpPT57Zm9yKHZhciByIGluIGUpbi5vKGUscikmJiFuLm8odCxyKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQscix7ZW51bWVyYWJsZTohMCxnZXQ6ZVtyXX0pfSxuLm89KHQsZSk9Pk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpLG4ucj10PT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX07dmFyIHI9e307KCgpPT57XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtyZXR1cm4gdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx0KGUpfWZ1bmN0aW9uIGUoZSxuKXtmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIG89bltyXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsKHZvaWQgMCxpPWZ1bmN0aW9uKGUsbil7aWYoXCJvYmplY3RcIiE9PXQoZSl8fG51bGw9PT1lKXJldHVybiBlO3ZhciByPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1yKXt2YXIgbz1yLmNhbGwoZSxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09dChvKSlyZXR1cm4gbzt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyhlKX0oby5rZXkpLFwic3ltYm9sXCI9PT10KGkpP2k6U3RyaW5nKGkpKSxvKX12YXIgaX1uLnIociksbi5kKHIse0FUTjooKT0+RmUsQVRORGVzZXJpYWxpemVyOigpPT5IbyxCYWlsRXJyb3JTdHJhdGVneTooKT0+dGEsQ2hhclN0cmVhbTooKT0+YWEsQ2hhclN0cmVhbXM6KCk9PnZhLENvbW1vblRva2VuOigpPT55aSxDb21tb25Ub2tlblN0cmVhbTooKT0+UmEsREZBOigpPT5jYyxEaWFnbm9zdGljRXJyb3JMaXN0ZW5lcjooKT0+SWMsRXJyb3JMaXN0ZW5lcjooKT0+R28sRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uOigpPT5qYyxJbnB1dFN0cmVhbTooKT0+YWEsSW50ZXJ2YWw6KCk9PkIsSW50ZXJ2YWxTZXQ6KCk9PlYsTEwxQW5hbHl6ZXI6KCk9PkllLExleGVyOigpPT5VaSxMZXhlckFUTlNpbXVsYXRvcjooKT0+RXUsTm9WaWFibGVBbHRFeGNlcHRpb246KCk9PkJ1LFBhcnNlVHJlZUxpc3RlbmVyOigpPT55YyxQYXJzZVRyZWVWaXNpdG9yOigpPT52YyxQYXJzZVRyZWVXYWxrZXI6KCk9PmdjLFBhcnNlcjooKT0+VWEsUGFyc2VyQVROU2ltdWxhdG9yOigpPT5ZdSxQYXJzZXJSdWxlQ29udGV4dDooKT0+ZWwsUHJlZGljdGlvbkNvbnRleHRDYWNoZTooKT0+WHUsUHJlZGljdGlvbk1vZGU6KCk9Pkl1LFJlY29nbml0aW9uRXhjZXB0aW9uOigpPT54aSxSdWxlQ29udGV4dDooKT0+ZWUsUnVsZU5vZGU6KCk9PlV0LFRlcm1pbmFsTm9kZTooKT0+SHQsVG9rZW46KCk9Pm8sYXJyYXlUb1N0cmluZzooKT0+YixkZWZhdWx0OigpPT5PbH0pO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5zb3VyY2U9bnVsbCx0aGlzLnR5cGU9bnVsbCx0aGlzLmNoYW5uZWw9bnVsbCx0aGlzLnN0YXJ0PW51bGwsdGhpcy5zdG9wPW51bGwsdGhpcy50b2tlbkluZGV4PW51bGwsdGhpcy5saW5lPW51bGwsdGhpcy5jb2x1bW49bnVsbCx0aGlzLl90ZXh0PW51bGx9dmFyIG4scjtyZXR1cm4gbj10LChyPVt7a2V5OlwiZ2V0VG9rZW5Tb3VyY2VcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNvdXJjZVswXX19LHtrZXk6XCJnZXRJbnB1dFN0cmVhbVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc291cmNlWzFdfX0se2tleTpcInRleHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGV4dH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX3RleHQ9dH19XSkmJmUobi5wcm90b3R5cGUsciksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIGkodCxlKXtpZighQXJyYXkuaXNBcnJheSh0KXx8IUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuITE7aWYodD09PWUpcmV0dXJuITA7aWYodC5sZW5ndGghPT1lLmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKylpZighKHRbbl09PT1lW25dfHx0W25dLmVxdWFscyYmdFtuXS5lcXVhbHMoZVtuXSkpKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHUodCl7cmV0dXJuIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sdSh0KX1vLklOVkFMSURfVFlQRT0wLG8uRVBTSUxPTj0tMixvLk1JTl9VU0VSX1RPS0VOX1RZUEU9MSxvLkVPRj0tMSxvLkRFRkFVTFRfQ0hBTk5FTD0wLG8uSElEREVOX0NIQU5ORUw9MTt2YXIgYz1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqTWF0aC5wb3coMiwzMikpO2Z1bmN0aW9uIGEodCl7aWYoIXQpcmV0dXJuIDA7dmFyIGUsbixyPXUodCksbz1cInN0cmluZ1wiPT09cj90OiEoXCJvYmplY3RcIiE9PXJ8fCF0LnRvU3RyaW5nKSYmdC50b1N0cmluZygpO2lmKCFvKXJldHVybiAwO2Zvcih2YXIgaT0zJm8ubGVuZ3RoLGE9by5sZW5ndGgtaSxsPWMscz0zNDMyOTE4MzUzLGY9NDYxODQ1OTA3LHA9MDtwPGE7KW49MjU1Jm8uY2hhckNvZGVBdChwKXwoMjU1Jm8uY2hhckNvZGVBdCgrK3ApKTw8OHwoMjU1Jm8uY2hhckNvZGVBdCgrK3ApKTw8MTZ8KDI1NSZvLmNoYXJDb2RlQXQoKytwKSk8PDI0LCsrcCxsPTI3NDkyKyg2NTUzNSYoZT01Kig2NTUzNSYobD0obF49bj0oNjU1MzUmKG49KG49KDY1NTM1Jm4pKnMrKCgobj4+PjE2KSpzJjY1NTM1KTw8MTYpJjQyOTQ5NjcyOTUpPDwxNXxuPj4+MTcpKSpmKygoKG4+Pj4xNikqZiY2NTUzNSk8PDE2KSY0Mjk0OTY3Mjk1KTw8MTN8bD4+PjE5KSkrKCg1KihsPj4+MTYpJjY1NTM1KTw8MTYpJjQyOTQ5NjcyOTUpKSsoKDU4OTY0KyhlPj4+MTYpJjY1NTM1KTw8MTYpO3N3aXRjaChuPTAsaSl7Y2FzZSAzOm5ePSgyNTUmby5jaGFyQ29kZUF0KHArMikpPDwxNjtjYXNlIDI6bl49KDI1NSZvLmNoYXJDb2RlQXQocCsxKSk8PDg7Y2FzZSAxOmxePW49KDY1NTM1JihuPShuPSg2NTUzNSYobl49MjU1Jm8uY2hhckNvZGVBdChwKSkpKnMrKCgobj4+PjE2KSpzJjY1NTM1KTw8MTYpJjQyOTQ5NjcyOTUpPDwxNXxuPj4+MTcpKSpmKygoKG4+Pj4xNikqZiY2NTUzNSk8PDE2KSY0Mjk0OTY3Mjk1fXJldHVybiBsXj1vLmxlbmd0aCxsPTIyNDY4MjI1MDcqKDY1NTM1JihsXj1sPj4+MTYpKSsoKDIyNDY4MjI1MDcqKGw+Pj4xNikmNjU1MzUpPDwxNikmNDI5NDk2NzI5NSxsPTMyNjY0ODk5MDkqKDY1NTM1JihsXj1sPj4+MTMpKSsoKDMyNjY0ODk5MDkqKGw+Pj4xNikmNjU1MzUpPDwxNikmNDI5NDk2NzI5NSwobF49bD4+PjE2KT4+PjB9ZnVuY3Rpb24gbCh0KXtyZXR1cm4gbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxsKHQpfWZ1bmN0aW9uIHModCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PWwodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09bChyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1sKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb312YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuY291bnQ9MCx0aGlzLmhhc2g9MH12YXIgZSxuLHI7cmV0dXJuIGU9dCxuPVt7a2V5OlwidXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgZT1hcmd1bWVudHNbdF07aWYobnVsbCE9ZSlpZihBcnJheS5pc0FycmF5KGUpKXRoaXMudXBkYXRlLmFwcGx5KHRoaXMsZSk7ZWxzZXt2YXIgbj0wO3N3aXRjaChsKGUpKXtjYXNlXCJ1bmRlZmluZWRcIjpjYXNlXCJmdW5jdGlvblwiOmNvbnRpbnVlO2Nhc2VcIm51bWJlclwiOmNhc2VcImJvb2xlYW5cIjpuPWU7YnJlYWs7Y2FzZVwic3RyaW5nXCI6bj1hKGUpO2JyZWFrO2RlZmF1bHQ6ZS51cGRhdGVIYXNoQ29kZT9lLnVwZGF0ZUhhc2hDb2RlKHRoaXMpOmNvbnNvbGUubG9nKFwiTm8gdXBkYXRlSGFzaENvZGUgZm9yIFwiK2UudG9TdHJpbmcoKSk7Y29udGludWV9bj0obio9MzQzMjkxODM1Myk8PDE1fG4+Pj4xNyxuKj00NjE4NDU5MDcsdGhpcy5jb3VudD10aGlzLmNvdW50KzE7dmFyIHI9dGhpcy5oYXNoXm47cj01KihyPXI8PDEzfHI+Pj4xOSkrMzg2NDI5MjE5Nix0aGlzLmhhc2g9cn19fX0se2tleTpcImZpbmlzaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5oYXNoXjQqdGhpcy5jb3VudDtyZXR1cm4gdF49dD4+PjE2LHQqPTIyNDY4MjI1MDcsdF49dD4+PjEzLCh0Kj0zMjY2NDg5OTA5KV50Pj4+MTZ9fV0scj1be2tleTpcImhhc2hTdHVmZlwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9bmV3IHQ7cmV0dXJuIGUudXBkYXRlLmFwcGx5KGUsYXJndW1lbnRzKSxlLmZpbmlzaCgpfX1dLG4mJnMoZS5wcm90b3R5cGUsbiksciYmcyhlLHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH0oKTtmdW5jdGlvbiBwKHQpe3JldHVybiB0P1wic3RyaW5nXCI9PXR5cGVvZiB0P2EodCk6dC5oYXNoQ29kZSgpOi0xfWZ1bmN0aW9uIHkodCxlKXtyZXR1cm4gdD90LmVxdWFscyhlKTp0PT09ZX1mdW5jdGlvbiBoKHQpe3JldHVybiBudWxsPT09dD9cIm51bGxcIjp0fWZ1bmN0aW9uIGIodCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/XCJbXCIrdC5tYXAoaCkuam9pbihcIiwgXCIpK1wiXVwiOlwibnVsbFwifWZ1bmN0aW9uIHYodCl7cmV0dXJuIHY9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sdih0KX1mdW5jdGlvbiBkKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT12KHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXYocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09dihvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIG09XCJoLVwiLGc9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsbil7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSx0aGlzLmRhdGE9e30sdGhpcy5oYXNoRnVuY3Rpb249ZXx8cCx0aGlzLmVxdWFsc0Z1bmN0aW9uPW58fHl9dmFyIGUsbjtyZXR1cm4gZT10LG49W3trZXk6XCJhZGRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1tK3RoaXMuaGFzaEZ1bmN0aW9uKHQpO2lmKGUgaW4gdGhpcy5kYXRhKXtmb3IodmFyIG49dGhpcy5kYXRhW2VdLHI9MDtyPG4ubGVuZ3RoO3IrKylpZih0aGlzLmVxdWFsc0Z1bmN0aW9uKHQsbltyXSkpcmV0dXJuIG5bcl07cmV0dXJuIG4ucHVzaCh0KSx0fXJldHVybiB0aGlzLmRhdGFbZV09W3RdLHR9fSx7a2V5OlwiaGFzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXRoaXMuZ2V0KHQpfX0se2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPW0rdGhpcy5oYXNoRnVuY3Rpb24odCk7aWYoZSBpbiB0aGlzLmRhdGEpZm9yKHZhciBuPXRoaXMuZGF0YVtlXSxyPTA7cjxuLmxlbmd0aDtyKyspaWYodGhpcy5lcXVhbHNGdW5jdGlvbih0LG5bcl0pKXJldHVybiBuW3JdO3JldHVybiBudWxsfX0se2tleTpcInZhbHVlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gT2JqZWN0LmtleXModGhpcy5kYXRhKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN0YXJ0c1dpdGgobSl9KSkuZmxhdE1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIHQuZGF0YVtlXX0pLHRoaXMpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gYih0aGlzLnZhbHVlcygpKX19LHtrZXk6XCJsZW5ndGhcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmRhdGEpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3RhcnRzV2l0aChtKX0pKS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmRhdGFbZV0ubGVuZ3RofSksdGhpcykucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0K2V9KSwwKX19XSxuJiZkKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH0oKTtmdW5jdGlvbiBTKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJk8odCxlKX1mdW5jdGlvbiBPKHQsZSl7cmV0dXJuIE89T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxPKHQsZSl9ZnVuY3Rpb24gdyh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBuLHI9Xyh0KTtpZihlKXt2YXIgbz1fKHRoaXMpLmNvbnN0cnVjdG9yO249UmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsbyl9ZWxzZSBuPXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09UChlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyxuKX19ZnVuY3Rpb24gXyh0KXtyZXR1cm4gXz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sXyh0KX1mdW5jdGlvbiBQKHQpe3JldHVybiBQPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LFAodCl9ZnVuY3Rpb24gVCh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gRSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09UCh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1QKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PVAobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIGsodCxlLG4pe3JldHVybiBlJiZFKHQucHJvdG90eXBlLGUpLG4mJkUodCxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9dmFyIGo9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7VCh0aGlzLHQpfXJldHVybiBrKHQsW3trZXk6XCJoYXNoQ29kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IGY7cmV0dXJuIHRoaXMudXBkYXRlSGFzaENvZGUodCksdC5maW5pc2goKX19LHtrZXk6XCJldmFsdWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7fX0se2tleTpcImV2YWxQcmVjZWRlbmNlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpc319XSxbe2tleTpcImFuZENvbnRleHRcIix2YWx1ZTpmdW5jdGlvbihlLG4pe2lmKG51bGw9PT1lfHxlPT09dC5OT05FKXJldHVybiBuO2lmKG51bGw9PT1ufHxuPT09dC5OT05FKXJldHVybiBlO3ZhciByPW5ldyB4KGUsbik7cmV0dXJuIDE9PT1yLm9wbmRzLmxlbmd0aD9yLm9wbmRzWzBdOnJ9fSx7a2V5Olwib3JDb250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24oZSxuKXtpZihudWxsPT09ZSlyZXR1cm4gbjtpZihudWxsPT09bilyZXR1cm4gZTtpZihlPT09dC5OT05FfHxuPT09dC5OT05FKXJldHVybiB0Lk5PTkU7dmFyIHI9bmV3IFIoZSxuKTtyZXR1cm4gMT09PXIub3BuZHMubGVuZ3RoP3Iub3BuZHNbMF06cn19XSksdH0oKSx4PWZ1bmN0aW9uKHQpe1Mobix0KTt2YXIgZT13KG4pO2Z1bmN0aW9uIG4odCxyKXt2YXIgbztUKHRoaXMsbiksbz1lLmNhbGwodGhpcyk7dmFyIGk9bmV3IGc7dCBpbnN0YW5jZW9mIG4/dC5vcG5kcy5tYXAoKGZ1bmN0aW9uKHQpe2kuYWRkKHQpfSkpOmkuYWRkKHQpLHIgaW5zdGFuY2VvZiBuP3Iub3BuZHMubWFwKChmdW5jdGlvbih0KXtpLmFkZCh0KX0pKTppLmFkZChyKTt2YXIgdT1DKGkpO2lmKHUubGVuZ3RoPjApe3ZhciBjPW51bGw7dS5tYXAoKGZ1bmN0aW9uKHQpeyhudWxsPT09Y3x8dC5wcmVjZWRlbmNlPGMucHJlY2VkZW5jZSkmJihjPXQpfSkpLGkuYWRkKGMpfXJldHVybiBvLm9wbmRzPUFycmF5LmZyb20oaS52YWx1ZXMoKSksb31yZXR1cm4gayhuLFt7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXM9PT10fHx0IGluc3RhbmNlb2YgbiYmaSh0aGlzLm9wbmRzLHQub3BuZHMpfX0se2tleTpcInVwZGF0ZUhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC51cGRhdGUodGhpcy5vcG5kcyxcIkFORFwiKX19LHtrZXk6XCJldmFsdWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjx0aGlzLm9wbmRzLmxlbmd0aDtuKyspaWYoIXRoaXMub3BuZHNbbl0uZXZhbHVhdGUodCxlKSlyZXR1cm4hMTtyZXR1cm4hMH19LHtrZXk6XCJldmFsUHJlY2VkZW5jZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPSExLHI9W10sbz0wO288dGhpcy5vcG5kcy5sZW5ndGg7bysrKXt2YXIgaT10aGlzLm9wbmRzW29dLHU9aS5ldmFsUHJlY2VkZW5jZSh0LGUpO2lmKG58PXUhPT1pLG51bGw9PT11KXJldHVybiBudWxsO3UhPT1qLk5PTkUmJnIucHVzaCh1KX1pZighbilyZXR1cm4gdGhpcztpZigwPT09ci5sZW5ndGgpcmV0dXJuIGouTk9ORTt2YXIgYz1udWxsO3JldHVybiByLm1hcCgoZnVuY3Rpb24odCl7Yz1udWxsPT09Yz90OmouYW5kQ29udGV4dChjLHQpfSkpLGN9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMub3BuZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC50b1N0cmluZygpfSkpO3JldHVybih0Lmxlbmd0aD4zP3Quc2xpY2UoMyk6dCkuam9pbihcIiYmXCIpfX1dKSxufShqKSxSPWZ1bmN0aW9uKHQpe1Mobix0KTt2YXIgZT13KG4pO2Z1bmN0aW9uIG4odCxyKXt2YXIgbztUKHRoaXMsbiksbz1lLmNhbGwodGhpcyk7dmFyIGk9bmV3IGc7dCBpbnN0YW5jZW9mIG4/dC5vcG5kcy5tYXAoKGZ1bmN0aW9uKHQpe2kuYWRkKHQpfSkpOmkuYWRkKHQpLHIgaW5zdGFuY2VvZiBuP3Iub3BuZHMubWFwKChmdW5jdGlvbih0KXtpLmFkZCh0KX0pKTppLmFkZChyKTt2YXIgdT1DKGkpO2lmKHUubGVuZ3RoPjApe3ZhciBjPXUuc29ydCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jb21wYXJlVG8oZSl9KSksYT1jW2MubGVuZ3RoLTFdO2kuYWRkKGEpfXJldHVybiBvLm9wbmRzPUFycmF5LmZyb20oaS52YWx1ZXMoKSksb31yZXR1cm4gayhuLFt7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXM9PT10fHx0IGluc3RhbmNlb2YgbiYmaSh0aGlzLm9wbmRzLHQub3BuZHMpfX0se2tleTpcInVwZGF0ZUhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC51cGRhdGUodGhpcy5vcG5kcyxcIk9SXCIpfX0se2tleTpcImV2YWx1YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPHRoaXMub3BuZHMubGVuZ3RoO24rKylpZih0aGlzLm9wbmRzW25dLmV2YWx1YXRlKHQsZSkpcmV0dXJuITA7cmV0dXJuITF9fSx7a2V5OlwiZXZhbFByZWNlZGVuY2VcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0hMSxyPVtdLG89MDtvPHRoaXMub3BuZHMubGVuZ3RoO28rKyl7dmFyIGk9dGhpcy5vcG5kc1tvXSx1PWkuZXZhbFByZWNlZGVuY2UodCxlKTtpZihufD11IT09aSx1PT09ai5OT05FKXJldHVybiBqLk5PTkU7bnVsbCE9PXUmJnIucHVzaCh1KX1pZighbilyZXR1cm4gdGhpcztpZigwPT09ci5sZW5ndGgpcmV0dXJuIG51bGw7cmV0dXJuIHIubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdH0pKSxudWxsfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wbmRzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9TdHJpbmcoKX0pKTtyZXR1cm4odC5sZW5ndGg+Mz90LnNsaWNlKDMpOnQpLmpvaW4oXCJ8fFwiKX19XSksbn0oaik7ZnVuY3Rpb24gQyh0KXt2YXIgZT1bXTtyZXR1cm4gdC52YWx1ZXMoKS5tYXAoKGZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBqLlByZWNlZGVuY2VQcmVkaWNhdGUmJmUucHVzaCh0KX0pKSxlfWZ1bmN0aW9uIEEodCl7cmV0dXJuIEE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sQSh0KX1mdW5jdGlvbiBOKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1BKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PUEocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09QShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gSSh0LGUpe2lmKG51bGw9PT10KXt2YXIgbj17c3RhdGU6bnVsbCxhbHQ6bnVsbCxjb250ZXh0Om51bGwsc2VtYW50aWNDb250ZXh0Om51bGx9O3JldHVybiBlJiYobi5yZWFjaGVzSW50b091dGVyQ29udGV4dD0wKSxufXZhciByPXt9O3JldHVybiByLnN0YXRlPXQuc3RhdGV8fG51bGwsci5hbHQ9dm9pZCAwPT09dC5hbHQ/bnVsbDp0LmFsdCxyLmNvbnRleHQ9dC5jb250ZXh0fHxudWxsLHIuc2VtYW50aWNDb250ZXh0PXQuc2VtYW50aWNDb250ZXh0fHxudWxsLGUmJihyLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0PXQucmVhY2hlc0ludG9PdXRlckNvbnRleHR8fDAsci5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZD10LnByZWNlZGVuY2VGaWx0ZXJTdXBwcmVzc2VkfHwhMSkscn12YXIgTD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuY2hlY2tDb250ZXh0KGUsbiksZT1JKGUpLG49SShuLCEwKSx0aGlzLnN0YXRlPW51bGwhPT1lLnN0YXRlP2Uuc3RhdGU6bi5zdGF0ZSx0aGlzLmFsdD1udWxsIT09ZS5hbHQ/ZS5hbHQ6bi5hbHQsdGhpcy5jb250ZXh0PW51bGwhPT1lLmNvbnRleHQ/ZS5jb250ZXh0Om4uY29udGV4dCx0aGlzLnNlbWFudGljQ29udGV4dD1udWxsIT09ZS5zZW1hbnRpY0NvbnRleHQ/ZS5zZW1hbnRpY0NvbnRleHQ6bnVsbCE9PW4uc2VtYW50aWNDb250ZXh0P24uc2VtYW50aWNDb250ZXh0OmouTk9ORSx0aGlzLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0PW4ucmVhY2hlc0ludG9PdXRlckNvbnRleHQsdGhpcy5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZD1uLnByZWNlZGVuY2VGaWx0ZXJTdXBwcmVzc2VkfXZhciBlLG47cmV0dXJuIGU9dCwobj1be2tleTpcImNoZWNrQ29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7bnVsbCE9PXQuY29udGV4dCYmdm9pZCAwIT09dC5jb250ZXh0fHxudWxsIT09ZSYmbnVsbCE9PWUuY29udGV4dCYmdm9pZCAwIT09ZS5jb250ZXh0fHwodGhpcy5jb250ZXh0PW51bGwpfX0se2tleTpcImhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZjtyZXR1cm4gdGhpcy51cGRhdGVIYXNoQ29kZSh0KSx0LmZpbmlzaCgpfX0se2tleTpcInVwZGF0ZUhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC51cGRhdGUodGhpcy5zdGF0ZS5zdGF0ZU51bWJlcix0aGlzLmFsdCx0aGlzLmNvbnRleHQsdGhpcy5zZW1hbnRpY0NvbnRleHQpfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzPT09ZXx8ZSBpbnN0YW5jZW9mIHQmJnRoaXMuc3RhdGUuc3RhdGVOdW1iZXI9PT1lLnN0YXRlLnN0YXRlTnVtYmVyJiZ0aGlzLmFsdD09PWUuYWx0JiYobnVsbD09PXRoaXMuY29udGV4dD9udWxsPT09ZS5jb250ZXh0OnRoaXMuY29udGV4dC5lcXVhbHMoZS5jb250ZXh0KSkmJnRoaXMuc2VtYW50aWNDb250ZXh0LmVxdWFscyhlLnNlbWFudGljQ29udGV4dCkmJnRoaXMucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQ9PT1lLnByZWNlZGVuY2VGaWx0ZXJTdXBwcmVzc2VkfX0se2tleTpcImhhc2hDb2RlRm9yQ29uZmlnU2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZjtyZXR1cm4gdC51cGRhdGUodGhpcy5zdGF0ZS5zdGF0ZU51bWJlcix0aGlzLmFsdCx0aGlzLnNlbWFudGljQ29udGV4dCksdC5maW5pc2goKX19LHtrZXk6XCJlcXVhbHNGb3JDb25maWdTZXRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcz09PWV8fGUgaW5zdGFuY2VvZiB0JiZ0aGlzLnN0YXRlLnN0YXRlTnVtYmVyPT09ZS5zdGF0ZS5zdGF0ZU51bWJlciYmdGhpcy5hbHQ9PT1lLmFsdCYmdGhpcy5zZW1hbnRpY0NvbnRleHQuZXF1YWxzKGUuc2VtYW50aWNDb250ZXh0KX19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCIoXCIrdGhpcy5zdGF0ZStcIixcIit0aGlzLmFsdCsobnVsbCE9PXRoaXMuY29udGV4dD9cIixbXCIrdGhpcy5jb250ZXh0LnRvU3RyaW5nKCkrXCJdXCI6XCJcIikrKHRoaXMuc2VtYW50aWNDb250ZXh0IT09ai5OT05FP1wiLFwiK3RoaXMuc2VtYW50aWNDb250ZXh0LnRvU3RyaW5nKCk6XCJcIikrKHRoaXMucmVhY2hlc0ludG9PdXRlckNvbnRleHQ+MD9cIix1cD1cIit0aGlzLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0OlwiXCIpK1wiKVwifX1dKSYmTihlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gRCh0KXtyZXR1cm4gRD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxEKHQpfWZ1bmN0aW9uIEYodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PUQodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09RChyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1EKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb312YXIgQj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuc3RhcnQ9ZSx0aGlzLnN0b3A9bn12YXIgZSxuO3JldHVybiBlPXQsKG49W3trZXk6XCJjbG9uZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0KHRoaXMuc3RhcnQsdGhpcy5zdG9wKX19LHtrZXk6XCJjb250YWluc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0Pj10aGlzLnN0YXJ0JiZ0PHRoaXMuc3RvcH19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnQ9PT10aGlzLnN0b3AtMT90aGlzLnN0YXJ0LnRvU3RyaW5nKCk6dGhpcy5zdGFydC50b1N0cmluZygpK1wiLi5cIisodGhpcy5zdG9wLTEpLnRvU3RyaW5nKCl9fSx7a2V5OlwibGVuZ3RoXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcC10aGlzLnN0YXJ0fX1dKSYmRihlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gTSh0KXtyZXR1cm4gTT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxNKHQpfWZ1bmN0aW9uIFUodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PU0odCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09TShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1NKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31CLklOVkFMSURfSU5URVJWQUw9bmV3IEIoLTEsLTIpO3ZhciBWPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5pbnRlcnZhbHM9bnVsbCx0aGlzLnJlYWRPbmx5PSExfXZhciBlLG47cmV0dXJuIGU9dCxuPVt7a2V5OlwiZmlyc3RcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09PXRoaXMuaW50ZXJ2YWxzfHwwPT09dGhpcy5pbnRlcnZhbHMubGVuZ3RoP28uSU5WQUxJRF9UWVBFOnRoaXMuaW50ZXJ2YWxzWzBdLnN0YXJ0fX0se2tleTpcImFkZE9uZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuYWRkSW50ZXJ2YWwobmV3IEIodCx0KzEpKX19LHtrZXk6XCJhZGRSYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5hZGRJbnRlcnZhbChuZXcgQih0LGUrMSkpfX0se2tleTpcImFkZEludGVydmFsXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYobnVsbD09PXRoaXMuaW50ZXJ2YWxzKXRoaXMuaW50ZXJ2YWxzPVtdLHRoaXMuaW50ZXJ2YWxzLnB1c2godC5jbG9uZSgpKTtlbHNle2Zvcih2YXIgZT0wO2U8dGhpcy5pbnRlcnZhbHMubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy5pbnRlcnZhbHNbZV07aWYodC5zdG9wPG4uc3RhcnQpcmV0dXJuIHZvaWQgdGhpcy5pbnRlcnZhbHMuc3BsaWNlKGUsMCx0KTtpZih0LnN0b3A9PT1uLnN0YXJ0KXJldHVybiB2b2lkKHRoaXMuaW50ZXJ2YWxzW2VdPW5ldyBCKHQuc3RhcnQsbi5zdG9wKSk7aWYodC5zdGFydDw9bi5zdG9wKXJldHVybiB0aGlzLmludGVydmFsc1tlXT1uZXcgQihNYXRoLm1pbihuLnN0YXJ0LHQuc3RhcnQpLE1hdGgubWF4KG4uc3RvcCx0LnN0b3ApKSx2b2lkIHRoaXMucmVkdWNlKGUpfXRoaXMuaW50ZXJ2YWxzLnB1c2godC5jbG9uZSgpKX19fSx7a2V5OlwiYWRkU2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4gbnVsbCE9PXQuaW50ZXJ2YWxzJiZ0LmludGVydmFscy5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gZS5hZGRJbnRlcnZhbCh0KX0pLHRoaXMpLHRoaXN9fSx7a2V5OlwicmVkdWNlXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodDx0aGlzLmludGVydmFscy5sZW5ndGgtMSl7dmFyIGU9dGhpcy5pbnRlcnZhbHNbdF0sbj10aGlzLmludGVydmFsc1t0KzFdO2Uuc3RvcD49bi5zdG9wPyh0aGlzLmludGVydmFscy5zcGxpY2UodCsxLDEpLHRoaXMucmVkdWNlKHQpKTplLnN0b3A+PW4uc3RhcnQmJih0aGlzLmludGVydmFsc1t0XT1uZXcgQihlLnN0YXJ0LG4uc3RvcCksdGhpcy5pbnRlcnZhbHMuc3BsaWNlKHQrMSwxKSl9fX0se2tleTpcImNvbXBsZW1lbnRcIix2YWx1ZTpmdW5jdGlvbihlLG4pe3ZhciByPW5ldyB0O3JldHVybiByLmFkZEludGVydmFsKG5ldyBCKGUsbisxKSksbnVsbCE9PXRoaXMuaW50ZXJ2YWxzJiZ0aGlzLmludGVydmFscy5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gci5yZW1vdmVSYW5nZSh0KX0pKSxyfX0se2tleTpcImNvbnRhaW5zXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYobnVsbD09PXRoaXMuaW50ZXJ2YWxzKXJldHVybiExO2Zvcih2YXIgZT0wO2U8dGhpcy5pbnRlcnZhbHMubGVuZ3RoO2UrKylpZih0aGlzLmludGVydmFsc1tlXS5jb250YWlucyh0KSlyZXR1cm4hMDtyZXR1cm4hMX19LHtrZXk6XCJyZW1vdmVSYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHQuc3RhcnQ9PT10LnN0b3AtMSl0aGlzLnJlbW92ZU9uZSh0LnN0YXJ0KTtlbHNlIGlmKG51bGwhPT10aGlzLmludGVydmFscylmb3IodmFyIGU9MCxuPTA7bjx0aGlzLmludGVydmFscy5sZW5ndGg7bisrKXt2YXIgcj10aGlzLmludGVydmFsc1tlXTtpZih0LnN0b3A8PXIuc3RhcnQpcmV0dXJuO2lmKHQuc3RhcnQ+ci5zdGFydCYmdC5zdG9wPHIuc3RvcCl7dGhpcy5pbnRlcnZhbHNbZV09bmV3IEIoci5zdGFydCx0LnN0YXJ0KTt2YXIgbz1uZXcgQih0LnN0b3Asci5zdG9wKTtyZXR1cm4gdm9pZCB0aGlzLmludGVydmFscy5zcGxpY2UoZSwwLG8pfXQuc3RhcnQ8PXIuc3RhcnQmJnQuc3RvcD49ci5zdG9wPyh0aGlzLmludGVydmFscy5zcGxpY2UoZSwxKSxlLT0xKTp0LnN0YXJ0PHIuc3RvcD90aGlzLmludGVydmFsc1tlXT1uZXcgQihyLnN0YXJ0LHQuc3RhcnQpOnQuc3RvcDxyLnN0b3AmJih0aGlzLmludGVydmFsc1tlXT1uZXcgQih0LnN0b3Asci5zdG9wKSksZSs9MX19fSx7a2V5OlwicmVtb3ZlT25lXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYobnVsbCE9PXRoaXMuaW50ZXJ2YWxzKWZvcih2YXIgZT0wO2U8dGhpcy5pbnRlcnZhbHMubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy5pbnRlcnZhbHNbZV07aWYodDxuLnN0YXJ0KXJldHVybjtpZih0PT09bi5zdGFydCYmdD09PW4uc3RvcC0xKXJldHVybiB2b2lkIHRoaXMuaW50ZXJ2YWxzLnNwbGljZShlLDEpO2lmKHQ9PT1uLnN0YXJ0KXJldHVybiB2b2lkKHRoaXMuaW50ZXJ2YWxzW2VdPW5ldyBCKG4uc3RhcnQrMSxuLnN0b3ApKTtpZih0PT09bi5zdG9wLTEpcmV0dXJuIHZvaWQodGhpcy5pbnRlcnZhbHNbZV09bmV3IEIobi5zdGFydCxuLnN0b3AtMSkpO2lmKHQ8bi5zdG9wLTEpe3ZhciByPW5ldyBCKG4uc3RhcnQsdCk7cmV0dXJuIG4uc3RhcnQ9dCsxLHZvaWQgdGhpcy5pbnRlcnZhbHMuc3BsaWNlKGUsMCxyKX19fX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PXR8fG51bGwsZT1lfHxudWxsLG49bnx8ITEsbnVsbD09PXRoaXMuaW50ZXJ2YWxzP1wie31cIjpudWxsIT09dHx8bnVsbCE9PWU/dGhpcy50b1Rva2VuU3RyaW5nKHQsZSk6bj90aGlzLnRvQ2hhclN0cmluZygpOnRoaXMudG9JbmRleFN0cmluZygpfX0se2tleTpcInRvQ2hhclN0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPHRoaXMuaW50ZXJ2YWxzLmxlbmd0aDtlKyspe3ZhciBuPXRoaXMuaW50ZXJ2YWxzW2VdO24uc3RvcD09PW4uc3RhcnQrMT9uLnN0YXJ0PT09by5FT0Y/dC5wdXNoKFwiPEVPRj5cIik6dC5wdXNoKFwiJ1wiK1N0cmluZy5mcm9tQ2hhckNvZGUobi5zdGFydCkrXCInXCIpOnQucHVzaChcIidcIitTdHJpbmcuZnJvbUNoYXJDb2RlKG4uc3RhcnQpK1wiJy4uJ1wiK1N0cmluZy5mcm9tQ2hhckNvZGUobi5zdG9wLTEpK1wiJ1wiKX1yZXR1cm4gdC5sZW5ndGg+MT9cIntcIit0LmpvaW4oXCIsIFwiKStcIn1cIjp0WzBdfX0se2tleTpcInRvSW5kZXhTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD1bXSxlPTA7ZTx0aGlzLmludGVydmFscy5sZW5ndGg7ZSsrKXt2YXIgbj10aGlzLmludGVydmFsc1tlXTtuLnN0b3A9PT1uLnN0YXJ0KzE/bi5zdGFydD09PW8uRU9GP3QucHVzaChcIjxFT0Y+XCIpOnQucHVzaChuLnN0YXJ0LnRvU3RyaW5nKCkpOnQucHVzaChuLnN0YXJ0LnRvU3RyaW5nKCkrXCIuLlwiKyhuLnN0b3AtMSkudG9TdHJpbmcoKSl9cmV0dXJuIHQubGVuZ3RoPjE/XCJ7XCIrdC5qb2luKFwiLCBcIikrXCJ9XCI6dFswXX19LHtrZXk6XCJ0b1Rva2VuU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj0wO3I8dGhpcy5pbnRlcnZhbHMubGVuZ3RoO3IrKylmb3IodmFyIG89dGhpcy5pbnRlcnZhbHNbcl0saT1vLnN0YXJ0O2k8by5zdG9wO2krKyluLnB1c2godGhpcy5lbGVtZW50TmFtZSh0LGUsaSkpO3JldHVybiBuLmxlbmd0aD4xP1wie1wiK24uam9pbihcIiwgXCIpK1wifVwiOm5bMF19fSx7a2V5OlwiZWxlbWVudE5hbWVcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIG49PT1vLkVPRj9cIjxFT0Y+XCI6bj09PW8uRVBTSUxPTj9cIjxFUFNJTE9OPlwiOnRbbl18fGVbbl19fSx7a2V5OlwibGVuZ3RoXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZXJ2YWxzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubGVuZ3RofSkpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtlfSkpfX1dLG4mJlUoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIHoodCl7cmV0dXJuIHo9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0seih0KX1mdW5jdGlvbiBxKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT16KHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXoocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09eihvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIEg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSx0aGlzLmF0bj1udWxsLHRoaXMuc3RhdGVOdW1iZXI9dC5JTlZBTElEX1NUQVRFX05VTUJFUix0aGlzLnN0YXRlVHlwZT1udWxsLHRoaXMucnVsZUluZGV4PTAsdGhpcy5lcHNpbG9uT25seVRyYW5zaXRpb25zPSExLHRoaXMudHJhbnNpdGlvbnM9W10sdGhpcy5uZXh0VG9rZW5XaXRoaW5SdWxlPW51bGx9dmFyIGUsbjtyZXR1cm4gZT10LChuPVt7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlTnVtYmVyfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgdCYmdGhpcy5zdGF0ZU51bWJlcj09PWUuc3RhdGVOdW1iZXJ9fSx7a2V5OlwiaXNOb25HcmVlZHlFeGl0U3RhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiExfX0se2tleTpcImFkZFRyYW5zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPS0xKSwwPT09dGhpcy50cmFuc2l0aW9ucy5sZW5ndGg/dGhpcy5lcHNpbG9uT25seVRyYW5zaXRpb25zPXQuaXNFcHNpbG9uOnRoaXMuZXBzaWxvbk9ubHlUcmFuc2l0aW9ucyE9PXQuaXNFcHNpbG9uJiYodGhpcy5lcHNpbG9uT25seVRyYW5zaXRpb25zPSExKSwtMT09PWU/dGhpcy50cmFuc2l0aW9ucy5wdXNoKHQpOnRoaXMudHJhbnNpdGlvbnMuc3BsaWNlKGUsMSx0KX19XSkmJnEoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIEsodCl7cmV0dXJuIEs9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sSyh0KX1mdW5jdGlvbiBZKHQsZSl7cmV0dXJuIFk9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxZKHQsZSl9ZnVuY3Rpb24gRyh0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09SyhlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIFcodCl9ZnVuY3Rpb24gVyh0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH1mdW5jdGlvbiBYKHQpe3JldHVybiBYPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxYKHQpfUguSU5WQUxJRF9UWVBFPTAsSC5CQVNJQz0xLEguUlVMRV9TVEFSVD0yLEguQkxPQ0tfU1RBUlQ9MyxILlBMVVNfQkxPQ0tfU1RBUlQ9NCxILlNUQVJfQkxPQ0tfU1RBUlQ9NSxILlRPS0VOX1NUQVJUPTYsSC5SVUxFX1NUT1A9NyxILkJMT0NLX0VORD04LEguU1RBUl9MT09QX0JBQ0s9OSxILlNUQVJfTE9PUF9FTlRSWT0xMCxILlBMVVNfTE9PUF9CQUNLPTExLEguTE9PUF9FTkQ9MTIsSC5zZXJpYWxpemF0aW9uTmFtZXM9W1wiSU5WQUxJRFwiLFwiQkFTSUNcIixcIlJVTEVfU1RBUlRcIixcIkJMT0NLX1NUQVJUXCIsXCJQTFVTX0JMT0NLX1NUQVJUXCIsXCJTVEFSX0JMT0NLX1NUQVJUXCIsXCJUT0tFTl9TVEFSVFwiLFwiUlVMRV9TVE9QXCIsXCJCTE9DS19FTkRcIixcIlNUQVJfTE9PUF9CQUNLXCIsXCJTVEFSX0xPT1BfRU5UUllcIixcIlBMVVNfTE9PUF9CQUNLXCIsXCJMT09QX0VORFwiXSxILklOVkFMSURfU1RBVEVfTlVNQkVSPS0xO3ZhciAkPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZZKHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPVgobik7aWYocil7dmFyIG89WCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gRyh0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3ZhciB0O3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksKHQ9by5jYWxsKHRoaXMpKS5zdGF0ZVR5cGU9SC5SVUxFX1NUT1AsRyh0LFcodCkpfXJldHVybiBlPWksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlfShIKTtmdW5jdGlvbiBKKHQpe3JldHVybiBKPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEoodCl9ZnVuY3Rpb24gUSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09Sih0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1KKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PUoobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIFoodCxlLG4pe3JldHVybiBlJiZRKHQucHJvdG90eXBlLGUpLG4mJlEodCxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9dmFyIHR0PVooKGZ1bmN0aW9uIHQoZSl7aWYoZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLG51bGw9PWUpdGhyb3dcInRhcmdldCBjYW5ub3QgYmUgbnVsbC5cIjt0aGlzLnRhcmdldD1lLHRoaXMuaXNFcHNpbG9uPSExLHRoaXMubGFiZWw9bnVsbH0pKTtmdW5jdGlvbiBldCh0KXtyZXR1cm4gZXQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sZXQodCl9ZnVuY3Rpb24gbnQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PWV0KHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PWV0KHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PWV0KG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBydCh0LGUpe3JldHVybiBydD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LHJ0KHQsZSl9ZnVuY3Rpb24gb3QodCl7cmV0dXJuIG90PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxvdCh0KX10dC5FUFNJTE9OPTEsdHQuUkFOR0U9Mix0dC5SVUxFPTMsdHQuUFJFRElDQVRFPTQsdHQuQVRPTT01LHR0LkFDVElPTj02LHR0LlNFVD03LHR0Lk5PVF9TRVQ9OCx0dC5XSUxEQ0FSRD05LHR0LlBSRUNFREVOQ0U9MTAsdHQuc2VyaWFsaXphdGlvbk5hbWVzPVtcIklOVkFMSURcIixcIkVQU0lMT05cIixcIlJBTkdFXCIsXCJSVUxFXCIsXCJQUkVESUNBVEVcIixcIkFUT01cIixcIkFDVElPTlwiLFwiU0VUXCIsXCJOT1RfU0VUXCIsXCJXSUxEQ0FSRFwiLFwiUFJFQ0VERU5DRVwiXSx0dC5zZXJpYWxpemF0aW9uVHlwZXM9e0Vwc2lsb25UcmFuc2l0aW9uOnR0LkVQU0lMT04sUmFuZ2VUcmFuc2l0aW9uOnR0LlJBTkdFLFJ1bGVUcmFuc2l0aW9uOnR0LlJVTEUsUHJlZGljYXRlVHJhbnNpdGlvbjp0dC5QUkVESUNBVEUsQXRvbVRyYW5zaXRpb246dHQuQVRPTSxBY3Rpb25UcmFuc2l0aW9uOnR0LkFDVElPTixTZXRUcmFuc2l0aW9uOnR0LlNFVCxOb3RTZXRUcmFuc2l0aW9uOnR0Lk5PVF9TRVQsV2lsZGNhcmRUcmFuc2l0aW9uOnR0LldJTERDQVJELFByZWNlZGVuY2VQcmVkaWNhdGVUcmFuc2l0aW9uOnR0LlBSRUNFREVOQ0V9O3ZhciBpdD1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmcnQodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1vdChyKTtpZihvKXt2YXIgbj1vdCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWV0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0LGUsbixyKXt2YXIgbztyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHUpLChvPWkuY2FsbCh0aGlzLHQpKS5ydWxlSW5kZXg9ZSxvLnByZWNlZGVuY2U9bixvLmZvbGxvd1N0YXRlPXIsby5zZXJpYWxpemF0aW9uVHlwZT10dC5SVUxFLG8uaXNFcHNpbG9uPSEwLG99cmV0dXJuIGU9dSwobj1be2tleTpcIm1hdGNoZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuITF9fV0pJiZudChlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KHR0KTtmdW5jdGlvbiB1dCh0KXtyZXR1cm4gdXQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sdXQodCl9ZnVuY3Rpb24gY3QodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXV0KHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXV0KHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PXV0KG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBhdCh0LGUpe3JldHVybiBhdD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGF0KHQsZSl9ZnVuY3Rpb24gbHQodCl7cmV0dXJuIGx0PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxsdCh0KX12YXIgc3Q9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJmF0KHQsZSl9KGMsdCk7dmFyIGUsbixyLGksdT0ocj1jLGk9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9bHQocik7aWYoaSl7dmFyIG49bHQodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT11dChlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIGModCxlKXt2YXIgbjtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGMpLChuPXUuY2FsbCh0aGlzLHQpKS5zZXJpYWxpemF0aW9uVHlwZT10dC5TRVQsbnVsbCE9ZT9uLmxhYmVsPWU6KG4ubGFiZWw9bmV3IFYsbi5sYWJlbC5hZGRPbmUoby5JTlZBTElEX1RZUEUpKSxufXJldHVybiBlPWMsKG49W3trZXk6XCJtYXRjaGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0aGlzLmxhYmVsLmNvbnRhaW5zKHQpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYWJlbC50b1N0cmluZygpfX1dKSYmY3QoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxjfSh0dCk7ZnVuY3Rpb24gZnQodCl7cmV0dXJuIGZ0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGZ0KHQpfWZ1bmN0aW9uIHB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1mdCh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1mdChyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1mdChvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24geXQoKXtyZXR1cm4geXQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuZ2V0P1JlZmxlY3QuZ2V0LmJpbmQoKTpmdW5jdGlvbih0LGUsbil7dmFyIHI9ZnVuY3Rpb24odCxlKXtmb3IoOyFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSYmbnVsbCE9PSh0PWJ0KHQpKTspO3JldHVybiB0fSh0LGUpO2lmKHIpe3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixlKTtyZXR1cm4gby5nZXQ/by5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoPDM/dDpuKTpvLnZhbHVlfX0seXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIGh0KHQsZSl7cmV0dXJuIGh0PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0saHQodCxlKX1mdW5jdGlvbiBidCh0KXtyZXR1cm4gYnQ9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LGJ0KHQpfXZhciB2dD1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmaHQodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1idChyKTtpZihvKXt2YXIgbj1idCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWZ0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0LGUpe3ZhciBuO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKG49aS5jYWxsKHRoaXMsdCxlKSkuc2VyaWFsaXphdGlvblR5cGU9dHQuTk9UX1NFVCxufXJldHVybiBlPXUsKG49W3trZXk6XCJtYXRjaGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0Pj1lJiZ0PD1uJiYheXQoYnQodS5wcm90b3R5cGUpLFwibWF0Y2hlc1wiLHRoaXMpLmNhbGwodGhpcyx0LGUsbil9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiflwiK3l0KGJ0KHUucHJvdG90eXBlKSxcInRvU3RyaW5nXCIsdGhpcykuY2FsbCh0aGlzKX19XSkmJnB0KGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oc3QpO2Z1bmN0aW9uIGR0KHQpe3JldHVybiBkdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxkdCh0KX1mdW5jdGlvbiBtdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09ZHQodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09ZHQocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09ZHQobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIGd0KHQsZSl7cmV0dXJuIGd0PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sZ3QodCxlKX1mdW5jdGlvbiBTdCh0KXtyZXR1cm4gU3Q9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFN0KHQpfXZhciBPdD1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmZ3QodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1TdChyKTtpZihvKXt2YXIgbj1TdCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWR0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0KXt2YXIgZTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHUpLChlPWkuY2FsbCh0aGlzLHQpKS5zZXJpYWxpemF0aW9uVHlwZT10dC5XSUxEQ0FSRCxlfXJldHVybiBlPXUsKG49W3trZXk6XCJtYXRjaGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0Pj1lJiZ0PD1ufX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIi5cIn19XSkmJm10KGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0odHQpO2Z1bmN0aW9uIHd0KHQpe3JldHVybiB3dD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx3dCh0KX1mdW5jdGlvbiBfdCh0LGUpe3JldHVybiBfdD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LF90KHQsZSl9ZnVuY3Rpb24gUHQodCl7cmV0dXJuIFB0PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxQdCh0KX12YXIgVHQ9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJl90KHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPVB0KG4pO2lmKHIpe3ZhciBvPVB0KHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09d3QoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBpKHQpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksby5jYWxsKHRoaXMsdCl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KHR0KTtmdW5jdGlvbiBFdCh0KXtyZXR1cm4gRXQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sRXQodCl9ZnVuY3Rpb24ga3QodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PUV0KHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PUV0KHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PUV0KG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBqdCh0LGUsbil7cmV0dXJuIGUmJmt0KHQucHJvdG90eXBlLGUpLG4mJmt0KHQsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fWZ1bmN0aW9uIHh0KHQpe3JldHVybiB4dD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx4dCh0KX1mdW5jdGlvbiBSdCh0LGUpe3JldHVybiBSdD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LFJ0KHQsZSl9ZnVuY3Rpb24gQ3QodCl7cmV0dXJuIEN0PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxDdCh0KX1mdW5jdGlvbiBBdCh0KXtyZXR1cm4gQXQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sQXQodCl9ZnVuY3Rpb24gTnQodCxlKXtyZXR1cm4gTnQ9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxOdCh0LGUpfWZ1bmN0aW9uIEl0KHQpe3JldHVybiBJdD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sSXQodCl9dmFyIEx0PWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZOdCh0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1JdChuKTtpZihyKXt2YXIgbz1JdCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUF0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZSdCh0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1DdChuKTtpZihyKXt2YXIgbz1DdCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXh0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KGp0KChmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KX0pKSkpO2Z1bmN0aW9uIER0KHQpe3JldHVybiBEdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxEdCh0KX1mdW5jdGlvbiBGdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09RHQodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09RHQocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09RHQobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIEJ0KHQsZSl7cmV0dXJuIEJ0PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sQnQodCxlKX1mdW5jdGlvbiBNdCh0KXtyZXR1cm4gTXQ9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LE10KHQpfXZhciBVdD1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmQnQodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1NdChyKTtpZihvKXt2YXIgbj1NdCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUR0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGU9dSwobj1be2tleTpcInJ1bGVDb250ZXh0XCIsZ2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBpbnRlcmZhY2UgaW1wbGVtZW50YXRpb25cIil9fV0pJiZGdChlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KEx0KTtmdW5jdGlvbiBWdCh0KXtyZXR1cm4gVnQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sVnQodCl9ZnVuY3Rpb24genQodCxlKXtyZXR1cm4genQ9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSx6dCh0LGUpfWZ1bmN0aW9uIHF0KHQpe3JldHVybiBxdD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0scXQodCl9dmFyIEh0PWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZ6dCh0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1xdChuKTtpZihyKXt2YXIgbz1xdCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PVZ0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEx0KTtmdW5jdGlvbiBLdCh0KXtyZXR1cm4gS3Q9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sS3QodCl9ZnVuY3Rpb24gWXQodCxlKXtyZXR1cm4gWXQ9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxZdCh0LGUpfWZ1bmN0aW9uIEd0KHQpe3JldHVybiBHdD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sR3QodCl9dmFyIFd0PWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZZdCh0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1HdChuKTtpZihyKXt2YXIgbz1HdCh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUt0KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEh0KSxYdD17dG9TdHJpbmdUcmVlOmZ1bmN0aW9uKHQsZSxuKXtlPWV8fG51bGwsbnVsbCE9PShuPW58fG51bGwpJiYoZT1uLnJ1bGVOYW1lcyk7dmFyIHI9WHQuZ2V0Tm9kZVRleHQodCxlKTtyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9dC5yZXBsYWNlKC9cXHQvZyxcIlxcXFx0XCIpLnJlcGxhY2UoL1xcbi9nLFwiXFxcXG5cIikucmVwbGFjZSgvXFxyL2csXCJcXFxcclwiKX0ocik7dmFyIG89dC5nZXRDaGlsZENvdW50KCk7aWYoMD09PW8pcmV0dXJuIHI7dmFyIGk9XCIoXCIrcitcIiBcIjtvPjAmJihyPVh0LnRvU3RyaW5nVHJlZSh0LmdldENoaWxkKDApLGUpLGk9aS5jb25jYXQocikpO2Zvcih2YXIgdT0xO3U8bzt1Kyspcj1YdC50b1N0cmluZ1RyZWUodC5nZXRDaGlsZCh1KSxlKSxpPWkuY29uY2F0KFwiIFwiK3IpO3JldHVybiBpLmNvbmNhdChcIilcIil9LGdldE5vZGVUZXh0OmZ1bmN0aW9uKHQsZSxuKXtpZihlPWV8fG51bGwsbnVsbCE9PShuPW58fG51bGwpJiYoZT1uLnJ1bGVOYW1lcyksbnVsbCE9PWUpe2lmKHQgaW5zdGFuY2VvZiBVdCl7dmFyIHI9dC5ydWxlQ29udGV4dC5nZXRBbHROdW1iZXIoKTtyZXR1cm4gMCE9cj9lW3QucnVsZUluZGV4XStcIjpcIityOmVbdC5ydWxlSW5kZXhdfWlmKHQgaW5zdGFuY2VvZiBXdClyZXR1cm4gdC50b1N0cmluZygpO2lmKHQgaW5zdGFuY2VvZiBIdCYmbnVsbCE9PXQuc3ltYm9sKXJldHVybiB0LnN5bWJvbC50ZXh0fXZhciBpPXQuZ2V0UGF5bG9hZCgpO3JldHVybiBpIGluc3RhbmNlb2Ygbz9pLnRleHQ6dC5nZXRQYXlsb2FkKCkudG9TdHJpbmcoKX0sZ2V0Q2hpbGRyZW46ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQuZ2V0Q2hpbGRDb3VudCgpO24rKyllLnB1c2godC5nZXRDaGlsZChuKSk7cmV0dXJuIGV9LGdldEFuY2VzdG9yczpmdW5jdGlvbih0KXt2YXIgZT1bXTtmb3IodD10LmdldFBhcmVudCgpO251bGwhPT10OyllPVt0XS5jb25jYXQoZSksdD10LmdldFBhcmVudCgpO3JldHVybiBlfSxmaW5kQWxsVG9rZW5Ob2RlczpmdW5jdGlvbih0LGUpe3JldHVybiBYdC5maW5kQWxsTm9kZXModCxlLCEwKX0sZmluZEFsbFJ1bGVOb2RlczpmdW5jdGlvbih0LGUpe3JldHVybiBYdC5maW5kQWxsTm9kZXModCxlLCExKX0sZmluZEFsbE5vZGVzOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1bXTtyZXR1cm4gWHQuX2ZpbmRBbGxOb2Rlcyh0LGUsbixyKSxyfSxfZmluZEFsbE5vZGVzOmZ1bmN0aW9uKHQsZSxuLHIpe24mJnQgaW5zdGFuY2VvZiBIdD90LnN5bWJvbC50eXBlPT09ZSYmci5wdXNoKHQpOiFuJiZ0IGluc3RhbmNlb2YgVXQmJnQucnVsZUluZGV4PT09ZSYmci5wdXNoKHQpO2Zvcih2YXIgbz0wO288dC5nZXRDaGlsZENvdW50KCk7bysrKVh0Ll9maW5kQWxsTm9kZXModC5nZXRDaGlsZChvKSxlLG4scil9LGRlc2NlbmRhbnRzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bdF0sbj0wO248dC5nZXRDaGlsZENvdW50KCk7bisrKWU9ZS5jb25jYXQoWHQuZGVzY2VuZGFudHModC5nZXRDaGlsZChuKSkpO3JldHVybiBlfX07Y29uc3QgJHQ9WHQ7ZnVuY3Rpb24gSnQodCl7cmV0dXJuIEp0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEp0KHQpfWZ1bmN0aW9uIFF0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1KdCh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1KdChyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1KdChvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gWnQodCxlKXtyZXR1cm4gWnQ9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxadCh0LGUpfWZ1bmN0aW9uIHRlKHQpe3JldHVybiB0ZT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sdGUodCl9dmFyIGVlPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZadCh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPXRlKHIpO2lmKG8pe3ZhciBuPXRlKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09SnQoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQsZSl7dmFyIG47cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSwobj1pLmNhbGwodGhpcykpLnBhcmVudEN0eD10fHxudWxsLG4uaW52b2tpbmdTdGF0ZT1lfHwtMSxufXJldHVybiBlPXUsKG49W3trZXk6XCJkZXB0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT10aGlzO251bGwhPT1lOyllPWUucGFyZW50Q3R4LHQrPTE7cmV0dXJuIHR9fSx7a2V5OlwiaXNFbXB0eVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuLTE9PT10aGlzLmludm9raW5nU3RhdGV9fSx7a2V5OlwiZ2V0U291cmNlSW50ZXJ2YWxcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBCLklOVkFMSURfSU5URVJWQUx9fSx7a2V5OlwicnVsZUNvbnRleHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319LHtrZXk6XCJnZXRQYXlsb2FkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319LHtrZXk6XCJnZXRUZXh0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuZ2V0Q2hpbGRDb3VudCgpP1wiXCI6dGhpcy5jaGlsZHJlbi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmdldFRleHQoKX0pKS5qb2luKFwiXCIpfX0se2tleTpcImdldEFsdE51bWJlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7a2V5Olwic2V0QWx0TnVtYmVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX0se2tleTpcImdldENoaWxkXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIG51bGx9fSx7a2V5OlwiZ2V0Q2hpbGRDb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7a2V5OlwiYWNjZXB0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQudmlzaXRDaGlsZHJlbih0aGlzKX19LHtrZXk6XCJ0b1N0cmluZ1RyZWVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiAkdC50b1N0cmluZ1RyZWUodGhpcyx0LGUpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0PXR8fG51bGwsZT1lfHxudWxsO2Zvcih2YXIgbj10aGlzLHI9XCJbXCI7bnVsbCE9PW4mJm4hPT1lOyl7aWYobnVsbD09PXQpbi5pc0VtcHR5KCl8fChyKz1uLmludm9raW5nU3RhdGUpO2Vsc2V7dmFyIG89bi5ydWxlSW5kZXg7cis9bz49MCYmbzx0Lmxlbmd0aD90W29dOlwiXCIrb31udWxsPT09bi5wYXJlbnRDdHh8fG51bGw9PT10JiZuLnBhcmVudEN0eC5pc0VtcHR5KCl8fChyKz1cIiBcIiksbj1uLnBhcmVudEN0eH1yZXR1cm4gcitcIl1cIn19XSkmJlF0KGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oVXQpO2Z1bmN0aW9uIG5lKHQpe3JldHVybiBuZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxuZSh0KX1mdW5jdGlvbiByZSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09bmUodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09bmUocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09bmUobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfXZhciBvZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSx0aGlzLmNhY2hlZEhhc2hDb2RlPWV9dmFyIGUsbjtyZXR1cm4gZT10LChuPVt7a2V5OlwiaXNFbXB0eVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM9PT10LkVNUFRZfX0se2tleTpcImhhc0VtcHR5UGF0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0UmV0dXJuU3RhdGUodGhpcy5sZW5ndGgtMSk9PT10LkVNUFRZX1JFVFVSTl9TVEFURX19LHtrZXk6XCJoYXNoQ29kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FjaGVkSGFzaENvZGV9fSx7a2V5OlwidXBkYXRlSGFzaENvZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnVwZGF0ZSh0aGlzLmNhY2hlZEhhc2hDb2RlKX19XSkmJnJlKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH0oKTtmdW5jdGlvbiBpZSh0KXtyZXR1cm4gaWU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0saWUodCl9ZnVuY3Rpb24gdWUodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PWllKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PWllKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PWllKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBjZSh0LGUpe3JldHVybiBjZT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGNlKHQsZSl9ZnVuY3Rpb24gYWUodCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWllKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gbGUodCl9ZnVuY3Rpb24gbGUodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gc2UodCl7cmV0dXJuIHNlPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxzZSh0KX1vZS5FTVBUWT1udWxsLG9lLkVNUFRZX1JFVFVSTl9TVEFURT0yMTQ3NDgzNjQ3LG9lLmdsb2JhbE5vZGVDb3VudD0xLG9lLmlkPW9lLmdsb2JhbE5vZGVDb3VudCxvZS50cmFjZV9hdG5fc2ltPSExO3ZhciBmZT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmY2UodCxlKX0oYyx0KTt2YXIgZSxuLHIsbyx1PShyPWMsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1zZShyKTtpZihvKXt2YXIgbj1zZSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gYWUodGhpcyx0KX0pO2Z1bmN0aW9uIGModCxlKXt2YXIgbjshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGMpO3ZhciByPW5ldyBmO3IudXBkYXRlKHQsZSk7dmFyIG89ci5maW5pc2goKTtyZXR1cm4obj11LmNhbGwodGhpcyxvKSkucGFyZW50cz10LG4ucmV0dXJuU3RhdGVzPWUsYWUobixsZShuKSl9cmV0dXJuIGU9YyxuPVt7a2V5OlwiaXNFbXB0eVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmV0dXJuU3RhdGVzWzBdPT09b2UuRU1QVFlfUkVUVVJOX1NUQVRFfX0se2tleTpcImdldFBhcmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBhcmVudHNbdF19fSx7a2V5OlwiZ2V0UmV0dXJuU3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5yZXR1cm5TdGF0ZXNbdF19fSx7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXM9PT10fHx0IGluc3RhbmNlb2YgYyYmdGhpcy5oYXNoQ29kZSgpPT09dC5oYXNoQ29kZSgpJiZpKHRoaXMucmV0dXJuU3RhdGVzLHQucmV0dXJuU3RhdGVzKSYmaSh0aGlzLnBhcmVudHMsdC5wYXJlbnRzKX19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuXCJbXVwiO2Zvcih2YXIgdD1cIltcIixlPTA7ZTx0aGlzLnJldHVyblN0YXRlcy5sZW5ndGg7ZSsrKWU+MCYmKHQrPVwiLCBcIiksdGhpcy5yZXR1cm5TdGF0ZXNbZV0hPT1vZS5FTVBUWV9SRVRVUk5fU1RBVEU/KHQrPXRoaXMucmV0dXJuU3RhdGVzW2VdLG51bGwhPT10aGlzLnBhcmVudHNbZV0/dD10K1wiIFwiK3RoaXMucGFyZW50c1tlXTp0Kz1cIm51bGxcIik6dCs9XCIkXCI7cmV0dXJuIHQrXCJdXCJ9fSx7a2V5OlwibGVuZ3RoXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmV0dXJuU3RhdGVzLmxlbmd0aH19XSxuJiZ1ZShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGN9KG9lKTtmdW5jdGlvbiBwZSh0KXtyZXR1cm4gcGU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0scGUodCl9ZnVuY3Rpb24geWUodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXBlKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXBlKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PXBlKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBoZSh0LGUpe3JldHVybiBoZT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGhlKHQsZSl9ZnVuY3Rpb24gYmUodCl7cmV0dXJuIGJlPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxiZSh0KX12YXIgdmU9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJmhlKHQsZSl9KGMsdCk7dmFyIGUsbixyLG8saSx1PShvPWMsaT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1iZShvKTtpZihpKXt2YXIgbj1iZSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXBlKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gYyh0LGUpe3ZhciBuOyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyk7dmFyIHIsbz1uZXcgZjtyZXR1cm4gbnVsbCE9PXQ/by51cGRhdGUodCxlKTpvLnVwZGF0ZSgxKSxyPW8uZmluaXNoKCksKG49dS5jYWxsKHRoaXMscikpLnBhcmVudEN0eD10LG4ucmV0dXJuU3RhdGU9ZSxufXJldHVybiBlPWMscj1be2tleTpcImNyZWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9PT1vZS5FTVBUWV9SRVRVUk5fU1RBVEUmJm51bGw9PT10P29lLkVNUFRZOm5ldyBjKHQsZSl9fV0sKG49W3trZXk6XCJnZXRQYXJlbnRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wYXJlbnRDdHh9fSx7a2V5OlwiZ2V0UmV0dXJuU3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5yZXR1cm5TdGF0ZX19LHtrZXk6XCJlcXVhbHNcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcz09PXR8fHQgaW5zdGFuY2VvZiBjJiZ0aGlzLmhhc2hDb2RlKCk9PT10Lmhhc2hDb2RlKCkmJnRoaXMucmV0dXJuU3RhdGU9PT10LnJldHVyblN0YXRlJiYobnVsbD09dGhpcy5wYXJlbnRDdHg/bnVsbD09dC5wYXJlbnRDdHg6dGhpcy5wYXJlbnRDdHguZXF1YWxzKHQucGFyZW50Q3R4KSl9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PW51bGw9PT10aGlzLnBhcmVudEN0eD9cIlwiOnRoaXMucGFyZW50Q3R4LnRvU3RyaW5nKCk7cmV0dXJuIDA9PT10Lmxlbmd0aD90aGlzLnJldHVyblN0YXRlPT09b2UuRU1QVFlfUkVUVVJOX1NUQVRFP1wiJFwiOlwiXCIrdGhpcy5yZXR1cm5TdGF0ZTp0aGlzLnJldHVyblN0YXRlK1wiIFwiK3R9fSx7a2V5OlwibGVuZ3RoXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDF9fV0pJiZ5ZShlLnByb3RvdHlwZSxuKSxyJiZ5ZShlLHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksY30ob2UpO2Z1bmN0aW9uIGRlKHQpe3JldHVybiBkZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxkZSh0KX1mdW5jdGlvbiBtZSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09ZGUodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09ZGUocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09ZGUobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIGdlKHQsZSl7cmV0dXJuIGdlPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sZ2UodCxlKX1mdW5jdGlvbiBTZSh0KXtyZXR1cm4gU2U9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFNlKHQpfXZhciBPZT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmZ2UodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1TZShyKTtpZihvKXt2YXIgbj1TZSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWRlKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksaS5jYWxsKHRoaXMsbnVsbCxvZS5FTVBUWV9SRVRVUk5fU1RBVEUpfXJldHVybiBlPXUsKG49W3trZXk6XCJpc0VtcHR5XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hMH19LHtrZXk6XCJnZXRQYXJlbnRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbH19LHtrZXk6XCJnZXRSZXR1cm5TdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnJldHVyblN0YXRlfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzPT09dH19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCIkXCJ9fV0pJiZtZShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KHZlKTtmdW5jdGlvbiB3ZSh0KXtyZXR1cm4gd2U9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sd2UodCl9ZnVuY3Rpb24gX2UodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXdlKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXdlKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PXdlKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31vZS5FTVBUWT1uZXcgT2U7dmFyIFBlPVwiaC1cIixUZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuZGF0YT17fSx0aGlzLmhhc2hGdW5jdGlvbj1lfHxwLHRoaXMuZXF1YWxzRnVuY3Rpb249bnx8eX12YXIgZSxuO3JldHVybiBlPXQsbj1be2tleTpcInNldFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49UGUrdGhpcy5oYXNoRnVuY3Rpb24odCk7aWYobiBpbiB0aGlzLmRhdGEpe2Zvcih2YXIgcj10aGlzLmRhdGFbbl0sbz0wO288ci5sZW5ndGg7bysrKXt2YXIgaT1yW29dO2lmKHRoaXMuZXF1YWxzRnVuY3Rpb24odCxpLmtleSkpe3ZhciB1PWkudmFsdWU7cmV0dXJuIGkudmFsdWU9ZSx1fX1yZXR1cm4gci5wdXNoKHtrZXk6dCx2YWx1ZTplfSksZX1yZXR1cm4gdGhpcy5kYXRhW25dPVt7a2V5OnQsdmFsdWU6ZX1dLGV9fSx7a2V5OlwiY29udGFpbnNLZXlcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1QZSt0aGlzLmhhc2hGdW5jdGlvbih0KTtpZihlIGluIHRoaXMuZGF0YSlmb3IodmFyIG49dGhpcy5kYXRhW2VdLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIG89bltyXTtpZih0aGlzLmVxdWFsc0Z1bmN0aW9uKHQsby5rZXkpKXJldHVybiEwfXJldHVybiExfX0se2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVBlK3RoaXMuaGFzaEZ1bmN0aW9uKHQpO2lmKGUgaW4gdGhpcy5kYXRhKWZvcih2YXIgbj10aGlzLmRhdGFbZV0scj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgbz1uW3JdO2lmKHRoaXMuZXF1YWxzRnVuY3Rpb24odCxvLmtleSkpcmV0dXJuIG8udmFsdWV9cmV0dXJuIG51bGx9fSx7a2V5OlwiZW50cmllc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gT2JqZWN0LmtleXModGhpcy5kYXRhKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN0YXJ0c1dpdGgoUGUpfSkpLmZsYXRNYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmRhdGFbZV19KSx0aGlzKX19LHtrZXk6XCJnZXRLZXlzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbnRyaWVzKCkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5rZXl9KSl9fSx7a2V5OlwiZ2V0VmFsdWVzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbnRyaWVzKCkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YWx1ZX0pKX19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJbXCIrdGhpcy5lbnRyaWVzKCkubWFwKChmdW5jdGlvbih0KXtyZXR1cm5cIntcIit0LmtleStcIjpcIit0LnZhbHVlK1wifVwifSkpLmpvaW4oXCIsIFwiKStcIl1cIn19LHtrZXk6XCJsZW5ndGhcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmRhdGEpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3RhcnRzV2l0aChQZSl9KSkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdC5kYXRhW2VdLmxlbmd0aH0pLHRoaXMpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtlfSksMCl9fV0sbiYmX2UoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIEVlKHQsZSl7aWYobnVsbD09ZSYmKGU9ZWUuRU1QVFkpLG51bGw9PT1lLnBhcmVudEN0eHx8ZT09PWVlLkVNUFRZKXJldHVybiBvZS5FTVBUWTt2YXIgbj1FZSh0LGUucGFyZW50Q3R4KSxyPXQuc3RhdGVzW2UuaW52b2tpbmdTdGF0ZV0udHJhbnNpdGlvbnNbMF07cmV0dXJuIHZlLmNyZWF0ZShuLHIuZm9sbG93U3RhdGUuc3RhdGVOdW1iZXIpfWZ1bmN0aW9uIGtlKHQsZSxuKXtpZih0LmlzRW1wdHkoKSlyZXR1cm4gdDt2YXIgcj1uLmdldCh0KXx8bnVsbDtpZihudWxsIT09cilyZXR1cm4gcjtpZihudWxsIT09KHI9ZS5nZXQodCkpKXJldHVybiBuLnNldCh0LHIpLHI7Zm9yKHZhciBvPSExLGk9W10sdT0wO3U8aS5sZW5ndGg7dSsrKXt2YXIgYz1rZSh0LmdldFBhcmVudCh1KSxlLG4pO2lmKG98fGMhPT10LmdldFBhcmVudCh1KSl7aWYoIW8pe2k9W107Zm9yKHZhciBhPTA7YTx0Lmxlbmd0aDthKyspaVthXT10LmdldFBhcmVudChhKTtvPSEwfWlbdV09Y319aWYoIW8pcmV0dXJuIGUuYWRkKHQpLG4uc2V0KHQsdCksdDt2YXIgbDtyZXR1cm4gbD0wPT09aS5sZW5ndGg/b2UuRU1QVFk6MT09PWkubGVuZ3RoP3ZlLmNyZWF0ZShpWzBdLHQuZ2V0UmV0dXJuU3RhdGUoMCkpOm5ldyBmZShpLHQucmV0dXJuU3RhdGVzKSxlLmFkZChsKSxuLnNldChsLGwpLG4uc2V0KHQsbCksbH1mdW5jdGlvbiBqZSh0LGUsbixyKXtpZih0PT09ZSlyZXR1cm4gdDtpZih0IGluc3RhbmNlb2YgdmUmJmUgaW5zdGFuY2VvZiB2ZSlyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7aWYobnVsbCE9PXIpe3ZhciBvPXIuZ2V0KHQsZSk7aWYobnVsbCE9PW8pcmV0dXJuIG87aWYobnVsbCE9PShvPXIuZ2V0KGUsdCkpKXJldHVybiBvfXZhciBpPWZ1bmN0aW9uKHQsZSxuKXtpZihuKXtpZih0PT09b2UuRU1QVFkpcmV0dXJuIG9lLkVNUFRZO2lmKGU9PT1vZS5FTVBUWSlyZXR1cm4gb2UuRU1QVFl9ZWxzZXtpZih0PT09b2UuRU1QVFkmJmU9PT1vZS5FTVBUWSlyZXR1cm4gb2UuRU1QVFk7aWYodD09PW9lLkVNUFRZKXt2YXIgcj1bZS5yZXR1cm5TdGF0ZSxvZS5FTVBUWV9SRVRVUk5fU1RBVEVdLG89W2UucGFyZW50Q3R4LG51bGxdO3JldHVybiBuZXcgZmUobyxyKX1pZihlPT09b2UuRU1QVFkpe3ZhciBpPVt0LnJldHVyblN0YXRlLG9lLkVNUFRZX1JFVFVSTl9TVEFURV0sdT1bdC5wYXJlbnRDdHgsbnVsbF07cmV0dXJuIG5ldyBmZSh1LGkpfX1yZXR1cm4gbnVsbH0odCxlLG4pO2lmKG51bGwhPT1pKXJldHVybiBudWxsIT09ciYmci5zZXQodCxlLGkpLGk7aWYodC5yZXR1cm5TdGF0ZT09PWUucmV0dXJuU3RhdGUpe3ZhciB1PWplKHQucGFyZW50Q3R4LGUucGFyZW50Q3R4LG4scik7aWYodT09PXQucGFyZW50Q3R4KXJldHVybiB0O2lmKHU9PT1lLnBhcmVudEN0eClyZXR1cm4gZTt2YXIgYz12ZS5jcmVhdGUodSx0LnJldHVyblN0YXRlKTtyZXR1cm4gbnVsbCE9PXImJnIuc2V0KHQsZSxjKSxjfXZhciBhPW51bGw7aWYoKHQ9PT1lfHxudWxsIT09dC5wYXJlbnRDdHgmJnQucGFyZW50Q3R4PT09ZS5wYXJlbnRDdHgpJiYoYT10LnBhcmVudEN0eCksbnVsbCE9PWEpe3ZhciBsPVt0LnJldHVyblN0YXRlLGUucmV0dXJuU3RhdGVdO3QucmV0dXJuU3RhdGU+ZS5yZXR1cm5TdGF0ZSYmKGxbMF09ZS5yZXR1cm5TdGF0ZSxsWzFdPXQucmV0dXJuU3RhdGUpO3ZhciBzPW5ldyBmZShbYSxhXSxsKTtyZXR1cm4gbnVsbCE9PXImJnIuc2V0KHQsZSxzKSxzfXZhciBmPVt0LnJldHVyblN0YXRlLGUucmV0dXJuU3RhdGVdLHA9W3QucGFyZW50Q3R4LGUucGFyZW50Q3R4XTt0LnJldHVyblN0YXRlPmUucmV0dXJuU3RhdGUmJihmWzBdPWUucmV0dXJuU3RhdGUsZlsxXT10LnJldHVyblN0YXRlLHA9W2UucGFyZW50Q3R4LHQucGFyZW50Q3R4XSk7dmFyIHk9bmV3IGZlKHAsZik7cmV0dXJuIG51bGwhPT1yJiZyLnNldCh0LGUseSkseX0odCxlLG4scik7aWYobil7aWYodCBpbnN0YW5jZW9mIE9lKXJldHVybiB0O2lmKGUgaW5zdGFuY2VvZiBPZSlyZXR1cm4gZX1yZXR1cm4gdCBpbnN0YW5jZW9mIHZlJiYodD1uZXcgZmUoW3QuZ2V0UGFyZW50KCldLFt0LnJldHVyblN0YXRlXSkpLGUgaW5zdGFuY2VvZiB2ZSYmKGU9bmV3IGZlKFtlLmdldFBhcmVudCgpXSxbZS5yZXR1cm5TdGF0ZV0pKSxmdW5jdGlvbih0LGUsbixyKXtpZihudWxsIT09cil7dmFyIG89ci5nZXQodCxlKTtpZihudWxsIT09bylyZXR1cm4gb2UudHJhY2VfYXRuX3NpbSYmY29uc29sZS5sb2coXCJtZXJnZUFycmF5cyBhPVwiK3QrXCIsYj1cIitlK1wiIC0+IHByZXZpb3VzXCIpLG87aWYobnVsbCE9PShvPXIuZ2V0KGUsdCkpKXJldHVybiBvZS50cmFjZV9hdG5fc2ltJiZjb25zb2xlLmxvZyhcIm1lcmdlQXJyYXlzIGE9XCIrdCtcIixiPVwiK2UrXCIgLT4gcHJldmlvdXNcIiksb31mb3IodmFyIGk9MCx1PTAsYz0wLGE9bmV3IEFycmF5KHQucmV0dXJuU3RhdGVzLmxlbmd0aCtlLnJldHVyblN0YXRlcy5sZW5ndGgpLmZpbGwoMCksbD1uZXcgQXJyYXkodC5yZXR1cm5TdGF0ZXMubGVuZ3RoK2UucmV0dXJuU3RhdGVzLmxlbmd0aCkuZmlsbChudWxsKTtpPHQucmV0dXJuU3RhdGVzLmxlbmd0aCYmdTxlLnJldHVyblN0YXRlcy5sZW5ndGg7KXt2YXIgcz10LnBhcmVudHNbaV0sZj1lLnBhcmVudHNbdV07aWYodC5yZXR1cm5TdGF0ZXNbaV09PT1lLnJldHVyblN0YXRlc1t1XSl7dmFyIHA9dC5yZXR1cm5TdGF0ZXNbaV07cD09PW9lLkVNUFRZX1JFVFVSTl9TVEFURSYmbnVsbD09PXMmJm51bGw9PT1mfHxudWxsIT09cyYmbnVsbCE9PWYmJnM9PT1mPyhsW2NdPXMsYVtjXT1wKToobFtjXT1qZShzLGYsbixyKSxhW2NdPXApLGkrPTEsdSs9MX1lbHNlIHQucmV0dXJuU3RhdGVzW2ldPGUucmV0dXJuU3RhdGVzW3VdPyhsW2NdPXMsYVtjXT10LnJldHVyblN0YXRlc1tpXSxpKz0xKToobFtjXT1mLGFbY109ZS5yZXR1cm5TdGF0ZXNbdV0sdSs9MSk7Yys9MX1pZihpPHQucmV0dXJuU3RhdGVzLmxlbmd0aClmb3IodmFyIHk9aTt5PHQucmV0dXJuU3RhdGVzLmxlbmd0aDt5KyspbFtjXT10LnBhcmVudHNbeV0sYVtjXT10LnJldHVyblN0YXRlc1t5XSxjKz0xO2Vsc2UgZm9yKHZhciBoPXU7aDxlLnJldHVyblN0YXRlcy5sZW5ndGg7aCsrKWxbY109ZS5wYXJlbnRzW2hdLGFbY109ZS5yZXR1cm5TdGF0ZXNbaF0sYys9MTtpZihjPGwubGVuZ3RoKXtpZigxPT09Yyl7dmFyIGI9dmUuY3JlYXRlKGxbMF0sYVswXSk7cmV0dXJuIG51bGwhPT1yJiZyLnNldCh0LGUsYiksYn1sPWwuc2xpY2UoMCxjKSxhPWEuc2xpY2UoMCxjKX12YXIgdj1uZXcgZmUobCxhKTtyZXR1cm4gdi5lcXVhbHModCk/KG51bGwhPT1yJiZyLnNldCh0LGUsdCksb2UudHJhY2VfYXRuX3NpbSYmY29uc29sZS5sb2coXCJtZXJnZUFycmF5cyBhPVwiK3QrXCIsYj1cIitlK1wiIC0+IGFcIiksdCk6di5lcXVhbHMoZSk/KG51bGwhPT1yJiZyLnNldCh0LGUsZSksb2UudHJhY2VfYXRuX3NpbSYmY29uc29sZS5sb2coXCJtZXJnZUFycmF5cyBhPVwiK3QrXCIsYj1cIitlK1wiIC0+IGJcIiksZSk6KGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgVGUsbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO2UuY29udGFpbnNLZXkocil8fGUuc2V0KHIscil9Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspdFtvXT1lLmdldCh0W29dKX0obCksbnVsbCE9PXImJnIuc2V0KHQsZSx2KSxvZS50cmFjZV9hdG5fc2ltJiZjb25zb2xlLmxvZyhcIm1lcmdlQXJyYXlzIGE9XCIrdCtcIixiPVwiK2UrXCIgLT4gXCIrdiksdil9KHQsZSxuLHIpfWZ1bmN0aW9uIHhlKHQpe3JldHVybiB4ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx4ZSh0KX1mdW5jdGlvbiBSZSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09eGUodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09eGUocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09eGUobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfXZhciBDZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuZGF0YT1bXX12YXIgZSxuO3JldHVybiBlPXQsKG49W3trZXk6XCJhZGRcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmRhdGFbdF09ITB9fSx7a2V5Olwib3JcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO09iamVjdC5rZXlzKHQuZGF0YSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZS5hZGQodCl9KSx0aGlzKX19LHtrZXk6XCJyZW1vdmVcIix2YWx1ZTpmdW5jdGlvbih0KXtkZWxldGUgdGhpcy5kYXRhW3RdfX0se2tleTpcImhhc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiEwPT09dGhpcy5kYXRhW3RdfX0se2tleTpcInZhbHVlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZGF0YSl9fSx7a2V5OlwibWluVmFsdWVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBNYXRoLm1pbi5hcHBseShudWxsLHRoaXMudmFsdWVzKCkpfX0se2tleTpcImhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZi5oYXNoU3R1ZmYodGhpcy52YWx1ZXMoKSl9fSx7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0JiZpKHRoaXMuZGF0YSxlLmRhdGEpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIntcIit0aGlzLnZhbHVlcygpLmpvaW4oXCIsIFwiKStcIn1cIn19LHtrZXk6XCJsZW5ndGhcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKS5sZW5ndGh9fV0pJiZSZShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gQWUodCl7cmV0dXJuIEFlPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEFlKHQpfWZ1bmN0aW9uIE5lKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1BZSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1BZShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1BZShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIEllPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuYXRuPWV9dmFyIGUsbjtyZXR1cm4gZT10LG49W3trZXk6XCJnZXREZWNpc2lvbkxvb2thaGVhZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiBudWxsO2Zvcih2YXIgbj1lLnRyYW5zaXRpb25zLmxlbmd0aCxyPVtdLG89MDtvPG47bysrKXtyW29dPW5ldyBWO3ZhciBpPW5ldyBnO3RoaXMuX0xPT0soZS50cmFuc2l0aW9uKG8pLnRhcmdldCxudWxsLG9lLkVNUFRZLHJbb10saSxuZXcgQ2UsITEsITEpLCgwPT09cltvXS5sZW5ndGh8fHJbb10uY29udGFpbnModC5ISVRfUFJFRCkpJiYocltvXT1udWxsKX1yZXR1cm4gcn19LHtrZXk6XCJMT09LXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBWLG89bnVsbCE9PShuPW58fG51bGwpP0VlKHQuYXRuLG4pOm51bGw7cmV0dXJuIHRoaXMuX0xPT0sodCxlLG8scixuZXcgZyxuZXcgQ2UsITAsITApLHJ9fSx7a2V5OlwiX0xPT0tcIix2YWx1ZTpmdW5jdGlvbihlLG4scixpLHUsYyxhLGwpe3ZhciBzPW5ldyBMKHtzdGF0ZTplLGFsdDowLGNvbnRleHQ6cn0sbnVsbCk7aWYoIXUuaGFzKHMpKXtpZih1LmFkZChzKSxlPT09bil7aWYobnVsbD09PXIpcmV0dXJuIHZvaWQgaS5hZGRPbmUoby5FUFNJTE9OKTtpZihyLmlzRW1wdHkoKSYmbClyZXR1cm4gdm9pZCBpLmFkZE9uZShvLkVPRil9aWYoZSBpbnN0YW5jZW9mICQpe2lmKG51bGw9PT1yKXJldHVybiB2b2lkIGkuYWRkT25lKG8uRVBTSUxPTik7aWYoci5pc0VtcHR5KCkmJmwpcmV0dXJuIHZvaWQgaS5hZGRPbmUoby5FT0YpO2lmKHIhPT1vZS5FTVBUWSl7dmFyIGY9Yy5oYXMoZS5ydWxlSW5kZXgpO3RyeXtjLnJlbW92ZShlLnJ1bGVJbmRleCk7Zm9yKHZhciBwPTA7cDxyLmxlbmd0aDtwKyspe3ZhciB5PXRoaXMuYXRuLnN0YXRlc1tyLmdldFJldHVyblN0YXRlKHApXTt0aGlzLl9MT09LKHksbixyLmdldFBhcmVudChwKSxpLHUsYyxhLGwpfX1maW5hbGx5e2YmJmMuYWRkKGUucnVsZUluZGV4KX1yZXR1cm59fWZvcih2YXIgaD0wO2g8ZS50cmFuc2l0aW9ucy5sZW5ndGg7aCsrKXt2YXIgYj1lLnRyYW5zaXRpb25zW2hdO2lmKGIuY29uc3RydWN0b3I9PT1pdCl7aWYoYy5oYXMoYi50YXJnZXQucnVsZUluZGV4KSljb250aW51ZTt2YXIgdj12ZS5jcmVhdGUocixiLmZvbGxvd1N0YXRlLnN0YXRlTnVtYmVyKTt0cnl7Yy5hZGQoYi50YXJnZXQucnVsZUluZGV4KSx0aGlzLl9MT09LKGIudGFyZ2V0LG4sdixpLHUsYyxhLGwpfWZpbmFsbHl7Yy5yZW1vdmUoYi50YXJnZXQucnVsZUluZGV4KX19ZWxzZSBpZihiIGluc3RhbmNlb2YgVHQpYT90aGlzLl9MT09LKGIudGFyZ2V0LG4scixpLHUsYyxhLGwpOmkuYWRkT25lKHQuSElUX1BSRUQpO2Vsc2UgaWYoYi5pc0Vwc2lsb24pdGhpcy5fTE9PSyhiLnRhcmdldCxuLHIsaSx1LGMsYSxsKTtlbHNlIGlmKGIuY29uc3RydWN0b3I9PT1PdClpLmFkZFJhbmdlKG8uTUlOX1VTRVJfVE9LRU5fVFlQRSx0aGlzLmF0bi5tYXhUb2tlblR5cGUpO2Vsc2V7dmFyIGQ9Yi5sYWJlbDtudWxsIT09ZCYmKGIgaW5zdGFuY2VvZiB2dCYmKGQ9ZC5jb21wbGVtZW50KG8uTUlOX1VTRVJfVE9LRU5fVFlQRSx0aGlzLmF0bi5tYXhUb2tlblR5cGUpKSxpLmFkZFNldChkKSl9fX19fV0sbiYmTmUoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIExlKHQpe3JldHVybiBMZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxMZSh0KX1mdW5jdGlvbiBEZSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09TGUodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09TGUocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09TGUobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfUllLkhJVF9QUkVEPW8uSU5WQUxJRF9UWVBFO3ZhciBGZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuZ3JhbW1hclR5cGU9ZSx0aGlzLm1heFRva2VuVHlwZT1uLHRoaXMuc3RhdGVzPVtdLHRoaXMuZGVjaXNpb25Ub1N0YXRlPVtdLHRoaXMucnVsZVRvU3RhcnRTdGF0ZT1bXSx0aGlzLnJ1bGVUb1N0b3BTdGF0ZT1udWxsLHRoaXMubW9kZU5hbWVUb1N0YXJ0U3RhdGU9e30sdGhpcy5ydWxlVG9Ub2tlblR5cGU9bnVsbCx0aGlzLmxleGVyQWN0aW9ucz1udWxsLHRoaXMubW9kZVRvU3RhcnRTdGF0ZT1bXX12YXIgZSxuO3JldHVybiBlPXQsKG49W3trZXk6XCJuZXh0VG9rZW5zSW5Db250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IEllKHRoaXMpLkxPT0sodCxudWxsLGUpfX0se2tleTpcIm5leHRUb2tlbnNOb0NvbnRleHRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PXQubmV4dFRva2VuV2l0aGluUnVsZXx8KHQubmV4dFRva2VuV2l0aGluUnVsZT10aGlzLm5leHRUb2tlbnNJbkNvbnRleHQodCxudWxsKSx0Lm5leHRUb2tlbldpdGhpblJ1bGUucmVhZE9ubHk9ITApLHQubmV4dFRva2VuV2l0aGluUnVsZX19LHtrZXk6XCJuZXh0VG9rZW5zXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZT90aGlzLm5leHRUb2tlbnNOb0NvbnRleHQodCk6dGhpcy5uZXh0VG9rZW5zSW5Db250ZXh0KHQsZSl9fSx7a2V5OlwiYWRkU3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0KXtudWxsIT09dCYmKHQuYXRuPXRoaXMsdC5zdGF0ZU51bWJlcj10aGlzLnN0YXRlcy5sZW5ndGgpLHRoaXMuc3RhdGVzLnB1c2godCl9fSx7a2V5OlwicmVtb3ZlU3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnN0YXRlc1t0LnN0YXRlTnVtYmVyXT1udWxsfX0se2tleTpcImRlZmluZURlY2lzaW9uU3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kZWNpc2lvblRvU3RhdGUucHVzaCh0KSx0LmRlY2lzaW9uPXRoaXMuZGVjaXNpb25Ub1N0YXRlLmxlbmd0aC0xLHQuZGVjaXNpb259fSx7a2V5OlwiZ2V0RGVjaXNpb25TdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiAwPT09dGhpcy5kZWNpc2lvblRvU3RhdGUubGVuZ3RoP251bGw6dGhpcy5kZWNpc2lvblRvU3RhdGVbdF19fSx7a2V5OlwiZ2V0RXhwZWN0ZWRUb2tlbnNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKHQ8MHx8dD49dGhpcy5zdGF0ZXMubGVuZ3RoKXRocm93XCJJbnZhbGlkIHN0YXRlIG51bWJlci5cIjt2YXIgbj10aGlzLnN0YXRlc1t0XSxyPXRoaXMubmV4dFRva2VucyhuKTtpZighci5jb250YWlucyhvLkVQU0lMT04pKXJldHVybiByO3ZhciBpPW5ldyBWO2ZvcihpLmFkZFNldChyKSxpLnJlbW92ZU9uZShvLkVQU0lMT04pO251bGwhPT1lJiZlLmludm9raW5nU3RhdGU+PTAmJnIuY29udGFpbnMoby5FUFNJTE9OKTspe3ZhciB1PXRoaXMuc3RhdGVzW2UuaW52b2tpbmdTdGF0ZV0udHJhbnNpdGlvbnNbMF07cj10aGlzLm5leHRUb2tlbnModS5mb2xsb3dTdGF0ZSksaS5hZGRTZXQociksaS5yZW1vdmVPbmUoby5FUFNJTE9OKSxlPWUucGFyZW50Q3R4fXJldHVybiByLmNvbnRhaW5zKG8uRVBTSUxPTikmJmkuYWRkT25lKG8uRU9GKSxpfX1dKSYmRGUoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO0ZlLklOVkFMSURfQUxUX05VTUJFUj0wO2Z1bmN0aW9uIEJlKHQpe3JldHVybiBCZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxCZSh0KX1mdW5jdGlvbiBNZSh0LGUpe3JldHVybiBNZT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LE1lKHQsZSl9ZnVuY3Rpb24gVWUodCl7cmV0dXJuIFVlPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxVZSh0KX12YXIgVmU9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJk1lKHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPVVlKG4pO2lmKHIpe3ZhciBvPVVlKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09QmUoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBpKCl7dmFyIHQ7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxpKSwodD1vLmNhbGwodGhpcykpLnN0YXRlVHlwZT1ILkJBU0lDLHR9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEgpO2Z1bmN0aW9uIHplKHQpe3JldHVybiB6ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx6ZSh0KX1mdW5jdGlvbiBxZSh0LGUpe3JldHVybiBxZT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LHFlKHQsZSl9ZnVuY3Rpb24gSGUodCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXplKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gS2UodCl9ZnVuY3Rpb24gS2UodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gWWUodCl7cmV0dXJuIFllPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxZZSh0KX12YXIgR2U9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJnFlKHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPVllKG4pO2lmKHIpe3ZhciBvPVllKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBIZSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3ZhciB0O3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksKHQ9by5jYWxsKHRoaXMpKS5kZWNpc2lvbj0tMSx0Lm5vbkdyZWVkeT0hMSxIZSh0LEtlKHQpKX1yZXR1cm4gZT1pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZX0oSCk7ZnVuY3Rpb24gV2UodCl7cmV0dXJuIFdlPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LFdlKHQpfWZ1bmN0aW9uIFhlKHQsZSl7cmV0dXJuIFhlPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sWGUodCxlKX1mdW5jdGlvbiAkZSh0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09V2UoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBKZSh0KX1mdW5jdGlvbiBKZSh0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH1mdW5jdGlvbiBRZSh0KXtyZXR1cm4gUWU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFFlKHQpfXZhciBaZT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmWGUodCxlKX0oaSx0KTt2YXIgZSxuLHIsbz0obj1pLHI9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9UWUobik7aWYocil7dmFyIG89UWUodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxvKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuICRlKHRoaXMsdCl9KTtmdW5jdGlvbiBpKCl7dmFyIHQ7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxpKSwodD1vLmNhbGwodGhpcykpLmVuZFN0YXRlPW51bGwsJGUodCxKZSh0KSl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEdlKTtmdW5jdGlvbiB0bih0KXtyZXR1cm4gdG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sdG4odCl9ZnVuY3Rpb24gZW4odCxlKXtyZXR1cm4gZW49T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxlbih0LGUpfWZ1bmN0aW9uIG5uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT10bihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIHJuKHQpfWZ1bmN0aW9uIHJuKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIG9uKHQpe3JldHVybiBvbj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sb24odCl9dmFyIHVuPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZlbih0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1vbihuKTtpZihyKXt2YXIgbz1vbih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbm4odGhpcyx0KX0pO2Z1bmN0aW9uIGkoKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLCh0PW8uY2FsbCh0aGlzKSkuc3RhdGVUeXBlPUguQkxPQ0tfRU5ELHQuc3RhcnRTdGF0ZT1udWxsLG5uKHQscm4odCkpfXJldHVybiBlPWksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlfShIKTtmdW5jdGlvbiBjbih0KXtyZXR1cm4gY249XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sY24odCl9ZnVuY3Rpb24gYW4odCxlKXtyZXR1cm4gYW49T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxhbih0LGUpfWZ1bmN0aW9uIGxuKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1jbihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIHNuKHQpfWZ1bmN0aW9uIHNuKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIGZuKHQpe3JldHVybiBmbj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sZm4odCl9dmFyIHBuPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZhbih0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1mbihuKTtpZihyKXt2YXIgbz1mbih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbG4odGhpcyx0KX0pO2Z1bmN0aW9uIGkoKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLCh0PW8uY2FsbCh0aGlzKSkuc3RhdGVUeXBlPUguTE9PUF9FTkQsdC5sb29wQmFja1N0YXRlPW51bGwsbG4odCxzbih0KSl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEgpO2Z1bmN0aW9uIHluKHQpe3JldHVybiB5bj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx5bih0KX1mdW5jdGlvbiBobih0LGUpe3JldHVybiBobj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGhuKHQsZSl9ZnVuY3Rpb24gYm4odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXluKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gdm4odCl9ZnVuY3Rpb24gdm4odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gZG4odCl7cmV0dXJuIGRuPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxkbih0KX12YXIgbW49ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJmhuKHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPWRuKG4pO2lmKHIpe3ZhciBvPWRuKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBibih0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3ZhciB0O3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksKHQ9by5jYWxsKHRoaXMpKS5zdGF0ZVR5cGU9SC5SVUxFX1NUQVJULHQuc3RvcFN0YXRlPW51bGwsdC5pc1ByZWNlZGVuY2VSdWxlPSExLGJuKHQsdm4odCkpfXJldHVybiBlPWksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlfShIKTtmdW5jdGlvbiBnbih0KXtyZXR1cm4gZ249XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sZ24odCl9ZnVuY3Rpb24gU24odCxlKXtyZXR1cm4gU249T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxTbih0LGUpfWZ1bmN0aW9uIE9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1nbihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIHduKHQpfWZ1bmN0aW9uIHduKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIF9uKHQpe3JldHVybiBfbj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sX24odCl9dmFyIFBuPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZTbih0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1fbihuKTtpZihyKXt2YXIgbz1fbih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gT24odGhpcyx0KX0pO2Z1bmN0aW9uIGkoKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLCh0PW8uY2FsbCh0aGlzKSkuc3RhdGVUeXBlPUguVE9LRU5fU1RBUlQsT24odCx3bih0KSl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEdlKTtmdW5jdGlvbiBUbih0KXtyZXR1cm4gVG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sVG4odCl9ZnVuY3Rpb24gRW4odCxlKXtyZXR1cm4gRW49T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxFbih0LGUpfWZ1bmN0aW9uIGtuKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1UbihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGpuKHQpfWZ1bmN0aW9uIGpuKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIHhuKHQpe3JldHVybiB4bj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0seG4odCl9dmFyIFJuPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZFbih0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT14bihuKTtpZihyKXt2YXIgbz14bih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4ga24odGhpcyx0KX0pO2Z1bmN0aW9uIGkoKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLCh0PW8uY2FsbCh0aGlzKSkuc3RhdGVUeXBlPUguUExVU19MT09QX0JBQ0ssa24odCxqbih0KSl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEdlKTtmdW5jdGlvbiBDbih0KXtyZXR1cm4gQ249XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sQ24odCl9ZnVuY3Rpb24gQW4odCxlKXtyZXR1cm4gQW49T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxBbih0LGUpfWZ1bmN0aW9uIE5uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1DbihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIEluKHQpfWZ1bmN0aW9uIEluKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIExuKHQpe3JldHVybiBMbj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sTG4odCl9dmFyIERuPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZBbih0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1MbihuKTtpZihyKXt2YXIgbz1Mbih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gTm4odGhpcyx0KX0pO2Z1bmN0aW9uIGkoKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLCh0PW8uY2FsbCh0aGlzKSkuc3RhdGVUeXBlPUguU1RBUl9MT09QX0JBQ0ssTm4odCxJbih0KSl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEgpO2Z1bmN0aW9uIEZuKHQpe3JldHVybiBGbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxGbih0KX1mdW5jdGlvbiBCbih0LGUpe3JldHVybiBCbj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LEJuKHQsZSl9ZnVuY3Rpb24gTW4odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUZuKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gVW4odCl9ZnVuY3Rpb24gVW4odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gVm4odCl7cmV0dXJuIFZuPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxWbih0KX12YXIgem49ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJkJuKHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPVZuKG4pO2lmKHIpe3ZhciBvPVZuKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBNbih0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3ZhciB0O3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksKHQ9by5jYWxsKHRoaXMpKS5zdGF0ZVR5cGU9SC5TVEFSX0xPT1BfRU5UUlksdC5sb29wQmFja1N0YXRlPW51bGwsdC5pc1ByZWNlZGVuY2VEZWNpc2lvbj1udWxsLE1uKHQsVW4odCkpfXJldHVybiBlPWksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlfShHZSk7ZnVuY3Rpb24gcW4odCl7cmV0dXJuIHFuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LHFuKHQpfWZ1bmN0aW9uIEhuKHQsZSl7cmV0dXJuIEhuPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sSG4odCxlKX1mdW5jdGlvbiBLbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09cW4oZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBZbih0KX1mdW5jdGlvbiBZbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH1mdW5jdGlvbiBHbih0KXtyZXR1cm4gR249T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LEduKHQpfXZhciBXbj1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmSG4odCxlKX0oaSx0KTt2YXIgZSxuLHIsbz0obj1pLHI9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9R24obik7aWYocil7dmFyIG89R24odGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxvKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIEtuKHRoaXMsdCl9KTtmdW5jdGlvbiBpKCl7dmFyIHQ7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxpKSwodD1vLmNhbGwodGhpcykpLnN0YXRlVHlwZT1ILlBMVVNfQkxPQ0tfU1RBUlQsdC5sb29wQmFja1N0YXRlPW51bGwsS24odCxZbih0KSl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KFplKTtmdW5jdGlvbiBYbih0KXtyZXR1cm4gWG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sWG4odCl9ZnVuY3Rpb24gJG4odCxlKXtyZXR1cm4gJG49T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSwkbih0LGUpfWZ1bmN0aW9uIEpuKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1YbihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIFFuKHQpfWZ1bmN0aW9uIFFuKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIFpuKHQpe3JldHVybiBabj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sWm4odCl9dmFyIHRyPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiYkbih0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1abihuKTtpZihyKXt2YXIgbz1abih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gSm4odGhpcyx0KX0pO2Z1bmN0aW9uIGkoKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLCh0PW8uY2FsbCh0aGlzKSkuc3RhdGVUeXBlPUguU1RBUl9CTE9DS19TVEFSVCxKbih0LFFuKHQpKX1yZXR1cm4gZT1pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZX0oWmUpO2Z1bmN0aW9uIGVyKHQpe3JldHVybiBlcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxlcih0KX1mdW5jdGlvbiBucih0LGUpe3JldHVybiBucj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LG5yKHQsZSl9ZnVuY3Rpb24gcnIodCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWVyKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gb3IodCl9ZnVuY3Rpb24gb3IodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gaXIodCl7cmV0dXJuIGlyPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxpcih0KX12YXIgdXI9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJm5yKHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPWlyKG4pO2lmKHIpe3ZhciBvPWlyKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBycih0aGlzLHQpfSk7ZnVuY3Rpb24gaSgpe3ZhciB0O3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsaSksKHQ9by5jYWxsKHRoaXMpKS5zdGF0ZVR5cGU9SC5CTE9DS19TVEFSVCxycih0LG9yKHQpKX1yZXR1cm4gZT1pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZX0oWmUpO2Z1bmN0aW9uIGNyKHQpe3JldHVybiBjcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxjcih0KX1mdW5jdGlvbiBhcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09Y3IodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09Y3IocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09Y3Iobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIGxyKHQsZSl7cmV0dXJuIGxyPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sbHIodCxlKX1mdW5jdGlvbiBzcih0KXtyZXR1cm4gc3I9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LHNyKHQpfXZhciBmcj1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmbHIodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1zcihyKTtpZihvKXt2YXIgbj1zcih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWNyKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0LGUpe3ZhciBuO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKG49aS5jYWxsKHRoaXMsdCkpLmxhYmVsXz1lLG4ubGFiZWw9bi5tYWtlTGFiZWwoKSxuLnNlcmlhbGl6YXRpb25UeXBlPXR0LkFUT00sbn1yZXR1cm4gZT11LChuPVt7a2V5OlwibWFrZUxhYmVsXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgVjtyZXR1cm4gdC5hZGRPbmUodGhpcy5sYWJlbF8pLHR9fSx7a2V5OlwibWF0Y2hlc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5sYWJlbF89PT10fX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYWJlbF99fV0pJiZhcihlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KHR0KTtmdW5jdGlvbiBwcih0KXtyZXR1cm4gcHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0scHIodCl9ZnVuY3Rpb24geXIodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXByKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXByKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PXByKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBocih0LGUpe3JldHVybiBocj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGhyKHQsZSl9ZnVuY3Rpb24gYnIodCl7cmV0dXJuIGJyPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxicih0KX12YXIgdnI9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJmhyKHQsZSl9KHUsdCk7dmFyIGUsbixyLG8saT0ocj11LG89ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9YnIocik7aWYobyl7dmFyIG49YnIodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1wcihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIHUodCxlLG4pe3ZhciByO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKHI9aS5jYWxsKHRoaXMsdCkpLnNlcmlhbGl6YXRpb25UeXBlPXR0LlJBTkdFLHIuc3RhcnQ9ZSxyLnN0b3A9bixyLmxhYmVsPXIubWFrZUxhYmVsKCkscn1yZXR1cm4gZT11LChuPVt7a2V5OlwibWFrZUxhYmVsXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgVjtyZXR1cm4gdC5hZGRSYW5nZSh0aGlzLnN0YXJ0LHRoaXMuc3RvcCksdH19LHtrZXk6XCJtYXRjaGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0Pj10aGlzLnN0YXJ0JiZ0PD10aGlzLnN0b3B9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiJ1wiK1N0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5zdGFydCkrXCInLi4nXCIrU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnN0b3ApK1wiJ1wifX1dKSYmeXIoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fSh0dCk7ZnVuY3Rpb24gZHIodCl7cmV0dXJuIGRyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGRyKHQpfWZ1bmN0aW9uIG1yKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1kcih0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1kcihyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1kcihvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gZ3IodCxlKXtyZXR1cm4gZ3I9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxncih0LGUpfWZ1bmN0aW9uIFNyKHQpe3JldHVybiBTcj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sU3IodCl9dmFyIE9yPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZncih0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPVNyKHIpO2lmKG8pe3ZhciBuPVNyKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09ZHIoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQsZSxuLHIpe3ZhciBvO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKG89aS5jYWxsKHRoaXMsdCkpLnNlcmlhbGl6YXRpb25UeXBlPXR0LkFDVElPTixvLnJ1bGVJbmRleD1lLG8uYWN0aW9uSW5kZXg9dm9pZCAwPT09bj8tMTpuLG8uaXNDdHhEZXBlbmRlbnQ9dm9pZCAwIT09ciYmcixvLmlzRXBzaWxvbj0hMCxvfXJldHVybiBlPXUsKG49W3trZXk6XCJtYXRjaGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiExfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cImFjdGlvbl9cIit0aGlzLnJ1bGVJbmRleCtcIjpcIit0aGlzLmFjdGlvbkluZGV4fX1dKSYmbXIoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fSh0dCk7ZnVuY3Rpb24gd3IodCl7cmV0dXJuIHdyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LHdyKHQpfWZ1bmN0aW9uIF9yKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT13cih0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT13cihyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT13cihvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gUHIodCxlKXtyZXR1cm4gUHI9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxQcih0LGUpfWZ1bmN0aW9uIFRyKHQpe3JldHVybiBUcj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sVHIodCl9dmFyIEVyPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZQcih0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPVRyKHIpO2lmKG8pe3ZhciBuPVRyKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09d3IoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQsZSl7dmFyIG47cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSwobj1pLmNhbGwodGhpcyx0KSkuc2VyaWFsaXphdGlvblR5cGU9dHQuRVBTSUxPTixuLmlzRXBzaWxvbj0hMCxuLm91dGVybW9zdFByZWNlZGVuY2VSZXR1cm49ZSxufXJldHVybiBlPXUsKG49W3trZXk6XCJtYXRjaGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiExfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cImVwc2lsb25cIn19XSkmJl9yKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0odHQpO2Z1bmN0aW9uIGtyKHQpe3JldHVybiBrcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxrcih0KX1mdW5jdGlvbiBqcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09a3IodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09a3IocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09a3Iobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIHhyKHQsZSl7cmV0dXJuIHhyPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0seHIodCxlKX1mdW5jdGlvbiBScih0KXtyZXR1cm4gUnI9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFJyKHQpfXZhciBDcj1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmeHIodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1ScihyKTtpZihvKXt2YXIgbj1Scih0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWtyKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0LGUsbil7dmFyIHI7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSwocj1pLmNhbGwodGhpcykpLnJ1bGVJbmRleD12b2lkIDA9PT10Py0xOnQsci5wcmVkSW5kZXg9dm9pZCAwPT09ZT8tMTplLHIuaXNDdHhEZXBlbmRlbnQ9dm9pZCAwIT09biYmbixyfXJldHVybiBlPXUsKG49W3trZXk6XCJldmFsdWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5pc0N0eERlcGVuZGVudD9lOm51bGw7cmV0dXJuIHQuc2VtcHJlZChuLHRoaXMucnVsZUluZGV4LHRoaXMucHJlZEluZGV4KX19LHtrZXk6XCJ1cGRhdGVIYXNoQ29kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QudXBkYXRlKHRoaXMucnVsZUluZGV4LHRoaXMucHJlZEluZGV4LHRoaXMuaXNDdHhEZXBlbmRlbnQpfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzPT09dHx8dCBpbnN0YW5jZW9mIHUmJnRoaXMucnVsZUluZGV4PT09dC5ydWxlSW5kZXgmJnRoaXMucHJlZEluZGV4PT09dC5wcmVkSW5kZXgmJnRoaXMuaXNDdHhEZXBlbmRlbnQ9PT10LmlzQ3R4RGVwZW5kZW50fX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIntcIit0aGlzLnJ1bGVJbmRleCtcIjpcIit0aGlzLnByZWRJbmRleCtcIn0/XCJ9fV0pJiZqcihlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KGopO2Z1bmN0aW9uIEFyKHQpe3JldHVybiBBcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxBcih0KX1mdW5jdGlvbiBOcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09QXIodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09QXIocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09QXIobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIElyKHQsZSl7cmV0dXJuIElyPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sSXIodCxlKX1mdW5jdGlvbiBMcih0KXtyZXR1cm4gTHI9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LExyKHQpfWouTk9ORT1uZXcgQ3I7dmFyIERyPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZJcih0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPUxyKHIpO2lmKG8pe3ZhciBuPUxyKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09QXIoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQsZSxuLHIpe3ZhciBvO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKG89aS5jYWxsKHRoaXMsdCkpLnNlcmlhbGl6YXRpb25UeXBlPXR0LlBSRURJQ0FURSxvLnJ1bGVJbmRleD1lLG8ucHJlZEluZGV4PW4sby5pc0N0eERlcGVuZGVudD1yLG8uaXNFcHNpbG9uPSEwLG99cmV0dXJuIGU9dSwobj1be2tleTpcIm1hdGNoZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuITF9fSx7a2V5OlwiZ2V0UHJlZGljYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IENyKHRoaXMucnVsZUluZGV4LHRoaXMucHJlZEluZGV4LHRoaXMuaXNDdHhEZXBlbmRlbnQpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cInByZWRfXCIrdGhpcy5ydWxlSW5kZXgrXCI6XCIrdGhpcy5wcmVkSW5kZXh9fV0pJiZOcihlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFR0KTtmdW5jdGlvbiBGcih0KXtyZXR1cm4gRnI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sRnIodCl9ZnVuY3Rpb24gQnIodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PUZyKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PUZyKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PUZyKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBNcih0LGUpe3JldHVybiBNcj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LE1yKHQsZSl9ZnVuY3Rpb24gVXIodCl7cmV0dXJuIFVyPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxVcih0KX12YXIgVnI9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJk1yKHQsZSl9KHUsdCk7dmFyIGUsbixyLG8saT0ocj11LG89ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9VXIocik7aWYobyl7dmFyIG49VXIodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1GcihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIHUodCl7dmFyIGU7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSwoZT1pLmNhbGwodGhpcykpLnByZWNlZGVuY2U9dm9pZCAwPT09dD8wOnQsZX1yZXR1cm4gZT11LChuPVt7a2V5OlwiZXZhbHVhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0LnByZWNwcmVkKGUsdGhpcy5wcmVjZWRlbmNlKX19LHtrZXk6XCJldmFsUHJlY2VkZW5jZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQucHJlY3ByZWQoZSx0aGlzLnByZWNlZGVuY2UpP2ouTk9ORTpudWxsfX0se2tleTpcImNvbXBhcmVUb1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnByZWNlZGVuY2UtdC5wcmVjZWRlbmNlfX0se2tleTpcInVwZGF0ZUhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC51cGRhdGUodGhpcy5wcmVjZWRlbmNlKX19LHtrZXk6XCJlcXVhbHNcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcz09PXR8fHQgaW5zdGFuY2VvZiB1JiZ0aGlzLnByZWNlZGVuY2U9PT10LnByZWNlZGVuY2V9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwie1wiK3RoaXMucHJlY2VkZW5jZStcIj49cHJlY30/XCJ9fV0pJiZCcihlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KGopO2Z1bmN0aW9uIHpyKHQpe3JldHVybiB6cj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx6cih0KX1mdW5jdGlvbiBxcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09enIodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09enIocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09enIobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIEhyKHQsZSl7cmV0dXJuIEhyPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sSHIodCxlKX1mdW5jdGlvbiBLcih0KXtyZXR1cm4gS3I9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LEtyKHQpfWouUHJlY2VkZW5jZVByZWRpY2F0ZT1Wcjt2YXIgWXI9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJkhyKHQsZSl9KHUsdCk7dmFyIGUsbixyLG8saT0ocj11LG89ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9S3Iocik7aWYobyl7dmFyIG49S3IodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT16cihlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIHUodCxlKXt2YXIgbjtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHUpLChuPWkuY2FsbCh0aGlzLHQpKS5zZXJpYWxpemF0aW9uVHlwZT10dC5QUkVDRURFTkNFLG4ucHJlY2VkZW5jZT1lLG4uaXNFcHNpbG9uPSEwLG59cmV0dXJuIGU9dSwobj1be2tleTpcIm1hdGNoZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuITF9fSx7a2V5OlwiZ2V0UHJlZGljYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFZyKHRoaXMucHJlY2VkZW5jZSl9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZWNlZGVuY2UrXCIgPj0gX3BcIn19XSkmJnFyKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oVHQpO2Z1bmN0aW9uIEdyKHQpe3JldHVybiBHcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxHcih0KX1mdW5jdGlvbiBXcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09R3IodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09R3IocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09R3Iobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIFhyKHQsZSxuKXtyZXR1cm4gZSYmV3IodC5wcm90b3R5cGUsZSksbiYmV3IodCxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9dmFyICRyPVhyKChmdW5jdGlvbiB0KGUpeyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdm9pZCAwPT09ZSYmKGU9bnVsbCksdGhpcy5yZWFkT25seT0hMSx0aGlzLnZlcmlmeUFUTj1udWxsPT09ZXx8ZS52ZXJpZnlBVE4sdGhpcy5nZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9ucz1udWxsIT09ZSYmZS5nZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9uc30pKTskci5kZWZhdWx0T3B0aW9ucz1uZXcgJHIsJHIuZGVmYXVsdE9wdGlvbnMucmVhZE9ubHk9ITA7ZnVuY3Rpb24gSnIodCl7cmV0dXJuIEpyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEpyKHQpfWZ1bmN0aW9uIFFyKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1Kcih0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1KcihyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1KcihvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIFpyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuYWN0aW9uVHlwZT1lLHRoaXMuaXNQb3NpdGlvbkRlcGVuZGVudD0hMX12YXIgZSxuO3JldHVybiBlPXQsKG49W3trZXk6XCJoYXNoQ29kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IGY7cmV0dXJuIHRoaXMudXBkYXRlSGFzaENvZGUodCksdC5maW5pc2goKX19LHtrZXk6XCJ1cGRhdGVIYXNoQ29kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QudXBkYXRlKHRoaXMuYWN0aW9uVHlwZSl9fSx7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXM9PT10fX1dKSYmUXIoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIHRvKHQpe3JldHVybiB0bz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx0byh0KX1mdW5jdGlvbiBlbyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09dG8odCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09dG8ocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09dG8obyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIG5vKHQsZSl7cmV0dXJuIG5vPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sbm8odCxlKX1mdW5jdGlvbiBybyh0KXtyZXR1cm4gcm89T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LHJvKHQpfXZhciBvbz1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmbm8odCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1ybyhyKTtpZihvKXt2YXIgbj1ybyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXRvKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksaS5jYWxsKHRoaXMsNil9cmV0dXJuIGU9dSwobj1be2tleTpcImV4ZWN1dGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnNraXAoKX19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJza2lwXCJ9fV0pJiZlbyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFpyKTtmdW5jdGlvbiBpbyh0KXtyZXR1cm4gaW89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0saW8odCl9ZnVuY3Rpb24gdW8odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PWlvKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PWlvKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PWlvKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBjbyh0LGUpe3JldHVybiBjbz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGNvKHQsZSl9ZnVuY3Rpb24gYW8odCl7cmV0dXJuIGFvPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxhbyh0KX1vby5JTlNUQU5DRT1uZXcgb287dmFyIGxvPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZjbyh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPWFvKHIpO2lmKG8pe3ZhciBuPWFvKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09aW8oZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKGU9aS5jYWxsKHRoaXMsMCkpLmNoYW5uZWw9dCxlfXJldHVybiBlPXUsKG49W3trZXk6XCJleGVjdXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC5fY2hhbm5lbD10aGlzLmNoYW5uZWx9fSx7a2V5OlwidXBkYXRlSGFzaENvZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnVwZGF0ZSh0aGlzLmFjdGlvblR5cGUsdGhpcy5jaGFubmVsKX19LHtrZXk6XCJlcXVhbHNcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcz09PXR8fHQgaW5zdGFuY2VvZiB1JiZ0aGlzLmNoYW5uZWw9PT10LmNoYW5uZWx9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiY2hhbm5lbChcIit0aGlzLmNoYW5uZWwrXCIpXCJ9fV0pJiZ1byhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFpyKTtmdW5jdGlvbiBzbyh0KXtyZXR1cm4gc289XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sc28odCl9ZnVuY3Rpb24gZm8odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXNvKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXNvKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PXNvKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBwbyh0LGUpe3JldHVybiBwbz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LHBvKHQsZSl9ZnVuY3Rpb24geW8odCl7cmV0dXJuIHlvPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSx5byh0KX12YXIgaG89ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJnBvKHQsZSl9KHUsdCk7dmFyIGUsbixyLG8saT0ocj11LG89ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9eW8ocik7aWYobyl7dmFyIG49eW8odGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1zbyhlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIHUodCxlKXt2YXIgbjtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHUpLChuPWkuY2FsbCh0aGlzLDEpKS5ydWxlSW5kZXg9dCxuLmFjdGlvbkluZGV4PWUsbi5pc1Bvc2l0aW9uRGVwZW5kZW50PSEwLG59cmV0dXJuIGU9dSwobj1be2tleTpcImV4ZWN1dGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LmFjdGlvbihudWxsLHRoaXMucnVsZUluZGV4LHRoaXMuYWN0aW9uSW5kZXgpfX0se2tleTpcInVwZGF0ZUhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC51cGRhdGUodGhpcy5hY3Rpb25UeXBlLHRoaXMucnVsZUluZGV4LHRoaXMuYWN0aW9uSW5kZXgpfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzPT09dHx8dCBpbnN0YW5jZW9mIHUmJnRoaXMucnVsZUluZGV4PT09dC5ydWxlSW5kZXgmJnRoaXMuYWN0aW9uSW5kZXg9PT10LmFjdGlvbkluZGV4fX1dKSYmZm8oZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fShacik7ZnVuY3Rpb24gYm8odCl7cmV0dXJuIGJvPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGJvKHQpfWZ1bmN0aW9uIHZvKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1ibyh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1ibyhyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1ibyhvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gbW8odCxlKXtyZXR1cm4gbW89T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxtbyh0LGUpfWZ1bmN0aW9uIGdvKHQpe3JldHVybiBnbz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sZ28odCl9dmFyIFNvPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZtbyh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPWdvKHIpO2lmKG8pe3ZhciBuPWdvKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09Ym8oZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSxpLmNhbGwodGhpcywzKX1yZXR1cm4gZT11LChuPVt7a2V5OlwiZXhlY3V0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QubW9yZSgpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIm1vcmVcIn19XSkmJnZvKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oWnIpO2Z1bmN0aW9uIE9vKHQpe3JldHVybiBPbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxPbyh0KX1mdW5jdGlvbiB3byh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09T28odCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09T28ocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09T28obyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIF9vKHQsZSl7cmV0dXJuIF9vPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sX28odCxlKX1mdW5jdGlvbiBQbyh0KXtyZXR1cm4gUG89T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFBvKHQpfVNvLklOU1RBTkNFPW5ldyBTbzt2YXIgVG89ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJl9vKHQsZSl9KHUsdCk7dmFyIGUsbixyLG8saT0ocj11LG89ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9UG8ocik7aWYobyl7dmFyIG49UG8odGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1PbyhlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIHUodCl7dmFyIGU7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSwoZT1pLmNhbGwodGhpcyw3KSkudHlwZT10LGV9cmV0dXJuIGU9dSwobj1be2tleTpcImV4ZWN1dGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnR5cGU9dGhpcy50eXBlfX0se2tleTpcInVwZGF0ZUhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC51cGRhdGUodGhpcy5hY3Rpb25UeXBlLHRoaXMudHlwZSl9fSx7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXM9PT10fHx0IGluc3RhbmNlb2YgdSYmdGhpcy50eXBlPT09dC50eXBlfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cInR5cGUoXCIrdGhpcy50eXBlK1wiKVwifX1dKSYmd28oZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fShacik7ZnVuY3Rpb24gRW8odCl7cmV0dXJuIEVvPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEVvKHQpfWZ1bmN0aW9uIGtvKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1Fbyh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1FbyhyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1FbyhvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gam8odCxlKXtyZXR1cm4gam89T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxqbyh0LGUpfWZ1bmN0aW9uIHhvKHQpe3JldHVybiB4bz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0seG8odCl9dmFyIFJvPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZqbyh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPXhvKHIpO2lmKG8pe3ZhciBuPXhvKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09RW8oZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKGU9aS5jYWxsKHRoaXMsNSkpLm1vZGU9dCxlfXJldHVybiBlPXUsKG49W3trZXk6XCJleGVjdXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC5wdXNoTW9kZSh0aGlzLm1vZGUpfX0se2tleTpcInVwZGF0ZUhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC51cGRhdGUodGhpcy5hY3Rpb25UeXBlLHRoaXMubW9kZSl9fSx7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXM9PT10fHx0IGluc3RhbmNlb2YgdSYmdGhpcy5tb2RlPT09dC5tb2RlfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cInB1c2hNb2RlKFwiK3RoaXMubW9kZStcIilcIn19XSkmJmtvKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oWnIpO2Z1bmN0aW9uIENvKHQpe3JldHVybiBDbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxDbyh0KX1mdW5jdGlvbiBBbyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09Q28odCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09Q28ocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09Q28obyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIE5vKHQsZSl7cmV0dXJuIE5vPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sTm8odCxlKX1mdW5jdGlvbiBJbyh0KXtyZXR1cm4gSW89T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LElvKHQpfXZhciBMbz1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmTm8odCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1JbyhyKTtpZihvKXt2YXIgbj1Jbyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUNvKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksaS5jYWxsKHRoaXMsNCl9cmV0dXJuIGU9dSwobj1be2tleTpcImV4ZWN1dGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnBvcE1vZGUoKX19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJwb3BNb2RlXCJ9fV0pJiZBbyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFpyKTtmdW5jdGlvbiBEbyh0KXtyZXR1cm4gRG89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sRG8odCl9ZnVuY3Rpb24gRm8odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PURvKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PURvKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PURvKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBCbyh0LGUpe3JldHVybiBCbz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LEJvKHQsZSl9ZnVuY3Rpb24gTW8odCl7cmV0dXJuIE1vPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxNbyh0KX1Mby5JTlNUQU5DRT1uZXcgTG87dmFyIFVvPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZCbyh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPU1vKHIpO2lmKG8pe3ZhciBuPU1vKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09RG8oZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKGU9aS5jYWxsKHRoaXMsMikpLm1vZGU9dCxlfXJldHVybiBlPXUsKG49W3trZXk6XCJleGVjdXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC5tb2RlKHRoaXMubW9kZSl9fSx7a2V5OlwidXBkYXRlSGFzaENvZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnVwZGF0ZSh0aGlzLmFjdGlvblR5cGUsdGhpcy5tb2RlKX19LHtrZXk6XCJlcXVhbHNcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcz09PXR8fHQgaW5zdGFuY2VvZiB1JiZ0aGlzLm1vZGU9PT10Lm1vZGV9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwibW9kZShcIit0aGlzLm1vZGUrXCIpXCJ9fV0pJiZGbyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFpyKTtmdW5jdGlvbiBWbyh0KXtyZXR1cm4gVm89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sVm8odCl9ZnVuY3Rpb24gem8odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PVZvKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PVZvKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PVZvKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBxbyh0LGUpe3ZhciBuPVtdO3JldHVybiBuW3QtMV09ZSxuLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGV9KSl9dmFyIEhvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLG51bGw9PWUmJihlPSRyLmRlZmF1bHRPcHRpb25zKSx0aGlzLmRlc2VyaWFsaXphdGlvbk9wdGlvbnM9ZSx0aGlzLnN0YXRlRmFjdG9yaWVzPW51bGwsdGhpcy5hY3Rpb25GYWN0b3JpZXM9bnVsbH12YXIgZSxuO3JldHVybiBlPXQsbj1be2tleTpcImRlc2VyaWFsaXplXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5yZXNldCh0KTt0aGlzLmNoZWNrVmVyc2lvbihlKSxlJiZ0aGlzLnNraXBVVUlEKCk7dmFyIG49dGhpcy5yZWFkQVROKCk7dGhpcy5yZWFkU3RhdGVzKG4sZSksdGhpcy5yZWFkUnVsZXMobixlKSx0aGlzLnJlYWRNb2RlcyhuKTt2YXIgcj1bXTtyZXR1cm4gdGhpcy5yZWFkU2V0cyhuLHIsdGhpcy5yZWFkSW50LmJpbmQodGhpcykpLGUmJnRoaXMucmVhZFNldHMobixyLHRoaXMucmVhZEludDMyLmJpbmQodGhpcykpLHRoaXMucmVhZEVkZ2VzKG4sciksdGhpcy5yZWFkRGVjaXNpb25zKG4pLHRoaXMucmVhZExleGVyQWN0aW9ucyhuLGUpLHRoaXMubWFya1ByZWNlZGVuY2VEZWNpc2lvbnMobiksdGhpcy52ZXJpZnlBVE4obiksdGhpcy5kZXNlcmlhbGl6YXRpb25PcHRpb25zLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb25zJiYxPT09bi5ncmFtbWFyVHlwZSYmKHRoaXMuZ2VuZXJhdGVSdWxlQnlwYXNzVHJhbnNpdGlvbnMobiksdGhpcy52ZXJpZnlBVE4obikpLG59fSx7a2V5OlwicmVzZXRcIix2YWx1ZTpmdW5jdGlvbih0KXtpZigzPT09KHQuY2hhckNvZGVBdD90LmNoYXJDb2RlQXQoMCk6dFswXSkpe3ZhciBlPXQuc3BsaXQoXCJcIikubWFwKChmdW5jdGlvbih0KXt2YXIgZT10LmNoYXJDb2RlQXQoMCk7cmV0dXJuIGU+MT9lLTI6ZSs2NTUzNH0pKTtyZXR1cm4gZVswXT10LmNoYXJDb2RlQXQoMCksdGhpcy5kYXRhPWUsdGhpcy5wb3M9MCwhMH1yZXR1cm4gdGhpcy5kYXRhPXQsdGhpcy5wb3M9MCwhMX19LHtrZXk6XCJza2lwVVVJRFwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dCsrPDg7KXRoaXMucmVhZEludCgpfX0se2tleTpcImNoZWNrVmVyc2lvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucmVhZEludCgpO2lmKCF0JiY0IT09ZSl0aHJvd1wiQ291bGQgbm90IGRlc2VyaWFsaXplIEFUTiB3aXRoIHZlcnNpb24gXCIrZStcIiAoZXhwZWN0ZWQgNCkuXCJ9fSx7a2V5OlwicmVhZEFUTlwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5yZWFkSW50KCksZT10aGlzLnJlYWRJbnQoKTtyZXR1cm4gbmV3IEZlKHQsZSl9fSx7a2V5OlwicmVhZFN0YXRlc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuLHIsbyxpPVtdLHU9W10sYz10aGlzLnJlYWRJbnQoKSxhPTA7YTxjO2ErKyl7dmFyIGw9dGhpcy5yZWFkSW50KCk7aWYobCE9PUguSU5WQUxJRF9UWVBFKXt2YXIgcz10aGlzLnJlYWRJbnQoKTtlJiY2NTUzNT09PXMmJihzPS0xKTt2YXIgZj10aGlzLnN0YXRlRmFjdG9yeShsLHMpO2lmKGw9PT1ILkxPT1BfRU5EKXt2YXIgcD10aGlzLnJlYWRJbnQoKTtpLnB1c2goW2YscF0pfWVsc2UgaWYoZiBpbnN0YW5jZW9mIFplKXt2YXIgeT10aGlzLnJlYWRJbnQoKTt1LnB1c2goW2YseV0pfXQuYWRkU3RhdGUoZil9ZWxzZSB0LmFkZFN0YXRlKG51bGwpfWZvcihuPTA7bjxpLmxlbmd0aDtuKyspKHI9aVtuXSlbMF0ubG9vcEJhY2tTdGF0ZT10LnN0YXRlc1tyWzFdXTtmb3Iobj0wO248dS5sZW5ndGg7bisrKShyPXVbbl0pWzBdLmVuZFN0YXRlPXQuc3RhdGVzW3JbMV1dO3ZhciBoPXRoaXMucmVhZEludCgpO2ZvcihuPTA7bjxoO24rKylvPXRoaXMucmVhZEludCgpLHQuc3RhdGVzW29dLm5vbkdyZWVkeT0hMDt2YXIgYj10aGlzLnJlYWRJbnQoKTtmb3Iobj0wO248YjtuKyspbz10aGlzLnJlYWRJbnQoKSx0LnN0YXRlc1tvXS5pc1ByZWNlZGVuY2VSdWxlPSEwfX0se2tleTpcInJlYWRSdWxlc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj10aGlzLnJlYWRJbnQoKTtmb3IoMD09PXQuZ3JhbW1hclR5cGUmJih0LnJ1bGVUb1Rva2VuVHlwZT1xbyhyLDApKSx0LnJ1bGVUb1N0YXJ0U3RhdGU9cW8ociwwKSxuPTA7bjxyO24rKyl7dmFyIGk9dGhpcy5yZWFkSW50KCk7aWYodC5ydWxlVG9TdGFydFN0YXRlW25dPXQuc3RhdGVzW2ldLDA9PT10LmdyYW1tYXJUeXBlKXt2YXIgdT10aGlzLnJlYWRJbnQoKTtlJiY2NTUzNT09PXUmJih1PW8uRU9GKSx0LnJ1bGVUb1Rva2VuVHlwZVtuXT11fX1mb3IodC5ydWxlVG9TdG9wU3RhdGU9cW8ociwwKSxuPTA7bjx0LnN0YXRlcy5sZW5ndGg7bisrKXt2YXIgYz10LnN0YXRlc1tuXTtjIGluc3RhbmNlb2YgJCYmKHQucnVsZVRvU3RvcFN0YXRlW2MucnVsZUluZGV4XT1jLHQucnVsZVRvU3RhcnRTdGF0ZVtjLnJ1bGVJbmRleF0uc3RvcFN0YXRlPWMpfX19LHtrZXk6XCJyZWFkTW9kZXNcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5yZWFkSW50KCksbj0wO248ZTtuKyspe3ZhciByPXRoaXMucmVhZEludCgpO3QubW9kZVRvU3RhcnRTdGF0ZS5wdXNoKHQuc3RhdGVzW3JdKX19fSx7a2V5OlwicmVhZFNldHNcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPXRoaXMucmVhZEludCgpLG89MDtvPHI7bysrKXt2YXIgaT1uZXcgVjtlLnB1c2goaSk7dmFyIHU9dGhpcy5yZWFkSW50KCk7MCE9PXRoaXMucmVhZEludCgpJiZpLmFkZE9uZSgtMSk7Zm9yKHZhciBjPTA7Yzx1O2MrKyl7dmFyIGE9bigpLGw9bigpO2kuYWRkUmFuZ2UoYSxsKX19fX0se2tleTpcInJlYWRFZGdlc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG4scixvLGksdSxjPXRoaXMucmVhZEludCgpO2ZvcihuPTA7bjxjO24rKyl7dmFyIGE9dGhpcy5yZWFkSW50KCksbD10aGlzLnJlYWRJbnQoKSxzPXRoaXMucmVhZEludCgpLGY9dGhpcy5yZWFkSW50KCkscD10aGlzLnJlYWRJbnQoKSx5PXRoaXMucmVhZEludCgpO2k9dGhpcy5lZGdlRmFjdG9yeSh0LHMsYSxsLGYscCx5LGUpLHQuc3RhdGVzW2FdLmFkZFRyYW5zaXRpb24oaSl9Zm9yKG49MDtuPHQuc3RhdGVzLmxlbmd0aDtuKyspZm9yKG89dC5zdGF0ZXNbbl0scj0wO3I8by50cmFuc2l0aW9ucy5sZW5ndGg7cisrKXt2YXIgaD1vLnRyYW5zaXRpb25zW3JdO2lmKGggaW5zdGFuY2VvZiBpdCl7dmFyIGI9LTE7dC5ydWxlVG9TdGFydFN0YXRlW2gudGFyZ2V0LnJ1bGVJbmRleF0uaXNQcmVjZWRlbmNlUnVsZSYmMD09PWgucHJlY2VkZW5jZSYmKGI9aC50YXJnZXQucnVsZUluZGV4KSxpPW5ldyBFcihoLmZvbGxvd1N0YXRlLGIpLHQucnVsZVRvU3RvcFN0YXRlW2gudGFyZ2V0LnJ1bGVJbmRleF0uYWRkVHJhbnNpdGlvbihpKX19Zm9yKG49MDtuPHQuc3RhdGVzLmxlbmd0aDtuKyspe2lmKChvPXQuc3RhdGVzW25dKWluc3RhbmNlb2YgWmUpe2lmKG51bGw9PT1vLmVuZFN0YXRlKXRocm93XCJJbGxlZ2FsU3RhdGVcIjtpZihudWxsIT09by5lbmRTdGF0ZS5zdGFydFN0YXRlKXRocm93XCJJbGxlZ2FsU3RhdGVcIjtvLmVuZFN0YXRlLnN0YXJ0U3RhdGU9b31pZihvIGluc3RhbmNlb2YgUm4pZm9yKHI9MDtyPG8udHJhbnNpdGlvbnMubGVuZ3RoO3IrKykodT1vLnRyYW5zaXRpb25zW3JdLnRhcmdldClpbnN0YW5jZW9mIFduJiYodS5sb29wQmFja1N0YXRlPW8pO2Vsc2UgaWYobyBpbnN0YW5jZW9mIERuKWZvcihyPTA7cjxvLnRyYW5zaXRpb25zLmxlbmd0aDtyKyspKHU9by50cmFuc2l0aW9uc1tyXS50YXJnZXQpaW5zdGFuY2VvZiB6biYmKHUubG9vcEJhY2tTdGF0ZT1vKX19fSx7a2V5OlwicmVhZERlY2lzaW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnJlYWRJbnQoKSxuPTA7bjxlO24rKyl7dmFyIHI9dGhpcy5yZWFkSW50KCksbz10LnN0YXRlc1tyXTt0LmRlY2lzaW9uVG9TdGF0ZS5wdXNoKG8pLG8uZGVjaXNpb249bn19fSx7a2V5OlwicmVhZExleGVyQWN0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoMD09PXQuZ3JhbW1hclR5cGUpe3ZhciBuPXRoaXMucmVhZEludCgpO3QubGV4ZXJBY3Rpb25zPXFvKG4sbnVsbCk7Zm9yKHZhciByPTA7cjxuO3IrKyl7dmFyIG89dGhpcy5yZWFkSW50KCksaT10aGlzLnJlYWRJbnQoKTtlJiY2NTUzNT09PWkmJihpPS0xKTt2YXIgdT10aGlzLnJlYWRJbnQoKTtlJiY2NTUzNT09PXUmJih1PS0xKSx0LmxleGVyQWN0aW9uc1tyXT10aGlzLmxleGVyQWN0aW9uRmFjdG9yeShvLGksdSl9fX19LHtrZXk6XCJnZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLG49dC5ydWxlVG9TdGFydFN0YXRlLmxlbmd0aDtmb3IoZT0wO2U8bjtlKyspdC5ydWxlVG9Ub2tlblR5cGVbZV09dC5tYXhUb2tlblR5cGUrZSsxO2ZvcihlPTA7ZTxuO2UrKyl0aGlzLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb24odCxlKX19LHtrZXk6XCJnZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbixyLG89bmV3IHVyO28ucnVsZUluZGV4PWUsdC5hZGRTdGF0ZShvKTt2YXIgaT1uZXcgdW47aS5ydWxlSW5kZXg9ZSx0LmFkZFN0YXRlKGkpLG8uZW5kU3RhdGU9aSx0LmRlZmluZURlY2lzaW9uU3RhdGUobyksaS5zdGFydFN0YXRlPW87dmFyIHU9bnVsbCxjPW51bGw7aWYodC5ydWxlVG9TdGFydFN0YXRlW2VdLmlzUHJlY2VkZW5jZVJ1bGUpe2ZvcihjPW51bGwsbj0wO248dC5zdGF0ZXMubGVuZ3RoO24rKylpZihyPXQuc3RhdGVzW25dLHRoaXMuc3RhdGVJc0VuZFN0YXRlRm9yKHIsZSkpe2M9cix1PXIubG9vcEJhY2tTdGF0ZS50cmFuc2l0aW9uc1swXTticmVha31pZihudWxsPT09dSl0aHJvd1wiQ291bGRuJ3QgaWRlbnRpZnkgZmluYWwgc3RhdGUgb2YgdGhlIHByZWNlZGVuY2UgcnVsZSBwcmVmaXggc2VjdGlvbi5cIn1lbHNlIGM9dC5ydWxlVG9TdG9wU3RhdGVbZV07Zm9yKG49MDtuPHQuc3RhdGVzLmxlbmd0aDtuKyspe3I9dC5zdGF0ZXNbbl07Zm9yKHZhciBhPTA7YTxyLnRyYW5zaXRpb25zLmxlbmd0aDthKyspe3ZhciBsPXIudHJhbnNpdGlvbnNbYV07bCE9PXUmJmwudGFyZ2V0PT09YyYmKGwudGFyZ2V0PWkpfX1mb3IodmFyIHM9dC5ydWxlVG9TdGFydFN0YXRlW2VdLGY9cy50cmFuc2l0aW9ucy5sZW5ndGg7Zj4wOylvLmFkZFRyYW5zaXRpb24ocy50cmFuc2l0aW9uc1tmLTFdKSxzLnRyYW5zaXRpb25zPXMudHJhbnNpdGlvbnMuc2xpY2UoLTEpO3QucnVsZVRvU3RhcnRTdGF0ZVtlXS5hZGRUcmFuc2l0aW9uKG5ldyBFcihvKSksaS5hZGRUcmFuc2l0aW9uKG5ldyBFcihjKSk7dmFyIHA9bmV3IFZlO3QuYWRkU3RhdGUocCkscC5hZGRUcmFuc2l0aW9uKG5ldyBmcihpLHQucnVsZVRvVG9rZW5UeXBlW2VdKSksby5hZGRUcmFuc2l0aW9uKG5ldyBFcihwKSl9fSx7a2V5Olwic3RhdGVJc0VuZFN0YXRlRm9yXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZih0LnJ1bGVJbmRleCE9PWUpcmV0dXJuIG51bGw7aWYoISh0IGluc3RhbmNlb2Ygem4pKXJldHVybiBudWxsO3ZhciBuPXQudHJhbnNpdGlvbnNbdC50cmFuc2l0aW9ucy5sZW5ndGgtMV0udGFyZ2V0O3JldHVybiBuIGluc3RhbmNlb2YgcG4mJm4uZXBzaWxvbk9ubHlUcmFuc2l0aW9ucyYmbi50cmFuc2l0aW9uc1swXS50YXJnZXQgaW5zdGFuY2VvZiAkP3Q6bnVsbH19LHtrZXk6XCJtYXJrUHJlY2VkZW5jZURlY2lzaW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5zdGF0ZXMubGVuZ3RoO2UrKyl7dmFyIG49dC5zdGF0ZXNbZV07aWYobiBpbnN0YW5jZW9mIHpuJiZ0LnJ1bGVUb1N0YXJ0U3RhdGVbbi5ydWxlSW5kZXhdLmlzUHJlY2VkZW5jZVJ1bGUpe3ZhciByPW4udHJhbnNpdGlvbnNbbi50cmFuc2l0aW9ucy5sZW5ndGgtMV0udGFyZ2V0O3IgaW5zdGFuY2VvZiBwbiYmci5lcHNpbG9uT25seVRyYW5zaXRpb25zJiZyLnRyYW5zaXRpb25zWzBdLnRhcmdldCBpbnN0YW5jZW9mICQmJihuLmlzUHJlY2VkZW5jZURlY2lzaW9uPSEwKX19fX0se2tleTpcInZlcmlmeUFUTlwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHRoaXMuZGVzZXJpYWxpemF0aW9uT3B0aW9ucy52ZXJpZnlBVE4pZm9yKHZhciBlPTA7ZTx0LnN0YXRlcy5sZW5ndGg7ZSsrKXt2YXIgbj10LnN0YXRlc1tlXTtpZihudWxsIT09bilpZih0aGlzLmNoZWNrQ29uZGl0aW9uKG4uZXBzaWxvbk9ubHlUcmFuc2l0aW9uc3x8bi50cmFuc2l0aW9ucy5sZW5ndGg8PTEpLG4gaW5zdGFuY2VvZiBXbil0aGlzLmNoZWNrQ29uZGl0aW9uKG51bGwhPT1uLmxvb3BCYWNrU3RhdGUpO2Vsc2UgaWYobiBpbnN0YW5jZW9mIHpuKWlmKHRoaXMuY2hlY2tDb25kaXRpb24obnVsbCE9PW4ubG9vcEJhY2tTdGF0ZSksdGhpcy5jaGVja0NvbmRpdGlvbigyPT09bi50cmFuc2l0aW9ucy5sZW5ndGgpLG4udHJhbnNpdGlvbnNbMF0udGFyZ2V0IGluc3RhbmNlb2YgdHIpdGhpcy5jaGVja0NvbmRpdGlvbihuLnRyYW5zaXRpb25zWzFdLnRhcmdldCBpbnN0YW5jZW9mIHBuKSx0aGlzLmNoZWNrQ29uZGl0aW9uKCFuLm5vbkdyZWVkeSk7ZWxzZXtpZighKG4udHJhbnNpdGlvbnNbMF0udGFyZ2V0IGluc3RhbmNlb2YgcG4pKXRocm93XCJJbGxlZ2FsU3RhdGVcIjt0aGlzLmNoZWNrQ29uZGl0aW9uKG4udHJhbnNpdGlvbnNbMV0udGFyZ2V0IGluc3RhbmNlb2YgdHIpLHRoaXMuY2hlY2tDb25kaXRpb24obi5ub25HcmVlZHkpfWVsc2UgbiBpbnN0YW5jZW9mIERuPyh0aGlzLmNoZWNrQ29uZGl0aW9uKDE9PT1uLnRyYW5zaXRpb25zLmxlbmd0aCksdGhpcy5jaGVja0NvbmRpdGlvbihuLnRyYW5zaXRpb25zWzBdLnRhcmdldCBpbnN0YW5jZW9mIHpuKSk6biBpbnN0YW5jZW9mIHBuP3RoaXMuY2hlY2tDb25kaXRpb24obnVsbCE9PW4ubG9vcEJhY2tTdGF0ZSk6biBpbnN0YW5jZW9mIG1uP3RoaXMuY2hlY2tDb25kaXRpb24obnVsbCE9PW4uc3RvcFN0YXRlKTpuIGluc3RhbmNlb2YgWmU/dGhpcy5jaGVja0NvbmRpdGlvbihudWxsIT09bi5lbmRTdGF0ZSk6biBpbnN0YW5jZW9mIHVuP3RoaXMuY2hlY2tDb25kaXRpb24obnVsbCE9PW4uc3RhcnRTdGF0ZSk6biBpbnN0YW5jZW9mIEdlP3RoaXMuY2hlY2tDb25kaXRpb24obi50cmFuc2l0aW9ucy5sZW5ndGg8PTF8fG4uZGVjaXNpb24+PTApOnRoaXMuY2hlY2tDb25kaXRpb24obi50cmFuc2l0aW9ucy5sZW5ndGg8PTF8fG4gaW5zdGFuY2VvZiAkKX19fSx7a2V5OlwiY2hlY2tDb25kaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKCF0KXRocm93IG51bGw9PWUmJihlPVwiSWxsZWdhbFN0YXRlXCIpLGV9fSx7a2V5OlwicmVhZEludFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YVt0aGlzLnBvcysrXX19LHtrZXk6XCJyZWFkSW50MzJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRJbnQoKXx0aGlzLnJlYWRJbnQoKTw8MTZ9fSx7a2V5OlwiZWRnZUZhY3RvcnlcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLGksdSxjLGEpe3ZhciBsPXQuc3RhdGVzW3JdO3N3aXRjaChlKXtjYXNlIHR0LkVQU0lMT046cmV0dXJuIG5ldyBFcihsKTtjYXNlIHR0LlJBTkdFOnJldHVybiBuZXcgdnIobCwwIT09Yz9vLkVPRjppLHUpO2Nhc2UgdHQuUlVMRTpyZXR1cm4gbmV3IGl0KHQuc3RhdGVzW2ldLHUsYyxsKTtjYXNlIHR0LlBSRURJQ0FURTpyZXR1cm4gbmV3IERyKGwsaSx1LDAhPT1jKTtjYXNlIHR0LlBSRUNFREVOQ0U6cmV0dXJuIG5ldyBZcihsLGkpO2Nhc2UgdHQuQVRPTTpyZXR1cm4gbmV3IGZyKGwsMCE9PWM/by5FT0Y6aSk7Y2FzZSB0dC5BQ1RJT046cmV0dXJuIG5ldyBPcihsLGksdSwwIT09Yyk7Y2FzZSB0dC5TRVQ6cmV0dXJuIG5ldyBzdChsLGFbaV0pO2Nhc2UgdHQuTk9UX1NFVDpyZXR1cm4gbmV3IHZ0KGwsYVtpXSk7Y2FzZSB0dC5XSUxEQ0FSRDpyZXR1cm4gbmV3IE90KGwpO2RlZmF1bHQ6dGhyb3dcIlRoZSBzcGVjaWZpZWQgdHJhbnNpdGlvbiB0eXBlOiBcIitlK1wiIGlzIG5vdCB2YWxpZC5cIn19fSx7a2V5Olwic3RhdGVGYWN0b3J5XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihudWxsPT09dGhpcy5zdGF0ZUZhY3Rvcmllcyl7dmFyIG49W107bltILklOVkFMSURfVFlQRV09bnVsbCxuW0guQkFTSUNdPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBWZX0sbltILlJVTEVfU1RBUlRdPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBtbn0sbltILkJMT0NLX1NUQVJUXT1mdW5jdGlvbigpe3JldHVybiBuZXcgdXJ9LG5bSC5QTFVTX0JMT0NLX1NUQVJUXT1mdW5jdGlvbigpe3JldHVybiBuZXcgV259LG5bSC5TVEFSX0JMT0NLX1NUQVJUXT1mdW5jdGlvbigpe3JldHVybiBuZXcgdHJ9LG5bSC5UT0tFTl9TVEFSVF09ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFBufSxuW0guUlVMRV9TVE9QXT1mdW5jdGlvbigpe3JldHVybiBuZXcgJH0sbltILkJMT0NLX0VORF09ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHVufSxuW0guU1RBUl9MT09QX0JBQ0tdPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEbn0sbltILlNUQVJfTE9PUF9FTlRSWV09ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHpufSxuW0guUExVU19MT09QX0JBQ0tdPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBSbn0sbltILkxPT1BfRU5EXT1mdW5jdGlvbigpe3JldHVybiBuZXcgcG59LHRoaXMuc3RhdGVGYWN0b3JpZXM9bn1pZih0PnRoaXMuc3RhdGVGYWN0b3JpZXMubGVuZ3RofHxudWxsPT09dGhpcy5zdGF0ZUZhY3Rvcmllc1t0XSl0aHJvd1wiVGhlIHNwZWNpZmllZCBzdGF0ZSB0eXBlIFwiK3QrXCIgaXMgbm90IHZhbGlkLlwiO3ZhciByPXRoaXMuc3RhdGVGYWN0b3JpZXNbdF0oKTtpZihudWxsIT09cilyZXR1cm4gci5ydWxlSW5kZXg9ZSxyfX0se2tleTpcImxleGVyQWN0aW9uRmFjdG9yeVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtpZihudWxsPT09dGhpcy5hY3Rpb25GYWN0b3JpZXMpe3ZhciByPVtdO3JbMF09ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IGxvKHQpfSxyWzFdPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBobyh0LGUpfSxyWzJdPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBVbyh0KX0sclszXT1mdW5jdGlvbih0LGUpe3JldHVybiBTby5JTlNUQU5DRX0scls0XT1mdW5jdGlvbih0LGUpe3JldHVybiBMby5JTlNUQU5DRX0scls1XT1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgUm8odCl9LHJbNl09ZnVuY3Rpb24odCxlKXtyZXR1cm4gb28uSU5TVEFOQ0V9LHJbN109ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IFRvKHQpfSx0aGlzLmFjdGlvbkZhY3Rvcmllcz1yfWlmKHQ+dGhpcy5hY3Rpb25GYWN0b3JpZXMubGVuZ3RofHxudWxsPT09dGhpcy5hY3Rpb25GYWN0b3JpZXNbdF0pdGhyb3dcIlRoZSBzcGVjaWZpZWQgbGV4ZXIgYWN0aW9uIHR5cGUgXCIrdCtcIiBpcyBub3QgdmFsaWQuXCI7cmV0dXJuIHRoaXMuYWN0aW9uRmFjdG9yaWVzW3RdKGUsbil9fV0sbiYmem8oZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIEtvKHQpe3JldHVybiBLbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxLbyh0KX1mdW5jdGlvbiBZbyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09S28odCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09S28ocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09S28obyk/bzpTdHJpbmcobykpLHIpfXZhciBvfXZhciBHbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpfXZhciBlLG47cmV0dXJuIGU9dCwobj1be2tleTpcInN5bnRheEVycm9yXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixvLGkpe319LHtrZXk6XCJyZXBvcnRBbWJpZ3VpdHlcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLG8saSx1KXt9fSx7a2V5OlwicmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixvLGkpe319LHtrZXk6XCJyZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHlcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLG8saSl7fX1dKSYmWW8oZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIFdvKHQpe3JldHVybiBXbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxXbyh0KX1mdW5jdGlvbiBYbyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09V28odCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09V28ocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09V28obyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uICRvKHQsZSl7cmV0dXJuICRvPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sJG8odCxlKX1mdW5jdGlvbiBKbyh0KXtyZXR1cm4gSm89T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LEpvKHQpfXZhciBRbz1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmJG8odCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1KbyhyKTtpZihvKXt2YXIgbj1Kbyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PVdvKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksaS5jYWxsKHRoaXMpfXJldHVybiBlPXUsKG49W3trZXk6XCJzeW50YXhFcnJvclwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyxpKXtjb25zb2xlLmVycm9yKFwibGluZSBcIituK1wiOlwiK3IrXCIgXCIrbyl9fV0pJiZYbyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KEdvKTtmdW5jdGlvbiBabyh0KXtyZXR1cm4gWm89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sWm8odCl9ZnVuY3Rpb24gdGkodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PVpvKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PVpvKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PVpvKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBlaSh0LGUpe3JldHVybiBlaT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGVpKHQsZSl9ZnVuY3Rpb24gbmkodCxlKXtpZihlJiYoXCJvYmplY3RcIj09PVpvKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gcmkodCl9ZnVuY3Rpb24gcmkodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gb2kodCl7cmV0dXJuIG9pPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxvaSh0KX1Rby5JTlNUQU5DRT1uZXcgUW87dmFyIGlpPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZlaSh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPW9pKHIpO2lmKG8pe3ZhciBuPW9pKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBuaSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0KXt2YXIgZTtpZihmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksZT1pLmNhbGwodGhpcyksbnVsbD09PXQpdGhyb3dcImRlbGVnYXRlc1wiO3JldHVybiBlLmRlbGVnYXRlcz10LG5pKGUscmkoZSkpfXJldHVybiBlPXUsbj1be2tleTpcInN5bnRheEVycm9yXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixvLGkpe3RoaXMuZGVsZWdhdGVzLm1hcCgoZnVuY3Rpb24odSl7cmV0dXJuIHUuc3ludGF4RXJyb3IodCxlLG4scixvLGkpfSkpfX0se2tleTpcInJlcG9ydEFtYmlndWl0eVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyxpLHUpe3RoaXMuZGVsZWdhdGVzLm1hcCgoZnVuY3Rpb24oYyl7cmV0dXJuIGMucmVwb3J0QW1iaWd1aXR5KHQsZSxuLHIsbyxpLHUpfSkpfX0se2tleTpcInJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyxpKXt0aGlzLmRlbGVnYXRlcy5tYXAoKGZ1bmN0aW9uKHUpe3JldHVybiB1LnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dCh0LGUsbixyLG8saSl9KSl9fSx7a2V5OlwicmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixvLGkpe3RoaXMuZGVsZWdhdGVzLm1hcCgoZnVuY3Rpb24odSl7cmV0dXJuIHUucmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KHQsZSxuLHIsbyxpKX0pKX19XSxuJiZ0aShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KEdvKTtmdW5jdGlvbiB1aSh0KXtyZXR1cm4gdWk9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sdWkodCl9ZnVuY3Rpb24gY2kodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXVpKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXVpKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PXVpKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb312YXIgYWk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSx0aGlzLl9saXN0ZW5lcnM9W1FvLklOU1RBTkNFXSx0aGlzLl9pbnRlcnA9bnVsbCx0aGlzLl9zdGF0ZU51bWJlcj0tMX12YXIgZSxuO3JldHVybiBlPXQsbj1be2tleTpcImNoZWNrVmVyc2lvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVwiNC4xMy4wXCI7ZSE9PXQmJmNvbnNvbGUubG9nKFwiQU5UTFIgcnVudGltZSBhbmQgZ2VuZXJhdGVkIGNvZGUgdmVyc2lvbnMgZGlzYWdyZWU6IFwiK2UrXCIhPVwiK3QpfX0se2tleTpcImFkZEVycm9yTGlzdGVuZXJcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLl9saXN0ZW5lcnMucHVzaCh0KX19LHtrZXk6XCJyZW1vdmVFcnJvckxpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fbGlzdGVuZXJzPVtdfX0se2tleTpcImdldExpdGVyYWxOYW1lc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5saXRlcmFsTmFtZXN8fFtdfX0se2tleTpcImdldFN5bWJvbGljTmFtZXNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3Iuc3ltYm9saWNOYW1lc3x8W119fSx7a2V5OlwiZ2V0VG9rZW5OYW1lc1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoIXRoaXMudG9rZW5OYW1lcyl7dmFyIHQ9dGhpcy5nZXRMaXRlcmFsTmFtZXMoKSxlPXRoaXMuZ2V0U3ltYm9saWNOYW1lcygpLG49dC5sZW5ndGg+ZS5sZW5ndGg/dC5sZW5ndGg6ZS5sZW5ndGg7dGhpcy50b2tlbk5hbWVzPVtdO2Zvcih2YXIgcj0wO3I8bjtyKyspdGhpcy50b2tlbk5hbWVzW3JdPXRbcl18fGVbcl18fFwiPElOVkFMSURcIn1yZXR1cm4gdGhpcy50b2tlbk5hbWVzfX0se2tleTpcImdldFRva2VuVHlwZU1hcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRUb2tlbk5hbWVzKCk7aWYobnVsbD09PXQpdGhyb3dcIlRoZSBjdXJyZW50IHJlY29nbml6ZXIgZG9lcyBub3QgcHJvdmlkZSBhIGxpc3Qgb2YgdG9rZW4gbmFtZXMuXCI7dmFyIGU9dGhpcy50b2tlblR5cGVNYXBDYWNoZVt0XTtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9dC5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSxuKXt0W2VdPW59KSksZS5FT0Y9by5FT0YsdGhpcy50b2tlblR5cGVNYXBDYWNoZVt0XT1lKSxlfX0se2tleTpcImdldFJ1bGVJbmRleE1hcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5ydWxlTmFtZXM7aWYobnVsbD09PXQpdGhyb3dcIlRoZSBjdXJyZW50IHJlY29nbml6ZXIgZG9lcyBub3QgcHJvdmlkZSBhIGxpc3Qgb2YgcnVsZSBuYW1lcy5cIjt2YXIgZT10aGlzLnJ1bGVJbmRleE1hcENhY2hlW3RdO3JldHVybiB2b2lkIDA9PT1lJiYoZT10LnJlZHVjZSgoZnVuY3Rpb24odCxlLG4pe3RbZV09bn0pKSx0aGlzLnJ1bGVJbmRleE1hcENhY2hlW3RdPWUpLGV9fSx7a2V5OlwiZ2V0VG9rZW5UeXBlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRUb2tlblR5cGVNYXAoKVt0XTtyZXR1cm4gdm9pZCAwIT09ZT9lOm8uSU5WQUxJRF9UWVBFfX0se2tleTpcImdldEVycm9ySGVhZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJsaW5lIFwiK3QuZ2V0T2ZmZW5kaW5nVG9rZW4oKS5saW5lK1wiOlwiK3QuZ2V0T2ZmZW5kaW5nVG9rZW4oKS5jb2x1bW59fSx7a2V5OlwiZ2V0VG9rZW5FcnJvckRpc3BsYXlcIix2YWx1ZTpmdW5jdGlvbih0KXtpZihudWxsPT09dClyZXR1cm5cIjxubyB0b2tlbj5cIjt2YXIgZT10LnRleHQ7cmV0dXJuIG51bGw9PT1lJiYoZT10LnR5cGU9PT1vLkVPRj9cIjxFT0Y+XCI6XCI8XCIrdC50eXBlK1wiPlwiKSxcIidcIisoZT1lLnJlcGxhY2UoXCJcXG5cIixcIlxcXFxuXCIpLnJlcGxhY2UoXCJcXHJcIixcIlxcXFxyXCIpLnJlcGxhY2UoXCJcXHRcIixcIlxcXFx0XCIpKStcIidcIn19LHtrZXk6XCJnZXRFcnJvckxpc3RlbmVyRGlzcGF0Y2hcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBuZXcgaWkodGhpcy5fbGlzdGVuZXJzKX19LHtrZXk6XCJzZW1wcmVkXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3JldHVybiEwfX0se2tleTpcInByZWNwcmVkXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4hMH19LHtrZXk6XCJhdG5cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW50ZXJwLmF0bn19LHtrZXk6XCJzdGF0ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGF0ZU51bWJlcn0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX3N0YXRlTnVtYmVyPXR9fV0sbiYmY2koZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIGxpKHQpe3JldHVybiBsaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxsaSh0KX1mdW5jdGlvbiBzaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09bGkodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09bGkocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09bGkobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIGZpKHQsZSl7cmV0dXJuIGZpPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sZmkodCxlKX1mdW5jdGlvbiBwaSh0KXtyZXR1cm4gcGk9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LHBpKHQpfWFpLnRva2VuVHlwZU1hcENhY2hlPXt9LGFpLnJ1bGVJbmRleE1hcENhY2hlPXt9O3ZhciB5aT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmZmkodCxlKX0oYyx0KTt2YXIgZSxuLHIsaSx1PShyPWMsaT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1waShyKTtpZihpKXt2YXIgbj1waSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWxpKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gYyh0LGUsbixyLGkpe3ZhciBhO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyksKGE9dS5jYWxsKHRoaXMpKS5zb3VyY2U9dm9pZCAwIT09dD90OmMuRU1QVFlfU09VUkNFLGEudHlwZT12b2lkIDAhPT1lP2U6bnVsbCxhLmNoYW5uZWw9dm9pZCAwIT09bj9uOm8uREVGQVVMVF9DSEFOTkVMLGEuc3RhcnQ9dm9pZCAwIT09cj9yOi0xLGEuc3RvcD12b2lkIDAhPT1pP2k6LTEsYS50b2tlbkluZGV4PS0xLG51bGwhPT1hLnNvdXJjZVswXT8oYS5saW5lPXRbMF0ubGluZSxhLmNvbHVtbj10WzBdLmNvbHVtbik6YS5jb2x1bW49LTEsYX1yZXR1cm4gZT1jLChuPVt7a2V5OlwiY2xvbmVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PW5ldyBjKHRoaXMuc291cmNlLHRoaXMudHlwZSx0aGlzLmNoYW5uZWwsdGhpcy5zdGFydCx0aGlzLnN0b3ApO3JldHVybiB0LnRva2VuSW5kZXg9dGhpcy50b2tlbkluZGV4LHQubGluZT10aGlzLmxpbmUsdC5jb2x1bW49dGhpcy5jb2x1bW4sdC50ZXh0PXRoaXMudGV4dCx0fX0se2tleTpcImNsb25lV2l0aFR5cGVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1uZXcgYyh0aGlzLnNvdXJjZSx0LHRoaXMuY2hhbm5lbCx0aGlzLnN0YXJ0LHRoaXMuc3RvcCk7cmV0dXJuIGUudG9rZW5JbmRleD10aGlzLnRva2VuSW5kZXgsZS5saW5lPXRoaXMubGluZSxlLmNvbHVtbj10aGlzLmNvbHVtbix0PT09by5FT0YmJihlLnRleHQ9XCJcIiksZX19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy50ZXh0O3JldHVybiB0PW51bGwhPT10P3QucmVwbGFjZSgvXFxuL2csXCJcXFxcblwiKS5yZXBsYWNlKC9cXHIvZyxcIlxcXFxyXCIpLnJlcGxhY2UoL1xcdC9nLFwiXFxcXHRcIik6XCI8bm8gdGV4dD5cIixcIltAXCIrdGhpcy50b2tlbkluZGV4K1wiLFwiK3RoaXMuc3RhcnQrXCI6XCIrdGhpcy5zdG9wK1wiPSdcIit0K1wiJyw8XCIrdGhpcy50eXBlK1wiPlwiKyh0aGlzLmNoYW5uZWw+MD9cIixjaGFubmVsPVwiK3RoaXMuY2hhbm5lbDpcIlwiKStcIixcIit0aGlzLmxpbmUrXCI6XCIrdGhpcy5jb2x1bW4rXCJdXCJ9fSx7a2V5OlwidGV4dFwiLGdldDpmdW5jdGlvbigpe2lmKG51bGwhPT10aGlzLl90ZXh0KXJldHVybiB0aGlzLl90ZXh0O3ZhciB0PXRoaXMuZ2V0SW5wdXRTdHJlYW0oKTtpZihudWxsPT09dClyZXR1cm4gbnVsbDt2YXIgZT10LnNpemU7cmV0dXJuIHRoaXMuc3RhcnQ8ZSYmdGhpcy5zdG9wPGU/dC5nZXRUZXh0KHRoaXMuc3RhcnQsdGhpcy5zdG9wKTpcIjxFT0Y+XCJ9LHNldDpmdW5jdGlvbih0KXt0aGlzLl90ZXh0PXR9fV0pJiZzaShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGN9KG8pO2Z1bmN0aW9uIGhpKHQpe3JldHVybiBoaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxoaSh0KX1mdW5jdGlvbiBiaSh0LGUpe3JldHVybiBiaT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LGJpKHQsZSl9ZnVuY3Rpb24gdmkodCl7cmV0dXJuIHZpPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSx2aSh0KX1mdW5jdGlvbiBkaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09aGkodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09aGkocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09aGkobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIG1pKHQsZSxuKXtyZXR1cm4gZSYmZGkodC5wcm90b3R5cGUsZSksbiYmZGkodCxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9ZnVuY3Rpb24gZ2kodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXlpLkVNUFRZX1NPVVJDRT1bbnVsbCxudWxsXTt2YXIgU2k9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJmJpKHQsZSl9KG8sdCk7dmFyIGUsbixyPShlPW8sbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQscj12aShlKTtpZihuKXt2YXIgbz12aSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLG8pfWVsc2UgdD1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PWhpKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gbyh0KXt2YXIgZTtyZXR1cm4gZ2kodGhpcyxvKSwoZT1yLmNhbGwodGhpcykpLmNvcHlUZXh0PXZvaWQgMCE9PXQmJnQsZX1yZXR1cm4gbWkobyxbe2tleTpcImNyZWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyxpLHUsYyl7dmFyIGE9bmV3IHlpKHQsZSxyLG8saSk7cmV0dXJuIGEubGluZT11LGEuY29sdW1uPWMsbnVsbCE9PW4/YS50ZXh0PW46dGhpcy5jb3B5VGV4dCYmbnVsbCE9PXRbMV0mJihhLnRleHQ9dFsxXS5nZXRUZXh0KG8saSkpLGF9fSx7a2V5OlwiY3JlYXRlVGhpblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IHlpKG51bGwsdCk7cmV0dXJuIG4udGV4dD1lLG59fV0pLG99KG1pKChmdW5jdGlvbiB0KCl7Z2kodGhpcyx0KX0pKSk7ZnVuY3Rpb24gT2kodCl7cmV0dXJuIE9pPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LE9pKHQpfWZ1bmN0aW9uIHdpKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1PaSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1PaShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1PaShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gX2kodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gUGkodCl7dmFyIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBQaT1mdW5jdGlvbih0KXtpZihudWxsPT09dHx8KG49dCwtMT09PUZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwobikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikpKXJldHVybiB0O3ZhciBuO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO2lmKHZvaWQgMCE9PWUpe2lmKGUuaGFzKHQpKXJldHVybiBlLmdldCh0KTtlLnNldCh0LHIpfWZ1bmN0aW9uIHIoKXtyZXR1cm4gVGkodCxhcmd1bWVudHMsamkodGhpcykuY29uc3RydWN0b3IpfXJldHVybiByLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6cixlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxraShyLHQpfSxQaSh0KX1mdW5jdGlvbiBUaSh0LGUsbil7cmV0dXJuIFRpPUVpKCk/UmVmbGVjdC5jb25zdHJ1Y3QuYmluZCgpOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1bbnVsbF07ci5wdXNoLmFwcGx5KHIsZSk7dmFyIG89bmV3KEZ1bmN0aW9uLmJpbmQuYXBwbHkodCxyKSk7cmV0dXJuIG4mJmtpKG8sbi5wcm90b3R5cGUpLG99LFRpLmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiBFaSgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fWZ1bmN0aW9uIGtpKHQsZSl7cmV0dXJuIGtpPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sa2kodCxlKX1mdW5jdGlvbiBqaSh0KXtyZXR1cm4gamk9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LGppKHQpfVNpLkRFRkFVTFQ9bmV3IFNpO3ZhciB4aT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYma2kodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1FaSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1qaShyKTtpZihvKXt2YXIgbj1qaSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PU9pKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gX2kodCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksZT1pLmNhbGwodGhpcyx0Lm1lc3NhZ2UpLEVycm9yLmNhcHR1cmVTdGFja1RyYWNlJiZFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfaShlKSx1KSxlLm1lc3NhZ2U9dC5tZXNzYWdlLGUucmVjb2duaXplcj10LnJlY29nbml6ZXIsZS5pbnB1dD10LmlucHV0LGUuY3R4PXQuY3R4LGUub2ZmZW5kaW5nVG9rZW49bnVsbCxlLm9mZmVuZGluZ1N0YXRlPS0xLG51bGwhPT1lLnJlY29nbml6ZXImJihlLm9mZmVuZGluZ1N0YXRlPWUucmVjb2duaXplci5zdGF0ZSksZX1yZXR1cm4gZT11LChuPVt7a2V5OlwiZ2V0RXhwZWN0ZWRUb2tlbnNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5yZWNvZ25pemVyP3RoaXMucmVjb2duaXplci5hdG4uZ2V0RXhwZWN0ZWRUb2tlbnModGhpcy5vZmZlbmRpbmdTdGF0ZSx0aGlzLmN0eCk6bnVsbH19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVzc2FnZX19XSkmJndpKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oUGkoRXJyb3IpKTtmdW5jdGlvbiBSaSh0KXtyZXR1cm4gUmk9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sUmkodCl9ZnVuY3Rpb24gQ2kodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PVJpKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PVJpKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PVJpKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBBaSh0LGUpe3JldHVybiBBaT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LEFpKHQsZSl9ZnVuY3Rpb24gTmkodCl7cmV0dXJuIE5pPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxOaSh0KX12YXIgSWk9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJkFpKHQsZSl9KHUsdCk7dmFyIGUsbixyLG8saT0ocj11LG89ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9Tmkocik7aWYobyl7dmFyIG49TmkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1SaShlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIHUodCxlLG4scil7dmFyIG87cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSwobz1pLmNhbGwodGhpcyx7bWVzc2FnZTpcIlwiLHJlY29nbml6ZXI6dCxpbnB1dDplLGN0eDpudWxsfSkpLnN0YXJ0SW5kZXg9bixvLmRlYWRFbmRDb25maWdzPXIsb31yZXR1cm4gZT11LChuPVt7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PVwiXCI7cmV0dXJuIHRoaXMuc3RhcnRJbmRleD49MCYmdGhpcy5zdGFydEluZGV4PHRoaXMuaW5wdXQuc2l6ZSYmKHQ9dGhpcy5pbnB1dC5nZXRUZXh0KG5ldyBCKHRoaXMuc3RhcnRJbmRleCx0aGlzLnN0YXJ0SW5kZXgpKSksXCJMZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uXCIrdH19XSkmJkNpKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oeGkpO2Z1bmN0aW9uIExpKHQpe3JldHVybiBMaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxMaSh0KX1mdW5jdGlvbiBEaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09TGkodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09TGkocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09TGkobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIEZpKHQsZSl7cmV0dXJuIEZpPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sRmkodCxlKX1mdW5jdGlvbiBCaSh0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH1mdW5jdGlvbiBNaSh0KXtyZXR1cm4gTWk9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LE1pKHQpfXZhciBVaT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmRmkodCxlKX0oYyx0KTt2YXIgZSxuLHIsaSx1PShyPWMsaT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1NaShyKTtpZihpKXt2YXIgbj1NaSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUxpKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gQmkodCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBjKHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyksKGU9dS5jYWxsKHRoaXMpKS5faW5wdXQ9dCxlLl9mYWN0b3J5PVNpLkRFRkFVTFQsZS5fdG9rZW5GYWN0b3J5U291cmNlUGFpcj1bQmkoZSksdF0sZS5faW50ZXJwPW51bGwsZS5fdG9rZW49bnVsbCxlLl90b2tlblN0YXJ0Q2hhckluZGV4PS0xLGUuX3Rva2VuU3RhcnRMaW5lPS0xLGUuX3Rva2VuU3RhcnRDb2x1bW49LTEsZS5faGl0RU9GPSExLGUuX2NoYW5uZWw9by5ERUZBVUxUX0NIQU5ORUwsZS5fdHlwZT1vLklOVkFMSURfVFlQRSxlLl9tb2RlU3RhY2s9W10sZS5fbW9kZT1jLkRFRkFVTFRfTU9ERSxlLl90ZXh0PW51bGwsZX1yZXR1cm4gZT1jLG49W3trZXk6XCJyZXNldFwiLHZhbHVlOmZ1bmN0aW9uKCl7bnVsbCE9PXRoaXMuX2lucHV0JiZ0aGlzLl9pbnB1dC5zZWVrKDApLHRoaXMuX3Rva2VuPW51bGwsdGhpcy5fdHlwZT1vLklOVkFMSURfVFlQRSx0aGlzLl9jaGFubmVsPW8uREVGQVVMVF9DSEFOTkVMLHRoaXMuX3Rva2VuU3RhcnRDaGFySW5kZXg9LTEsdGhpcy5fdG9rZW5TdGFydENvbHVtbj0tMSx0aGlzLl90b2tlblN0YXJ0TGluZT0tMSx0aGlzLl90ZXh0PW51bGwsdGhpcy5faGl0RU9GPSExLHRoaXMuX21vZGU9Yy5ERUZBVUxUX01PREUsdGhpcy5fbW9kZVN0YWNrPVtdLHRoaXMuX2ludGVycC5yZXNldCgpfX0se2tleTpcIm5leHRUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMuX2lucHV0KXRocm93XCJuZXh0VG9rZW4gcmVxdWlyZXMgYSBub24tbnVsbCBpbnB1dCBzdHJlYW0uXCI7dmFyIHQ9dGhpcy5faW5wdXQubWFyaygpO3RyeXtmb3IoOzspe2lmKHRoaXMuX2hpdEVPRilyZXR1cm4gdGhpcy5lbWl0RU9GKCksdGhpcy5fdG9rZW47dGhpcy5fdG9rZW49bnVsbCx0aGlzLl9jaGFubmVsPW8uREVGQVVMVF9DSEFOTkVMLHRoaXMuX3Rva2VuU3RhcnRDaGFySW5kZXg9dGhpcy5faW5wdXQuaW5kZXgsdGhpcy5fdG9rZW5TdGFydENvbHVtbj10aGlzLl9pbnRlcnAuY29sdW1uLHRoaXMuX3Rva2VuU3RhcnRMaW5lPXRoaXMuX2ludGVycC5saW5lLHRoaXMuX3RleHQ9bnVsbDtmb3IodmFyIGU9ITE7Oyl7dGhpcy5fdHlwZT1vLklOVkFMSURfVFlQRTt2YXIgbj1jLlNLSVA7dHJ5e249dGhpcy5faW50ZXJwLm1hdGNoKHRoaXMuX2lucHV0LHRoaXMuX21vZGUpfWNhdGNoKHQpe2lmKCEodCBpbnN0YW5jZW9mIHhpKSl0aHJvdyBjb25zb2xlLmxvZyh0LnN0YWNrKSx0O3RoaXMubm90aWZ5TGlzdGVuZXJzKHQpLHRoaXMucmVjb3Zlcih0KX1pZih0aGlzLl9pbnB1dC5MQSgxKT09PW8uRU9GJiYodGhpcy5faGl0RU9GPSEwKSx0aGlzLl90eXBlPT09by5JTlZBTElEX1RZUEUmJih0aGlzLl90eXBlPW4pLHRoaXMuX3R5cGU9PT1jLlNLSVApe2U9ITA7YnJlYWt9aWYodGhpcy5fdHlwZSE9PWMuTU9SRSlicmVha31pZighZSlyZXR1cm4gbnVsbD09PXRoaXMuX3Rva2VuJiZ0aGlzLmVtaXQoKSx0aGlzLl90b2tlbn19ZmluYWxseXt0aGlzLl9pbnB1dC5yZWxlYXNlKHQpfX19LHtrZXk6XCJza2lwXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl90eXBlPWMuU0tJUH19LHtrZXk6XCJtb3JlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl90eXBlPWMuTU9SRX19LHtrZXk6XCJtb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5fbW9kZT10fX0se2tleTpcInB1c2hNb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5faW50ZXJwLmRlYnVnJiZjb25zb2xlLmxvZyhcInB1c2hNb2RlIFwiK3QpLHRoaXMuX21vZGVTdGFjay5wdXNoKHRoaXMuX21vZGUpLHRoaXMubW9kZSh0KX19LHtrZXk6XCJwb3BNb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZigwPT09dGhpcy5fbW9kZVN0YWNrLmxlbmd0aCl0aHJvd1wiRW1wdHkgU3RhY2tcIjtyZXR1cm4gdGhpcy5faW50ZXJwLmRlYnVnJiZjb25zb2xlLmxvZyhcInBvcE1vZGUgYmFjayB0byBcIit0aGlzLl9tb2RlU3RhY2suc2xpY2UoMCwtMSkpLHRoaXMubW9kZSh0aGlzLl9tb2RlU3RhY2sucG9wKCkpLHRoaXMuX21vZGV9fSx7a2V5OlwiZW1pdFRva2VuXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5fdG9rZW49dH19LHtrZXk6XCJlbWl0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9mYWN0b3J5LmNyZWF0ZSh0aGlzLl90b2tlbkZhY3RvcnlTb3VyY2VQYWlyLHRoaXMuX3R5cGUsdGhpcy5fdGV4dCx0aGlzLl9jaGFubmVsLHRoaXMuX3Rva2VuU3RhcnRDaGFySW5kZXgsdGhpcy5nZXRDaGFySW5kZXgoKS0xLHRoaXMuX3Rva2VuU3RhcnRMaW5lLHRoaXMuX3Rva2VuU3RhcnRDb2x1bW4pO3JldHVybiB0aGlzLmVtaXRUb2tlbih0KSx0fX0se2tleTpcImVtaXRFT0ZcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY29sdW1uLGU9dGhpcy5saW5lLG49dGhpcy5fZmFjdG9yeS5jcmVhdGUodGhpcy5fdG9rZW5GYWN0b3J5U291cmNlUGFpcixvLkVPRixudWxsLG8uREVGQVVMVF9DSEFOTkVMLHRoaXMuX2lucHV0LmluZGV4LHRoaXMuX2lucHV0LmluZGV4LTEsZSx0KTtyZXR1cm4gdGhpcy5lbWl0VG9rZW4obiksbn19LHtrZXk6XCJnZXRDaGFySW5kZXhcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnB1dC5pbmRleH19LHtrZXk6XCJnZXRBbGxUb2tlbnNcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD1bXSxlPXRoaXMubmV4dFRva2VuKCk7ZS50eXBlIT09by5FT0Y7KXQucHVzaChlKSxlPXRoaXMubmV4dFRva2VuKCk7cmV0dXJuIHR9fSx7a2V5Olwibm90aWZ5TGlzdGVuZXJzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fdG9rZW5TdGFydENoYXJJbmRleCxuPXRoaXMuX2lucHV0LmluZGV4LHI9dGhpcy5faW5wdXQuZ2V0VGV4dChlLG4pLG89XCJ0b2tlbiByZWNvZ25pdGlvbiBlcnJvciBhdDogJ1wiK3RoaXMuZ2V0RXJyb3JEaXNwbGF5KHIpK1wiJ1wiO3RoaXMuZ2V0RXJyb3JMaXN0ZW5lckRpc3BhdGNoKCkuc3ludGF4RXJyb3IodGhpcyxudWxsLHRoaXMuX3Rva2VuU3RhcnRMaW5lLHRoaXMuX3Rva2VuU3RhcnRDb2x1bW4sbyx0KX19LHtrZXk6XCJnZXRFcnJvckRpc3BsYXlcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5sZW5ndGg7bisrKWUucHVzaCh0W25dKTtyZXR1cm4gZS5qb2luKFwiXCIpfX0se2tleTpcImdldEVycm9yRGlzcGxheUZvckNoYXJcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5jaGFyQ29kZUF0KDApPT09by5FT0Y/XCI8RU9GPlwiOlwiXFxuXCI9PT10P1wiXFxcXG5cIjpcIlxcdFwiPT09dD9cIlxcXFx0XCI6XCJcXHJcIj09PXQ/XCJcXFxcclwiOnR9fSx7a2V5OlwiZ2V0Q2hhckVycm9yRGlzcGxheVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVyblwiJ1wiK3RoaXMuZ2V0RXJyb3JEaXNwbGF5Rm9yQ2hhcih0KStcIidcIn19LHtrZXk6XCJyZWNvdmVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5faW5wdXQuTEEoMSkhPT1vLkVPRiYmKHQgaW5zdGFuY2VvZiBJaT90aGlzLl9pbnRlcnAuY29uc3VtZSh0aGlzLl9pbnB1dCk6dGhpcy5faW5wdXQuY29uc3VtZSgpKX19LHtrZXk6XCJpbnB1dFN0cmVhbVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnB1dH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX2lucHV0PW51bGwsdGhpcy5fdG9rZW5GYWN0b3J5U291cmNlUGFpcj1bdGhpcyx0aGlzLl9pbnB1dF0sdGhpcy5yZXNldCgpLHRoaXMuX2lucHV0PXQsdGhpcy5fdG9rZW5GYWN0b3J5U291cmNlUGFpcj1bdGhpcyx0aGlzLl9pbnB1dF19fSx7a2V5Olwic291cmNlTmFtZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnB1dC5zb3VyY2VOYW1lfX0se2tleTpcInR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdHlwZX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX3R5cGU9dH19LHtrZXk6XCJsaW5lXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ludGVycC5saW5lfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5faW50ZXJwLmxpbmU9dH19LHtrZXk6XCJjb2x1bW5cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW50ZXJwLmNvbHVtbn0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX2ludGVycC5jb2x1bW49dH19LHtrZXk6XCJ0ZXh0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLl90ZXh0P3RoaXMuX3RleHQ6dGhpcy5faW50ZXJwLmdldFRleHQodGhpcy5faW5wdXQpfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fdGV4dD10fX1dLG4mJkRpKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksY30oYWkpO2Z1bmN0aW9uIFZpKHQpe3JldHVybiBWaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxWaSh0KX1mdW5jdGlvbiB6aSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09VmkodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09VmkocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09Vmkobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIHFpKHQpe3JldHVybiB0Lmhhc2hDb2RlRm9yQ29uZmlnU2V0KCl9ZnVuY3Rpb24gSGkodCxlKXtyZXR1cm4gdD09PWV8fG51bGwhPT10JiZudWxsIT09ZSYmdC5lcXVhbHNGb3JDb25maWdTZXQoZSl9VWkuREVGQVVMVF9NT0RFPTAsVWkuTU9SRT0tMixVaS5TS0lQPS0zLFVpLkRFRkFVTFRfVE9LRU5fQ0hBTk5FTD1vLkRFRkFVTFRfQ0hBTk5FTCxVaS5ISURERU49by5ISURERU5fQ0hBTk5FTCxVaS5NSU5fQ0hBUl9WQUxVRT0wLFVpLk1BWF9DSEFSX1ZBTFVFPTExMTQxMTE7dmFyIEtpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuY29uZmlnTG9va3VwPW5ldyBnKHFpLEhpKSx0aGlzLmZ1bGxDdHg9dm9pZCAwPT09ZXx8ZSx0aGlzLnJlYWRPbmx5PSExLHRoaXMuY29uZmlncz1bXSx0aGlzLnVuaXF1ZUFsdD0wLHRoaXMuY29uZmxpY3RpbmdBbHRzPW51bGwsdGhpcy5oYXNTZW1hbnRpY0NvbnRleHQ9ITEsdGhpcy5kaXBzSW50b091dGVyQ29udGV4dD0hMSx0aGlzLmNhY2hlZEhhc2hDb2RlPS0xfXZhciBlLG47cmV0dXJuIGU9dCxuPVt7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZih2b2lkIDA9PT1lJiYoZT1udWxsKSx0aGlzLnJlYWRPbmx5KXRocm93XCJUaGlzIHNldCBpcyByZWFkb25seVwiO3Quc2VtYW50aWNDb250ZXh0IT09ai5OT05FJiYodGhpcy5oYXNTZW1hbnRpY0NvbnRleHQ9ITApLHQucmVhY2hlc0ludG9PdXRlckNvbnRleHQ+MCYmKHRoaXMuZGlwc0ludG9PdXRlckNvbnRleHQ9ITApO3ZhciBuPXRoaXMuY29uZmlnTG9va3VwLmFkZCh0KTtpZihuPT09dClyZXR1cm4gdGhpcy5jYWNoZWRIYXNoQ29kZT0tMSx0aGlzLmNvbmZpZ3MucHVzaCh0KSwhMDt2YXIgcj0hdGhpcy5mdWxsQ3R4LG89amUobi5jb250ZXh0LHQuY29udGV4dCxyLGUpO3JldHVybiBuLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0PU1hdGgubWF4KG4ucmVhY2hlc0ludG9PdXRlckNvbnRleHQsdC5yZWFjaGVzSW50b091dGVyQ29udGV4dCksdC5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZCYmKG4ucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQ9ITApLG4uY29udGV4dD1vLCEwfX0se2tleTpcImdldFN0YXRlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBnLGU9MDtlPHRoaXMuY29uZmlncy5sZW5ndGg7ZSsrKXQuYWRkKHRoaXMuY29uZmlnc1tlXS5zdGF0ZSk7cmV0dXJuIHR9fSx7a2V5OlwiZ2V0UHJlZGljYXRlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPHRoaXMuY29uZmlncy5sZW5ndGg7ZSsrKXt2YXIgbj10aGlzLmNvbmZpZ3NbZV0uc2VtYW50aWNDb250ZXh0O24hPT1qLk5PTkUmJnQucHVzaChuLnNlbWFudGljQ29udGV4dCl9cmV0dXJuIHR9fSx7a2V5Olwib3B0aW1pemVDb25maWdzXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodGhpcy5yZWFkT25seSl0aHJvd1wiVGhpcyBzZXQgaXMgcmVhZG9ubHlcIjtpZigwIT09dGhpcy5jb25maWdMb29rdXAubGVuZ3RoKWZvcih2YXIgZT0wO2U8dGhpcy5jb25maWdzLmxlbmd0aDtlKyspe3ZhciBuPXRoaXMuY29uZmlnc1tlXTtuLmNvbnRleHQ9dC5nZXRDYWNoZWRDb250ZXh0KG4uY29udGV4dCl9fX0se2tleTpcImFkZEFsbFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRoaXMuYWRkKHRbZV0pO3JldHVybiExfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzPT09ZXx8ZSBpbnN0YW5jZW9mIHQmJmkodGhpcy5jb25maWdzLGUuY29uZmlncykmJnRoaXMuZnVsbEN0eD09PWUuZnVsbEN0eCYmdGhpcy51bmlxdWVBbHQ9PT1lLnVuaXF1ZUFsdCYmdGhpcy5jb25mbGljdGluZ0FsdHM9PT1lLmNvbmZsaWN0aW5nQWx0cyYmdGhpcy5oYXNTZW1hbnRpY0NvbnRleHQ9PT1lLmhhc1NlbWFudGljQ29udGV4dCYmdGhpcy5kaXBzSW50b091dGVyQ29udGV4dD09PWUuZGlwc0ludG9PdXRlckNvbnRleHR9fSx7a2V5OlwiaGFzaENvZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PW5ldyBmO3JldHVybiB0LnVwZGF0ZSh0aGlzLmNvbmZpZ3MpLHQuZmluaXNoKCl9fSx7a2V5OlwidXBkYXRlSGFzaENvZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnJlYWRPbmx5PygtMT09PXRoaXMuY2FjaGVkSGFzaENvZGUmJih0aGlzLmNhY2hlZEhhc2hDb2RlPXRoaXMuaGFzaENvZGUoKSksdC51cGRhdGUodGhpcy5jYWNoZWRIYXNoQ29kZSkpOnQudXBkYXRlKHRoaXMuaGFzaENvZGUoKSl9fSx7a2V5OlwiaXNFbXB0eVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmNvbmZpZ3MubGVuZ3RofX0se2tleTpcImNvbnRhaW5zXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYobnVsbD09PXRoaXMuY29uZmlnTG9va3VwKXRocm93XCJUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIHJlYWRvbmx5IHNldHMuXCI7cmV0dXJuIHRoaXMuY29uZmlnTG9va3VwLmNvbnRhaW5zKHQpfX0se2tleTpcImNvbnRhaW5zRmFzdFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKG51bGw9PT10aGlzLmNvbmZpZ0xvb2t1cCl0aHJvd1wiVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkIGZvciByZWFkb25seSBzZXRzLlwiO3JldHVybiB0aGlzLmNvbmZpZ0xvb2t1cC5jb250YWluc0Zhc3QodCl9fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMucmVhZE9ubHkpdGhyb3dcIlRoaXMgc2V0IGlzIHJlYWRvbmx5XCI7dGhpcy5jb25maWdzPVtdLHRoaXMuY2FjaGVkSGFzaENvZGU9LTEsdGhpcy5jb25maWdMb29rdXA9bmV3IGd9fSx7a2V5Olwic2V0UmVhZG9ubHlcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnJlYWRPbmx5PXQsdCYmKHRoaXMuY29uZmlnTG9va3VwPW51bGwpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gYih0aGlzLmNvbmZpZ3MpKyh0aGlzLmhhc1NlbWFudGljQ29udGV4dD9cIixoYXNTZW1hbnRpY0NvbnRleHQ9XCIrdGhpcy5oYXNTZW1hbnRpY0NvbnRleHQ6XCJcIikrKHRoaXMudW5pcXVlQWx0IT09RmUuSU5WQUxJRF9BTFRfTlVNQkVSP1wiLHVuaXF1ZUFsdD1cIit0aGlzLnVuaXF1ZUFsdDpcIlwiKSsobnVsbCE9PXRoaXMuY29uZmxpY3RpbmdBbHRzP1wiLGNvbmZsaWN0aW5nQWx0cz1cIit0aGlzLmNvbmZsaWN0aW5nQWx0czpcIlwiKSsodGhpcy5kaXBzSW50b091dGVyQ29udGV4dD9cIixkaXBzSW50b091dGVyQ29udGV4dFwiOlwiXCIpfX0se2tleTpcIml0ZW1zXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uZmlnc319LHtrZXk6XCJsZW5ndGhcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25maWdzLmxlbmd0aH19XSxuJiZ6aShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gWWkodCl7cmV0dXJuIFlpPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LFlpKHQpfWZ1bmN0aW9uIEdpKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1ZaSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1ZaShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1ZaShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIFdpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLG4pe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksbnVsbD09PWUmJihlPS0xKSxudWxsPT09biYmKG49bmV3IEtpKSx0aGlzLnN0YXRlTnVtYmVyPWUsdGhpcy5jb25maWdzPW4sdGhpcy5lZGdlcz1udWxsLHRoaXMuaXNBY2NlcHRTdGF0ZT0hMSx0aGlzLnByZWRpY3Rpb249MCx0aGlzLmxleGVyQWN0aW9uRXhlY3V0b3I9bnVsbCx0aGlzLnJlcXVpcmVzRnVsbENvbnRleHQ9ITEsdGhpcy5wcmVkaWNhdGVzPW51bGwsdGhpc312YXIgZSxuO3JldHVybiBlPXQsbj1be2tleTpcImdldEFsdFNldFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IGc7aWYobnVsbCE9PXRoaXMuY29uZmlncylmb3IodmFyIGU9MDtlPHRoaXMuY29uZmlncy5sZW5ndGg7ZSsrKXt2YXIgbj10aGlzLmNvbmZpZ3NbZV07dC5hZGQobi5hbHQpfXJldHVybiAwPT09dC5sZW5ndGg/bnVsbDp0fX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzPT09ZXx8ZSBpbnN0YW5jZW9mIHQmJnRoaXMuY29uZmlncy5lcXVhbHMoZS5jb25maWdzKX19LHtrZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zdGF0ZU51bWJlcitcIjpcIit0aGlzLmNvbmZpZ3M7cmV0dXJuIHRoaXMuaXNBY2NlcHRTdGF0ZSYmKHQrPVwiPT5cIixudWxsIT09dGhpcy5wcmVkaWNhdGVzP3QrPXRoaXMucHJlZGljYXRlczp0Kz10aGlzLnByZWRpY3Rpb24pLHR9fSx7a2V5OlwiaGFzaENvZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PW5ldyBmO3JldHVybiB0LnVwZGF0ZSh0aGlzLmNvbmZpZ3MpLHQuZmluaXNoKCl9fV0sbiYmR2koZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIFhpKHQpe3JldHVybiBYaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxYaSh0KX1mdW5jdGlvbiAkaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09WGkodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09WGkocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09WGkobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfXZhciBKaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuYXRuPWUsdGhpcy5zaGFyZWRDb250ZXh0Q2FjaGU9bix0aGlzfXZhciBlLG47cmV0dXJuIGU9dCxuPVt7a2V5OlwiZ2V0Q2FjaGVkQ29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKG51bGw9PT10aGlzLnNoYXJlZENvbnRleHRDYWNoZSlyZXR1cm4gdDt2YXIgZT1uZXcgVGU7cmV0dXJuIGtlKHQsdGhpcy5zaGFyZWRDb250ZXh0Q2FjaGUsZSl9fV0sbiYmJGkoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIFFpKHQpe3JldHVybiBRaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxRaSh0KX1mdW5jdGlvbiBaaSh0LGUpe3JldHVybiBaaT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LFppKHQsZSl9ZnVuY3Rpb24gdHUodCl7cmV0dXJuIHR1PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSx0dSh0KX1KaS5FUlJPUj1uZXcgV2koMjE0NzQ4MzY0NyxuZXcgS2kpO3ZhciBldT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmWmkodCxlKX0oaSx0KTt2YXIgZSxuLHIsbz0obj1pLHI9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9dHUobik7aWYocil7dmFyIG89dHUodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxvKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1RaShlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIGkoKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLCh0PW8uY2FsbCh0aGlzKSkuY29uZmlnTG9va3VwPW5ldyBnLHR9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KEtpKTtmdW5jdGlvbiBudSh0KXtyZXR1cm4gbnU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sbnUodCl9ZnVuY3Rpb24gcnUodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PW51KHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PW51KHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PW51KG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBvdSgpe3JldHVybiBvdT1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5nZXQ/UmVmbGVjdC5nZXQuYmluZCgpOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1mdW5jdGlvbih0LGUpe2Zvcig7IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpJiZudWxsIT09KHQ9YXUodCkpOyk7cmV0dXJuIHR9KHQsZSk7aWYocil7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpO3JldHVybiBvLmdldD9vLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGg8Mz90Om4pOm8udmFsdWV9fSxvdS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gaXUodCxlKXtyZXR1cm4gaXU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxpdSh0LGUpfWZ1bmN0aW9uIHV1KHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1udShlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGN1KHQpfWZ1bmN0aW9uIGN1KHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIGF1KHQpe3JldHVybiBhdT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sYXUodCl9dmFyIGx1PWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZpdSh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPWF1KHIpO2lmKG8pe3ZhciBuPWF1KHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB1dSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0LGUpe3ZhciBuOyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksbj1pLmNhbGwodGhpcyx0LGUpO3ZhciByPXQubGV4ZXJBY3Rpb25FeGVjdXRvcnx8bnVsbDtyZXR1cm4gbi5sZXhlckFjdGlvbkV4ZWN1dG9yPXJ8fChudWxsIT09ZT9lLmxleGVyQWN0aW9uRXhlY3V0b3I6bnVsbCksbi5wYXNzZWRUaHJvdWdoTm9uR3JlZWR5RGVjaXNpb249bnVsbCE9PWUmJm4uY2hlY2tOb25HcmVlZHlEZWNpc2lvbihlLG4uc3RhdGUpLG4uaGFzaENvZGVGb3JDb25maWdTZXQ9dS5wcm90b3R5cGUuaGFzaENvZGUsbi5lcXVhbHNGb3JDb25maWdTZXQ9dS5wcm90b3R5cGUuZXF1YWxzLHV1KG4sY3UobikpfXJldHVybiBlPXUsKG49W3trZXk6XCJ1cGRhdGVIYXNoQ29kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QudXBkYXRlKHRoaXMuc3RhdGUuc3RhdGVOdW1iZXIsdGhpcy5hbHQsdGhpcy5jb250ZXh0LHRoaXMuc2VtYW50aWNDb250ZXh0LHRoaXMucGFzc2VkVGhyb3VnaE5vbkdyZWVkeURlY2lzaW9uLHRoaXMubGV4ZXJBY3Rpb25FeGVjdXRvcil9fSx7a2V5OlwiZXF1YWxzXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXM9PT10fHx0IGluc3RhbmNlb2YgdSYmdGhpcy5wYXNzZWRUaHJvdWdoTm9uR3JlZWR5RGVjaXNpb249PT10LnBhc3NlZFRocm91Z2hOb25HcmVlZHlEZWNpc2lvbiYmKHRoaXMubGV4ZXJBY3Rpb25FeGVjdXRvcj90aGlzLmxleGVyQWN0aW9uRXhlY3V0b3IuZXF1YWxzKHQubGV4ZXJBY3Rpb25FeGVjdXRvcik6IXQubGV4ZXJBY3Rpb25FeGVjdXRvcikmJm91KGF1KHUucHJvdG90eXBlKSxcImVxdWFsc1wiLHRoaXMpLmNhbGwodGhpcyx0KX19LHtrZXk6XCJjaGVja05vbkdyZWVkeURlY2lzaW9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5wYXNzZWRUaHJvdWdoTm9uR3JlZWR5RGVjaXNpb258fGUgaW5zdGFuY2VvZiBHZSYmZS5ub25HcmVlZHl9fV0pJiZydShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KEwpO2Z1bmN0aW9uIHN1KHQpe3JldHVybiBzdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxzdSh0KX1mdW5jdGlvbiBmdSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09c3UodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09c3UocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09c3Uobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIHB1KHQsZSl7cmV0dXJuIHB1PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0scHUodCxlKX1mdW5jdGlvbiB5dSh0KXtyZXR1cm4geXU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LHl1KHQpfXZhciBodT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmcHUodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT15dShyKTtpZihvKXt2YXIgbj15dSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXN1KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0LGUpe3ZhciBuO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKG49aS5jYWxsKHRoaXMsZS5hY3Rpb25UeXBlKSkub2Zmc2V0PXQsbi5hY3Rpb249ZSxuLmlzUG9zaXRpb25EZXBlbmRlbnQ9ITAsbn1yZXR1cm4gZT11LChuPVt7a2V5OlwiZXhlY3V0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuYWN0aW9uLmV4ZWN1dGUodCl9fSx7a2V5OlwidXBkYXRlSGFzaENvZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnVwZGF0ZSh0aGlzLmFjdGlvblR5cGUsdGhpcy5vZmZzZXQsdGhpcy5hY3Rpb24pfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzPT09dHx8dCBpbnN0YW5jZW9mIHUmJnRoaXMub2Zmc2V0PT09dC5vZmZzZXQmJnRoaXMuYWN0aW9uPT09dC5hY3Rpb259fV0pJiZmdShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFpyKTtmdW5jdGlvbiBidSh0KXtyZXR1cm4gYnU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sYnUodCl9ZnVuY3Rpb24gdnUodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PWJ1KHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PWJ1KHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PWJ1KG8pP286U3RyaW5nKG8pKSxyKX12YXIgb312YXIgZHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5sZXhlckFjdGlvbnM9bnVsbD09PWU/W106ZSx0aGlzLmNhY2hlZEhhc2hDb2RlPWYuaGFzaFN0dWZmKGUpLHRoaXN9dmFyIGUsbixyO3JldHVybiBlPXQsbj1be2tleTpcImZpeE9mZnNldEJlZm9yZU1hdGNoXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPW51bGwscj0wO3I8dGhpcy5sZXhlckFjdGlvbnMubGVuZ3RoO3IrKykhdGhpcy5sZXhlckFjdGlvbnNbcl0uaXNQb3NpdGlvbkRlcGVuZGVudHx8dGhpcy5sZXhlckFjdGlvbnNbcl1pbnN0YW5jZW9mIGh1fHwobnVsbD09PW4mJihuPXRoaXMubGV4ZXJBY3Rpb25zLmNvbmNhdChbXSkpLG5bcl09bmV3IGh1KGUsdGhpcy5sZXhlckFjdGlvbnNbcl0pKTtyZXR1cm4gbnVsbD09PW4/dGhpczpuZXcgdChuKX19LHtrZXk6XCJleGVjdXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3ZhciByPSExLG89ZS5pbmRleDt0cnl7Zm9yKHZhciBpPTA7aTx0aGlzLmxleGVyQWN0aW9ucy5sZW5ndGg7aSsrKXt2YXIgdT10aGlzLmxleGVyQWN0aW9uc1tpXTtpZih1IGluc3RhbmNlb2YgaHUpe3ZhciBjPXUub2Zmc2V0O2Uuc2VlayhuK2MpLHU9dS5hY3Rpb24scj1uK2MhPT1vfWVsc2UgdS5pc1Bvc2l0aW9uRGVwZW5kZW50JiYoZS5zZWVrKG8pLHI9ITEpO3UuZXhlY3V0ZSh0KX19ZmluYWxseXtyJiZlLnNlZWsobyl9fX0se2tleTpcImhhc2hDb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYWNoZWRIYXNoQ29kZX19LHtrZXk6XCJ1cGRhdGVIYXNoQ29kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QudXBkYXRlKHRoaXMuY2FjaGVkSGFzaENvZGUpfX0se2tleTpcImVxdWFsc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXM9PT1lKXJldHVybiEwO2lmKGUgaW5zdGFuY2VvZiB0KXtpZih0aGlzLmNhY2hlZEhhc2hDb2RlIT1lLmNhY2hlZEhhc2hDb2RlKXJldHVybiExO2lmKHRoaXMubGV4ZXJBY3Rpb25zLmxlbmd0aCE9ZS5sZXhlckFjdGlvbnMubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj10aGlzLmxleGVyQWN0aW9ucy5sZW5ndGgscj0wO3I8bjsrK3IpaWYoIXRoaXMubGV4ZXJBY3Rpb25zW3JdLmVxdWFscyhlLmxleGVyQWN0aW9uc1tyXSkpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuITF9fV0scj1be2tleTpcImFwcGVuZFwiLHZhbHVlOmZ1bmN0aW9uKGUsbil7cmV0dXJuIG5ldyB0KG51bGw9PT1lP1tuXTplLmxleGVyQWN0aW9ucy5jb25jYXQoW25dKSl9fV0sbiYmdnUoZS5wcm90b3R5cGUsbiksciYmdnUoZSxyKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gbXUodCxlKXtyZXR1cm4gbXU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxtdSh0LGUpfWZ1bmN0aW9uIGd1KHQpe3JldHVybiBndT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sZ3UodCl9ZnVuY3Rpb24gU3UodCl7cmV0dXJuIFN1PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LFN1KHQpfWZ1bmN0aW9uIE91KHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiB3dSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09U3UodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09U3UocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09U3Uobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIF91KHQsZSxuKXtyZXR1cm4gZSYmd3UodC5wcm90b3R5cGUsZSksbiYmd3UodCxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9ZnVuY3Rpb24gUHUodCl7dC5pbmRleD0tMSx0LmxpbmU9MCx0LmNvbHVtbj0tMSx0LmRmYVN0YXRlPW51bGx9dmFyIFR1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe091KHRoaXMsdCksUHUodGhpcyl9cmV0dXJuIF91KHQsW3trZXk6XCJyZXNldFwiLHZhbHVlOmZ1bmN0aW9uKCl7UHUodGhpcyl9fV0pLHR9KCksRXU9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJm11KHQsZSl9KGksdCk7dmFyIGUsbixyPShlPWksbj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQscj1ndShlKTtpZihuKXt2YXIgbz1ndSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLG8pfWVsc2UgdD1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PVN1KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSh0LGUsbixvKXt2YXIgdTtyZXR1cm4gT3UodGhpcyxpKSwodT1yLmNhbGwodGhpcyxlLG8pKS5kZWNpc2lvblRvREZBPW4sdS5yZWNvZz10LHUuc3RhcnRJbmRleD0tMSx1LmxpbmU9MSx1LmNvbHVtbj0wLHUubW9kZT1VaS5ERUZBVUxUX01PREUsdS5wcmV2QWNjZXB0PW5ldyBUdSx1fXJldHVybiBfdShpLFt7a2V5OlwiY29weVN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5jb2x1bW49dC5jb2x1bW4sdGhpcy5saW5lPXQubGluZSx0aGlzLm1vZGU9dC5tb2RlLHRoaXMuc3RhcnRJbmRleD10LnN0YXJ0SW5kZXh9fSx7a2V5OlwibWF0Y2hcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMubW9kZT1lO3ZhciBuPXQubWFyaygpO3RyeXt0aGlzLnN0YXJ0SW5kZXg9dC5pbmRleCx0aGlzLnByZXZBY2NlcHQucmVzZXQoKTt2YXIgcj10aGlzLmRlY2lzaW9uVG9ERkFbZV07cmV0dXJuIG51bGw9PT1yLnMwP3RoaXMubWF0Y2hBVE4odCk6dGhpcy5leGVjQVROKHQsci5zMCl9ZmluYWxseXt0LnJlbGVhc2Uobil9fX0se2tleTpcInJlc2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnByZXZBY2NlcHQucmVzZXQoKSx0aGlzLnN0YXJ0SW5kZXg9LTEsdGhpcy5saW5lPTEsdGhpcy5jb2x1bW49MCx0aGlzLm1vZGU9VWkuREVGQVVMVF9NT0RFfX0se2tleTpcIm1hdGNoQVROXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5hdG4ubW9kZVRvU3RhcnRTdGF0ZVt0aGlzLm1vZGVdO2kuZGVidWcmJmNvbnNvbGUubG9nKFwibWF0Y2hBVE4gbW9kZSBcIit0aGlzLm1vZGUrXCIgc3RhcnQ6IFwiK2UpO3ZhciBuPXRoaXMubW9kZSxyPXRoaXMuY29tcHV0ZVN0YXJ0U3RhdGUodCxlKSxvPXIuaGFzU2VtYW50aWNDb250ZXh0O3IuaGFzU2VtYW50aWNDb250ZXh0PSExO3ZhciB1PXRoaXMuYWRkREZBU3RhdGUocik7b3x8KHRoaXMuZGVjaXNpb25Ub0RGQVt0aGlzLm1vZGVdLnMwPXUpO3ZhciBjPXRoaXMuZXhlY0FUTih0LHUpO3JldHVybiBpLmRlYnVnJiZjb25zb2xlLmxvZyhcIkRGQSBhZnRlciBtYXRjaEFUTjogXCIrdGhpcy5kZWNpc2lvblRvREZBW25dLnRvTGV4ZXJTdHJpbmcoKSksY319LHtrZXk6XCJleGVjQVROXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpLmRlYnVnJiZjb25zb2xlLmxvZyhcInN0YXJ0IHN0YXRlIGNsb3N1cmU9XCIrZS5jb25maWdzKSxlLmlzQWNjZXB0U3RhdGUmJnRoaXMuY2FwdHVyZVNpbVN0YXRlKHRoaXMucHJldkFjY2VwdCx0LGUpO2Zvcih2YXIgbj10LkxBKDEpLHI9ZTs7KXtpLmRlYnVnJiZjb25zb2xlLmxvZyhcImV4ZWNBVE4gbG9vcCBzdGFydGluZyBjbG9zdXJlOiBcIityLmNvbmZpZ3MpO3ZhciB1PXRoaXMuZ2V0RXhpc3RpbmdUYXJnZXRTdGF0ZShyLG4pO2lmKG51bGw9PT11JiYodT10aGlzLmNvbXB1dGVUYXJnZXRTdGF0ZSh0LHIsbikpLHU9PT1KaS5FUlJPUilicmVhaztpZihuIT09by5FT0YmJnRoaXMuY29uc3VtZSh0KSx1LmlzQWNjZXB0U3RhdGUmJih0aGlzLmNhcHR1cmVTaW1TdGF0ZSh0aGlzLnByZXZBY2NlcHQsdCx1KSxuPT09by5FT0YpKWJyZWFrO249dC5MQSgxKSxyPXV9cmV0dXJuIHRoaXMuZmFpbE9yQWNjZXB0KHRoaXMucHJldkFjY2VwdCx0LHIuY29uZmlncyxuKX19LHtrZXk6XCJnZXRFeGlzdGluZ1RhcmdldFN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihudWxsPT09dC5lZGdlc3x8ZTxpLk1JTl9ERkFfRURHRXx8ZT5pLk1BWF9ERkFfRURHRSlyZXR1cm4gbnVsbDt2YXIgbj10LmVkZ2VzW2UtaS5NSU5fREZBX0VER0VdO3JldHVybiB2b2lkIDA9PT1uJiYobj1udWxsKSxpLmRlYnVnJiZudWxsIT09biYmY29uc29sZS5sb2coXCJyZXVzZSBzdGF0ZSBcIit0LnN0YXRlTnVtYmVyK1wiIGVkZ2UgdG8gXCIrbi5zdGF0ZU51bWJlciksbn19LHtrZXk6XCJjb21wdXRlVGFyZ2V0U3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGV1O3JldHVybiB0aGlzLmdldFJlYWNoYWJsZUNvbmZpZ1NldCh0LGUuY29uZmlncyxyLG4pLDA9PT1yLml0ZW1zLmxlbmd0aD8oci5oYXNTZW1hbnRpY0NvbnRleHR8fHRoaXMuYWRkREZBRWRnZShlLG4sSmkuRVJST1IpLEppLkVSUk9SKTp0aGlzLmFkZERGQUVkZ2UoZSxuLG51bGwscil9fSx7a2V5OlwiZmFpbE9yQWNjZXB0XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scil7aWYobnVsbCE9PXRoaXMucHJldkFjY2VwdC5kZmFTdGF0ZSl7dmFyIGk9dC5kZmFTdGF0ZS5sZXhlckFjdGlvbkV4ZWN1dG9yO3JldHVybiB0aGlzLmFjY2VwdChlLGksdGhpcy5zdGFydEluZGV4LHQuaW5kZXgsdC5saW5lLHQuY29sdW1uKSx0LmRmYVN0YXRlLnByZWRpY3Rpb259aWYocj09PW8uRU9GJiZlLmluZGV4PT09dGhpcy5zdGFydEluZGV4KXJldHVybiBvLkVPRjt0aHJvdyBuZXcgSWkodGhpcy5yZWNvZyxlLHRoaXMuc3RhcnRJbmRleCxuKX19LHtrZXk6XCJnZXRSZWFjaGFibGVDb25maWdTZXRcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyKXtmb3IodmFyIHU9RmUuSU5WQUxJRF9BTFRfTlVNQkVSLGM9MDtjPGUuaXRlbXMubGVuZ3RoO2MrKyl7dmFyIGE9ZS5pdGVtc1tjXSxsPWEuYWx0PT09dTtpZighbHx8IWEucGFzc2VkVGhyb3VnaE5vbkdyZWVkeURlY2lzaW9uKXtpLmRlYnVnJiZjb25zb2xlLmxvZyhcInRlc3RpbmcgJXMgYXQgJXNcXG5cIix0aGlzLmdldFRva2VuTmFtZShyKSxhLnRvU3RyaW5nKHRoaXMucmVjb2csITApKTtmb3IodmFyIHM9MDtzPGEuc3RhdGUudHJhbnNpdGlvbnMubGVuZ3RoO3MrKyl7dmFyIGY9YS5zdGF0ZS50cmFuc2l0aW9uc1tzXSxwPXRoaXMuZ2V0UmVhY2hhYmxlVGFyZ2V0KGYscik7aWYobnVsbCE9PXApe3ZhciB5PWEubGV4ZXJBY3Rpb25FeGVjdXRvcjtudWxsIT09eSYmKHk9eS5maXhPZmZzZXRCZWZvcmVNYXRjaCh0LmluZGV4LXRoaXMuc3RhcnRJbmRleCkpO3ZhciBoPXI9PT1vLkVPRixiPW5ldyBsdSh7c3RhdGU6cCxsZXhlckFjdGlvbkV4ZWN1dG9yOnl9LGEpO3RoaXMuY2xvc3VyZSh0LGIsbixsLCEwLGgpJiYodT1hLmFsdCl9fX19fX0se2tleTpcImFjY2VwdFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyx1KXtpLmRlYnVnJiZjb25zb2xlLmxvZyhcIkFDVElPTiAlc1xcblwiLGUpLHQuc2VlayhyKSx0aGlzLmxpbmU9byx0aGlzLmNvbHVtbj11LG51bGwhPT1lJiZudWxsIT09dGhpcy5yZWNvZyYmZS5leGVjdXRlKHRoaXMucmVjb2csdCxuKX19LHtrZXk6XCJnZXRSZWFjaGFibGVUYXJnZXRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0Lm1hdGNoZXMoZSwwLFVpLk1BWF9DSEFSX1ZBTFVFKT90LnRhcmdldDpudWxsfX0se2tleTpcImNvbXB1dGVTdGFydFN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49b2UuRU1QVFkscj1uZXcgZXUsbz0wO288ZS50cmFuc2l0aW9ucy5sZW5ndGg7bysrKXt2YXIgaT1lLnRyYW5zaXRpb25zW29dLnRhcmdldCx1PW5ldyBsdSh7c3RhdGU6aSxhbHQ6bysxLGNvbnRleHQ6bn0sbnVsbCk7dGhpcy5jbG9zdXJlKHQsdSxyLCExLCExLCExKX1yZXR1cm4gcn19LHtrZXk6XCJjbG9zdXJlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixvLHUpe3ZhciBjPW51bGw7aWYoaS5kZWJ1ZyYmY29uc29sZS5sb2coXCJjbG9zdXJlKFwiK2UudG9TdHJpbmcodGhpcy5yZWNvZywhMCkrXCIpXCIpLGUuc3RhdGUgaW5zdGFuY2VvZiAkKXtpZihpLmRlYnVnJiYobnVsbCE9PXRoaXMucmVjb2c/Y29uc29sZS5sb2coXCJjbG9zdXJlIGF0ICVzIHJ1bGUgc3RvcCAlc1xcblwiLHRoaXMucmVjb2cucnVsZU5hbWVzW2Uuc3RhdGUucnVsZUluZGV4XSxlKTpjb25zb2xlLmxvZyhcImNsb3N1cmUgYXQgcnVsZSBzdG9wICVzXFxuXCIsZSkpLG51bGw9PT1lLmNvbnRleHR8fGUuY29udGV4dC5oYXNFbXB0eVBhdGgoKSl7aWYobnVsbD09PWUuY29udGV4dHx8ZS5jb250ZXh0LmlzRW1wdHkoKSlyZXR1cm4gbi5hZGQoZSksITA7bi5hZGQobmV3IGx1KHtzdGF0ZTplLnN0YXRlLGNvbnRleHQ6b2UuRU1QVFl9LGUpKSxyPSEwfWlmKG51bGwhPT1lLmNvbnRleHQmJiFlLmNvbnRleHQuaXNFbXB0eSgpKWZvcih2YXIgYT0wO2E8ZS5jb250ZXh0Lmxlbmd0aDthKyspaWYoZS5jb250ZXh0LmdldFJldHVyblN0YXRlKGEpIT09b2UuRU1QVFlfUkVUVVJOX1NUQVRFKXt2YXIgbD1lLmNvbnRleHQuZ2V0UGFyZW50KGEpLHM9dGhpcy5hdG4uc3RhdGVzW2UuY29udGV4dC5nZXRSZXR1cm5TdGF0ZShhKV07Yz1uZXcgbHUoe3N0YXRlOnMsY29udGV4dDpsfSxlKSxyPXRoaXMuY2xvc3VyZSh0LGMsbixyLG8sdSl9cmV0dXJuIHJ9ZS5zdGF0ZS5lcHNpbG9uT25seVRyYW5zaXRpb25zfHxyJiZlLnBhc3NlZFRocm91Z2hOb25HcmVlZHlEZWNpc2lvbnx8bi5hZGQoZSk7Zm9yKHZhciBmPTA7ZjxlLnN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aDtmKyspe3ZhciBwPWUuc3RhdGUudHJhbnNpdGlvbnNbZl07bnVsbCE9PShjPXRoaXMuZ2V0RXBzaWxvblRhcmdldCh0LGUscCxuLG8sdSkpJiYocj10aGlzLmNsb3N1cmUodCxjLG4scixvLHUpKX1yZXR1cm4gcn19LHtrZXk6XCJnZXRFcHNpbG9uVGFyZ2V0XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scix1LGMpe3ZhciBhPW51bGw7aWYobi5zZXJpYWxpemF0aW9uVHlwZT09PXR0LlJVTEUpe3ZhciBsPXZlLmNyZWF0ZShlLmNvbnRleHQsbi5mb2xsb3dTdGF0ZS5zdGF0ZU51bWJlcik7YT1uZXcgbHUoe3N0YXRlOm4udGFyZ2V0LGNvbnRleHQ6bH0sZSl9ZWxzZXtpZihuLnNlcmlhbGl6YXRpb25UeXBlPT09dHQuUFJFQ0VERU5DRSl0aHJvd1wiUHJlY2VkZW5jZSBwcmVkaWNhdGVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGxleGVycy5cIjtpZihuLnNlcmlhbGl6YXRpb25UeXBlPT09dHQuUFJFRElDQVRFKWkuZGVidWcmJmNvbnNvbGUubG9nKFwiRVZBTCBydWxlIFwiK24ucnVsZUluZGV4K1wiOlwiK24ucHJlZEluZGV4KSxyLmhhc1NlbWFudGljQ29udGV4dD0hMCx0aGlzLmV2YWx1YXRlUHJlZGljYXRlKHQsbi5ydWxlSW5kZXgsbi5wcmVkSW5kZXgsdSkmJihhPW5ldyBsdSh7c3RhdGU6bi50YXJnZXR9LGUpKTtlbHNlIGlmKG4uc2VyaWFsaXphdGlvblR5cGU9PT10dC5BQ1RJT04paWYobnVsbD09PWUuY29udGV4dHx8ZS5jb250ZXh0Lmhhc0VtcHR5UGF0aCgpKXt2YXIgcz1kdS5hcHBlbmQoZS5sZXhlckFjdGlvbkV4ZWN1dG9yLHRoaXMuYXRuLmxleGVyQWN0aW9uc1tuLmFjdGlvbkluZGV4XSk7YT1uZXcgbHUoe3N0YXRlOm4udGFyZ2V0LGxleGVyQWN0aW9uRXhlY3V0b3I6c30sZSl9ZWxzZSBhPW5ldyBsdSh7c3RhdGU6bi50YXJnZXR9LGUpO2Vsc2Ugbi5zZXJpYWxpemF0aW9uVHlwZT09PXR0LkVQU0lMT04/YT1uZXcgbHUoe3N0YXRlOm4udGFyZ2V0fSxlKTpuLnNlcmlhbGl6YXRpb25UeXBlIT09dHQuQVRPTSYmbi5zZXJpYWxpemF0aW9uVHlwZSE9PXR0LlJBTkdFJiZuLnNlcmlhbGl6YXRpb25UeXBlIT09dHQuU0VUfHxjJiZuLm1hdGNoZXMoby5FT0YsMCxVaS5NQVhfQ0hBUl9WQUxVRSkmJihhPW5ldyBsdSh7c3RhdGU6bi50YXJnZXR9LGUpKX1yZXR1cm4gYX19LHtrZXk6XCJldmFsdWF0ZVByZWRpY2F0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIpe2lmKG51bGw9PT10aGlzLnJlY29nKXJldHVybiEwO2lmKCFyKXJldHVybiB0aGlzLnJlY29nLnNlbXByZWQobnVsbCxlLG4pO3ZhciBvPXRoaXMuY29sdW1uLGk9dGhpcy5saW5lLHU9dC5pbmRleCxjPXQubWFyaygpO3RyeXtyZXR1cm4gdGhpcy5jb25zdW1lKHQpLHRoaXMucmVjb2cuc2VtcHJlZChudWxsLGUsbil9ZmluYWxseXt0aGlzLmNvbHVtbj1vLHRoaXMubGluZT1pLHQuc2Vlayh1KSx0LnJlbGVhc2UoYyl9fX0se2tleTpcImNhcHR1cmVTaW1TdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt0LmluZGV4PWUuaW5kZXgsdC5saW5lPXRoaXMubGluZSx0LmNvbHVtbj10aGlzLmNvbHVtbix0LmRmYVN0YXRlPW59fSx7a2V5OlwiYWRkREZBRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIpe2lmKHZvaWQgMD09PW4mJihuPW51bGwpLHZvaWQgMD09PXImJihyPW51bGwpLG51bGw9PT1uJiZudWxsIT09cil7dmFyIG89ci5oYXNTZW1hbnRpY0NvbnRleHQ7aWYoci5oYXNTZW1hbnRpY0NvbnRleHQ9ITEsbj10aGlzLmFkZERGQVN0YXRlKHIpLG8pcmV0dXJuIG59cmV0dXJuIGU8aS5NSU5fREZBX0VER0V8fGU+aS5NQVhfREZBX0VER0V8fChpLmRlYnVnJiZjb25zb2xlLmxvZyhcIkVER0UgXCIrdCtcIiAtPiBcIituK1wiIHVwb24gXCIrZSksbnVsbD09PXQuZWRnZXMmJih0LmVkZ2VzPVtdKSx0LmVkZ2VzW2UtaS5NSU5fREZBX0VER0VdPW4pLG59fSx7a2V5OlwiYWRkREZBU3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IFdpKG51bGwsdCksbj1udWxsLHI9MDtyPHQuaXRlbXMubGVuZ3RoO3IrKyl7dmFyIG89dC5pdGVtc1tyXTtpZihvLnN0YXRlIGluc3RhbmNlb2YgJCl7bj1vO2JyZWFrfX1udWxsIT09biYmKGUuaXNBY2NlcHRTdGF0ZT0hMCxlLmxleGVyQWN0aW9uRXhlY3V0b3I9bi5sZXhlckFjdGlvbkV4ZWN1dG9yLGUucHJlZGljdGlvbj10aGlzLmF0bi5ydWxlVG9Ub2tlblR5cGVbbi5zdGF0ZS5ydWxlSW5kZXhdKTt2YXIgaT10aGlzLmRlY2lzaW9uVG9ERkFbdGhpcy5tb2RlXSx1PWkuc3RhdGVzLmdldChlKTtpZihudWxsIT09dSlyZXR1cm4gdTt2YXIgYz1lO3JldHVybiBjLnN0YXRlTnVtYmVyPWkuc3RhdGVzLmxlbmd0aCx0LnNldFJlYWRvbmx5KCEwKSxjLmNvbmZpZ3M9dCxpLnN0YXRlcy5hZGQoYyksY319LHtrZXk6XCJnZXRERkFcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kZWNpc2lvblRvREZBW3RdfX0se2tleTpcImdldFRleHRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5nZXRUZXh0KHRoaXMuc3RhcnRJbmRleCx0LmluZGV4LTEpfX0se2tleTpcImNvbnN1bWVcIix2YWx1ZTpmdW5jdGlvbih0KXt0LkxBKDEpPT09XCJcXG5cIi5jaGFyQ29kZUF0KDApPyh0aGlzLmxpbmUrPTEsdGhpcy5jb2x1bW49MCk6dGhpcy5jb2x1bW4rPTEsdC5jb25zdW1lKCl9fSx7a2V5OlwiZ2V0VG9rZW5OYW1lXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuLTE9PT10P1wiRU9GXCI6XCInXCIrU3RyaW5nLmZyb21DaGFyQ29kZSh0KStcIidcIn19XSksaX0oSmkpO2Z1bmN0aW9uIGt1KHQpe3JldHVybiBrdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxrdSh0KX1mdW5jdGlvbiBqdSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09a3UodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09a3UocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09a3Uobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfUV1LmRlYnVnPSExLEV1LmRmYV9kZWJ1Zz0hMSxFdS5NSU5fREZBX0VER0U9MCxFdS5NQVhfREZBX0VER0U9MTI3O3ZhciB4dT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuYWx0PW4sdGhpcy5wcmVkPWV9dmFyIGUsbjtyZXR1cm4gZT10LChuPVt7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiKFwiK3RoaXMucHJlZCtcIiwgXCIrdGhpcy5hbHQrXCIpXCJ9fV0pJiZqdShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gUnUodCl7cmV0dXJuIFJ1PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LFJ1KHQpfWZ1bmN0aW9uIEN1KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1SdSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1SdShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1SdShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIEF1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5kYXRhPXt9fXZhciBlLG47cmV0dXJuIGU9dCwobj1be2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGFbXCJrLVwiK3RdfHxudWxsfX0se2tleTpcInNldFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5kYXRhW1wiay1cIit0XT1lfX0se2tleTpcInZhbHVlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gT2JqZWN0LmtleXModGhpcy5kYXRhKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN0YXJ0c1dpdGgoXCJrLVwiKX0pKS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmRhdGFbZV19KSx0aGlzKX19XSkmJkN1KGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH0oKSxOdT17U0xMOjAsTEw6MSxMTF9FWEFDVF9BTUJJR19ERVRFQ1RJT046MixoYXNTTExDb25mbGljdFRlcm1pbmF0aW5nUHJlZGljdGlvbjpmdW5jdGlvbih0LGUpe2lmKE51LmFsbENvbmZpZ3NJblJ1bGVTdG9wU3RhdGVzKGUpKXJldHVybiEwO2lmKHQ9PT1OdS5TTEwmJmUuaGFzU2VtYW50aWNDb250ZXh0KXtmb3IodmFyIG49bmV3IEtpLHI9MDtyPGUuaXRlbXMubGVuZ3RoO3IrKyl7dmFyIG89ZS5pdGVtc1tyXTtvPW5ldyBMKHtzZW1hbnRpY0NvbnRleHQ6ai5OT05FfSxvKSxuLmFkZChvKX1lPW59dmFyIGk9TnUuZ2V0Q29uZmxpY3RpbmdBbHRTdWJzZXRzKGUpO3JldHVybiBOdS5oYXNDb25mbGljdGluZ0FsdFNldChpKSYmIU51Lmhhc1N0YXRlQXNzb2NpYXRlZFdpdGhPbmVBbHQoZSl9LGhhc0NvbmZpZ0luUnVsZVN0b3BTdGF0ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQuaXRlbXMubGVuZ3RoO2UrKylpZih0Lml0ZW1zW2VdLnN0YXRlIGluc3RhbmNlb2YgJClyZXR1cm4hMDtyZXR1cm4hMX0sYWxsQ29uZmlnc0luUnVsZVN0b3BTdGF0ZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0Lml0ZW1zLmxlbmd0aDtlKyspaWYoISh0Lml0ZW1zW2VdLnN0YXRlIGluc3RhbmNlb2YgJCkpcmV0dXJuITE7cmV0dXJuITB9LHJlc29sdmVzVG9KdXN0T25lVmlhYmxlQWx0OmZ1bmN0aW9uKHQpe3JldHVybiBOdS5nZXRTaW5nbGVWaWFibGVBbHQodCl9LGFsbFN1YnNldHNDb25mbGljdDpmdW5jdGlvbih0KXtyZXR1cm4hTnUuaGFzTm9uQ29uZmxpY3RpbmdBbHRTZXQodCl9LGhhc05vbkNvbmZsaWN0aW5nQWx0U2V0OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKWlmKDE9PT10W2VdLmxlbmd0aClyZXR1cm4hMDtyZXR1cm4hMX0saGFzQ29uZmxpY3RpbmdBbHRTZXQ6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspaWYodFtlXS5sZW5ndGg+MSlyZXR1cm4hMDtyZXR1cm4hMX0sYWxsU3Vic2V0c0VxdWFsOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1udWxsLG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtpZihudWxsPT09ZSllPXI7ZWxzZSBpZihyIT09ZSlyZXR1cm4hMX1yZXR1cm4hMH0sZ2V0VW5pcXVlQWx0OmZ1bmN0aW9uKHQpe3ZhciBlPU51LmdldEFsdHModCk7cmV0dXJuIDE9PT1lLmxlbmd0aD9lLm1pblZhbHVlKCk6RmUuSU5WQUxJRF9BTFRfTlVNQkVSfSxnZXRBbHRzOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDZTtyZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQpe2Uub3IodCl9KSksZX0sZ2V0Q29uZmxpY3RpbmdBbHRTdWJzZXRzOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBUZTtyZXR1cm4gZS5oYXNoRnVuY3Rpb249ZnVuY3Rpb24odCl7Zi5oYXNoU3R1ZmYodC5zdGF0ZS5zdGF0ZU51bWJlcix0LmNvbnRleHQpfSxlLmVxdWFsc0Z1bmN0aW9uPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuc3RhdGUuc3RhdGVOdW1iZXI9PT1lLnN0YXRlLnN0YXRlTnVtYmVyJiZ0LmNvbnRleHQuZXF1YWxzKGUuY29udGV4dCl9LHQuaXRlbXMubWFwKChmdW5jdGlvbih0KXt2YXIgbj1lLmdldCh0KTtudWxsPT09biYmKG49bmV3IENlLGUuc2V0KHQsbikpLG4uYWRkKHQuYWx0KX0pKSxlLmdldFZhbHVlcygpfSxnZXRTdGF0ZVRvQWx0TWFwOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBdTtyZXR1cm4gdC5pdGVtcy5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuPWUuZ2V0KHQuc3RhdGUpO251bGw9PT1uJiYobj1uZXcgQ2UsZS5zZXQodC5zdGF0ZSxuKSksbi5hZGQodC5hbHQpfSkpLGV9LGhhc1N0YXRlQXNzb2NpYXRlZFdpdGhPbmVBbHQ6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPU51LmdldFN0YXRlVG9BbHRNYXAodCkudmFsdWVzKCksbj0wO248ZS5sZW5ndGg7bisrKWlmKDE9PT1lW25dLmxlbmd0aClyZXR1cm4hMDtyZXR1cm4hMX0sZ2V0U2luZ2xlVmlhYmxlQWx0OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1udWxsLG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXS5taW5WYWx1ZSgpO2lmKG51bGw9PT1lKWU9cjtlbHNlIGlmKGUhPT1yKXJldHVybiBGZS5JTlZBTElEX0FMVF9OVU1CRVJ9cmV0dXJuIGV9fTtjb25zdCBJdT1OdTtmdW5jdGlvbiBMdSh0KXtyZXR1cm4gTHU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sTHUodCl9ZnVuY3Rpb24gRHUodCxlKXtyZXR1cm4gRHU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxEdSh0LGUpfWZ1bmN0aW9uIEZ1KHQpe3JldHVybiBGdT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sRnUodCl9dmFyIEJ1PWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZEdSh0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1GdShuKTtpZihyKXt2YXIgbz1GdSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUx1KGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSh0LGUsbixyLHUsYyl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxpKSxjPWN8fHQuX2N0eCxyPXJ8fHQuZ2V0Q3VycmVudFRva2VuKCksbj1ufHx0LmdldEN1cnJlbnRUb2tlbigpLGU9ZXx8dC5nZXRJbnB1dFN0cmVhbSgpLChhPW8uY2FsbCh0aGlzLHttZXNzYWdlOlwiXCIscmVjb2duaXplcjp0LGlucHV0OmUsY3R4OmN9KSkuZGVhZEVuZENvbmZpZ3M9dSxhLnN0YXJ0VG9rZW49bixhLm9mZmVuZGluZ1Rva2VuPXIsYX1yZXR1cm4gZT1pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZX0oeGkpO2Z1bmN0aW9uIE11KHQpe3JldHVybiBNdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxNdSh0KX1mdW5jdGlvbiBVdSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09TXUodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09TXUocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09TXUobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfXZhciBWdT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSx0aGlzLmRlZmF1bHRNYXBDdG9yPWV8fFRlLHRoaXMuY2FjaGVNYXA9bmV3IHRoaXMuZGVmYXVsdE1hcEN0b3J9dmFyIGUsbjtyZXR1cm4gZT10LChuPVt7a2V5OlwiZ2V0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmNhY2hlTWFwLmdldCh0KXx8bnVsbDtyZXR1cm4gbnVsbD09PW4/bnVsbDpuLmdldChlKXx8bnVsbH19LHtrZXk6XCJzZXRcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy5jYWNoZU1hcC5nZXQodCl8fG51bGw7bnVsbD09PXImJihyPW5ldyB0aGlzLmRlZmF1bHRNYXBDdG9yLHRoaXMuY2FjaGVNYXAuc2V0KHQscikpLHIuc2V0KGUsbil9fV0pJiZVdShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24genUodCl7cmV0dXJuIHp1PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LHp1KHQpfWZ1bmN0aW9uIHF1KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT16dSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT16dShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT16dShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gSHUodCxlKXtyZXR1cm4gSHU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxIdSh0LGUpfWZ1bmN0aW9uIEt1KHQpe3JldHVybiBLdT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sS3UodCl9dmFyIFl1PWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZIdSh0LGUpfShjLHQpO3ZhciBlLG4scixpLHU9KHI9YyxpPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPUt1KHIpO2lmKGkpe3ZhciBuPUt1KHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09enUoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBjKHQsZSxuLHIpe3ZhciBvO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyksKG89dS5jYWxsKHRoaXMsZSxyKSkucGFyc2VyPXQsby5kZWNpc2lvblRvREZBPW4sby5wcmVkaWN0aW9uTW9kZT1JdS5MTCxvLl9pbnB1dD1udWxsLG8uX3N0YXJ0SW5kZXg9MCxvLl9vdXRlckNvbnRleHQ9bnVsbCxvLl9kZmE9bnVsbCxvLm1lcmdlQ2FjaGU9bnVsbCxvLmRlYnVnPSExLG8uZGVidWdfY2xvc3VyZT0hMSxvLmRlYnVnX2FkZD0hMSxvLnRyYWNlX2F0bl9zaW09ITEsby5kZmFfZGVidWc9ITEsby5yZXRyeV9kZWJ1Zz0hMSxvfXJldHVybiBlPWMsbj1be2tleTpcInJlc2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OlwiYWRhcHRpdmVQcmVkaWN0XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4peyh0aGlzLmRlYnVnfHx0aGlzLnRyYWNlX2F0bl9zaW0pJiZjb25zb2xlLmxvZyhcImFkYXB0aXZlUHJlZGljdCBkZWNpc2lvbiBcIitlK1wiIGV4ZWMgTEEoMSk9PVwiK3RoaXMuZ2V0TG9va2FoZWFkTmFtZSh0KStcIiBsaW5lIFwiK3QuTFQoMSkubGluZStcIjpcIit0LkxUKDEpLmNvbHVtbiksdGhpcy5faW5wdXQ9dCx0aGlzLl9zdGFydEluZGV4PXQuaW5kZXgsdGhpcy5fb3V0ZXJDb250ZXh0PW47dmFyIHI9dGhpcy5kZWNpc2lvblRvREZBW2VdO3RoaXMuX2RmYT1yO3ZhciBvPXQubWFyaygpLGk9dC5pbmRleDt0cnl7dmFyIHU7aWYobnVsbD09PSh1PXIucHJlY2VkZW5jZURmYT9yLmdldFByZWNlZGVuY2VTdGFydFN0YXRlKHRoaXMucGFyc2VyLmdldFByZWNlZGVuY2UoKSk6ci5zMCkpe251bGw9PT1uJiYobj1lZS5FTVBUWSksdGhpcy5kZWJ1ZyYmY29uc29sZS5sb2coXCJwcmVkaWN0QVROIGRlY2lzaW9uIFwiK3IuZGVjaXNpb24rXCIgZXhlYyBMQSgxKT09XCIrdGhpcy5nZXRMb29rYWhlYWROYW1lKHQpK1wiLCBvdXRlckNvbnRleHQ9XCIrbi50b1N0cmluZyh0aGlzLnBhcnNlci5ydWxlTmFtZXMpKTt2YXIgYz10aGlzLmNvbXB1dGVTdGFydFN0YXRlKHIuYXRuU3RhcnRTdGF0ZSxlZS5FTVBUWSwhMSk7ci5wcmVjZWRlbmNlRGZhPyhyLnMwLmNvbmZpZ3M9YyxjPXRoaXMuYXBwbHlQcmVjZWRlbmNlRmlsdGVyKGMpLHU9dGhpcy5hZGRERkFTdGF0ZShyLG5ldyBXaShudWxsLGMpKSxyLnNldFByZWNlZGVuY2VTdGFydFN0YXRlKHRoaXMucGFyc2VyLmdldFByZWNlZGVuY2UoKSx1KSk6KHU9dGhpcy5hZGRERkFTdGF0ZShyLG5ldyBXaShudWxsLGMpKSxyLnMwPXUpfXZhciBhPXRoaXMuZXhlY0FUTihyLHUsdCxpLG4pO3JldHVybiB0aGlzLmRlYnVnJiZjb25zb2xlLmxvZyhcIkRGQSBhZnRlciBwcmVkaWN0QVROOiBcIityLnRvU3RyaW5nKHRoaXMucGFyc2VyLmxpdGVyYWxOYW1lcyx0aGlzLnBhcnNlci5zeW1ib2xpY05hbWVzKSksYX1maW5hbGx5e3RoaXMuX2RmYT1udWxsLHRoaXMubWVyZ2VDYWNoZT1udWxsLHQuc2VlayhpKSx0LnJlbGVhc2Uobyl9fX0se2tleTpcImV4ZWNBVE5cIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLGkpe3ZhciB1Oyh0aGlzLmRlYnVnfHx0aGlzLnRyYWNlX2F0bl9zaW0pJiZjb25zb2xlLmxvZyhcImV4ZWNBVE4gZGVjaXNpb24gXCIrdC5kZWNpc2lvbitcIiwgREZBIHN0YXRlIFwiK2UrXCIsIExBKDEpPT1cIit0aGlzLmdldExvb2thaGVhZE5hbWUobikrXCIgbGluZSBcIituLkxUKDEpLmxpbmUrXCI6XCIrbi5MVCgxKS5jb2x1bW4pO3ZhciBjPWU7dGhpcy5kZWJ1ZyYmY29uc29sZS5sb2coXCJzMCA9IFwiK2UpO2Zvcih2YXIgYT1uLkxBKDEpOzspe3ZhciBsPXRoaXMuZ2V0RXhpc3RpbmdUYXJnZXRTdGF0ZShjLGEpO2lmKG51bGw9PT1sJiYobD10aGlzLmNvbXB1dGVUYXJnZXRTdGF0ZSh0LGMsYSkpLGw9PT1KaS5FUlJPUil7dmFyIHM9dGhpcy5ub1ZpYWJsZUFsdChuLGksYy5jb25maWdzLHIpO2lmKG4uc2VlayhyKSwodT10aGlzLmdldFN5blZhbGlkT3JTZW1JbnZhbGlkQWx0VGhhdEZpbmlzaGVkRGVjaXNpb25FbnRyeVJ1bGUoYy5jb25maWdzLGkpKSE9PUZlLklOVkFMSURfQUxUX05VTUJFUilyZXR1cm4gdTt0aHJvdyBzfWlmKGwucmVxdWlyZXNGdWxsQ29udGV4dCYmdGhpcy5wcmVkaWN0aW9uTW9kZSE9PUl1LlNMTCl7dmFyIGY9bnVsbDtpZihudWxsIT09bC5wcmVkaWNhdGVzKXt0aGlzLmRlYnVnJiZjb25zb2xlLmxvZyhcIkRGQSBzdGF0ZSBoYXMgcHJlZHMgaW4gREZBIHNpbSBMTCBmYWlsb3ZlclwiKTt2YXIgcD1uLmluZGV4O2lmKHAhPT1yJiZuLnNlZWsociksMT09PShmPXRoaXMuZXZhbFNlbWFudGljQ29udGV4dChsLnByZWRpY2F0ZXMsaSwhMCkpLmxlbmd0aClyZXR1cm4gdGhpcy5kZWJ1ZyYmY29uc29sZS5sb2coXCJGdWxsIExMIGF2b2lkZWRcIiksZi5taW5WYWx1ZSgpO3AhPT1yJiZuLnNlZWsocCl9dGhpcy5kZmFfZGVidWcmJmNvbnNvbGUubG9nKFwiY3R4IHNlbnNpdGl2ZSBzdGF0ZSBcIitpK1wiIGluIFwiK2wpO3ZhciB5PXRoaXMuY29tcHV0ZVN0YXJ0U3RhdGUodC5hdG5TdGFydFN0YXRlLGksITApO3JldHVybiB0aGlzLnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dCh0LGYsbC5jb25maWdzLHIsbi5pbmRleCksdGhpcy5leGVjQVROV2l0aEZ1bGxDb250ZXh0KHQsbCx5LG4scixpKX1pZihsLmlzQWNjZXB0U3RhdGUpe2lmKG51bGw9PT1sLnByZWRpY2F0ZXMpcmV0dXJuIGwucHJlZGljdGlvbjt2YXIgaD1uLmluZGV4O24uc2VlayhyKTt2YXIgYj10aGlzLmV2YWxTZW1hbnRpY0NvbnRleHQobC5wcmVkaWNhdGVzLGksITApO2lmKDA9PT1iLmxlbmd0aCl0aHJvdyB0aGlzLm5vVmlhYmxlQWx0KG4saSxsLmNvbmZpZ3Mscik7cmV0dXJuIDE9PT1iLmxlbmd0aHx8dGhpcy5yZXBvcnRBbWJpZ3VpdHkodCxsLHIsaCwhMSxiLGwuY29uZmlncyksYi5taW5WYWx1ZSgpfWM9bCxhIT09by5FT0YmJihuLmNvbnN1bWUoKSxhPW4uTEEoMSkpfX19LHtrZXk6XCJnZXRFeGlzdGluZ1RhcmdldFN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmVkZ2VzO3JldHVybiBudWxsPT09bj9udWxsOm5bZSsxXXx8bnVsbH19LHtrZXk6XCJjb21wdXRlVGFyZ2V0U3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy5jb21wdXRlUmVhY2hTZXQoZS5jb25maWdzLG4sITEpO2lmKG51bGw9PT1yKXJldHVybiB0aGlzLmFkZERGQUVkZ2UodCxlLG4sSmkuRVJST1IpLEppLkVSUk9SO3ZhciBvPW5ldyBXaShudWxsLHIpLGk9dGhpcy5nZXRVbmlxdWVBbHQocik7aWYodGhpcy5kZWJ1Zyl7dmFyIHU9SXUuZ2V0Q29uZmxpY3RpbmdBbHRTdWJzZXRzKHIpO2NvbnNvbGUubG9nKFwiU0xMIGFsdFN1YlNldHM9XCIrYih1KStcIiwgY29uZmlncz1cIityK1wiLCBwcmVkaWN0PVwiK2krXCIsIGFsbFN1YnNldHNDb25mbGljdD1cIitJdS5hbGxTdWJzZXRzQ29uZmxpY3QodSkrXCIsIGNvbmZsaWN0aW5nQWx0cz1cIit0aGlzLmdldENvbmZsaWN0aW5nQWx0cyhyKSl9cmV0dXJuIGkhPT1GZS5JTlZBTElEX0FMVF9OVU1CRVI/KG8uaXNBY2NlcHRTdGF0ZT0hMCxvLmNvbmZpZ3MudW5pcXVlQWx0PWksby5wcmVkaWN0aW9uPWkpOkl1Lmhhc1NMTENvbmZsaWN0VGVybWluYXRpbmdQcmVkaWN0aW9uKHRoaXMucHJlZGljdGlvbk1vZGUscikmJihvLmNvbmZpZ3MuY29uZmxpY3RpbmdBbHRzPXRoaXMuZ2V0Q29uZmxpY3RpbmdBbHRzKHIpLG8ucmVxdWlyZXNGdWxsQ29udGV4dD0hMCxvLmlzQWNjZXB0U3RhdGU9ITAsby5wcmVkaWN0aW9uPW8uY29uZmlncy5jb25mbGljdGluZ0FsdHMubWluVmFsdWUoKSksby5pc0FjY2VwdFN0YXRlJiZvLmNvbmZpZ3MuaGFzU2VtYW50aWNDb250ZXh0JiYodGhpcy5wcmVkaWNhdGVERkFTdGF0ZShvLHRoaXMuYXRuLmdldERlY2lzaW9uU3RhdGUodC5kZWNpc2lvbikpLG51bGwhPT1vLnByZWRpY2F0ZXMmJihvLnByZWRpY3Rpb249RmUuSU5WQUxJRF9BTFRfTlVNQkVSKSksdGhpcy5hZGRERkFFZGdlKHQsZSxuLG8pfX0se2tleTpcInByZWRpY2F0ZURGQVN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnRyYW5zaXRpb25zLmxlbmd0aCxyPXRoaXMuZ2V0Q29uZmxpY3RpbmdBbHRzT3JVbmlxdWVBbHQodC5jb25maWdzKSxvPXRoaXMuZ2V0UHJlZHNGb3JBbWJpZ0FsdHMocix0LmNvbmZpZ3Msbik7bnVsbCE9PW8/KHQucHJlZGljYXRlcz10aGlzLmdldFByZWRpY2F0ZVByZWRpY3Rpb25zKHIsbyksdC5wcmVkaWN0aW9uPUZlLklOVkFMSURfQUxUX05VTUJFUik6dC5wcmVkaWN0aW9uPXIubWluVmFsdWUoKX19LHtrZXk6XCJleGVjQVROV2l0aEZ1bGxDb250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixpLHUpeyh0aGlzLmRlYnVnfHx0aGlzLnRyYWNlX2F0bl9zaW0pJiZjb25zb2xlLmxvZyhcImV4ZWNBVE5XaXRoRnVsbENvbnRleHQgXCIrbik7dmFyIGMsYT0hMSxsPW47ci5zZWVrKGkpO2Zvcih2YXIgcz1yLkxBKDEpLGY9LTE7Oyl7aWYobnVsbD09PShjPXRoaXMuY29tcHV0ZVJlYWNoU2V0KGwscywhMCkpKXt2YXIgcD10aGlzLm5vVmlhYmxlQWx0KHIsdSxsLGkpO3Iuc2VlayhpKTt2YXIgeT10aGlzLmdldFN5blZhbGlkT3JTZW1JbnZhbGlkQWx0VGhhdEZpbmlzaGVkRGVjaXNpb25FbnRyeVJ1bGUobCx1KTtpZih5IT09RmUuSU5WQUxJRF9BTFRfTlVNQkVSKXJldHVybiB5O3Rocm93IHB9dmFyIGg9SXUuZ2V0Q29uZmxpY3RpbmdBbHRTdWJzZXRzKGMpO2lmKHRoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwiTEwgYWx0U3ViU2V0cz1cIitoK1wiLCBwcmVkaWN0PVwiK0l1LmdldFVuaXF1ZUFsdChoKStcIiwgcmVzb2x2ZXNUb0p1c3RPbmVWaWFibGVBbHQ9XCIrSXUucmVzb2x2ZXNUb0p1c3RPbmVWaWFibGVBbHQoaCkpLGMudW5pcXVlQWx0PXRoaXMuZ2V0VW5pcXVlQWx0KGMpLGMudW5pcXVlQWx0IT09RmUuSU5WQUxJRF9BTFRfTlVNQkVSKXtmPWMudW5pcXVlQWx0O2JyZWFrfWlmKHRoaXMucHJlZGljdGlvbk1vZGUhPT1JdS5MTF9FWEFDVF9BTUJJR19ERVRFQ1RJT04pe2lmKChmPUl1LnJlc29sdmVzVG9KdXN0T25lVmlhYmxlQWx0KGgpKSE9PUZlLklOVkFMSURfQUxUX05VTUJFUilicmVha31lbHNlIGlmKEl1LmFsbFN1YnNldHNDb25mbGljdChoKSYmSXUuYWxsU3Vic2V0c0VxdWFsKGgpKXthPSEwLGY9SXUuZ2V0U2luZ2xlVmlhYmxlQWx0KGgpO2JyZWFrfWw9YyxzIT09by5FT0YmJihyLmNvbnN1bWUoKSxzPXIuTEEoMSkpfXJldHVybiBjLnVuaXF1ZUFsdCE9PUZlLklOVkFMSURfQUxUX05VTUJFUj8odGhpcy5yZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkodCxmLGMsaSxyLmluZGV4KSxmKToodGhpcy5yZXBvcnRBbWJpZ3VpdHkodCxlLGksci5pbmRleCxhLG51bGwsYyksZil9fSx7a2V5OlwiY29tcHV0ZVJlYWNoU2V0XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3RoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwiaW4gY29tcHV0ZVJlYWNoU2V0LCBzdGFydGluZyBjbG9zdXJlOiBcIit0KSxudWxsPT09dGhpcy5tZXJnZUNhY2hlJiYodGhpcy5tZXJnZUNhY2hlPW5ldyBWdSk7Zm9yKHZhciByPW5ldyBLaShuKSxpPW51bGwsdT0wO3U8dC5pdGVtcy5sZW5ndGg7dSsrKXt2YXIgYz10Lml0ZW1zW3VdO2lmKHRoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwidGVzdGluZyBcIit0aGlzLmdldFRva2VuTmFtZShlKStcIiBhdCBcIitjKSxjLnN0YXRlIGluc3RhbmNlb2YgJCkobnx8ZT09PW8uRU9GKSYmKG51bGw9PT1pJiYoaT1bXSksaS5wdXNoKGMpLHRoaXMuZGVidWdfYWRkJiZjb25zb2xlLmxvZyhcImFkZGVkIFwiK2MrXCIgdG8gc2tpcHBlZFN0b3BTdGF0ZXNcIikpO2Vsc2UgZm9yKHZhciBhPTA7YTxjLnN0YXRlLnRyYW5zaXRpb25zLmxlbmd0aDthKyspe3ZhciBsPWMuc3RhdGUudHJhbnNpdGlvbnNbYV0scz10aGlzLmdldFJlYWNoYWJsZVRhcmdldChsLGUpO2lmKG51bGwhPT1zKXt2YXIgZj1uZXcgTCh7c3RhdGU6c30sYyk7ci5hZGQoZix0aGlzLm1lcmdlQ2FjaGUpLHRoaXMuZGVidWdfYWRkJiZjb25zb2xlLmxvZyhcImFkZGVkIFwiK2YrXCIgdG8gaW50ZXJtZWRpYXRlXCIpfX19dmFyIHA9bnVsbDtpZihudWxsPT09aSYmZSE9PW8uRU9GJiYoMT09PXIuaXRlbXMubGVuZ3RofHx0aGlzLmdldFVuaXF1ZUFsdChyKSE9PUZlLklOVkFMSURfQUxUX05VTUJFUikmJihwPXIpLG51bGw9PT1wKXtwPW5ldyBLaShuKTtmb3IodmFyIHk9bmV3IGcsaD1lPT09by5FT0YsYj0wO2I8ci5pdGVtcy5sZW5ndGg7YisrKXRoaXMuY2xvc3VyZShyLml0ZW1zW2JdLHAseSwhMSxuLGgpfWlmKGU9PT1vLkVPRiYmKHA9dGhpcy5yZW1vdmVBbGxDb25maWdzTm90SW5SdWxlU3RvcFN0YXRlKHAscD09PXIpKSwhKG51bGw9PT1pfHxuJiZJdS5oYXNDb25maWdJblJ1bGVTdG9wU3RhdGUocCkpKWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKXAuYWRkKGlbdl0sdGhpcy5tZXJnZUNhY2hlKTtyZXR1cm4gdGhpcy50cmFjZV9hdG5fc2ltJiZjb25zb2xlLmxvZyhcImNvbXB1dGVSZWFjaFNldCBcIit0K1wiIC0+IFwiK3ApLDA9PT1wLml0ZW1zLmxlbmd0aD9udWxsOnB9fSx7a2V5OlwicmVtb3ZlQWxsQ29uZmlnc05vdEluUnVsZVN0b3BTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoSXUuYWxsQ29uZmlnc0luUnVsZVN0b3BTdGF0ZXModCkpcmV0dXJuIHQ7Zm9yKHZhciBuPW5ldyBLaSh0LmZ1bGxDdHgpLHI9MDtyPHQuaXRlbXMubGVuZ3RoO3IrKyl7dmFyIGk9dC5pdGVtc1tyXTtpZihpLnN0YXRlIGluc3RhbmNlb2YgJCluLmFkZChpLHRoaXMubWVyZ2VDYWNoZSk7ZWxzZSBpZihlJiZpLnN0YXRlLmVwc2lsb25Pbmx5VHJhbnNpdGlvbnMmJnRoaXMuYXRuLm5leHRUb2tlbnMoaS5zdGF0ZSkuY29udGFpbnMoby5FUFNJTE9OKSl7dmFyIHU9dGhpcy5hdG4ucnVsZVRvU3RvcFN0YXRlW2kuc3RhdGUucnVsZUluZGV4XTtuLmFkZChuZXcgTCh7c3RhdGU6dX0saSksdGhpcy5tZXJnZUNhY2hlKX19cmV0dXJuIG59fSx7a2V5OlwiY29tcHV0ZVN0YXJ0U3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dmFyIHI9RWUodGhpcy5hdG4sZSksbz1uZXcgS2kobik7dGhpcy50cmFjZV9hdG5fc2ltJiZjb25zb2xlLmxvZyhcImNvbXB1dGVTdGFydFN0YXRlIGZyb20gQVROIHN0YXRlIFwiK3QrXCIgaW5pdGlhbENvbnRleHQ9XCIrci50b1N0cmluZyh0aGlzLnBhcnNlcikpO2Zvcih2YXIgaT0wO2k8dC50cmFuc2l0aW9ucy5sZW5ndGg7aSsrKXt2YXIgdT10LnRyYW5zaXRpb25zW2ldLnRhcmdldCxjPW5ldyBMKHtzdGF0ZTp1LGFsdDppKzEsY29udGV4dDpyfSxudWxsKSxhPW5ldyBnO3RoaXMuY2xvc3VyZShjLG8sYSwhMCxuLCExKX1yZXR1cm4gb319LHtrZXk6XCJhcHBseVByZWNlZGVuY2VGaWx0ZXJcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGUsbj1bXSxyPW5ldyBLaSh0LmZ1bGxDdHgpLG89MDtvPHQuaXRlbXMubGVuZ3RoO28rKylpZigxPT09KGU9dC5pdGVtc1tvXSkuYWx0KXt2YXIgaT1lLnNlbWFudGljQ29udGV4dC5ldmFsUHJlY2VkZW5jZSh0aGlzLnBhcnNlcix0aGlzLl9vdXRlckNvbnRleHQpO251bGwhPT1pJiYobltlLnN0YXRlLnN0YXRlTnVtYmVyXT1lLmNvbnRleHQsaSE9PWUuc2VtYW50aWNDb250ZXh0P3IuYWRkKG5ldyBMKHtzZW1hbnRpY0NvbnRleHQ6aX0sZSksdGhpcy5tZXJnZUNhY2hlKTpyLmFkZChlLHRoaXMubWVyZ2VDYWNoZSkpfWZvcih2YXIgdT0wO3U8dC5pdGVtcy5sZW5ndGg7dSsrKWlmKDEhPT0oZT10Lml0ZW1zW3VdKS5hbHQpe2lmKCFlLnByZWNlZGVuY2VGaWx0ZXJTdXBwcmVzc2VkKXt2YXIgYz1uW2Uuc3RhdGUuc3RhdGVOdW1iZXJdfHxudWxsO2lmKG51bGwhPT1jJiZjLmVxdWFscyhlLmNvbnRleHQpKWNvbnRpbnVlfXIuYWRkKGUsdGhpcy5tZXJnZUNhY2hlKX1yZXR1cm4gcn19LHtrZXk6XCJnZXRSZWFjaGFibGVUYXJnZXRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0Lm1hdGNoZXMoZSwwLHRoaXMuYXRuLm1heFRva2VuVHlwZSk/dC50YXJnZXQ6bnVsbH19LHtrZXk6XCJnZXRQcmVkc0ZvckFtYmlnQWx0c1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9W10sbz0wO288ZS5pdGVtcy5sZW5ndGg7bysrKXt2YXIgaT1lLml0ZW1zW29dO3QuaGFzKGkuYWx0KSYmKHJbaS5hbHRdPWoub3JDb250ZXh0KHJbaS5hbHRdfHxudWxsLGkuc2VtYW50aWNDb250ZXh0KSl9Zm9yKHZhciB1PTAsYz0xO2M8bisxO2MrKyl7dmFyIGE9cltjXXx8bnVsbDtudWxsPT09YT9yW2NdPWouTk9ORTphIT09ai5OT05FJiYodSs9MSl9cmV0dXJuIDA9PT11JiYocj1udWxsKSx0aGlzLmRlYnVnJiZjb25zb2xlLmxvZyhcImdldFByZWRzRm9yQW1iaWdBbHRzIHJlc3VsdCBcIitiKHIpKSxyfX0se2tleTpcImdldFByZWRpY2F0ZVByZWRpY3Rpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj0hMSxvPTE7bzxlLmxlbmd0aDtvKyspe3ZhciBpPWVbb107bnVsbCE9PXQmJnQuaGFzKG8pJiZuLnB1c2gobmV3IHh1KGksbykpLGkhPT1qLk5PTkUmJihyPSEwKX1yZXR1cm4gcj9uOm51bGx9fSx7a2V5OlwiZ2V0U3luVmFsaWRPclNlbUludmFsaWRBbHRUaGF0RmluaXNoZWREZWNpc2lvbkVudHJ5UnVsZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5zcGxpdEFjY29yZGluZ1RvU2VtYW50aWNWYWxpZGl0eSh0LGUpLHI9blswXSxvPW5bMV0saT10aGlzLmdldEFsdFRoYXRGaW5pc2hlZERlY2lzaW9uRW50cnlSdWxlKHIpO3JldHVybiBpIT09RmUuSU5WQUxJRF9BTFRfTlVNQkVSfHxvLml0ZW1zLmxlbmd0aD4wJiYoaT10aGlzLmdldEFsdFRoYXRGaW5pc2hlZERlY2lzaW9uRW50cnlSdWxlKG8pKSE9PUZlLklOVkFMSURfQUxUX05VTUJFUj9pOkZlLklOVkFMSURfQUxUX05VTUJFUn19LHtrZXk6XCJnZXRBbHRUaGF0RmluaXNoZWREZWNpc2lvbkVudHJ5UnVsZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lml0ZW1zLmxlbmd0aDtuKyspe3ZhciByPXQuaXRlbXNbbl07KHIucmVhY2hlc0ludG9PdXRlckNvbnRleHQ+MHx8ci5zdGF0ZSBpbnN0YW5jZW9mICQmJnIuY29udGV4dC5oYXNFbXB0eVBhdGgoKSkmJmUuaW5kZXhPZihyLmFsdCk8MCYmZS5wdXNoKHIuYWx0KX1yZXR1cm4gMD09PWUubGVuZ3RoP0ZlLklOVkFMSURfQUxUX05VTUJFUjpNYXRoLm1pbi5hcHBseShudWxsLGUpfX0se2tleTpcInNwbGl0QWNjb3JkaW5nVG9TZW1hbnRpY1ZhbGlkaXR5XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEtpKHQuZnVsbEN0eCkscj1uZXcgS2kodC5mdWxsQ3R4KSxvPTA7bzx0Lml0ZW1zLmxlbmd0aDtvKyspe3ZhciBpPXQuaXRlbXNbb107aS5zZW1hbnRpY0NvbnRleHQhPT1qLk5PTkU/aS5zZW1hbnRpY0NvbnRleHQuZXZhbHVhdGUodGhpcy5wYXJzZXIsZSk/bi5hZGQoaSk6ci5hZGQoaSk6bi5hZGQoaSl9cmV0dXJuW24scl19fSx7a2V5OlwiZXZhbFNlbWFudGljQ29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bmV3IENlLG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGk9dFtvXTtpZihpLnByZWQhPT1qLk5PTkUpe3ZhciB1PWkucHJlZC5ldmFsdWF0ZSh0aGlzLnBhcnNlcixlKTtpZigodGhpcy5kZWJ1Z3x8dGhpcy5kZmFfZGVidWcpJiZjb25zb2xlLmxvZyhcImV2YWwgcHJlZCBcIitpK1wiPVwiK3UpLHUmJigodGhpcy5kZWJ1Z3x8dGhpcy5kZmFfZGVidWcpJiZjb25zb2xlLmxvZyhcIlBSRURJQ1QgXCIraS5hbHQpLHIuYWRkKGkuYWx0KSwhbikpYnJlYWt9ZWxzZSBpZihyLmFkZChpLmFsdCksIW4pYnJlYWt9cmV0dXJuIHJ9fSx7a2V5OlwiY2xvc3VyZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyxpKXt0aGlzLmNsb3N1cmVDaGVja2luZ1N0b3BTdGF0ZSh0LGUsbixyLG8sMCxpKX19LHtrZXk6XCJjbG9zdXJlQ2hlY2tpbmdTdG9wU3RhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLG8saSx1KXtpZigodGhpcy50cmFjZV9hdG5fc2ltfHx0aGlzLmRlYnVnX2Nsb3N1cmUpJiZjb25zb2xlLmxvZyhcImNsb3N1cmUoXCIrdC50b1N0cmluZyh0aGlzLnBhcnNlciwhMCkrXCIpXCIpLHQuc3RhdGUgaW5zdGFuY2VvZiAkKXtpZighdC5jb250ZXh0LmlzRW1wdHkoKSl7Zm9yKHZhciBjPTA7Yzx0LmNvbnRleHQubGVuZ3RoO2MrKylpZih0LmNvbnRleHQuZ2V0UmV0dXJuU3RhdGUoYykhPT1vZS5FTVBUWV9SRVRVUk5fU1RBVEUpe3ZhciBhPXRoaXMuYXRuLnN0YXRlc1t0LmNvbnRleHQuZ2V0UmV0dXJuU3RhdGUoYyldLGw9dC5jb250ZXh0LmdldFBhcmVudChjKSxzPXtzdGF0ZTphLGFsdDp0LmFsdCxjb250ZXh0Omwsc2VtYW50aWNDb250ZXh0OnQuc2VtYW50aWNDb250ZXh0fSxmPW5ldyBMKHMsbnVsbCk7Zi5yZWFjaGVzSW50b091dGVyQ29udGV4dD10LnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0LHRoaXMuY2xvc3VyZUNoZWNraW5nU3RvcFN0YXRlKGYsZSxuLHIsbyxpLTEsdSl9ZWxzZXtpZihvKXtlLmFkZChuZXcgTCh7c3RhdGU6dC5zdGF0ZSxjb250ZXh0Om9lLkVNUFRZfSx0KSx0aGlzLm1lcmdlQ2FjaGUpO2NvbnRpbnVlfXRoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwiRkFMTElORyBvZmYgcnVsZSBcIit0aGlzLmdldFJ1bGVOYW1lKHQuc3RhdGUucnVsZUluZGV4KSksdGhpcy5jbG9zdXJlXyh0LGUsbixyLG8saSx1KX1yZXR1cm59aWYobylyZXR1cm4gdm9pZCBlLmFkZCh0LHRoaXMubWVyZ2VDYWNoZSk7dGhpcy5kZWJ1ZyYmY29uc29sZS5sb2coXCJGQUxMSU5HIG9mZiBydWxlIFwiK3RoaXMuZ2V0UnVsZU5hbWUodC5zdGF0ZS5ydWxlSW5kZXgpKX10aGlzLmNsb3N1cmVfKHQsZSxuLHIsbyxpLHUpfX0se2tleTpcImNsb3N1cmVfXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixvLGksdSl7dmFyIGM9dC5zdGF0ZTtjLmVwc2lsb25Pbmx5VHJhbnNpdGlvbnN8fGUuYWRkKHQsdGhpcy5tZXJnZUNhY2hlKTtmb3IodmFyIGE9MDthPGMudHJhbnNpdGlvbnMubGVuZ3RoO2ErKylpZigwIT09YXx8IXRoaXMuY2FuRHJvcExvb3BFbnRyeUVkZ2VJbkxlZnRSZWN1cnNpdmVSdWxlKHQpKXt2YXIgbD1jLnRyYW5zaXRpb25zW2FdLHM9ciYmIShsIGluc3RhbmNlb2YgT3IpLGY9dGhpcy5nZXRFcHNpbG9uVGFyZ2V0KHQsbCxzLDA9PT1pLG8sdSk7aWYobnVsbCE9PWYpe3ZhciBwPWk7aWYodC5zdGF0ZSBpbnN0YW5jZW9mICQpe2lmKG51bGwhPT10aGlzLl9kZmEmJnRoaXMuX2RmYS5wcmVjZWRlbmNlRGZhJiZsLm91dGVybW9zdFByZWNlZGVuY2VSZXR1cm49PT10aGlzLl9kZmEuYXRuU3RhcnRTdGF0ZS5ydWxlSW5kZXgmJihmLnByZWNlZGVuY2VGaWx0ZXJTdXBwcmVzc2VkPSEwKSxmLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0Kz0xLG4uYWRkKGYpIT09Ziljb250aW51ZTtlLmRpcHNJbnRvT3V0ZXJDb250ZXh0PSEwLHAtPTEsdGhpcy5kZWJ1ZyYmY29uc29sZS5sb2coXCJkaXBzIGludG8gb3V0ZXIgY3R4OiBcIitmKX1lbHNle2lmKCFsLmlzRXBzaWxvbiYmbi5hZGQoZikhPT1mKWNvbnRpbnVlO2wgaW5zdGFuY2VvZiBpdCYmcD49MCYmKHArPTEpfXRoaXMuY2xvc3VyZUNoZWNraW5nU3RvcFN0YXRlKGYsZSxuLHMsbyxwLHUpfX19fSx7a2V5OlwiY2FuRHJvcExvb3BFbnRyeUVkZ2VJbkxlZnRSZWN1cnNpdmVSdWxlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZTtpZihlLnN0YXRlVHlwZSE9PUguU1RBUl9MT09QX0VOVFJZKXJldHVybiExO2lmKGUuc3RhdGVUeXBlIT09SC5TVEFSX0xPT1BfRU5UUll8fCFlLmlzUHJlY2VkZW5jZURlY2lzaW9ufHx0LmNvbnRleHQuaXNFbXB0eSgpfHx0LmNvbnRleHQuaGFzRW1wdHlQYXRoKCkpcmV0dXJuITE7Zm9yKHZhciBuPXQuY29udGV4dC5sZW5ndGgscj0wO3I8bjtyKyspaWYodGhpcy5hdG4uc3RhdGVzW3QuY29udGV4dC5nZXRSZXR1cm5TdGF0ZShyKV0ucnVsZUluZGV4IT09ZS5ydWxlSW5kZXgpcmV0dXJuITE7Zm9yKHZhciBvPWUudHJhbnNpdGlvbnNbMF0udGFyZ2V0LmVuZFN0YXRlLnN0YXRlTnVtYmVyLGk9dGhpcy5hdG4uc3RhdGVzW29dLHU9MDt1PG47dSsrKXt2YXIgYz10LmNvbnRleHQuZ2V0UmV0dXJuU3RhdGUodSksYT10aGlzLmF0bi5zdGF0ZXNbY107aWYoMSE9PWEudHJhbnNpdGlvbnMubGVuZ3RofHwhYS50cmFuc2l0aW9uc1swXS5pc0Vwc2lsb24pcmV0dXJuITE7dmFyIGw9YS50cmFuc2l0aW9uc1swXS50YXJnZXQ7aWYoIShhLnN0YXRlVHlwZT09PUguQkxPQ0tfRU5EJiZsPT09ZXx8YT09PWl8fGw9PT1pfHxsLnN0YXRlVHlwZT09PUguQkxPQ0tfRU5EJiYxPT09bC50cmFuc2l0aW9ucy5sZW5ndGgmJmwudHJhbnNpdGlvbnNbMF0uaXNFcHNpbG9uJiZsLnRyYW5zaXRpb25zWzBdLnRhcmdldD09PWUpKXJldHVybiExfXJldHVybiEwfX0se2tleTpcImdldFJ1bGVOYW1lXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPT10aGlzLnBhcnNlciYmdD49MD90aGlzLnBhcnNlci5ydWxlTmFtZXNbdF06XCI8cnVsZSBcIit0K1wiPlwifX0se2tleTpcImdldEVwc2lsb25UYXJnZXRcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLGksdSl7c3dpdGNoKGUuc2VyaWFsaXphdGlvblR5cGUpe2Nhc2UgdHQuUlVMRTpyZXR1cm4gdGhpcy5ydWxlVHJhbnNpdGlvbih0LGUpO2Nhc2UgdHQuUFJFQ0VERU5DRTpyZXR1cm4gdGhpcy5wcmVjZWRlbmNlVHJhbnNpdGlvbih0LGUsbixyLGkpO2Nhc2UgdHQuUFJFRElDQVRFOnJldHVybiB0aGlzLnByZWRUcmFuc2l0aW9uKHQsZSxuLHIsaSk7Y2FzZSB0dC5BQ1RJT046cmV0dXJuIHRoaXMuYWN0aW9uVHJhbnNpdGlvbih0LGUpO2Nhc2UgdHQuRVBTSUxPTjpyZXR1cm4gbmV3IEwoe3N0YXRlOmUudGFyZ2V0fSx0KTtjYXNlIHR0LkFUT006Y2FzZSB0dC5SQU5HRTpjYXNlIHR0LlNFVDpyZXR1cm4gdSYmZS5tYXRjaGVzKG8uRU9GLDAsMSk/bmV3IEwoe3N0YXRlOmUudGFyZ2V0fSx0KTpudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fX0se2tleTpcImFjdGlvblRyYW5zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKHRoaXMuZGVidWcpe3ZhciBuPS0xPT09ZS5hY3Rpb25JbmRleD82NTUzNTplLmFjdGlvbkluZGV4O2NvbnNvbGUubG9nKFwiQUNUSU9OIGVkZ2UgXCIrZS5ydWxlSW5kZXgrXCI6XCIrbil9cmV0dXJuIG5ldyBMKHtzdGF0ZTplLnRhcmdldH0sdCl9fSx7a2V5OlwicHJlY2VkZW5jZVRyYW5zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLG8pe3RoaXMuZGVidWcmJihjb25zb2xlLmxvZyhcIlBSRUQgKGNvbGxlY3RQcmVkaWNhdGVzPVwiK24rXCIpIFwiK2UucHJlY2VkZW5jZStcIj49X3AsIGN0eCBkZXBlbmRlbnQ9dHJ1ZVwiKSxudWxsIT09dGhpcy5wYXJzZXImJmNvbnNvbGUubG9nKFwiY29udGV4dCBzdXJyb3VuZGluZyBwcmVkIGlzIFwiK2IodGhpcy5wYXJzZXIuZ2V0UnVsZUludm9jYXRpb25TdGFjaygpKSkpO3ZhciBpPW51bGw7aWYobiYmcilpZihvKXt2YXIgdT10aGlzLl9pbnB1dC5pbmRleDt0aGlzLl9pbnB1dC5zZWVrKHRoaXMuX3N0YXJ0SW5kZXgpO3ZhciBjPWUuZ2V0UHJlZGljYXRlKCkuZXZhbHVhdGUodGhpcy5wYXJzZXIsdGhpcy5fb3V0ZXJDb250ZXh0KTt0aGlzLl9pbnB1dC5zZWVrKHUpLGMmJihpPW5ldyBMKHtzdGF0ZTplLnRhcmdldH0sdCkpfWVsc2V7dmFyIGE9ai5hbmRDb250ZXh0KHQuc2VtYW50aWNDb250ZXh0LGUuZ2V0UHJlZGljYXRlKCkpO2k9bmV3IEwoe3N0YXRlOmUudGFyZ2V0LHNlbWFudGljQ29udGV4dDphfSx0KX1lbHNlIGk9bmV3IEwoe3N0YXRlOmUudGFyZ2V0fSx0KTtyZXR1cm4gdGhpcy5kZWJ1ZyYmY29uc29sZS5sb2coXCJjb25maWcgZnJvbSBwcmVkIHRyYW5zaXRpb249XCIraSksaX19LHtrZXk6XCJwcmVkVHJhbnNpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy5kZWJ1ZyYmKGNvbnNvbGUubG9nKFwiUFJFRCAoY29sbGVjdFByZWRpY2F0ZXM9XCIrbitcIikgXCIrZS5ydWxlSW5kZXgrXCI6XCIrZS5wcmVkSW5kZXgrXCIsIGN0eCBkZXBlbmRlbnQ9XCIrZS5pc0N0eERlcGVuZGVudCksbnVsbCE9PXRoaXMucGFyc2VyJiZjb25zb2xlLmxvZyhcImNvbnRleHQgc3Vycm91bmRpbmcgcHJlZCBpcyBcIitiKHRoaXMucGFyc2VyLmdldFJ1bGVJbnZvY2F0aW9uU3RhY2soKSkpKTt2YXIgaT1udWxsO2lmKG4mJihlLmlzQ3R4RGVwZW5kZW50JiZyfHwhZS5pc0N0eERlcGVuZGVudCkpaWYobyl7dmFyIHU9dGhpcy5faW5wdXQuaW5kZXg7dGhpcy5faW5wdXQuc2Vlayh0aGlzLl9zdGFydEluZGV4KTt2YXIgYz1lLmdldFByZWRpY2F0ZSgpLmV2YWx1YXRlKHRoaXMucGFyc2VyLHRoaXMuX291dGVyQ29udGV4dCk7dGhpcy5faW5wdXQuc2Vlayh1KSxjJiYoaT1uZXcgTCh7c3RhdGU6ZS50YXJnZXR9LHQpKX1lbHNle3ZhciBhPWouYW5kQ29udGV4dCh0LnNlbWFudGljQ29udGV4dCxlLmdldFByZWRpY2F0ZSgpKTtpPW5ldyBMKHtzdGF0ZTplLnRhcmdldCxzZW1hbnRpY0NvbnRleHQ6YX0sdCl9ZWxzZSBpPW5ldyBMKHtzdGF0ZTplLnRhcmdldH0sdCk7cmV0dXJuIHRoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwiY29uZmlnIGZyb20gcHJlZCB0cmFuc2l0aW9uPVwiK2kpLGl9fSx7a2V5OlwicnVsZVRyYW5zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwiQ0FMTCBydWxlIFwiK3RoaXMuZ2V0UnVsZU5hbWUoZS50YXJnZXQucnVsZUluZGV4KStcIiwgY3R4PVwiK3QuY29udGV4dCk7dmFyIG49ZS5mb2xsb3dTdGF0ZSxyPXZlLmNyZWF0ZSh0LmNvbnRleHQsbi5zdGF0ZU51bWJlcik7cmV0dXJuIG5ldyBMKHtzdGF0ZTplLnRhcmdldCxjb250ZXh0OnJ9LHQpfX0se2tleTpcImdldENvbmZsaWN0aW5nQWx0c1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPUl1LmdldENvbmZsaWN0aW5nQWx0U3Vic2V0cyh0KTtyZXR1cm4gSXUuZ2V0QWx0cyhlKX19LHtrZXk6XCJnZXRDb25mbGljdGluZ0FsdHNPclVuaXF1ZUFsdFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPW51bGw7cmV0dXJuIHQudW5pcXVlQWx0IT09RmUuSU5WQUxJRF9BTFRfTlVNQkVSPyhlPW5ldyBDZSkuYWRkKHQudW5pcXVlQWx0KTplPXQuY29uZmxpY3RpbmdBbHRzLGV9fSx7a2V5OlwiZ2V0VG9rZW5OYW1lXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodD09PW8uRU9GKXJldHVyblwiRU9GXCI7aWYobnVsbCE9PXRoaXMucGFyc2VyJiZudWxsIT09dGhpcy5wYXJzZXIubGl0ZXJhbE5hbWVzKXtpZighKHQ+PXRoaXMucGFyc2VyLmxpdGVyYWxOYW1lcy5sZW5ndGgmJnQ+PXRoaXMucGFyc2VyLnN5bWJvbGljTmFtZXMubGVuZ3RoKSlyZXR1cm4odGhpcy5wYXJzZXIubGl0ZXJhbE5hbWVzW3RdfHx0aGlzLnBhcnNlci5zeW1ib2xpY05hbWVzW3RdKStcIjxcIit0K1wiPlwiO2NvbnNvbGUubG9nKHQrXCIgdHR5cGUgb3V0IG9mIHJhbmdlOiBcIit0aGlzLnBhcnNlci5saXRlcmFsTmFtZXMpLGNvbnNvbGUubG9nKFwiXCIrdGhpcy5wYXJzZXIuZ2V0SW5wdXRTdHJlYW0oKS5nZXRUb2tlbnMoKSl9cmV0dXJuXCJcIit0fX0se2tleTpcImdldExvb2thaGVhZE5hbWVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRUb2tlbk5hbWUodC5MQSgxKSl9fSx7a2V5OlwiZHVtcERlYWRFbmRDb25maWdzXCIsdmFsdWU6ZnVuY3Rpb24odCl7Y29uc29sZS5sb2coXCJkZWFkIGVuZCBjb25maWdzOiBcIik7Zm9yKHZhciBlPXQuZ2V0RGVhZEVuZENvbmZpZ3MoKSxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl0sbz1cIm5vIGVkZ2VzXCI7aWYoci5zdGF0ZS50cmFuc2l0aW9ucy5sZW5ndGg+MCl7dmFyIGk9ci5zdGF0ZS50cmFuc2l0aW9uc1swXTtpIGluc3RhbmNlb2YgZnI/bz1cIkF0b20gXCIrdGhpcy5nZXRUb2tlbk5hbWUoaS5sYWJlbCk6aSBpbnN0YW5jZW9mIHN0JiYobz0oaSBpbnN0YW5jZW9mIHZ0P1wiflwiOlwiXCIpK1wiU2V0IFwiK2kuc2V0KX1jb25zb2xlLmVycm9yKHIudG9TdHJpbmcodGhpcy5wYXJzZXIsITApK1wiOlwiK28pfX19LHtrZXk6XCJub1ZpYWJsZUFsdFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiBuZXcgQnUodGhpcy5wYXJzZXIsdCx0LmdldChyKSx0LkxUKDEpLG4sZSl9fSx7a2V5OlwiZ2V0VW5pcXVlQWx0XCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPUZlLklOVkFMSURfQUxUX05VTUJFUixuPTA7bjx0Lml0ZW1zLmxlbmd0aDtuKyspe3ZhciByPXQuaXRlbXNbbl07aWYoZT09PUZlLklOVkFMSURfQUxUX05VTUJFUillPXIuYWx0O2Vsc2UgaWYoci5hbHQhPT1lKXJldHVybiBGZS5JTlZBTElEX0FMVF9OVU1CRVJ9cmV0dXJuIGV9fSx7a2V5OlwiYWRkREZBRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIpe2lmKHRoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwiRURHRSBcIitlK1wiIC0+IFwiK3IrXCIgdXBvbiBcIit0aGlzLmdldFRva2VuTmFtZShuKSksbnVsbD09PXIpcmV0dXJuIG51bGw7aWYocj10aGlzLmFkZERGQVN0YXRlKHQsciksbnVsbD09PWV8fG48LTF8fG4+dGhpcy5hdG4ubWF4VG9rZW5UeXBlKXJldHVybiByO2lmKG51bGw9PT1lLmVkZ2VzJiYoZS5lZGdlcz1bXSksZS5lZGdlc1tuKzFdPXIsdGhpcy5kZWJ1Zyl7dmFyIG89bnVsbD09PXRoaXMucGFyc2VyP251bGw6dGhpcy5wYXJzZXIubGl0ZXJhbE5hbWVzLGk9bnVsbD09PXRoaXMucGFyc2VyP251bGw6dGhpcy5wYXJzZXIuc3ltYm9saWNOYW1lcztjb25zb2xlLmxvZyhcIkRGQT1cXG5cIit0LnRvU3RyaW5nKG8saSkpfXJldHVybiByfX0se2tleTpcImFkZERGQVN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihlPT09SmkuRVJST1IpcmV0dXJuIGU7dmFyIG49dC5zdGF0ZXMuZ2V0KGUpO3JldHVybiBudWxsIT09bj8odGhpcy50cmFjZV9hdG5fc2ltJiZjb25zb2xlLmxvZyhcImFkZERGQVN0YXRlIFwiK2UrXCIgZXhpc3RzXCIpLG4pOihlLnN0YXRlTnVtYmVyPXQuc3RhdGVzLmxlbmd0aCxlLmNvbmZpZ3MucmVhZE9ubHl8fChlLmNvbmZpZ3Mub3B0aW1pemVDb25maWdzKHRoaXMpLGUuY29uZmlncy5zZXRSZWFkb25seSghMCkpLHRoaXMudHJhY2VfYXRuX3NpbSYmY29uc29sZS5sb2coXCJhZGRERkFTdGF0ZSBuZXcgXCIrZSksdC5zdGF0ZXMuYWRkKGUpLHRoaXMuZGVidWcmJmNvbnNvbGUubG9nKFwiYWRkaW5nIG5ldyBERkEgc3RhdGU6IFwiK2UpLGUpfX0se2tleTpcInJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodGhpcy5kZWJ1Z3x8dGhpcy5yZXRyeV9kZWJ1Zyl7dmFyIGk9bmV3IEIocixvKzEpO2NvbnNvbGUubG9nKFwicmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0IGRlY2lzaW9uPVwiK3QuZGVjaXNpb24rXCI6XCIrbitcIiwgaW5wdXQ9XCIrdGhpcy5wYXJzZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KGkpKX1udWxsIT09dGhpcy5wYXJzZXImJnRoaXMucGFyc2VyLmdldEVycm9yTGlzdGVuZXJEaXNwYXRjaCgpLnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dCh0aGlzLnBhcnNlcix0LHIsbyxlLG4pfX0se2tleTpcInJlcG9ydENvbnRleHRTZW5zaXRpdml0eVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodGhpcy5kZWJ1Z3x8dGhpcy5yZXRyeV9kZWJ1Zyl7dmFyIGk9bmV3IEIocixvKzEpO2NvbnNvbGUubG9nKFwicmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5IGRlY2lzaW9uPVwiK3QuZGVjaXNpb24rXCI6XCIrbitcIiwgaW5wdXQ9XCIrdGhpcy5wYXJzZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KGkpKX1udWxsIT09dGhpcy5wYXJzZXImJnRoaXMucGFyc2VyLmdldEVycm9yTGlzdGVuZXJEaXNwYXRjaCgpLnJlcG9ydENvbnRleHRTZW5zaXRpdml0eSh0aGlzLnBhcnNlcix0LHIsbyxlLG4pfX0se2tleTpcInJlcG9ydEFtYmlndWl0eVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyxpLHUpe2lmKHRoaXMuZGVidWd8fHRoaXMucmV0cnlfZGVidWcpe3ZhciBjPW5ldyBCKG4scisxKTtjb25zb2xlLmxvZyhcInJlcG9ydEFtYmlndWl0eSBcIitpK1wiOlwiK3UrXCIsIGlucHV0PVwiK3RoaXMucGFyc2VyLmdldFRva2VuU3RyZWFtKCkuZ2V0VGV4dChjKSl9bnVsbCE9PXRoaXMucGFyc2VyJiZ0aGlzLnBhcnNlci5nZXRFcnJvckxpc3RlbmVyRGlzcGF0Y2goKS5yZXBvcnRBbWJpZ3VpdHkodGhpcy5wYXJzZXIsdCxuLHIsbyxpLHUpfX1dLG4mJnF1KGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksY30oSmkpO2Z1bmN0aW9uIEd1KHQpe3JldHVybiBHdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxHdSh0KX1mdW5jdGlvbiBXdSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09R3UodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09R3UocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09R3Uobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfXZhciBYdT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuY2FjaGU9bmV3IFRlfXZhciBlLG47cmV0dXJuIGU9dCwobj1be2tleTpcImFkZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHQ9PT1vZS5FTVBUWSlyZXR1cm4gb2UuRU1QVFk7dmFyIGU9dGhpcy5jYWNoZS5nZXQodCl8fG51bGw7cmV0dXJuIG51bGwhPT1lP2U6KHRoaXMuY2FjaGUuc2V0KHQsdCksdCl9fSx7a2V5OlwiZ2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY2FjaGUuZ2V0KHQpfHxudWxsfX0se2tleTpcImxlbmd0aFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNhY2hlLmxlbmd0aH19XSkmJld1KGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH0oKTtjb25zdCAkdT17QVROOkZlLEFUTkRlc2VyaWFsaXplcjpIbyxMZXhlckFUTlNpbXVsYXRvcjpFdSxQYXJzZXJBVE5TaW11bGF0b3I6WXUsUHJlZGljdGlvbk1vZGU6SXUsUHJlZGljdGlvbkNvbnRleHRDYWNoZTpYdX07ZnVuY3Rpb24gSnUodCl7cmV0dXJuIEp1PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEp1KHQpfWZ1bmN0aW9uIFF1KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1KdSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1KdShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1KdShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIFp1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLG4scil7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSx0aGlzLmRmYT1lLHRoaXMubGl0ZXJhbE5hbWVzPW58fFtdLHRoaXMuc3ltYm9saWNOYW1lcz1yfHxbXX12YXIgZSxuO3JldHVybiBlPXQsbj1be2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5kZmEuczApcmV0dXJuIG51bGw7Zm9yKHZhciB0PVwiXCIsZT10aGlzLmRmYS5zb3J0ZWRTdGF0ZXMoKSxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07aWYobnVsbCE9PXIuZWRnZXMpZm9yKHZhciBvPXIuZWRnZXMubGVuZ3RoLGk9MDtpPG87aSsrKXt2YXIgdT1yLmVkZ2VzW2ldfHxudWxsO251bGwhPT11JiYyMTQ3NDgzNjQ3IT09dS5zdGF0ZU51bWJlciYmKHQ9KHQ9KHQ9KHQ9KHQ9KHQ9dC5jb25jYXQodGhpcy5nZXRTdGF0ZVN0cmluZyhyKSkpLmNvbmNhdChcIi1cIikpLmNvbmNhdCh0aGlzLmdldEVkZ2VMYWJlbChpKSkpLmNvbmNhdChcIi0+XCIpKS5jb25jYXQodGhpcy5nZXRTdGF0ZVN0cmluZyh1KSkpLmNvbmNhdChcIlxcblwiKSl9fXJldHVybiAwPT09dC5sZW5ndGg/bnVsbDp0fX0se2tleTpcImdldEVkZ2VMYWJlbFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiAwPT09dD9cIkVPRlwiOm51bGwhPT10aGlzLmxpdGVyYWxOYW1lc3x8bnVsbCE9PXRoaXMuc3ltYm9saWNOYW1lcz90aGlzLmxpdGVyYWxOYW1lc1t0LTFdfHx0aGlzLnN5bWJvbGljTmFtZXNbdC0xXTpTdHJpbmcuZnJvbUNoYXJDb2RlKHQtMSl9fSx7a2V5OlwiZ2V0U3RhdGVTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT0odC5pc0FjY2VwdFN0YXRlP1wiOlwiOlwiXCIpK1wic1wiK3Quc3RhdGVOdW1iZXIrKHQucmVxdWlyZXNGdWxsQ29udGV4dD9cIl5cIjpcIlwiKTtyZXR1cm4gdC5pc0FjY2VwdFN0YXRlP251bGwhPT10LnByZWRpY2F0ZXM/ZStcIj0+XCIrYih0LnByZWRpY2F0ZXMpOmUrXCI9PlwiK3QucHJlZGljdGlvbi50b1N0cmluZygpOmV9fV0sbiYmUXUoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIHRjKHQpe3JldHVybiB0Yz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx0Yyh0KX1mdW5jdGlvbiBlYyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09dGModCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09dGMocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09dGMobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIG5jKHQsZSl7cmV0dXJuIG5jPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sbmModCxlKX1mdW5jdGlvbiByYyh0KXtyZXR1cm4gcmM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LHJjKHQpfXZhciBvYz1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmbmModCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1yYyhyKTtpZihvKXt2YXIgbj1yYyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXRjKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0KXtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHUpLGkuY2FsbCh0aGlzLHQsbnVsbCl9cmV0dXJuIGU9dSxuPVt7a2V5OlwiZ2V0RWRnZUxhYmVsXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuXCInXCIrU3RyaW5nLmZyb21DaGFyQ29kZSh0KStcIidcIn19XSxuJiZlYyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFp1KTtmdW5jdGlvbiBpYyh0KXtyZXR1cm4gaWM9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0saWModCl9ZnVuY3Rpb24gdWModCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PWljKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PWljKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PWljKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb312YXIgY2M9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsbil7aWYoZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHZvaWQgMD09PW4mJihuPTApLHRoaXMuYXRuU3RhcnRTdGF0ZT1lLHRoaXMuZGVjaXNpb249bix0aGlzLl9zdGF0ZXM9bmV3IGcsdGhpcy5zMD1udWxsLHRoaXMucHJlY2VkZW5jZURmYT0hMSxlIGluc3RhbmNlb2Ygem4mJmUuaXNQcmVjZWRlbmNlRGVjaXNpb24pe3RoaXMucHJlY2VkZW5jZURmYT0hMDt2YXIgcj1uZXcgV2kobnVsbCxuZXcgS2kpO3IuZWRnZXM9W10sci5pc0FjY2VwdFN0YXRlPSExLHIucmVxdWlyZXNGdWxsQ29udGV4dD0hMSx0aGlzLnMwPXJ9fXZhciBlLG47cmV0dXJuIGU9dCwobj1be2tleTpcImdldFByZWNlZGVuY2VTdGFydFN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoIXRoaXMucHJlY2VkZW5jZURmYSl0aHJvd1wiT25seSBwcmVjZWRlbmNlIERGQXMgbWF5IGNvbnRhaW4gYSBwcmVjZWRlbmNlIHN0YXJ0IHN0YXRlLlwiO3JldHVybiB0PDB8fHQ+PXRoaXMuczAuZWRnZXMubGVuZ3RoP251bGw6dGhpcy5zMC5lZGdlc1t0XXx8bnVsbH19LHtrZXk6XCJzZXRQcmVjZWRlbmNlU3RhcnRTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoIXRoaXMucHJlY2VkZW5jZURmYSl0aHJvd1wiT25seSBwcmVjZWRlbmNlIERGQXMgbWF5IGNvbnRhaW4gYSBwcmVjZWRlbmNlIHN0YXJ0IHN0YXRlLlwiO3Q8MHx8KHRoaXMuczAuZWRnZXNbdF09ZSl9fSx7a2V5Olwic2V0UHJlY2VkZW5jZURmYVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHRoaXMucHJlY2VkZW5jZURmYSE9PXQpe2lmKHRoaXMuX3N0YXRlcz1uZXcgZyx0KXt2YXIgZT1uZXcgV2kobnVsbCxuZXcgS2kpO2UuZWRnZXM9W10sZS5pc0FjY2VwdFN0YXRlPSExLGUucmVxdWlyZXNGdWxsQ29udGV4dD0hMSx0aGlzLnMwPWV9ZWxzZSB0aGlzLnMwPW51bGw7dGhpcy5wcmVjZWRlbmNlRGZhPXR9fX0se2tleTpcInNvcnRlZFN0YXRlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXRlcy52YWx1ZXMoKS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiB0LnN0YXRlTnVtYmVyLWUuc3RhdGVOdW1iZXJ9KSl9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0PXR8fG51bGwsZT1lfHxudWxsLG51bGw9PT10aGlzLnMwP1wiXCI6bmV3IFp1KHRoaXMsdCxlKS50b1N0cmluZygpfX0se2tleTpcInRvTGV4ZXJTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5zMD9cIlwiOm5ldyBvYyh0aGlzKS50b1N0cmluZygpfX0se2tleTpcInN0YXRlc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGF0ZXN9fV0pJiZ1YyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7Y29uc3QgYWM9e0RGQTpjYyxERkFTZXJpYWxpemVyOlp1LExleGVyREZBU2VyaWFsaXplcjpvYyxQcmVkUHJlZGljdGlvbjp4dX0sbGM9e1ByZWRpY3Rpb25Db250ZXh0Om9lfSxzYz17SW50ZXJ2YWw6QixJbnRlcnZhbFNldDpWfTtmdW5jdGlvbiBmYyh0KXtyZXR1cm4gZmM9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sZmModCl9ZnVuY3Rpb24gcGModCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PWZjKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PWZjKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PWZjKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb312YXIgeWM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KX12YXIgZSxuO3JldHVybiBlPXQsKG49W3trZXk6XCJ2aXNpdFRlcm1pbmFsXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX0se2tleTpcInZpc2l0RXJyb3JOb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX0se2tleTpcImVudGVyRXZlcnlSdWxlXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX0se2tleTpcImV4aXRFdmVyeVJ1bGVcIix2YWx1ZTpmdW5jdGlvbih0KXt9fV0pJiZwYyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gaGModCl7cmV0dXJuIGhjPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGhjKHQpfWZ1bmN0aW9uIGJjKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1oYyh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1oYyhyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1oYyhvKT9vOlN0cmluZyhvKSkscil9dmFyIG99dmFyIHZjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCl9dmFyIGUsbjtyZXR1cm4gZT10LChuPVt7a2V5OlwidmlzaXRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuYWNjZXB0KHRoaXMpfSksdGhpcyk6dC5hY2NlcHQodGhpcyl9fSx7a2V5OlwidmlzaXRDaGlsZHJlblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0LmNoaWxkcmVuP3RoaXMudmlzaXQodC5jaGlsZHJlbik6bnVsbH19LHtrZXk6XCJ2aXNpdFRlcm1pbmFsXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX0se2tleTpcInZpc2l0RXJyb3JOb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX1dKSYmYmMoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2Z1bmN0aW9uIGRjKHQpe3JldHVybiBkYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxkYyh0KX1mdW5jdGlvbiBtYyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09ZGModCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09ZGMocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09ZGMobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfXZhciBnYz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpfXZhciBlLG47cmV0dXJuIGU9dCxuPVt7a2V5Olwid2Fsa1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoZSBpbnN0YW5jZW9mIFd0fHx2b2lkIDAhPT1lLmlzRXJyb3JOb2RlJiZlLmlzRXJyb3JOb2RlKCkpdC52aXNpdEVycm9yTm9kZShlKTtlbHNlIGlmKGUgaW5zdGFuY2VvZiBIdCl0LnZpc2l0VGVybWluYWwoZSk7ZWxzZXt0aGlzLmVudGVyUnVsZSh0LGUpO2Zvcih2YXIgbj0wO248ZS5nZXRDaGlsZENvdW50KCk7bisrKXt2YXIgcj1lLmdldENoaWxkKG4pO3RoaXMud2Fsayh0LHIpfXRoaXMuZXhpdFJ1bGUodCxlKX19fSx7a2V5OlwiZW50ZXJSdWxlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnJ1bGVDb250ZXh0O3QuZW50ZXJFdmVyeVJ1bGUobiksbi5lbnRlclJ1bGUodCl9fSx7a2V5OlwiZXhpdFJ1bGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPWUucnVsZUNvbnRleHQ7bi5leGl0UnVsZSh0KSx0LmV4aXRFdmVyeVJ1bGUobil9fV0sbiYmbWMoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fSgpO2djLkRFRkFVTFQ9bmV3IGdjO2NvbnN0IFNjPXtUcmVlczokdCxSdWxlTm9kZTpVdCxFcnJvck5vZGU6V3QsVGVybWluYWxOb2RlOkh0LFBhcnNlVHJlZUxpc3RlbmVyOnljLFBhcnNlVHJlZVZpc2l0b3I6dmMsUGFyc2VUcmVlV2Fsa2VyOmdjfTtmdW5jdGlvbiBPYyh0KXtyZXR1cm4gT2M9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sT2ModCl9ZnVuY3Rpb24gd2ModCxlKXtyZXR1cm4gd2M9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSx3Yyh0LGUpfWZ1bmN0aW9uIF9jKHQpe3JldHVybiBfYz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sX2ModCl9dmFyIFBjPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZ3Yyh0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1fYyhuKTtpZihyKXt2YXIgbz1fYyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PU9jKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gaSh0KXt2YXIgZTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLChlPW8uY2FsbCh0aGlzLHttZXNzYWdlOlwiXCIscmVjb2duaXplcjp0LGlucHV0OnQuZ2V0SW5wdXRTdHJlYW0oKSxjdHg6dC5fY3R4fSkpLm9mZmVuZGluZ1Rva2VuPXQuZ2V0Q3VycmVudFRva2VuKCksZX1yZXR1cm4gZT1pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZX0oeGkpO2Z1bmN0aW9uIFRjKHQpe3JldHVybiBUYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxUYyh0KX1mdW5jdGlvbiBFYyh0LGUpe3JldHVybiBFYz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LEVjKHQsZSl9ZnVuY3Rpb24ga2ModCl7cmV0dXJuIGtjPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxrYyh0KX12YXIgamM9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJkVjKHQsZSl9KGksdCk7dmFyIGUsbixyLG89KG49aSxyPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPWtjKG4pO2lmKHIpe3ZhciBvPWtjKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09VGMoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBpKHQsZSxuKXt2YXIgcjshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLHI9by5jYWxsKHRoaXMse21lc3NhZ2U6eGMoZSxufHxudWxsKSxyZWNvZ25pemVyOnQsaW5wdXQ6dC5nZXRJbnB1dFN0cmVhbSgpLGN0eDp0Ll9jdHh9KTt2YXIgdT10Ll9pbnRlcnAuYXRuLnN0YXRlc1t0LnN0YXRlXS50cmFuc2l0aW9uc1swXTtyZXR1cm4gdSBpbnN0YW5jZW9mIERyPyhyLnJ1bGVJbmRleD11LnJ1bGVJbmRleCxyLnByZWRpY2F0ZUluZGV4PXUucHJlZEluZGV4KTooci5ydWxlSW5kZXg9MCxyLnByZWRpY2F0ZUluZGV4PTApLHIucHJlZGljYXRlPWUsci5vZmZlbmRpbmdUb2tlbj10LmdldEN1cnJlbnRUb2tlbigpLHJ9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KHhpKTtmdW5jdGlvbiB4Yyh0LGUpe3JldHVybiBudWxsIT09ZT9lOlwiZmFpbGVkIHByZWRpY2F0ZToge1wiK3QrXCJ9P1wifWZ1bmN0aW9uIFJjKHQpe3JldHVybiBSYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxSYyh0KX1mdW5jdGlvbiBDYyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09UmModCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09UmMocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09UmMobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIEFjKHQsZSl7cmV0dXJuIEFjPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sQWModCxlKX1mdW5jdGlvbiBOYyh0KXtyZXR1cm4gTmM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LE5jKHQpfXZhciBJYz1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmQWModCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1OYyhyKTtpZihvKXt2YXIgbj1OYyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PVJjKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0KXt2YXIgZTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHUpLHQ9dHx8ITAsKGU9aS5jYWxsKHRoaXMpKS5leGFjdE9ubHk9dCxlfXJldHVybiBlPXUsbj1be2tleTpcInJlcG9ydEFtYmlndWl0eVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyxpLHUpe2lmKCF0aGlzLmV4YWN0T25seXx8byl7dmFyIGM9XCJyZXBvcnRBbWJpZ3VpdHkgZD1cIit0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24odCxlKStcIjogYW1iaWdBbHRzPVwiK3RoaXMuZ2V0Q29uZmxpY3RpbmdBbHRzKGksdSkrXCIsIGlucHV0PSdcIit0LmdldFRva2VuU3RyZWFtKCkuZ2V0VGV4dChuZXcgQihuLHIpKStcIidcIjt0Lm5vdGlmeUVycm9yTGlzdGVuZXJzKGMpfX19LHtrZXk6XCJyZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHRcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLG8saSl7dmFyIHU9XCJyZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQgZD1cIit0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24odCxlKStcIiwgaW5wdXQ9J1wiK3QuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBCKG4scikpK1wiJ1wiO3Qubm90aWZ5RXJyb3JMaXN0ZW5lcnModSl9fSx7a2V5OlwicmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scixvLGkpe3ZhciB1PVwicmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5IGQ9XCIrdGhpcy5nZXREZWNpc2lvbkRlc2NyaXB0aW9uKHQsZSkrXCIsIGlucHV0PSdcIit0LmdldFRva2VuU3RyZWFtKCkuZ2V0VGV4dChuZXcgQihuLHIpKStcIidcIjt0Lm5vdGlmeUVycm9yTGlzdGVuZXJzKHUpfX0se2tleTpcImdldERlY2lzaW9uRGVzY3JpcHRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPWUuZGVjaXNpb24scj1lLmF0blN0YXJ0U3RhdGUucnVsZUluZGV4LG89dC5ydWxlTmFtZXM7aWYocjwwfHxyPj1vLmxlbmd0aClyZXR1cm5cIlwiK247dmFyIGk9b1tyXXx8bnVsbDtyZXR1cm4gbnVsbD09PWl8fDA9PT1pLmxlbmd0aD9cIlwiK246XCJcIi5jb25jYXQobixcIiAoXCIpLmNvbmNhdChpLFwiKVwiKX19LHtrZXk6XCJnZXRDb25mbGljdGluZ0FsdHNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKG51bGwhPT10KXJldHVybiB0O2Zvcih2YXIgbj1uZXcgQ2Uscj0wO3I8ZS5pdGVtcy5sZW5ndGg7cisrKW4uYWRkKGUuaXRlbXNbcl0uYWx0KTtyZXR1cm5cIntcIi5jb25jYXQobi52YWx1ZXMoKS5qb2luKFwiLCBcIiksXCJ9XCIpfX1dLG4mJkNjKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdX0oR28pO2Z1bmN0aW9uIExjKHQpe3JldHVybiBMYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxMYyh0KX1mdW5jdGlvbiBEYyh0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH1mdW5jdGlvbiBGYyh0KXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXA/bmV3IE1hcDp2b2lkIDA7cmV0dXJuIEZjPWZ1bmN0aW9uKHQpe2lmKG51bGw9PT10fHwobj10LC0xPT09RnVuY3Rpb24udG9TdHJpbmcuY2FsbChuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSkpcmV0dXJuIHQ7dmFyIG47aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7aWYodm9pZCAwIT09ZSl7aWYoZS5oYXModCkpcmV0dXJuIGUuZ2V0KHQpO2Uuc2V0KHQscil9ZnVuY3Rpb24gcigpe3JldHVybiBCYyh0LGFyZ3VtZW50cyxWYyh0aGlzKS5jb25zdHJ1Y3Rvcil9cmV0dXJuIHIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpyLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLFVjKHIsdCl9LEZjKHQpfWZ1bmN0aW9uIEJjKHQsZSxuKXtyZXR1cm4gQmM9TWMoKT9SZWZsZWN0LmNvbnN0cnVjdC5iaW5kKCk6ZnVuY3Rpb24odCxlLG4pe3ZhciByPVtudWxsXTtyLnB1c2guYXBwbHkocixlKTt2YXIgbz1uZXcoRnVuY3Rpb24uYmluZC5hcHBseSh0LHIpKTtyZXR1cm4gbiYmVWMobyxuLnByb3RvdHlwZSksb30sQmMuYXBwbHkobnVsbCxhcmd1bWVudHMpfWZ1bmN0aW9uIE1jKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19ZnVuY3Rpb24gVWModCxlKXtyZXR1cm4gVWM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxVYyh0LGUpfWZ1bmN0aW9uIFZjKHQpe3JldHVybiBWYz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sVmModCl9dmFyIHpjPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZVYyh0LGUpfShpLHQpO3ZhciBlLG4scixvPShuPWkscj1NYygpLGZ1bmN0aW9uKCl7dmFyIHQsZT1WYyhuKTtpZihyKXt2YXIgbz1WYyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG8pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUxjKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gRGModCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBpKCl7dmFyIHQ7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxpKSx0PW8uY2FsbCh0aGlzKSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShEYyh0KSxpKSx0fXJldHVybiBlPWksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlfShGYyhFcnJvcikpO2Z1bmN0aW9uIHFjKHQpe3JldHVybiBxYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxxYyh0KX1mdW5jdGlvbiBIYyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09cWModCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09cWMocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09cWMobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIEtjKHQpe3JldHVybiBLYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxLYyh0KX1mdW5jdGlvbiBZYyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09S2ModCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09S2MocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09S2Mobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIEdjKHQsZSl7cmV0dXJuIEdjPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sR2ModCxlKX1mdW5jdGlvbiBXYyh0KXtyZXR1cm4gV2M9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFdjKHQpfXZhciBYYz1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmR2ModCxlKX0oYyx0KTt2YXIgZSxuLHIsaSx1PShyPWMsaT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1XYyhyKTtpZihpKXt2YXIgbj1XYyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUtjKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gYygpe3ZhciB0O3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyksKHQ9dS5jYWxsKHRoaXMpKS5lcnJvclJlY292ZXJ5TW9kZT0hMSx0Lmxhc3RFcnJvckluZGV4PS0xLHQubGFzdEVycm9yU3RhdGVzPW51bGwsdC5uZXh0VG9rZW5zQ29udGV4dD1udWxsLHQubmV4dFRva2VuU3RhdGU9MCx0fXJldHVybiBlPWMsbj1be2tleTpcInJlc2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5lbmRFcnJvckNvbmRpdGlvbih0KX19LHtrZXk6XCJiZWdpbkVycm9yQ29uZGl0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5lcnJvclJlY292ZXJ5TW9kZT0hMH19LHtrZXk6XCJpbkVycm9yUmVjb3ZlcnlNb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZXJyb3JSZWNvdmVyeU1vZGV9fSx7a2V5OlwiZW5kRXJyb3JDb25kaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmVycm9yUmVjb3ZlcnlNb2RlPSExLHRoaXMubGFzdEVycm9yU3RhdGVzPW51bGwsdGhpcy5sYXN0RXJyb3JJbmRleD0tMX19LHtrZXk6XCJyZXBvcnRNYXRjaFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuZW5kRXJyb3JDb25kaXRpb24odCl9fSx7a2V5OlwicmVwb3J0RXJyb3JcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuaW5FcnJvclJlY292ZXJ5TW9kZSh0KXx8KHRoaXMuYmVnaW5FcnJvckNvbmRpdGlvbih0KSxlIGluc3RhbmNlb2YgQnU/dGhpcy5yZXBvcnROb1ZpYWJsZUFsdGVybmF0aXZlKHQsZSk6ZSBpbnN0YW5jZW9mIFBjP3RoaXMucmVwb3J0SW5wdXRNaXNtYXRjaCh0LGUpOmUgaW5zdGFuY2VvZiBqYz90aGlzLnJlcG9ydEZhaWxlZFByZWRpY2F0ZSh0LGUpOihjb25zb2xlLmxvZyhcInVua25vd24gcmVjb2duaXRpb24gZXJyb3IgdHlwZTogXCIrZS5jb25zdHJ1Y3Rvci5uYW1lKSxjb25zb2xlLmxvZyhlLnN0YWNrKSx0Lm5vdGlmeUVycm9yTGlzdGVuZXJzKGUuZ2V0T2ZmZW5kaW5nVG9rZW4oKSxlLmdldE1lc3NhZ2UoKSxlKSkpfX0se2tleTpcInJlY292ZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMubGFzdEVycm9ySW5kZXg9PT10LmdldElucHV0U3RyZWFtKCkuaW5kZXgmJm51bGwhPT10aGlzLmxhc3RFcnJvclN0YXRlcyYmdGhpcy5sYXN0RXJyb3JTdGF0ZXMuaW5kZXhPZih0LnN0YXRlKT49MCYmdC5jb25zdW1lKCksdGhpcy5sYXN0RXJyb3JJbmRleD10Ll9pbnB1dC5pbmRleCxudWxsPT09dGhpcy5sYXN0RXJyb3JTdGF0ZXMmJih0aGlzLmxhc3RFcnJvclN0YXRlcz1bXSksdGhpcy5sYXN0RXJyb3JTdGF0ZXMucHVzaCh0LnN0YXRlKTt2YXIgbj10aGlzLmdldEVycm9yUmVjb3ZlcnlTZXQodCk7dGhpcy5jb25zdW1lVW50aWwodCxuKX19LHtrZXk6XCJzeW5jXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoIXRoaXMuaW5FcnJvclJlY292ZXJ5TW9kZSh0KSl7dmFyIGU9dC5faW50ZXJwLmF0bi5zdGF0ZXNbdC5zdGF0ZV0sbj10LmdldFRva2VuU3RyZWFtKCkuTEEoMSkscj10LmF0bi5uZXh0VG9rZW5zKGUpO2lmKHIuY29udGFpbnMobikpcmV0dXJuIHRoaXMubmV4dFRva2Vuc0NvbnRleHQ9bnVsbCx2b2lkKHRoaXMubmV4dFRva2VuU3RhdGU9SC5JTlZBTElEX1NUQVRFX05VTUJFUik7aWYoci5jb250YWlucyhvLkVQU0lMT04pKW51bGw9PT10aGlzLm5leHRUb2tlbnNDb250ZXh0JiYodGhpcy5uZXh0VG9rZW5zQ29udGV4dD10Ll9jdHgsdGhpcy5uZXh0VG9rZW5zU3RhdGU9dC5fc3RhdGVOdW1iZXIpO2Vsc2Ugc3dpdGNoKGUuc3RhdGVUeXBlKXtjYXNlIEguQkxPQ0tfU1RBUlQ6Y2FzZSBILlNUQVJfQkxPQ0tfU1RBUlQ6Y2FzZSBILlBMVVNfQkxPQ0tfU1RBUlQ6Y2FzZSBILlNUQVJfTE9PUF9FTlRSWTppZihudWxsIT09dGhpcy5zaW5nbGVUb2tlbkRlbGV0aW9uKHQpKXJldHVybjt0aHJvdyBuZXcgUGModCk7Y2FzZSBILlBMVVNfTE9PUF9CQUNLOmNhc2UgSC5TVEFSX0xPT1BfQkFDSzp0aGlzLnJlcG9ydFVud2FudGVkVG9rZW4odCk7dmFyIGk9bmV3IFY7aS5hZGRTZXQodC5nZXRFeHBlY3RlZFRva2VucygpKTt2YXIgdT1pLmFkZFNldCh0aGlzLmdldEVycm9yUmVjb3ZlcnlTZXQodCkpO3RoaXMuY29uc3VtZVVudGlsKHQsdSl9fX19LHtrZXk6XCJyZXBvcnROb1ZpYWJsZUFsdGVybmF0aXZlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbixyPXQuZ2V0VG9rZW5TdHJlYW0oKTtuPW51bGwhPT1yP2Uuc3RhcnRUb2tlbi50eXBlPT09by5FT0Y/XCI8RU9GPlwiOnIuZ2V0VGV4dChuZXcgQihlLnN0YXJ0VG9rZW4udG9rZW5JbmRleCxlLm9mZmVuZGluZ1Rva2VuLnRva2VuSW5kZXgpKTpcIjx1bmtub3duIGlucHV0PlwiO3ZhciBpPVwibm8gdmlhYmxlIGFsdGVybmF0aXZlIGF0IGlucHV0IFwiK3RoaXMuZXNjYXBlV1NBbmRRdW90ZShuKTt0Lm5vdGlmeUVycm9yTGlzdGVuZXJzKGksZS5vZmZlbmRpbmdUb2tlbixlKX19LHtrZXk6XCJyZXBvcnRJbnB1dE1pc21hdGNoXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1cIm1pc21hdGNoZWQgaW5wdXQgXCIrdGhpcy5nZXRUb2tlbkVycm9yRGlzcGxheShlLm9mZmVuZGluZ1Rva2VuKStcIiBleHBlY3RpbmcgXCIrZS5nZXRFeHBlY3RlZFRva2VucygpLnRvU3RyaW5nKHQubGl0ZXJhbE5hbWVzLHQuc3ltYm9saWNOYW1lcyk7dC5ub3RpZnlFcnJvckxpc3RlbmVycyhuLGUub2ZmZW5kaW5nVG9rZW4sZSl9fSx7a2V5OlwicmVwb3J0RmFpbGVkUHJlZGljYXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1cInJ1bGUgXCIrdC5ydWxlTmFtZXNbdC5fY3R4LnJ1bGVJbmRleF0rXCIgXCIrZS5tZXNzYWdlO3Qubm90aWZ5RXJyb3JMaXN0ZW5lcnMobixlLm9mZmVuZGluZ1Rva2VuLGUpfX0se2tleTpcInJlcG9ydFVud2FudGVkVG9rZW5cIix2YWx1ZTpmdW5jdGlvbih0KXtpZighdGhpcy5pbkVycm9yUmVjb3ZlcnlNb2RlKHQpKXt0aGlzLmJlZ2luRXJyb3JDb25kaXRpb24odCk7dmFyIGU9dC5nZXRDdXJyZW50VG9rZW4oKSxuPVwiZXh0cmFuZW91cyBpbnB1dCBcIit0aGlzLmdldFRva2VuRXJyb3JEaXNwbGF5KGUpK1wiIGV4cGVjdGluZyBcIit0aGlzLmdldEV4cGVjdGVkVG9rZW5zKHQpLnRvU3RyaW5nKHQubGl0ZXJhbE5hbWVzLHQuc3ltYm9saWNOYW1lcyk7dC5ub3RpZnlFcnJvckxpc3RlbmVycyhuLGUsbnVsbCl9fX0se2tleTpcInJlcG9ydE1pc3NpbmdUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKCF0aGlzLmluRXJyb3JSZWNvdmVyeU1vZGUodCkpe3RoaXMuYmVnaW5FcnJvckNvbmRpdGlvbih0KTt2YXIgZT10LmdldEN1cnJlbnRUb2tlbigpLG49XCJtaXNzaW5nIFwiK3RoaXMuZ2V0RXhwZWN0ZWRUb2tlbnModCkudG9TdHJpbmcodC5saXRlcmFsTmFtZXMsdC5zeW1ib2xpY05hbWVzKStcIiBhdCBcIit0aGlzLmdldFRva2VuRXJyb3JEaXNwbGF5KGUpO3Qubm90aWZ5RXJyb3JMaXN0ZW5lcnMobixlLG51bGwpfX19LHtrZXk6XCJyZWNvdmVySW5saW5lXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zaW5nbGVUb2tlbkRlbGV0aW9uKHQpO2lmKG51bGwhPT1lKXJldHVybiB0LmNvbnN1bWUoKSxlO2lmKHRoaXMuc2luZ2xlVG9rZW5JbnNlcnRpb24odCkpcmV0dXJuIHRoaXMuZ2V0TWlzc2luZ1N5bWJvbCh0KTt0aHJvdyBuZXcgUGModCl9fSx7a2V5Olwic2luZ2xlVG9rZW5JbnNlcnRpb25cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10LmdldFRva2VuU3RyZWFtKCkuTEEoMSksbj10Ll9pbnRlcnAuYXRuLHI9bi5zdGF0ZXNbdC5zdGF0ZV0udHJhbnNpdGlvbnNbMF0udGFyZ2V0O3JldHVybiEhbi5uZXh0VG9rZW5zKHIsdC5fY3R4KS5jb250YWlucyhlKSYmKHRoaXMucmVwb3J0TWlzc2luZ1Rva2VuKHQpLCEwKX19LHtrZXk6XCJzaW5nbGVUb2tlbkRlbGV0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRUb2tlblN0cmVhbSgpLkxBKDIpO2lmKHRoaXMuZ2V0RXhwZWN0ZWRUb2tlbnModCkuY29udGFpbnMoZSkpe3RoaXMucmVwb3J0VW53YW50ZWRUb2tlbih0KSx0LmNvbnN1bWUoKTt2YXIgbj10LmdldEN1cnJlbnRUb2tlbigpO3JldHVybiB0aGlzLnJlcG9ydE1hdGNoKHQpLG59cmV0dXJuIG51bGx9fSx7a2V5OlwiZ2V0TWlzc2luZ1N5bWJvbFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLG49dC5nZXRDdXJyZW50VG9rZW4oKSxyPXRoaXMuZ2V0RXhwZWN0ZWRUb2tlbnModCkuZmlyc3QoKTtlPXI9PT1vLkVPRj9cIjxtaXNzaW5nIEVPRj5cIjpcIjxtaXNzaW5nIFwiK3QubGl0ZXJhbE5hbWVzW3JdK1wiPlwiO3ZhciBpPW4sdT10LmdldFRva2VuU3RyZWFtKCkuTFQoLTEpO3JldHVybiBpLnR5cGU9PT1vLkVPRiYmbnVsbCE9PXUmJihpPXUpLHQuZ2V0VG9rZW5GYWN0b3J5KCkuY3JlYXRlKGkuc291cmNlLHIsZSxvLkRFRkFVTFRfQ0hBTk5FTCwtMSwtMSxpLmxpbmUsaS5jb2x1bW4pfX0se2tleTpcImdldEV4cGVjdGVkVG9rZW5zXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0RXhwZWN0ZWRUb2tlbnMoKX19LHtrZXk6XCJnZXRUb2tlbkVycm9yRGlzcGxheVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKG51bGw9PT10KXJldHVyblwiPG5vIHRva2VuPlwiO3ZhciBlPXQudGV4dDtyZXR1cm4gbnVsbD09PWUmJihlPXQudHlwZT09PW8uRU9GP1wiPEVPRj5cIjpcIjxcIit0LnR5cGUrXCI+XCIpLHRoaXMuZXNjYXBlV1NBbmRRdW90ZShlKX19LHtrZXk6XCJlc2NhcGVXU0FuZFF1b3RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuXCInXCIrKHQ9KHQ9KHQ9dC5yZXBsYWNlKC9cXG4vZyxcIlxcXFxuXCIpKS5yZXBsYWNlKC9cXHIvZyxcIlxcXFxyXCIpKS5yZXBsYWNlKC9cXHQvZyxcIlxcXFx0XCIpKStcIidcIn19LHtrZXk6XCJnZXRFcnJvclJlY292ZXJ5U2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuX2ludGVycC5hdG4sbj10Ll9jdHgscj1uZXcgVjtudWxsIT09biYmbi5pbnZva2luZ1N0YXRlPj0wOyl7dmFyIGk9ZS5zdGF0ZXNbbi5pbnZva2luZ1N0YXRlXS50cmFuc2l0aW9uc1swXSx1PWUubmV4dFRva2VucyhpLmZvbGxvd1N0YXRlKTtyLmFkZFNldCh1KSxuPW4ucGFyZW50Q3R4fXJldHVybiByLnJlbW92ZU9uZShvLkVQU0lMT04pLHJ9fSx7a2V5OlwiY29uc3VtZVVudGlsXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5nZXRUb2tlblN0cmVhbSgpLkxBKDEpO24hPT1vLkVPRiYmIWUuY29udGFpbnMobik7KXQuY29uc3VtZSgpLG49dC5nZXRUb2tlblN0cmVhbSgpLkxBKDEpfX1dLG4mJlljKGUucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksY30oZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KX12YXIgZSxuO3JldHVybiBlPXQsKG49W3trZXk6XCJyZXNldFwiLHZhbHVlOmZ1bmN0aW9uKHQpe319LHtrZXk6XCJyZWNvdmVySW5saW5lXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX0se2tleTpcInJlY292ZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe319LHtrZXk6XCJzeW5jXCIsdmFsdWU6ZnVuY3Rpb24odCl7fX0se2tleTpcImluRXJyb3JSZWNvdmVyeU1vZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt9fSx7a2V5OlwicmVwb3J0RXJyb3JcIix2YWx1ZTpmdW5jdGlvbih0KXt9fV0pJiZIYyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCkpO2Z1bmN0aW9uICRjKHQpe3JldHVybiAkYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSwkYyh0KX1mdW5jdGlvbiBKYyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09JGModCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09JGMocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09JGMobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIFFjKHQsZSl7cmV0dXJuIFFjPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sUWModCxlKX1mdW5jdGlvbiBaYyh0KXtyZXR1cm4gWmM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFpjKHQpfXZhciB0YT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmUWModCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1aYyhyKTtpZihvKXt2YXIgbj1aYyh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PSRjKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSgpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksaS5jYWxsKHRoaXMpfXJldHVybiBlPXUsbj1be2tleTpcInJlY292ZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10Ll9jdHg7bnVsbCE9PW47KW4uZXhjZXB0aW9uPWUsbj1uLnBhcmVudEN0eDt0aHJvdyBuZXcgemMoZSl9fSx7a2V5OlwicmVjb3ZlcklubGluZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMucmVjb3Zlcih0LG5ldyBQYyh0KSl9fSx7a2V5Olwic3luY1wiLHZhbHVlOmZ1bmN0aW9uKHQpe319XSxuJiZKYyhlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHV9KFhjKTtjb25zdCBlYT17UmVjb2duaXRpb25FeGNlcHRpb246eGksTm9WaWFibGVBbHRFeGNlcHRpb246QnUsTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbjpJaSxJbnB1dE1pc21hdGNoRXhjZXB0aW9uOlBjLEZhaWxlZFByZWRpY2F0ZUV4Y2VwdGlvbjpqYyxEaWFnbm9zdGljRXJyb3JMaXN0ZW5lcjpJYyxCYWlsRXJyb3JTdHJhdGVneTp0YSxEZWZhdWx0RXJyb3JTdHJhdGVneTpYYyxFcnJvckxpc3RlbmVyOkdvfTtmdW5jdGlvbiBuYSh0KXtyZXR1cm4gbmE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sbmEodCl9ZnVuY3Rpb24gcmEodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PW5hKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PW5hKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PW5hKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb312YXIgb2E9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsbil7aWYoZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMubmFtZT1cIjxlbXB0eT5cIix0aGlzLnN0cmRhdGE9ZSx0aGlzLmRlY29kZVRvVW5pY29kZUNvZGVQb2ludHM9bnx8ITEsdGhpcy5faW5kZXg9MCx0aGlzLmRhdGE9W10sdGhpcy5kZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzKWZvcih2YXIgcj0wO3I8dGhpcy5zdHJkYXRhLmxlbmd0aDspe3ZhciBvPXRoaXMuc3RyZGF0YS5jb2RlUG9pbnRBdChyKTt0aGlzLmRhdGEucHVzaChvKSxyKz1vPD02NTUzNT8xOjJ9ZWxzZXt0aGlzLmRhdGE9bmV3IEFycmF5KHRoaXMuc3RyZGF0YS5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8dGhpcy5zdHJkYXRhLmxlbmd0aDtpKyspdGhpcy5kYXRhW2ldPXRoaXMuc3RyZGF0YS5jaGFyQ29kZUF0KGkpfXRoaXMuX3NpemU9dGhpcy5kYXRhLmxlbmd0aH12YXIgZSxuO3JldHVybiBlPXQsbj1be2tleTpcInJlc2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9pbmRleD0wfX0se2tleTpcImNvbnN1bWVcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuX2luZGV4Pj10aGlzLl9zaXplKXRocm93XCJjYW5ub3QgY29uc3VtZSBFT0ZcIjt0aGlzLl9pbmRleCs9MX19LHtrZXk6XCJMQVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKDA9PT10KXJldHVybiAwO3Q8MCYmKHQrPTEpO3ZhciBlPXRoaXMuX2luZGV4K3QtMTtyZXR1cm4gZTwwfHxlPj10aGlzLl9zaXplP28uRU9GOnRoaXMuZGF0YVtlXX19LHtrZXk6XCJMVFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLkxBKHQpfX0se2tleTpcIm1hcmtcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybi0xfX0se2tleTpcInJlbGVhc2VcIix2YWx1ZTpmdW5jdGlvbih0KXt9fSx7a2V5Olwic2Vla1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3Q8PXRoaXMuX2luZGV4P3RoaXMuX2luZGV4PXQ6dGhpcy5faW5kZXg9TWF0aC5taW4odCx0aGlzLl9zaXplKX19LHtrZXk6XCJnZXRUZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihlPj10aGlzLl9zaXplJiYoZT10aGlzLl9zaXplLTEpLHQ+PXRoaXMuX3NpemUpcmV0dXJuXCJcIjtpZih0aGlzLmRlY29kZVRvVW5pY29kZUNvZGVQb2ludHMpe2Zvcih2YXIgbj1cIlwiLHI9dDtyPD1lO3IrKyluKz1TdHJpbmcuZnJvbUNvZGVQb2ludCh0aGlzLmRhdGFbcl0pO3JldHVybiBufXJldHVybiB0aGlzLnN0cmRhdGEuc2xpY2UodCxlKzEpfX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJkYXRhfX0se2tleTpcImluZGV4XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2luZGV4fX0se2tleTpcInNpemVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2l6ZX19XSxuJiZyYShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9KCk7ZnVuY3Rpb24gaWEodCl7cmV0dXJuIGlhPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGlhKHQpfWZ1bmN0aW9uIHVhKHQsZSl7cmV0dXJuIHVhPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sdWEodCxlKX1mdW5jdGlvbiBjYSh0KXtyZXR1cm4gY2E9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LGNhKHQpfXZhciBhYT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmdWEodCxlKX0oaSx0KTt2YXIgZSxuLHIsbz0obj1pLHI9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9Y2Eobik7aWYocil7dmFyIG89Y2EodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxvKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1pYShlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIGkodCxlKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGkpLG8uY2FsbCh0aGlzLHQsZSl9cmV0dXJuIGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9KG9hKSxsYT1uKDkyKTtmdW5jdGlvbiBzYSh0KXtyZXR1cm4gc2E9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sc2EodCl9ZnVuY3Rpb24gZmEodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXNhKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXNhKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PXNhKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBwYSh0LGUpe3JldHVybiBwYT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LHBhKHQsZSl9ZnVuY3Rpb24geWEodCl7cmV0dXJuIHlhPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSx5YSh0KX12YXIgaGE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJm51bGwhPXByb2Nlc3MudmVyc2lvbnMmJm51bGwhPXByb2Nlc3MudmVyc2lvbnMubm9kZSxiYT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmcGEodCxlKX0odSx0KTt2YXIgZSxuLHIsbyxpPShyPXUsbz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT15YShyKTtpZihvKXt2YXIgbj15YSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PXNhKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gdSh0LGUsbil7dmFyIHI7aWYoZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHUpLCFoYSl0aHJvdyBuZXcgRXJyb3IoXCJGaWxlU3RyZWFtIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gcnVubmluZyBpbiBOb2RlIVwiKTt2YXIgbz1sYS5yZWFkRmlsZVN5bmModCxlfHxcInV0Zi04XCIpO3JldHVybihyPWkuY2FsbCh0aGlzLG8sbikpLmZpbGVOYW1lPXQscn1yZXR1cm4gZT11LG49W3trZXk6XCJmcm9tUGF0aFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtpZighaGEpdGhyb3cgbmV3IEVycm9yKFwiRmlsZVN0cmVhbSBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIHJ1bm5pbmcgaW4gTm9kZSFcIik7bGEucmVhZEZpbGUodCxlLChmdW5jdGlvbih0LGUpe3ZhciByPW51bGw7bnVsbCE9PWUmJihyPW5ldyBvYShlLCEwKSksbih0LHIpfSkpfX1dLG51bGwmJmZhKGUucHJvdG90eXBlLG51bGwpLG4mJmZhKGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fShhYSk7Y29uc3QgdmE9e2Zyb21TdHJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBvYSh0LCEwKX0sZnJvbUJsb2I6ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bmV3IHdpbmRvdy5GaWxlUmVhZGVyO28ub25sb2FkPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBvYSh0LnRhcmdldC5yZXN1bHQsITApO24oZSl9LG8ub25lcnJvcj1yLG8ucmVhZEFzVGV4dCh0LGUpfSxmcm9tQnVmZmVyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBvYSh0LnRvU3RyaW5nKGUpLCEwKX0sZnJvbVBhdGg6ZnVuY3Rpb24odCxlLG4pe2JhLmZyb21QYXRoKHQsZSxuKX0sZnJvbVBhdGhTeW5jOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBiYSh0LGUpfX0sZGE9e2FycmF5VG9TdHJpbmc6YixzdHJpbmdUb0NoYXJBcnJheTpmdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IFVpbnQxNkFycmF5KHQubGVuZ3RoKSxuPTA7bjx0Lmxlbmd0aDtuKyspZVtuXT10LmNoYXJDb2RlQXQobik7cmV0dXJuIGV9fTtmdW5jdGlvbiBtYSh0KXtyZXR1cm4gbWE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sbWEodCl9ZnVuY3Rpb24gZ2EodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PW1hKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PW1hKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PW1hKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBTYSh0LGUsbil7cmV0dXJuIGUmJmdhKHQucHJvdG90eXBlLGUpLG4mJmdhKHQsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fWZ1bmN0aW9uIE9hKHQpe3JldHVybiBPYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxPYSh0KX1mdW5jdGlvbiB3YSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwodm9pZCAwLG89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiIT09T2EodCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBuPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgcj1uLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT09T2EocikpcmV0dXJuIHI7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybiBTdHJpbmcodCl9KHIua2V5KSxcInN5bWJvbFwiPT09T2Eobyk/bzpTdHJpbmcobykpLHIpfXZhciBvfWZ1bmN0aW9uIF9hKHQsZSl7cmV0dXJuIF9hPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sX2EodCxlKX1mdW5jdGlvbiBQYSh0KXtyZXR1cm4gUGE9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LFBhKHQpfXZhciBUYT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmX2EodCxlKX0oYyx0KTt2YXIgZSxuLHIsaSx1PShyPWMsaT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT1QYShyKTtpZihpKXt2YXIgbj1QYSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PU9hKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gYyh0KXt2YXIgZTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGMpLChlPXUuY2FsbCh0aGlzKSkudG9rZW5Tb3VyY2U9dCxlLnRva2Vucz1bXSxlLmluZGV4PS0xLGUuZmV0Y2hlZEVPRj0hMSxlfXJldHVybiBlPWMsbj1be2tleTpcIm1hcmtcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiAwfX0se2tleTpcInJlbGVhc2VcIix2YWx1ZTpmdW5jdGlvbih0KXt9fSx7a2V5OlwicmVzZXRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2VlaygwKX19LHtrZXk6XCJzZWVrXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5sYXp5SW5pdCgpLHRoaXMuaW5kZXg9dGhpcy5hZGp1c3RTZWVrSW5kZXgodCl9fSx7a2V5Olwic2l6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRva2Vucy5sZW5ndGh9fSx7a2V5OlwiZ2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubGF6eUluaXQoKSx0aGlzLnRva2Vuc1t0XX19LHtrZXk6XCJjb25zdW1lXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighKHRoaXMuaW5kZXg+PTAmJih0aGlzLmZldGNoZWRFT0Y/dGhpcy5pbmRleDx0aGlzLnRva2Vucy5sZW5ndGgtMTp0aGlzLmluZGV4PHRoaXMudG9rZW5zLmxlbmd0aCkpJiZ0aGlzLkxBKDEpPT09by5FT0YpdGhyb3dcImNhbm5vdCBjb25zdW1lIEVPRlwiO3RoaXMuc3luYyh0aGlzLmluZGV4KzEpJiYodGhpcy5pbmRleD10aGlzLmFkanVzdFNlZWtJbmRleCh0aGlzLmluZGV4KzEpKX19LHtrZXk6XCJzeW5jXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC10aGlzLnRva2Vucy5sZW5ndGgrMTtyZXR1cm4hKGU+MCl8fHRoaXMuZmV0Y2goZSk+PWV9fSx7a2V5OlwiZmV0Y2hcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0aGlzLmZldGNoZWRFT0YpcmV0dXJuIDA7Zm9yKHZhciBlPTA7ZTx0O2UrKyl7dmFyIG49dGhpcy50b2tlblNvdXJjZS5uZXh0VG9rZW4oKTtpZihuLnRva2VuSW5kZXg9dGhpcy50b2tlbnMubGVuZ3RoLHRoaXMudG9rZW5zLnB1c2gobiksbi50eXBlPT09by5FT0YpcmV0dXJuIHRoaXMuZmV0Y2hlZEVPRj0hMCxlKzF9cmV0dXJuIHR9fSx7a2V5OlwiZ2V0VG9rZW5zXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe2lmKHZvaWQgMD09PW4mJihuPW51bGwpLHQ8MHx8ZTwwKXJldHVybiBudWxsO3RoaXMubGF6eUluaXQoKTt2YXIgcj1bXTtlPj10aGlzLnRva2Vucy5sZW5ndGgmJihlPXRoaXMudG9rZW5zLmxlbmd0aC0xKTtmb3IodmFyIGk9dDtpPGU7aSsrKXt2YXIgdT10aGlzLnRva2Vuc1tpXTtpZih1LnR5cGU9PT1vLkVPRilicmVhazsobnVsbD09PW58fG4uY29udGFpbnModS50eXBlKSkmJnIucHVzaCh1KX1yZXR1cm4gcn19LHtrZXk6XCJMQVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLkxUKHQpLnR5cGV9fSx7a2V5OlwiTEJcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5pbmRleC10PDA/bnVsbDp0aGlzLnRva2Vuc1t0aGlzLmluZGV4LXRdfX0se2tleTpcIkxUXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodGhpcy5sYXp5SW5pdCgpLDA9PT10KXJldHVybiBudWxsO2lmKHQ8MClyZXR1cm4gdGhpcy5MQigtdCk7dmFyIGU9dGhpcy5pbmRleCt0LTE7cmV0dXJuIHRoaXMuc3luYyhlKSxlPj10aGlzLnRva2Vucy5sZW5ndGg/dGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoLTFdOnRoaXMudG9rZW5zW2VdfX0se2tleTpcImFkanVzdFNlZWtJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0fX0se2tleTpcImxhenlJbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXstMT09PXRoaXMuaW5kZXgmJnRoaXMuc2V0dXAoKX19LHtrZXk6XCJzZXR1cFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zeW5jKDApLHRoaXMuaW5kZXg9dGhpcy5hZGp1c3RTZWVrSW5kZXgoMCl9fSx7a2V5Olwic2V0VG9rZW5Tb3VyY2VcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnRva2VuU291cmNlPXQsdGhpcy50b2tlbnM9W10sdGhpcy5pbmRleD0tMSx0aGlzLmZldGNoZWRFT0Y9ITF9fSx7a2V5OlwibmV4dFRva2VuT25DaGFubmVsXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZih0aGlzLnN5bmModCksdD49dGhpcy50b2tlbnMubGVuZ3RoKXJldHVybi0xO2Zvcih2YXIgbj10aGlzLnRva2Vuc1t0XTtuLmNoYW5uZWwhPT10aGlzLmNoYW5uZWw7KXtpZihuLnR5cGU9PT1vLkVPRilyZXR1cm4tMTt0Kz0xLHRoaXMuc3luYyh0KSxuPXRoaXMudG9rZW5zW3RdfXJldHVybiB0fX0se2tleTpcInByZXZpb3VzVG9rZW5PbkNoYW5uZWxcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcig7dD49MCYmdGhpcy50b2tlbnNbdF0uY2hhbm5lbCE9PWU7KXQtPTE7cmV0dXJuIHR9fSx7a2V5OlwiZ2V0SGlkZGVuVG9rZW5zVG9SaWdodFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9LTEpLHRoaXMubGF6eUluaXQoKSx0PDB8fHQ+PXRoaXMudG9rZW5zLmxlbmd0aCl0aHJvdyB0K1wiIG5vdCBpbiAwLi5cIit0aGlzLnRva2Vucy5sZW5ndGgtMTt2YXIgbj10aGlzLm5leHRUb2tlbk9uQ2hhbm5lbCh0KzEsVWkuREVGQVVMVF9UT0tFTl9DSEFOTkVMKSxyPXQrMSxvPS0xPT09bj90aGlzLnRva2Vucy5sZW5ndGgtMTpuO3JldHVybiB0aGlzLmZpbHRlckZvckNoYW5uZWwocixvLGUpfX0se2tleTpcImdldEhpZGRlblRva2Vuc1RvTGVmdFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9LTEpLHRoaXMubGF6eUluaXQoKSx0PDB8fHQ+PXRoaXMudG9rZW5zLmxlbmd0aCl0aHJvdyB0K1wiIG5vdCBpbiAwLi5cIit0aGlzLnRva2Vucy5sZW5ndGgtMTt2YXIgbj10aGlzLnByZXZpb3VzVG9rZW5PbkNoYW5uZWwodC0xLFVpLkRFRkFVTFRfVE9LRU5fQ0hBTk5FTCk7aWYobj09PXQtMSlyZXR1cm4gbnVsbDt2YXIgcj1uKzEsbz10LTE7cmV0dXJuIHRoaXMuZmlsdGVyRm9yQ2hhbm5lbChyLG8sZSl9fSx7a2V5OlwiZmlsdGVyRm9yQ2hhbm5lbFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9W10sbz10O288ZSsxO28rKyl7dmFyIGk9dGhpcy50b2tlbnNbb107LTE9PT1uP2kuY2hhbm5lbCE9PVVpLkRFRkFVTFRfVE9LRU5fQ0hBTk5FTCYmci5wdXNoKGkpOmkuY2hhbm5lbD09PW4mJnIucHVzaChpKX1yZXR1cm4gMD09PXIubGVuZ3RoP251bGw6cn19LHtrZXk6XCJnZXRTb3VyY2VOYW1lXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b2tlblNvdXJjZS5nZXRTb3VyY2VOYW1lKCl9fSx7a2V5OlwiZ2V0VGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMubGF6eUluaXQoKSx0aGlzLmZpbGwoKSx0fHwodD1uZXcgQigwLHRoaXMudG9rZW5zLmxlbmd0aC0xKSk7dmFyIGU9dC5zdGFydDtlIGluc3RhbmNlb2YgbyYmKGU9ZS50b2tlbkluZGV4KTt2YXIgbj10LnN0b3A7aWYobiBpbnN0YW5jZW9mIG8mJihuPW4udG9rZW5JbmRleCksbnVsbD09PWV8fG51bGw9PT1ufHxlPDB8fG48MClyZXR1cm5cIlwiO24+PXRoaXMudG9rZW5zLmxlbmd0aCYmKG49dGhpcy50b2tlbnMubGVuZ3RoLTEpO2Zvcih2YXIgcj1cIlwiLGk9ZTtpPG4rMTtpKyspe3ZhciB1PXRoaXMudG9rZW5zW2ldO2lmKHUudHlwZT09PW8uRU9GKWJyZWFrO3IrPXUudGV4dH1yZXR1cm4gcn19LHtrZXk6XCJmaWxsXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodGhpcy5sYXp5SW5pdCgpOzFlMz09PXRoaXMuZmV0Y2goMWUzKTspO319XSxuJiZ3YShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGN9KFNhKChmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KX0pKSk7ZnVuY3Rpb24gRWEodCl7cmV0dXJuIEVhPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEVhKHQpfWZ1bmN0aW9uIGthKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1FYSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1FYShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1FYShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gamEodCxlKXtyZXR1cm4gamE9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxqYSh0LGUpfWZ1bmN0aW9uIHhhKHQpe3JldHVybiB4YT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0seGEodCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KFRhLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b2tlbnMubGVuZ3RofX0pO3ZhciBSYT1mdW5jdGlvbih0KXshZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmamEodCxlKX0oYyx0KTt2YXIgZSxuLHIsaSx1PShyPWMsaT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsZT14YShyKTtpZihpKXt2YXIgbj14YSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLG4pfWVsc2UgdD1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtpZihlJiYoXCJvYmplY3RcIj09PUVhKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfSh0aGlzLHQpfSk7ZnVuY3Rpb24gYyh0LGUpe3ZhciBuO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyksKG49dS5jYWxsKHRoaXMsdCkpLmNoYW5uZWw9dm9pZCAwPT09ZT9vLkRFRkFVTFRfQ0hBTk5FTDplLG59cmV0dXJuIGU9YyxuPVt7a2V5OlwiYWRqdXN0U2Vla0luZGV4XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubmV4dFRva2VuT25DaGFubmVsKHQsdGhpcy5jaGFubmVsKX19LHtrZXk6XCJMQlwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKDA9PT10fHx0aGlzLmluZGV4LXQ8MClyZXR1cm4gbnVsbDtmb3IodmFyIGU9dGhpcy5pbmRleCxuPTE7bjw9dDspZT10aGlzLnByZXZpb3VzVG9rZW5PbkNoYW5uZWwoZS0xLHRoaXMuY2hhbm5lbCksbis9MTtyZXR1cm4gZTwwP251bGw6dGhpcy50b2tlbnNbZV19fSx7a2V5OlwiTFRcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0aGlzLmxhenlJbml0KCksMD09PXQpcmV0dXJuIG51bGw7aWYodDwwKXJldHVybiB0aGlzLkxCKC10KTtmb3IodmFyIGU9dGhpcy5pbmRleCxuPTE7bjx0Oyl0aGlzLnN5bmMoZSsxKSYmKGU9dGhpcy5uZXh0VG9rZW5PbkNoYW5uZWwoZSsxLHRoaXMuY2hhbm5lbCkpLG4rPTE7cmV0dXJuIHRoaXMudG9rZW5zW2VdfX0se2tleTpcImdldE51bWJlck9mT25DaGFubmVsVG9rZW5zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD0wO3RoaXMuZmlsbCgpO2Zvcih2YXIgZT0wO2U8dGhpcy50b2tlbnMubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy50b2tlbnNbZV07aWYobi5jaGFubmVsPT09dGhpcy5jaGFubmVsJiYodCs9MSksbi50eXBlPT09by5FT0YpYnJlYWt9cmV0dXJuIHR9fV0sbiYma2EoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxjfShUYSk7ZnVuY3Rpb24gQ2EodCl7cmV0dXJuIENhPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LENhKHQpfWZ1bmN0aW9uIEFhKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1DYSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1DYShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1DYShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gTmEodCxlKXtyZXR1cm4gTmE9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxOYSh0LGUpfWZ1bmN0aW9uIElhKHQpe3JldHVybiBJYT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sSWEodCl9dmFyIExhPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZOYSh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPUlhKHIpO2lmKG8pe3ZhciBuPUlhKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09Q2EoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSksKGU9aS5jYWxsKHRoaXMpKS5wYXJzZXI9dCxlfXJldHVybiBlPXUsKG49W3trZXk6XCJlbnRlckV2ZXJ5UnVsZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2NvbnNvbGUubG9nKFwiZW50ZXIgICBcIit0aGlzLnBhcnNlci5ydWxlTmFtZXNbdC5ydWxlSW5kZXhdK1wiLCBMVCgxKT1cIit0aGlzLnBhcnNlci5faW5wdXQuTFQoMSkudGV4dCl9fSx7a2V5OlwidmlzaXRUZXJtaW5hbFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2NvbnNvbGUubG9nKFwiY29uc3VtZSBcIit0LnN5bWJvbCtcIiBydWxlIFwiK3RoaXMucGFyc2VyLnJ1bGVOYW1lc1t0aGlzLnBhcnNlci5fY3R4LnJ1bGVJbmRleF0pfX0se2tleTpcImV4aXRFdmVyeVJ1bGVcIix2YWx1ZTpmdW5jdGlvbih0KXtjb25zb2xlLmxvZyhcImV4aXQgICAgXCIrdGhpcy5wYXJzZXIucnVsZU5hbWVzW3QucnVsZUluZGV4XStcIiwgTFQoMSk9XCIrdGhpcy5wYXJzZXIuX2lucHV0LkxUKDEpLnRleHQpfX1dKSYmQWEoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fSh5Yyk7ZnVuY3Rpb24gRGEodCl7cmV0dXJuIERhPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LERhKHQpfWZ1bmN0aW9uIEZhKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1EYSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1EYShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1EYShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gQmEodCxlKXtyZXR1cm4gQmE9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxCYSh0LGUpfWZ1bmN0aW9uIE1hKHQpe3JldHVybiBNYT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sTWEodCl9dmFyIFVhPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZCYSh0LGUpfShjLHQpO3ZhciBlLG4scixpLHU9KHI9YyxpPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPU1hKHIpO2lmKGkpe3ZhciBuPU1hKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09RGEoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBjKHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyksKGU9dS5jYWxsKHRoaXMpKS5faW5wdXQ9bnVsbCxlLl9lcnJIYW5kbGVyPW5ldyBYYyxlLl9wcmVjZWRlbmNlU3RhY2s9W10sZS5fcHJlY2VkZW5jZVN0YWNrLnB1c2goMCksZS5fY3R4PW51bGwsZS5idWlsZFBhcnNlVHJlZXM9ITAsZS5fdHJhY2VyPW51bGwsZS5fcGFyc2VMaXN0ZW5lcnM9bnVsbCxlLl9zeW50YXhFcnJvcnM9MCxlLnNldElucHV0U3RyZWFtKHQpLGV9cmV0dXJuIGU9YyxuPVt7a2V5OlwicmVzZXRcIix2YWx1ZTpmdW5jdGlvbigpe251bGwhPT10aGlzLl9pbnB1dCYmdGhpcy5faW5wdXQuc2VlaygwKSx0aGlzLl9lcnJIYW5kbGVyLnJlc2V0KHRoaXMpLHRoaXMuX2N0eD1udWxsLHRoaXMuX3N5bnRheEVycm9ycz0wLHRoaXMuc2V0VHJhY2UoITEpLHRoaXMuX3ByZWNlZGVuY2VTdGFjaz1bXSx0aGlzLl9wcmVjZWRlbmNlU3RhY2sucHVzaCgwKSxudWxsIT09dGhpcy5faW50ZXJwJiZ0aGlzLl9pbnRlcnAucmVzZXQoKX19LHtrZXk6XCJtYXRjaFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0Q3VycmVudFRva2VuKCk7cmV0dXJuIGUudHlwZT09PXQ/KHRoaXMuX2VyckhhbmRsZXIucmVwb3J0TWF0Y2godGhpcyksdGhpcy5jb25zdW1lKCkpOihlPXRoaXMuX2VyckhhbmRsZXIucmVjb3ZlcklubGluZSh0aGlzKSx0aGlzLmJ1aWxkUGFyc2VUcmVlcyYmLTE9PT1lLnRva2VuSW5kZXgmJnRoaXMuX2N0eC5hZGRFcnJvck5vZGUoZSkpLGV9fSx7a2V5OlwibWF0Y2hXaWxkY2FyZFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRDdXJyZW50VG9rZW4oKTtyZXR1cm4gdC50eXBlPjA/KHRoaXMuX2VyckhhbmRsZXIucmVwb3J0TWF0Y2godGhpcyksdGhpcy5jb25zdW1lKCkpOih0PXRoaXMuX2VyckhhbmRsZXIucmVjb3ZlcklubGluZSh0aGlzKSx0aGlzLmJ1aWxkUGFyc2VUcmVlcyYmLTE9PT10LnRva2VuSW5kZXgmJnRoaXMuX2N0eC5hZGRFcnJvck5vZGUodCkpLHR9fSx7a2V5OlwiZ2V0UGFyc2VMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wYXJzZUxpc3RlbmVyc3x8W119fSx7a2V5OlwiYWRkUGFyc2VMaXN0ZW5lclwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKG51bGw9PT10KXRocm93XCJsaXN0ZW5lclwiO251bGw9PT10aGlzLl9wYXJzZUxpc3RlbmVycyYmKHRoaXMuX3BhcnNlTGlzdGVuZXJzPVtdKSx0aGlzLl9wYXJzZUxpc3RlbmVycy5wdXNoKHQpfX0se2tleTpcInJlbW92ZVBhcnNlTGlzdGVuZXJcIix2YWx1ZTpmdW5jdGlvbih0KXtpZihudWxsIT09dGhpcy5fcGFyc2VMaXN0ZW5lcnMpe3ZhciBlPXRoaXMuX3BhcnNlTGlzdGVuZXJzLmluZGV4T2YodCk7ZT49MCYmdGhpcy5fcGFyc2VMaXN0ZW5lcnMuc3BsaWNlKGUsMSksMD09PXRoaXMuX3BhcnNlTGlzdGVuZXJzLmxlbmd0aCYmKHRoaXMuX3BhcnNlTGlzdGVuZXJzPW51bGwpfX19LHtrZXk6XCJyZW1vdmVQYXJzZUxpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fcGFyc2VMaXN0ZW5lcnM9bnVsbH19LHtrZXk6XCJ0cmlnZ2VyRW50ZXJSdWxlRXZlbnRcIix2YWx1ZTpmdW5jdGlvbigpe2lmKG51bGwhPT10aGlzLl9wYXJzZUxpc3RlbmVycyl7dmFyIHQ9dGhpcy5fY3R4O3RoaXMuX3BhcnNlTGlzdGVuZXJzLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuZW50ZXJFdmVyeVJ1bGUodCksdC5lbnRlclJ1bGUoZSl9KSl9fX0se2tleTpcInRyaWdnZXJFeGl0UnVsZUV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZihudWxsIT09dGhpcy5fcGFyc2VMaXN0ZW5lcnMpe3ZhciB0PXRoaXMuX2N0eDt0aGlzLl9wYXJzZUxpc3RlbmVycy5zbGljZSgwKS5yZXZlcnNlKCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5leGl0UnVsZShlKSxlLmV4aXRFdmVyeVJ1bGUodCl9KSl9fX0se2tleTpcImdldFRva2VuRmFjdG9yeVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lucHV0LnRva2VuU291cmNlLl9mYWN0b3J5fX0se2tleTpcInNldFRva2VuRmFjdG9yeVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuX2lucHV0LnRva2VuU291cmNlLl9mYWN0b3J5PXR9fSx7a2V5OlwiZ2V0QVROV2l0aEJ5cGFzc0FsdHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0U2VyaWFsaXplZEFUTigpO2lmKG51bGw9PT10KXRocm93XCJUaGUgY3VycmVudCBwYXJzZXIgZG9lcyBub3Qgc3VwcG9ydCBhbiBBVE4gd2l0aCBieXBhc3MgYWx0ZXJuYXRpdmVzLlwiO3ZhciBlPXRoaXMuYnlwYXNzQWx0c0F0bkNhY2hlW3RdO2lmKG51bGw9PT1lKXt2YXIgbj1uZXcgJHI7bi5nZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9ucz0hMCxlPW5ldyBIbyhuKS5kZXNlcmlhbGl6ZSh0KSx0aGlzLmJ5cGFzc0FsdHNBdG5DYWNoZVt0XT1lfXJldHVybiBlfX0se2tleTpcImdldElucHV0U3RyZWFtXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRUb2tlblN0cmVhbSgpfX0se2tleTpcInNldElucHV0U3RyZWFtXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5zZXRUb2tlblN0cmVhbSh0KX19LHtrZXk6XCJnZXRUb2tlblN0cmVhbVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lucHV0fX0se2tleTpcInNldFRva2VuU3RyZWFtXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5faW5wdXQ9bnVsbCx0aGlzLnJlc2V0KCksdGhpcy5faW5wdXQ9dH19LHtrZXk6XCJzeW50YXhFcnJvcnNDb3VudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zeW50YXhFcnJvcnN9fSx7a2V5OlwiZ2V0Q3VycmVudFRva2VuXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW5wdXQuTFQoMSl9fSx7a2V5Olwibm90aWZ5RXJyb3JMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7bj1ufHxudWxsLG51bGw9PT0oZT1lfHxudWxsKSYmKGU9dGhpcy5nZXRDdXJyZW50VG9rZW4oKSksdGhpcy5fc3ludGF4RXJyb3JzKz0xO3ZhciByPWUubGluZSxvPWUuY29sdW1uO3RoaXMuZ2V0RXJyb3JMaXN0ZW5lckRpc3BhdGNoKCkuc3ludGF4RXJyb3IodGhpcyxlLHIsbyx0LG4pfX0se2tleTpcImNvbnN1bWVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0Q3VycmVudFRva2VuKCk7dC50eXBlIT09by5FT0YmJnRoaXMuZ2V0SW5wdXRTdHJlYW0oKS5jb25zdW1lKCk7dmFyIGUsbj1udWxsIT09dGhpcy5fcGFyc2VMaXN0ZW5lcnMmJnRoaXMuX3BhcnNlTGlzdGVuZXJzLmxlbmd0aD4wO3JldHVybih0aGlzLmJ1aWxkUGFyc2VUcmVlc3x8bikmJigoZT10aGlzLl9lcnJIYW5kbGVyLmluRXJyb3JSZWNvdmVyeU1vZGUodGhpcyk/dGhpcy5fY3R4LmFkZEVycm9yTm9kZSh0KTp0aGlzLl9jdHguYWRkVG9rZW5Ob2RlKHQpKS5pbnZva2luZ1N0YXRlPXRoaXMuc3RhdGUsbiYmdGhpcy5fcGFyc2VMaXN0ZW5lcnMuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZSBpbnN0YW5jZW9mIFd0fHx2b2lkIDAhPT1lLmlzRXJyb3JOb2RlJiZlLmlzRXJyb3JOb2RlKCk/dC52aXNpdEVycm9yTm9kZShlKTplIGluc3RhbmNlb2YgSHQmJnQudmlzaXRUZXJtaW5hbChlKX0pKSksdH19LHtrZXk6XCJhZGRDb250ZXh0VG9QYXJzZVRyZWVcIix2YWx1ZTpmdW5jdGlvbigpe251bGwhPT10aGlzLl9jdHgucGFyZW50Q3R4JiZ0aGlzLl9jdHgucGFyZW50Q3R4LmFkZENoaWxkKHRoaXMuX2N0eCl9fSx7a2V5OlwiZW50ZXJSdWxlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3RoaXMuc3RhdGU9ZSx0aGlzLl9jdHg9dCx0aGlzLl9jdHguc3RhcnQ9dGhpcy5faW5wdXQuTFQoMSksdGhpcy5idWlsZFBhcnNlVHJlZXMmJnRoaXMuYWRkQ29udGV4dFRvUGFyc2VUcmVlKCksdGhpcy50cmlnZ2VyRW50ZXJSdWxlRXZlbnQoKX19LHtrZXk6XCJleGl0UnVsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fY3R4LnN0b3A9dGhpcy5faW5wdXQuTFQoLTEpLHRoaXMudHJpZ2dlckV4aXRSdWxlRXZlbnQoKSx0aGlzLnN0YXRlPXRoaXMuX2N0eC5pbnZva2luZ1N0YXRlLHRoaXMuX2N0eD10aGlzLl9jdHgucGFyZW50Q3R4fX0se2tleTpcImVudGVyT3V0ZXJBbHRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3Quc2V0QWx0TnVtYmVyKGUpLHRoaXMuYnVpbGRQYXJzZVRyZWVzJiZ0aGlzLl9jdHghPT10JiZudWxsIT09dGhpcy5fY3R4LnBhcmVudEN0eCYmKHRoaXMuX2N0eC5wYXJlbnRDdHgucmVtb3ZlTGFzdENoaWxkKCksdGhpcy5fY3R4LnBhcmVudEN0eC5hZGRDaGlsZCh0KSksdGhpcy5fY3R4PXR9fSx7a2V5OlwiZ2V0UHJlY2VkZW5jZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLl9wcmVjZWRlbmNlU3RhY2subGVuZ3RoPy0xOnRoaXMuX3ByZWNlZGVuY2VTdGFja1t0aGlzLl9wcmVjZWRlbmNlU3RhY2subGVuZ3RoLTFdfX0se2tleTpcImVudGVyUmVjdXJzaW9uUnVsZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuc3RhdGU9ZSx0aGlzLl9wcmVjZWRlbmNlU3RhY2sucHVzaChyKSx0aGlzLl9jdHg9dCx0aGlzLl9jdHguc3RhcnQ9dGhpcy5faW5wdXQuTFQoMSksdGhpcy50cmlnZ2VyRW50ZXJSdWxlRXZlbnQoKX19LHtrZXk6XCJwdXNoTmV3UmVjdXJzaW9uQ29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLl9jdHg7ci5wYXJlbnRDdHg9dCxyLmludm9raW5nU3RhdGU9ZSxyLnN0b3A9dGhpcy5faW5wdXQuTFQoLTEpLHRoaXMuX2N0eD10LHRoaXMuX2N0eC5zdGFydD1yLnN0YXJ0LHRoaXMuYnVpbGRQYXJzZVRyZWVzJiZ0aGlzLl9jdHguYWRkQ2hpbGQociksdGhpcy50cmlnZ2VyRW50ZXJSdWxlRXZlbnQoKX19LHtrZXk6XCJ1bnJvbGxSZWN1cnNpb25Db250ZXh0c1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuX3ByZWNlZGVuY2VTdGFjay5wb3AoKSx0aGlzLl9jdHguc3RvcD10aGlzLl9pbnB1dC5MVCgtMSk7dmFyIGU9dGhpcy5fY3R4LG49dGhpcy5nZXRQYXJzZUxpc3RlbmVycygpO2lmKG51bGwhPT1uJiZuLmxlbmd0aD4wKWZvcig7dGhpcy5fY3R4IT09dDspdGhpcy50cmlnZ2VyRXhpdFJ1bGVFdmVudCgpLHRoaXMuX2N0eD10aGlzLl9jdHgucGFyZW50Q3R4O2Vsc2UgdGhpcy5fY3R4PXQ7ZS5wYXJlbnRDdHg9dCx0aGlzLmJ1aWxkUGFyc2VUcmVlcyYmbnVsbCE9PXQmJnQuYWRkQ2hpbGQoZSl9fSx7a2V5OlwiZ2V0SW52b2tpbmdDb250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuX2N0eDtudWxsIT09ZTspe2lmKGUucnVsZUluZGV4PT09dClyZXR1cm4gZTtlPWUucGFyZW50Q3R4fXJldHVybiBudWxsfX0se2tleTpcInByZWNwcmVkXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT49dGhpcy5fcHJlY2VkZW5jZVN0YWNrW3RoaXMuX3ByZWNlZGVuY2VTdGFjay5sZW5ndGgtMV19fSx7a2V5OlwiaW5Db250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuITF9fSx7a2V5OlwiaXNFeHBlY3RlZFRva2VuXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5faW50ZXJwLmF0bixuPXRoaXMuX2N0eCxyPWUuc3RhdGVzW3RoaXMuc3RhdGVdLGk9ZS5uZXh0VG9rZW5zKHIpO2lmKGkuY29udGFpbnModCkpcmV0dXJuITA7aWYoIWkuY29udGFpbnMoby5FUFNJTE9OKSlyZXR1cm4hMTtmb3IoO251bGwhPT1uJiZuLmludm9raW5nU3RhdGU+PTAmJmkuY29udGFpbnMoby5FUFNJTE9OKTspe3ZhciB1PWUuc3RhdGVzW24uaW52b2tpbmdTdGF0ZV0udHJhbnNpdGlvbnNbMF07aWYoKGk9ZS5uZXh0VG9rZW5zKHUuZm9sbG93U3RhdGUpKS5jb250YWlucyh0KSlyZXR1cm4hMDtuPW4ucGFyZW50Q3R4fXJldHVybiEoIWkuY29udGFpbnMoby5FUFNJTE9OKXx8dCE9PW8uRU9GKX19LHtrZXk6XCJnZXRFeHBlY3RlZFRva2Vuc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ludGVycC5hdG4uZ2V0RXhwZWN0ZWRUb2tlbnModGhpcy5zdGF0ZSx0aGlzLl9jdHgpfX0se2tleTpcImdldEV4cGVjdGVkVG9rZW5zV2l0aGluQ3VycmVudFJ1bGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2ludGVycC5hdG4sZT10LnN0YXRlc1t0aGlzLnN0YXRlXTtyZXR1cm4gdC5uZXh0VG9rZW5zKGUpfX0se2tleTpcImdldFJ1bGVJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0UnVsZUluZGV4TWFwKClbdF07cmV0dXJuIG51bGwhPT1lP2U6LTF9fSx7a2V5OlwiZ2V0UnVsZUludm9jYXRpb25TdGFja1wiLHZhbHVlOmZ1bmN0aW9uKHQpe251bGw9PT0odD10fHxudWxsKSYmKHQ9dGhpcy5fY3R4KTtmb3IodmFyIGU9W107bnVsbCE9PXQ7KXt2YXIgbj10LnJ1bGVJbmRleDtuPDA/ZS5wdXNoKFwibi9hXCIpOmUucHVzaCh0aGlzLnJ1bGVOYW1lc1tuXSksdD10LnBhcmVudEN0eH1yZXR1cm4gZX19LHtrZXk6XCJnZXRERkFTdHJpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW50ZXJwLmRlY2lzaW9uVG9ERkEudG9TdHJpbmcoKX19LHtrZXk6XCJkdW1wREZBXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9ITEsZT0wO2U8dGhpcy5faW50ZXJwLmRlY2lzaW9uVG9ERkEubGVuZ3RoO2UrKyl7dmFyIG49dGhpcy5faW50ZXJwLmRlY2lzaW9uVG9ERkFbZV07bi5zdGF0ZXMubGVuZ3RoPjAmJih0JiZjb25zb2xlLmxvZygpLHRoaXMucHJpbnRlci5wcmludGxuKFwiRGVjaXNpb24gXCIrbi5kZWNpc2lvbitcIjpcIiksdGhpcy5wcmludGVyLnByaW50KG4udG9TdHJpbmcodGhpcy5saXRlcmFsTmFtZXMsdGhpcy5zeW1ib2xpY05hbWVzKSksdD0hMCl9fX0se2tleTpcImdldFNvdXJjZU5hbWVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbnB1dC5zb3VyY2VOYW1lfX0se2tleTpcInNldFRyYWNlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dD8obnVsbCE9PXRoaXMuX3RyYWNlciYmdGhpcy5yZW1vdmVQYXJzZUxpc3RlbmVyKHRoaXMuX3RyYWNlciksdGhpcy5fdHJhY2VyPW5ldyBMYSh0aGlzKSx0aGlzLmFkZFBhcnNlTGlzdGVuZXIodGhpcy5fdHJhY2VyKSk6KHRoaXMucmVtb3ZlUGFyc2VMaXN0ZW5lcih0aGlzLl90cmFjZXIpLHRoaXMuX3RyYWNlcj1udWxsKX19XSxuJiZGYShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGN9KGFpKTtmdW5jdGlvbiBWYSh0KXtyZXR1cm4gVmE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sVmEodCl9ZnVuY3Rpb24gemEodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PVZhKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PVZhKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PVZhKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBxYSh0LGUpe3JldHVybiBxYT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LHFhKHQsZSl9ZnVuY3Rpb24gSGEodCl7cmV0dXJuIEhhPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxIYSh0KX1VYS5ieXBhc3NBbHRzQXRuQ2FjaGU9e307dmFyIEthPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZxYSh0LGUpfShjLHQpO3ZhciBlLG4scixpLHU9KHI9YyxpPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPUhhKHIpO2lmKGkpe3ZhciBuPUhhKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09VmEoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiBjKHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsYyksKGU9dS5jYWxsKHRoaXMpKS5wYXJlbnRDdHg9bnVsbCxlLnN5bWJvbD10LGV9cmV0dXJuIGU9Yywobj1be2tleTpcImdldENoaWxkXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIG51bGx9fSx7a2V5OlwiZ2V0U3ltYm9sXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zeW1ib2x9fSx7a2V5OlwiZ2V0UGFyZW50XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnRDdHh9fSx7a2V5OlwiZ2V0UGF5bG9hZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3ltYm9sfX0se2tleTpcImdldFNvdXJjZUludGVydmFsXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5zeW1ib2wpcmV0dXJuIEIuSU5WQUxJRF9JTlRFUlZBTDt2YXIgdD10aGlzLnN5bWJvbC50b2tlbkluZGV4O3JldHVybiBuZXcgQih0LHQpfX0se2tleTpcImdldENoaWxkQ291bnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiAwfX0se2tleTpcImFjY2VwdFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0LnZpc2l0VGVybWluYWwodGhpcyl9fSx7a2V5OlwiZ2V0VGV4dFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3ltYm9sLnRleHR9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN5bWJvbC50eXBlPT09by5FT0Y/XCI8RU9GPlwiOnRoaXMuc3ltYm9sLnRleHR9fV0pJiZ6YShlLnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGN9KEh0KTtmdW5jdGlvbiBZYSh0KXtyZXR1cm4gWWE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sWWEodCl9ZnVuY3Rpb24gR2EodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsKHZvaWQgMCxvPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PVlhKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PVlhKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfShyLmtleSksXCJzeW1ib2xcIj09PVlhKG8pP286U3RyaW5nKG8pKSxyKX12YXIgb31mdW5jdGlvbiBXYSh0LGUpe3JldHVybiBXYT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LFdhKHQsZSl9ZnVuY3Rpb24gWGEodCl7cmV0dXJuIFhhPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxYYSh0KX12YXIgJGE9ZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJldhKHQsZSl9KHUsdCk7dmFyIGUsbixyLG8saT0ocj11LG89ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKSxmdW5jdGlvbigpe3ZhciB0LGU9WGEocik7aWYobyl7dmFyIG49WGEodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChlLGFyZ3VtZW50cyxuKX1lbHNlIHQ9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoZSYmKFwib2JqZWN0XCI9PT1ZYShlKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkpcmV0dXJuIGU7aWYodm9pZCAwIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fSh0KX0odGhpcyx0KX0pO2Z1bmN0aW9uIHUodCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSxpLmNhbGwodGhpcyx0KX1yZXR1cm4gZT11LChuPVt7a2V5OlwiaXNFcnJvck5vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiEwfX0se2tleTpcImFjY2VwdFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0LnZpc2l0RXJyb3JOb2RlKHRoaXMpfX1dKSYmR2EoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fShLYSk7ZnVuY3Rpb24gSmEodCl7cmV0dXJuIEphPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LEphKHQpfWZ1bmN0aW9uIFFhKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCh2b2lkIDAsbz1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPT1KYSh0KXx8bnVsbD09PXQpcmV0dXJuIHQ7dmFyIG49dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4uY2FsbCh0LFwic3RyaW5nXCIpO2lmKFwib2JqZWN0XCIhPT1KYShyKSlyZXR1cm4gcjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyh0KX0oci5rZXkpLFwic3ltYm9sXCI9PT1KYShvKT9vOlN0cmluZyhvKSkscil9dmFyIG99ZnVuY3Rpb24gWmEodCxlKXtyZXR1cm4gWmE9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxaYSh0LGUpfWZ1bmN0aW9uIHRsKHQpe3JldHVybiB0bD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sdGwodCl9dmFyIGVsPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxlJiZaYSh0LGUpfSh1LHQpO3ZhciBlLG4scixvLGk9KHI9dSxvPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgdCxlPXRsKHIpO2lmKG8pe3ZhciBuPXRsKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbil9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09SmEoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsdCl9KTtmdW5jdGlvbiB1KHQsZSl7dmFyIG47cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx1KSwobj1pLmNhbGwodGhpcyx0LGUpKS5jaGlsZHJlbj1udWxsLG4uc3RhcnQ9bnVsbCxuLnN0b3A9bnVsbCxuLmV4Y2VwdGlvbj1udWxsLG59cmV0dXJuIGU9dSxuPVt7a2V5OlwiY29weUZyb21cIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnBhcmVudEN0eD10LnBhcmVudEN0eCx0aGlzLmludm9raW5nU3RhdGU9dC5pbnZva2luZ1N0YXRlLHRoaXMuY2hpbGRyZW49bnVsbCx0aGlzLnN0YXJ0PXQuc3RhcnQsdGhpcy5zdG9wPXQuc3RvcCx0LmNoaWxkcmVuJiYodGhpcy5jaGlsZHJlbj1bXSx0LmNoaWxkcmVuLm1hcCgoZnVuY3Rpb24odCl7dCBpbnN0YW5jZW9mICRhJiYodGhpcy5jaGlsZHJlbi5wdXNoKHQpLHQucGFyZW50Q3R4PXRoaXMpfSksdGhpcykpfX0se2tleTpcImVudGVyUnVsZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe319LHtrZXk6XCJleGl0UnVsZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe319LHtrZXk6XCJhZGRDaGlsZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT09dGhpcy5jaGlsZHJlbiYmKHRoaXMuY2hpbGRyZW49W10pLHRoaXMuY2hpbGRyZW4ucHVzaCh0KSx0fX0se2tleTpcInJlbW92ZUxhc3RDaGlsZFwiLHZhbHVlOmZ1bmN0aW9uKCl7bnVsbCE9PXRoaXMuY2hpbGRyZW4mJnRoaXMuY2hpbGRyZW4ucG9wKCl9fSx7a2V5OlwiYWRkVG9rZW5Ob2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEthKHQpO3JldHVybiB0aGlzLmFkZENoaWxkKGUpLGUucGFyZW50Q3R4PXRoaXMsZX19LHtrZXk6XCJhZGRFcnJvck5vZGVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1uZXcgJGEodCk7cmV0dXJuIHRoaXMuYWRkQ2hpbGQoZSksZS5wYXJlbnRDdHg9dGhpcyxlfX0se2tleTpcImdldENoaWxkXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihlPWV8fG51bGwsbnVsbD09PXRoaXMuY2hpbGRyZW58fHQ8MHx8dD49dGhpcy5jaGlsZHJlbi5sZW5ndGgpcmV0dXJuIG51bGw7aWYobnVsbD09PWUpcmV0dXJuIHRoaXMuY2hpbGRyZW5bdF07Zm9yKHZhciBuPTA7bjx0aGlzLmNoaWxkcmVuLmxlbmd0aDtuKyspe3ZhciByPXRoaXMuY2hpbGRyZW5bbl07aWYociBpbnN0YW5jZW9mIGUpe2lmKDA9PT10KXJldHVybiByO3QtPTF9fXJldHVybiBudWxsfX0se2tleTpcImdldFRva2VuXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihudWxsPT09dGhpcy5jaGlsZHJlbnx8ZTwwfHxlPj10aGlzLmNoaWxkcmVuLmxlbmd0aClyZXR1cm4gbnVsbDtmb3IodmFyIG49MDtuPHRoaXMuY2hpbGRyZW4ubGVuZ3RoO24rKyl7dmFyIHI9dGhpcy5jaGlsZHJlbltuXTtpZihyIGluc3RhbmNlb2YgSHQmJnIuc3ltYm9sLnR5cGU9PT10KXtpZigwPT09ZSlyZXR1cm4gcjtlLT0xfX1yZXR1cm4gbnVsbH19LHtrZXk6XCJnZXRUb2tlbnNcIix2YWx1ZTpmdW5jdGlvbih0KXtpZihudWxsPT09dGhpcy5jaGlsZHJlbilyZXR1cm5bXTtmb3IodmFyIGU9W10sbj0wO248dGhpcy5jaGlsZHJlbi5sZW5ndGg7bisrKXt2YXIgcj10aGlzLmNoaWxkcmVuW25dO3IgaW5zdGFuY2VvZiBIdCYmci5zeW1ib2wudHlwZT09PXQmJmUucHVzaChyKX1yZXR1cm4gZX19LHtrZXk6XCJnZXRUeXBlZFJ1bGVDb250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5nZXRDaGlsZChlLHQpfX0se2tleTpcImdldFR5cGVkUnVsZUNvbnRleHRzXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYobnVsbD09PXRoaXMuY2hpbGRyZW4pcmV0dXJuW107Zm9yKHZhciBlPVtdLG49MDtuPHRoaXMuY2hpbGRyZW4ubGVuZ3RoO24rKyl7dmFyIHI9dGhpcy5jaGlsZHJlbltuXTtyIGluc3RhbmNlb2YgdCYmZS5wdXNoKHIpfXJldHVybiBlfX0se2tleTpcImdldENoaWxkQ291bnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5jaGlsZHJlbj8wOnRoaXMuY2hpbGRyZW4ubGVuZ3RofX0se2tleTpcImdldFNvdXJjZUludGVydmFsXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuc3RhcnR8fG51bGw9PT10aGlzLnN0b3A/Qi5JTlZBTElEX0lOVEVSVkFMOm5ldyBCKHRoaXMuc3RhcnQudG9rZW5JbmRleCx0aGlzLnN0b3AudG9rZW5JbmRleCl9fV0sbiYmUWEoZS5wcm90b3R5cGUsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx1fShlZSk7ZnVuY3Rpb24gbmwodCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZSYmcmwodCxlKX1mdW5jdGlvbiBybCh0LGUpe3JldHVybiBybD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LHJsKHQsZSl9ZnVuY3Rpb24gb2wodCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbixyPWlsKHQpO2lmKGUpe3ZhciBvPWlsKHRoaXMpLmNvbnN0cnVjdG9yO249UmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsbyl9ZWxzZSBuPXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbih0LGUpe2lmKGUmJihcIm9iamVjdFwiPT09dWwoZSl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpKXJldHVybiBlO2lmKHZvaWQgMCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCl9KHRoaXMsbil9fWZ1bmN0aW9uIGlsKHQpe3JldHVybiBpbD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0saWwodCl9ZnVuY3Rpb24gdWwodCl7cmV0dXJuIHVsPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LHVsKHQpfWZ1bmN0aW9uIGNsKHQsZSl7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmdFtTeW1ib2wuaXRlcmF0b3JdfHx0W1wiQEBpdGVyYXRvclwiXTtpZighbil7aWYoQXJyYXkuaXNBcnJheSh0KXx8KG49ZnVuY3Rpb24odCxlKXtpZih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gYWwodCxlKTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkuc2xpY2UoOCwtMSk7cmV0dXJuXCJPYmplY3RcIj09PW4mJnQuY29uc3RydWN0b3ImJihuPXQuY29uc3RydWN0b3IubmFtZSksXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uP0FycmF5LmZyb20odCk6XCJBcmd1bWVudHNcIj09PW58fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pP2FsKHQsZSk6dm9pZCAwfX0odCkpfHxlJiZ0JiZcIm51bWJlclwiPT10eXBlb2YgdC5sZW5ndGgpe24mJih0PW4pO3ZhciByPTAsbz1mdW5jdGlvbigpe307cmV0dXJue3M6byxuOmZ1bmN0aW9uKCl7cmV0dXJuIHI+PXQubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTp0W3IrK119fSxlOmZ1bmN0aW9uKHQpe3Rocm93IHR9LGY6b319dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBpLHU9ITAsYz0hMTtyZXR1cm57czpmdW5jdGlvbigpe249bi5jYWxsKHQpfSxuOmZ1bmN0aW9uKCl7dmFyIHQ9bi5uZXh0KCk7cmV0dXJuIHU9dC5kb25lLHR9LGU6ZnVuY3Rpb24odCl7Yz0hMCxpPXR9LGY6ZnVuY3Rpb24oKXt0cnl7dXx8bnVsbD09bi5yZXR1cm58fG4ucmV0dXJuKCl9ZmluYWxseXtpZihjKXRocm93IGl9fX19ZnVuY3Rpb24gYWwodCxlKXsobnVsbD09ZXx8ZT50Lmxlbmd0aCkmJihlPXQubGVuZ3RoKTtmb3IodmFyIG49MCxyPW5ldyBBcnJheShlKTtuPGU7bisrKXJbbl09dFtuXTtyZXR1cm4gcn1mdW5jdGlvbiBsbCh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gc2wodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQscGwoci5rZXkpLHIpfX1mdW5jdGlvbiBmbCh0LGUsbil7cmV0dXJuIGUmJnNsKHQucHJvdG90eXBlLGUpLG4mJnNsKHQsbiksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0fWZ1bmN0aW9uIHBsKHQpe3ZhciBlPWZ1bmN0aW9uKHQsZSl7aWYoXCJvYmplY3RcIiE9PXVsKHQpfHxudWxsPT09dClyZXR1cm4gdDt2YXIgbj10W1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodm9pZCAwIT09bil7dmFyIHI9bi5jYWxsKHQsXCJzdHJpbmdcIik7aWYoXCJvYmplY3RcIiE9PXVsKHIpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfSh0KTtyZXR1cm5cInN5bWJvbFwiPT09dWwoZSk/ZTpTdHJpbmcoZSl9ZWUuRU1QVFk9bmV3IGVsO3ZhciB5bCxobCxibCx2bD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7bGwodGhpcyx0KSx0aGlzLnRva2Vucz1lLHRoaXMucHJvZ3JhbXM9bmV3IE1hcH1yZXR1cm4gZmwodCxbe2tleTpcImdldFRva2VuU3RyZWFtXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b2tlbnN9fSx7a2V5OlwiaW5zZXJ0QWZ0ZXJcIix2YWx1ZTpmdW5jdGlvbihlLG4pe3ZhciByLG89YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnQuREVGQVVMVF9QUk9HUkFNX05BTUU7cj1cIm51bWJlclwiPT10eXBlb2YgZT9lOmUudG9rZW5JbmRleDt2YXIgaT10aGlzLmdldFByb2dyYW0obyksdT1uZXcgZ2wodGhpcy50b2tlbnMscixpLmxlbmd0aCxuKTtpLnB1c2godSl9fSx7a2V5OlwiaW5zZXJ0QmVmb3JlXCIsdmFsdWU6ZnVuY3Rpb24oZSxuKXt2YXIgcixvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp0LkRFRkFVTFRfUFJPR1JBTV9OQU1FO3I9XCJudW1iZXJcIj09dHlwZW9mIGU/ZTplLnRva2VuSW5kZXg7dmFyIGk9dGhpcy5nZXRQcm9ncmFtKG8pLHU9bmV3IG1sKHRoaXMudG9rZW5zLHIsaS5sZW5ndGgsbik7aS5wdXNoKHUpfX0se2tleTpcInJlcGxhY2VTaW5nbGVcIix2YWx1ZTpmdW5jdGlvbihlLG4pe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp0LkRFRkFVTFRfUFJPR1JBTV9OQU1FO3RoaXMucmVwbGFjZShlLGUsbixyKX19LHtrZXk6XCJyZXBsYWNlXCIsdmFsdWU6ZnVuY3Rpb24oZSxuLHIpe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTp0LkRFRkFVTFRfUFJPR1JBTV9OQU1FO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlJiYoZT1lLnRva2VuSW5kZXgpLFwibnVtYmVyXCIhPXR5cGVvZiBuJiYobj1uLnRva2VuSW5kZXgpLGU+bnx8ZTwwfHxuPDB8fG4+PXRoaXMudG9rZW5zLnNpemUpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJyZXBsYWNlOiByYW5nZSBpbnZhbGlkOiBcIi5jb25jYXQoZSxcIi4uXCIpLmNvbmNhdChuLFwiKHNpemU9XCIpLmNvbmNhdCh0aGlzLnRva2Vucy5zaXplLFwiKVwiKSk7dmFyIGk9dGhpcy5nZXRQcm9ncmFtKG8pLHU9bmV3IFNsKHRoaXMudG9rZW5zLGUsbixpLmxlbmd0aCxyKTtpLnB1c2godSl9fSx7a2V5OlwiZGVsZXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSxuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06dC5ERUZBVUxUX1BST0dSQU1fTkFNRTt2b2lkIDA9PT1uJiYobj1lKSx0aGlzLnJlcGxhY2UoZSxuLG51bGwscil9fSx7a2V5OlwiZ2V0UHJvZ3JhbVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucHJvZ3JhbXMuZ2V0KHQpO3JldHVybiBudWxsPT1lJiYoZT10aGlzLmluaXRpYWxpemVQcm9ncmFtKHQpKSxlfX0se2tleTpcImluaXRpYWxpemVQcm9ncmFtXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9W107cmV0dXJuIHRoaXMucHJvZ3JhbXMuc2V0KHQsZSksZX19LHtrZXk6XCJnZXRUZXh0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG4scj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dC5ERUZBVUxUX1BST0dSQU1fTkFNRTtuPWUgaW5zdGFuY2VvZiBCP2U6bmV3IEIoMCx0aGlzLnRva2Vucy5zaXplLTEpLFwic3RyaW5nXCI9PXR5cGVvZiBlJiYocj1lKTt2YXIgaT10aGlzLnByb2dyYW1zLmdldChyKSx1PW4uc3RhcnQsYz1uLnN0b3A7aWYoYz50aGlzLnRva2Vucy5zaXplLTEmJihjPXRoaXMudG9rZW5zLnNpemUtMSksdTwwJiYodT0wKSxudWxsPT1pfHwwPT09aS5sZW5ndGgpcmV0dXJuIHRoaXMudG9rZW5zLmdldFRleHQobmV3IEIodSxjKSk7Zm9yKHZhciBhPVtdLGw9dGhpcy5yZWR1Y2VUb1NpbmdsZU9wZXJhdGlvblBlckluZGV4KGkpLHM9dTtzPD1jJiZzPHRoaXMudG9rZW5zLnNpemU7KXt2YXIgZj1sLmdldChzKTtsLmRlbGV0ZShzKTt2YXIgcD10aGlzLnRva2Vucy5nZXQocyk7bnVsbD09Zj8ocC50eXBlIT09by5FT0YmJmEucHVzaChTdHJpbmcocC50ZXh0KSkscysrKTpzPWYuZXhlY3V0ZShhKX1pZihjPT09dGhpcy50b2tlbnMuc2l6ZS0xKXt2YXIgeSxoPWNsKGwudmFsdWVzKCkpO3RyeXtmb3IoaC5zKCk7ISh5PWgubigpKS5kb25lOyl7dmFyIGI9eS52YWx1ZTtiLmluZGV4Pj10aGlzLnRva2Vucy5zaXplLTEmJmEucHVzaChiLnRleHQudG9TdHJpbmcoKSl9fWNhdGNoKHQpe2guZSh0KX1maW5hbGx5e2guZigpfX1yZXR1cm4gYS5qb2luKFwiXCIpfX0se2tleTpcInJlZHVjZVRvU2luZ2xlT3BlcmF0aW9uUGVySW5kZXhcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXTtpZihudWxsIT1uJiZuIGluc3RhbmNlb2YgU2wpe3ZhciByLG89bixpPWNsKHRoaXMuZ2V0S2luZE9mT3BzKHQsbWwsZSkpO3RyeXtmb3IoaS5zKCk7IShyPWkubigpKS5kb25lOyl7dmFyIHU9ci52YWx1ZTt1LmluZGV4PT09by5pbmRleD8odFt1Lmluc3RydWN0aW9uSW5kZXhdPXZvaWQgMCxvLnRleHQ9dS50ZXh0LnRvU3RyaW5nKCkrKG51bGwhPW8udGV4dD9vLnRleHQudG9TdHJpbmcoKTpcIlwiKSk6dS5pbmRleD5vLmluZGV4JiZ1LmluZGV4PD1vLmxhc3RJbmRleCYmKHRbdS5pbnN0cnVjdGlvbkluZGV4XT12b2lkIDApfX1jYXRjaCh0KXtpLmUodCl9ZmluYWxseXtpLmYoKX12YXIgYyxhPWNsKHRoaXMuZ2V0S2luZE9mT3BzKHQsU2wsZSkpO3RyeXtmb3IoYS5zKCk7IShjPWEubigpKS5kb25lOyl7dmFyIGw9Yy52YWx1ZTtpZihsLmluZGV4Pj1vLmluZGV4JiZsLmxhc3RJbmRleDw9by5sYXN0SW5kZXgpdFtsLmluc3RydWN0aW9uSW5kZXhdPXZvaWQgMDtlbHNle3ZhciBzPWwubGFzdEluZGV4PG8uaW5kZXh8fGwuaW5kZXg+by5sYXN0SW5kZXg7aWYobnVsbCE9bC50ZXh0fHxudWxsIT1vLnRleHR8fHMpe2lmKCFzKXRocm93IG5ldyBFcnJvcihcInJlcGxhY2Ugb3AgYm91bmRhcmllcyBvZiBcIi5jb25jYXQobyxcIiBvdmVybGFwIHdpdGggcHJldmlvdXMgXCIpLmNvbmNhdChsKSl9ZWxzZSB0W2wuaW5zdHJ1Y3Rpb25JbmRleF09dm9pZCAwLG8uaW5kZXg9TWF0aC5taW4obC5pbmRleCxvLmluZGV4KSxvLmxhc3RJbmRleD1NYXRoLm1heChsLmxhc3RJbmRleCxvLmxhc3RJbmRleCl9fX1jYXRjaCh0KXthLmUodCl9ZmluYWxseXthLmYoKX19fWZvcih2YXIgZj0wO2Y8dC5sZW5ndGg7ZisrKXt2YXIgcD10W2ZdO2lmKG51bGwhPXAmJnAgaW5zdGFuY2VvZiBtbCl7dmFyIHksaD1wLGI9Y2wodGhpcy5nZXRLaW5kT2ZPcHModCxtbCxmKSk7dHJ5e2ZvcihiLnMoKTshKHk9Yi5uKCkpLmRvbmU7KXt2YXIgdj15LnZhbHVlO3YuaW5kZXg9PT1oLmluZGV4JiYodiBpbnN0YW5jZW9mIGdsPyhoLnRleHQ9dGhpcy5jYXRPcFRleHQodi50ZXh0LGgudGV4dCksdFt2Lmluc3RydWN0aW9uSW5kZXhdPXZvaWQgMCk6diBpbnN0YW5jZW9mIG1sJiYoaC50ZXh0PXRoaXMuY2F0T3BUZXh0KGgudGV4dCx2LnRleHQpLHRbdi5pbnN0cnVjdGlvbkluZGV4XT12b2lkIDApKX19Y2F0Y2godCl7Yi5lKHQpfWZpbmFsbHl7Yi5mKCl9dmFyIGQsbT1jbCh0aGlzLmdldEtpbmRPZk9wcyh0LFNsLGYpKTt0cnl7Zm9yKG0ucygpOyEoZD1tLm4oKSkuZG9uZTspe3ZhciBnPWQudmFsdWU7aWYoaC5pbmRleCE9PWcuaW5kZXgpe2lmKGguaW5kZXg+PWcuaW5kZXgmJmguaW5kZXg8PWcubGFzdEluZGV4KXRocm93IG5ldyBFcnJvcihcImluc2VydCBvcCBcIi5jb25jYXQoaCxcIiB3aXRoaW4gYm91bmRhcmllcyBvZiBwcmV2aW91cyBcIikuY29uY2F0KGcpKX1lbHNlIGcudGV4dD10aGlzLmNhdE9wVGV4dChoLnRleHQsZy50ZXh0KSx0W2ZdPXZvaWQgMH19Y2F0Y2godCl7bS5lKHQpfWZpbmFsbHl7bS5mKCl9fX12YXIgUyxPPW5ldyBNYXAsdz1jbCh0KTt0cnl7Zm9yKHcucygpOyEoUz13Lm4oKSkuZG9uZTspe3ZhciBfPVMudmFsdWU7aWYobnVsbCE9Xyl7aWYobnVsbCE9Ty5nZXQoXy5pbmRleCkpdGhyb3cgbmV3IEVycm9yKFwic2hvdWxkIG9ubHkgYmUgb25lIG9wIHBlciBpbmRleFwiKTtPLnNldChfLmluZGV4LF8pfX19Y2F0Y2godCl7dy5lKHQpfWZpbmFsbHl7dy5mKCl9cmV0dXJuIE99fSx7a2V5OlwiY2F0T3BUZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1cIlwiLHI9XCJcIjtyZXR1cm4gbnVsbCE9dCYmKG49dC50b1N0cmluZygpKSxudWxsIT1lJiYocj1lLnRvU3RyaW5nKCkpLG4rcn19LHtrZXk6XCJnZXRLaW5kT2ZPcHNcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHQuc2xpY2UoMCxuKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0IGluc3RhbmNlb2YgZX0pKX19XSksdH0oKTt5bD12bCxibD1cImRlZmF1bHRcIiwoaGw9cGwoaGw9XCJERUZBVUxUX1BST0dSQU1fTkFNRVwiKSlpbiB5bD9PYmplY3QuZGVmaW5lUHJvcGVydHkoeWwsaGwse3ZhbHVlOmJsLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6eWxbaGxdPWJsO3ZhciBkbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuLHIsbyl7bGwodGhpcyx0KSx0aGlzLnRva2Vucz1lLHRoaXMuaW5zdHJ1Y3Rpb25JbmRleD1yLHRoaXMuaW5kZXg9bix0aGlzLnRleHQ9dm9pZCAwPT09bz9cIlwiOm99cmV0dXJuIGZsKHQsW3trZXk6XCJ0b1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jb25zdHJ1Y3Rvci5uYW1lLGU9dC5pbmRleE9mKFwiJFwiKTtyZXR1cm5cIjxcIisodD10LnN1YnN0cmluZyhlKzEsdC5sZW5ndGgpKStcIkBcIit0aGlzLnRva2Vucy5nZXQodGhpcy5pbmRleCkrJzpcIicrdGhpcy50ZXh0KydcIj4nfX1dKSx0fSgpLG1sPWZ1bmN0aW9uKHQpe25sKG4sdCk7dmFyIGU9b2wobik7ZnVuY3Rpb24gbih0LHIsbyxpKXtyZXR1cm4gbGwodGhpcyxuKSxlLmNhbGwodGhpcyx0LHIsbyxpKX1yZXR1cm4gZmwobixbe2tleTpcImV4ZWN1dGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50ZXh0JiZ0LnB1c2godGhpcy50ZXh0LnRvU3RyaW5nKCkpLHRoaXMudG9rZW5zLmdldCh0aGlzLmluZGV4KS50eXBlIT09by5FT0YmJnQucHVzaChTdHJpbmcodGhpcy50b2tlbnMuZ2V0KHRoaXMuaW5kZXgpLnRleHQpKSx0aGlzLmluZGV4KzF9fV0pLG59KGRsKSxnbD1mdW5jdGlvbih0KXtubChuLHQpO3ZhciBlPW9sKG4pO2Z1bmN0aW9uIG4odCxyLG8saSl7cmV0dXJuIGxsKHRoaXMsbiksZS5jYWxsKHRoaXMsdCxyKzEsbyxpKX1yZXR1cm4gZmwobil9KG1sKSxTbD1mdW5jdGlvbih0KXtubChuLHQpO3ZhciBlPW9sKG4pO2Z1bmN0aW9uIG4odCxyLG8saSx1KXt2YXIgYztyZXR1cm4gbGwodGhpcyxuKSwoYz1lLmNhbGwodGhpcyx0LHIsaSx1KSkubGFzdEluZGV4PW8sY31yZXR1cm4gZmwobixbe2tleTpcImV4ZWN1dGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50ZXh0JiZ0LnB1c2godGhpcy50ZXh0LnRvU3RyaW5nKCkpLHRoaXMubGFzdEluZGV4KzF9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBudWxsPT10aGlzLnRleHQ/XCI8RGVsZXRlT3BAXCIrdGhpcy50b2tlbnMuZ2V0KHRoaXMuaW5kZXgpK1wiLi5cIit0aGlzLnRva2Vucy5nZXQodGhpcy5sYXN0SW5kZXgpK1wiPlwiOlwiPFJlcGxhY2VPcEBcIit0aGlzLnRva2Vucy5nZXQodGhpcy5pbmRleCkrXCIuLlwiK3RoaXMudG9rZW5zLmdldCh0aGlzLmxhc3RJbmRleCkrJzpcIicrdGhpcy50ZXh0KydcIj4nfX1dKSxufShkbCk7Y29uc3QgT2w9e2F0bjokdSxkZmE6YWMsY29udGV4dDpsYyxtaXNjOnNjLHRyZWU6U2MsZXJyb3I6ZWEsVG9rZW46byxDb21tb25Ub2tlbjp5aSxDaGFyU3RyZWFtczp2YSxDaGFyU3RyZWFtOmFhLElucHV0U3RyZWFtOmFhLENvbW1vblRva2VuU3RyZWFtOlJhLExleGVyOlVpLFBhcnNlcjpVYSxQYXJzZXJSdWxlQ29udGV4dDplbCxJbnRlcnZhbDpCLEludGVydmFsU2V0OlYsTEwxQW5hbHl6ZXI6SWUsVXRpbHM6ZGEsVG9rZW5TdHJlYW1SZXdyaXRlcjp2bH19KSgpO3ZhciBvPWV4cG9ydHM7Zm9yKHZhciBpIGluIHIpb1tpXT1yW2ldO3IuX19lc01vZHVsZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW50bHI0LndlYi5janMubWFwIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgTG9hZFByaW1hcnlQYWdlXzEgPSByZXF1aXJlKFwiLi9Mb2FkUHJpbWFyeVBhZ2VcIik7XG5jb25zdCBMb2FkRXhwcmVzc2lvblRlc3RQYWdlXzEgPSByZXF1aXJlKFwiLi9Mb2FkRXhwcmVzc2lvblRlc3RQYWdlXCIpO1xuY29uc3QgTG9hZElucHV0UGFyc2VUZXN0UGFnZV8xID0gcmVxdWlyZShcIi4vTG9hZElucHV0UGFyc2VUZXN0UGFnZVwiKTtcbmNvbnN0IExvYWRTb2x2ZXJQYWdlXzEgPSByZXF1aXJlKFwiLi9Mb2FkU29sdmVyUGFnZVwiKTtcbmNvbnN0IExvYWRTaW1wbGlmaWNhdGlvblRlc3RQYWdlXzEgPSByZXF1aXJlKFwiLi9Mb2FkU2ltcGxpZmljYXRpb25UZXN0UGFnZVwiKTtcbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgICogUG9wdWxhdGUgaHRtbCBlbGVtZW50cyBieSB0aGVpciBjbGFzcy5cbiAgICAgICAgICAqL1xuICAgICAgICBjb25zdCBjbGFzc2VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5jbGFzc0xpc3Q7XG4gICAgICAgIGlmIChjbGFzc2VzLmNvbnRhaW5zKCdleHByZXNzaW9uVGVzdFBhZ2UnKSkge1xuICAgICAgICAgICAgKDAsIExvYWRFeHByZXNzaW9uVGVzdFBhZ2VfMS5sb2FkRXhwcmVzc2lvbnNUZXN0UGFnZSkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbGFzc2VzLmNvbnRhaW5zKCdwcmltYXJ5SW50ZWdyYXRvcicpKSB7XG4gICAgICAgICAgICAoMCwgTG9hZFByaW1hcnlQYWdlXzEubG9hZFByaW1hcnlQYWdlKSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzZXMuY29udGFpbnMoJ2lucHV0UGFyc2VUZXN0JykpIHtcbiAgICAgICAgICAgICgwLCBMb2FkSW5wdXRQYXJzZVRlc3RQYWdlXzEubG9hZElucHV0UGFyc2VUZXN0UGFnZSkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbGFzc2VzLmNvbnRhaW5zKCdzb2x2ZV9pbl9zdGVwcycpKSB7XG4gICAgICAgICAgICAoMCwgTG9hZFNvbHZlclBhZ2VfMS5sb2FkU29sdmVyUGFnZSkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbGFzc2VzLmNvbnRhaW5zKCdtYXRoVGVzdHMnKSkge1xuICAgICAgICAgICAgKDAsIExvYWRTaW1wbGlmaWNhdGlvblRlc3RQYWdlXzEubG9hZFNpbXBsaWZpY2F0aW9uVGVzdFBhZ2UpKCk7XG4gICAgICAgIH1cbiAgICB9LCAxMDApO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==