
Explanation of what's going on in this project.


We're solving algebra/calculus problems by creating a graph to represent the problem. We then recursively
expand the graph using a finite set of math inferences from algebra, arithmatic, etc.
The graph is composed of Expression and Arugment nodes.

Expression has implementations for fundamental math operations like Multiplication (Product), additon/subtraction (Sum),
exponentiation (Exponent) and so on. Negativity is prepresented either by having an Integer with a negative value, or
by haveing a 2 term product of the integer -1 and the expression being negated.

To reduce time complexity while expanding the graph, expressions have a few properties that are considered when expanding 
the graph:

    Reducibility - Expressions which are reducible could be rewritten as an Integer. Integers themselves are not reducible.

These properties of expressions can be evaluated at runtime and used to skip over using inferences on certian expressions 
(saving time). Rules of inference do their best not to produce unhealthy expressions. The only rules of inference which 
can operate on unhealthy/ reducible expressions are those which simplify them.

Rules of inference for equality expand the graph by adding the equivalent expression connected by a single inference/ equality 
edge. More advanced rules like algebra create an intermediate Argument node which contains information about the rule used
to derive whatever truth it produced. Argument nodes have multiple evidence edges that draw from already established expressions,
and several claim edges which connect to expressions that the argument justifies. The claimed expression nodes may also be 
connected with a relationship such as equality specified in the Arugment.

In solving a problem, there are the following steps:
    1. Expand the graph
    2. Path finding - The graph will produce a lot of irrelivant information. Depending on the context/goal given by the user,
        the graph will be searched for relevant information and a relevant subgraph found.
    3. Interpreting the graph - The raw resulting graph will contain many mundane and obvious logical statements which are 
        unhelpful to the user and shouldn't be displayed immediately. The raw graph will go through an interpreter which 
        can combine any nodes/edges it finds unnecessary forming an interpreted graph which may be displayed.
    4. The relevant and reduced subgraph can be displayed.

    
The ONLY valid way to represent negativity is by using the integer -1 in a product. Other negative integer values aren't allowed.